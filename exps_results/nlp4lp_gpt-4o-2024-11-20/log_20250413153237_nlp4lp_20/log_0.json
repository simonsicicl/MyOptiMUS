{
    "background": "The company is involved in the buying, storing, and manufacturing process where it deals with different types of items, which can either be vegetables or not. Each item has its own buying price and contributes differently to the manufacturing process concerning its hardness. There is also storage space which incurs a cost, and the company starts with an initial amount of items. The company wishes to maximize profit, considering the constraints related to the refining capacity for vegetable and non-vegetable items, storage size, cost, and item usage.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of goods I",
            "symbol": "I",
            "value": "",
            "shape": [],
            "code": "I = data[\"I\"] # scalar parameter"
        },
        {
            "definition": "Number of months M",
            "symbol": "M",
            "value": "",
            "shape": [],
            "code": "M = data[\"M\"] # scalar parameter"
        },
        {
            "definition": "Buying price of good i in month m",
            "symbol": "BuyPrice",
            "value": "",
            "shape": [
                "I",
                "M"
            ],
            "code": "BuyPrice = np.array(data[\"BuyPrice\"]) # ['I', 'M']"
        },
        {
            "definition": "Selling price",
            "symbol": "SellPrice",
            "value": "",
            "shape": [],
            "code": "SellPrice = data[\"SellPrice\"] # scalar parameter"
        },
        {
            "definition": "Indicator whether good i is a vegetable or not",
            "symbol": "IsVegetable",
            "value": "",
            "shape": [
                "I"
            ],
            "code": "IsVegetable = np.array(data[\"IsVegetable\"]) # ['I']"
        },
        {
            "definition": "Maximum refining capacity for vegetables per month",
            "symbol": "MaxVegRefiningPerMonth",
            "value": "",
            "shape": [],
            "code": "MaxVegRefiningPerMonth = data[\"MaxVegRefiningPerMonth\"] # scalar parameter"
        },
        {
            "definition": "Maximum refining capacity for non-vegetables per month",
            "symbol": "MaxNonVegRefiningPerMonth",
            "value": "",
            "shape": [],
            "code": "MaxNonVegRefiningPerMonth = data[\"MaxNonVegRefiningPerMonth\"] # scalar parameter"
        },
        {
            "definition": "Storage capacity",
            "symbol": "StorageSize",
            "value": "",
            "shape": [],
            "code": "StorageSize = data[\"StorageSize\"] # scalar parameter"
        },
        {
            "definition": "Storage cost per unit per month",
            "symbol": "StorageCost",
            "value": "",
            "shape": [],
            "code": "StorageCost = data[\"StorageCost\"] # scalar parameter"
        },
        {
            "definition": "Maximum hardness of goods that can be processed",
            "symbol": "MaxHardness",
            "value": "",
            "shape": [],
            "code": "MaxHardness = data[\"MaxHardness\"] # scalar parameter"
        },
        {
            "definition": "Minimum hardness of goods that can be processed",
            "symbol": "MinHardness",
            "value": "",
            "shape": [],
            "code": "MinHardness = data[\"MinHardness\"] # scalar parameter"
        },
        {
            "definition": "Hardness of good i",
            "symbol": "Hardness",
            "value": "",
            "shape": [
                "I"
            ],
            "code": "Hardness = np.array(data[\"Hardness\"]) # ['I']"
        },
        {
            "definition": "Initial amount of goods available for processing",
            "symbol": "InitialAmount",
            "value": "",
            "shape": [],
            "code": "InitialAmount = data[\"InitialAmount\"] # scalar parameter"
        },
        {
            "definition": "Minimum usage of goods",
            "symbol": "MinUsage",
            "value": "",
            "shape": [],
            "code": "MinUsage = data[\"MinUsage\"] # scalar parameter"
        },
        {
            "definition": "Dependencies of goods i",
            "symbol": "Dependencies",
            "value": "",
            "shape": [
                "I"
            ],
            "code": "Dependencies = np.array(data[\"Dependencies\"]) # ['I']"
        }
    ],
    "constraints": [
        {
            "description": "The maximum amount of vegetables refined per month cannot exceed \\textup{MaxVegRefiningPerMonth}.",
            "status": "formulated",
            "formulation": "\\sum_{i=1}^{\\textup{I}} \\textup{VegetableRefined}_{i,m} \\leq \\textup{MaxVegRefiningPerMonth}, \\quad \\forall m \\in [1,\\textup{M}]",
            "related_variables": [
                "VegetableRefined"
            ],
            "related_parameters": [
                "MaxVegRefiningPerMonth",
                "I",
                "M"
            ]
        },
        {
            "description": "The total amount of non-vegetable goods refined per month cannot exceed the maximum refining capacity for non-vegetables.",
            "status": "formulated",
            "formulation": "\\sum_{i=1}^{\\textup{I}} \\textup{NonVegetableRefined}_{i,m} \\leq \\textup{MaxNonVegRefiningPerMonth}, \\quad \\forall m \\in [1, \\textup{M}]",
            "related_variables": [
                "NonVegetableRefined"
            ],
            "related_parameters": [
                "MaxNonVegRefiningPerMonth",
                "I",
                "M"
            ]
        },
        {
            "description": "The total storage at any month cannot exceed the defined storage size.",
            "status": "formulated",
            "formulation": "\\sum_{i=1}^{I} \\textup{StorageLevel}_{i, m} \\leq \\textup{StorageSize}, \\quad \\forall m \\in [1, M]",
            "related_variables": [
                "StorageLevel",
                "TotalRefined"
            ],
            "related_parameters": [
                "StorageSize",
                "InitialAmount"
            ]
        },
        {
            "description": "The hardness of each item used in manufacturing must be within the range of MinHardness and MaxHardness",
            "status": "formulated",
            "formulation": "\\textup{MinHardness} \\leq \\textup{Hardness}_{i} \\leq \\textup{MaxHardness}, \\quad \\forall i \\in \\{1, \\dots, \\textup{I}\\}",
            "related_variables": [],
            "related_parameters": [
                "MinHardness",
                "MaxHardness",
                "Hardness",
                "I"
            ]
        },
        {
            "description": "The total amount of each good refined (vegetable and non-vegetable) in each month must satisfy the minimum usage requirement.",
            "status": "formulated",
            "formulation": "\\textup{VegetableRefined}_{i, m} + \\textup{NonVegetableRefined}_{i, m} \\geq \\textup{MinUsage}, \\quad \\forall i \\in \\{1, \\dots, I\\}, \\quad \\forall m \\in \\{1, \\dots, M\\}",
            "related_variables": [
                "VegetableRefined",
                "NonVegetableRefined"
            ],
            "related_parameters": [
                "MinUsage",
                "I",
                "M"
            ]
        },
        {
            "description": "Ensure that dependencies between goods are respected during their refinement process.",
            "status": "formulated",
            "formulation": "\\textup{If} \\ \\textup{Dependencies}[i][j] = 1, \\ \\textup{then} \\ \\sum_{m_1=1}^{m} \\textup{TotalRefined}_{j, m_1} \\geq \\sum_{m_2=1}^{m} \\textup{TotalRefined}_{i, m_2}, \\ \\forall i, j, m.",
            "related_variables": [
                "TotalRefined"
            ],
            "related_parameters": [
                "Dependencies"
            ]
        },
        {
            "description": "Ensure that only items marked as vegetables can have non-zero entries in \\textup{VegetableRefined}.",
            "status": "formulated",
            "formulation": "\\textup{VegetableRefined}_{i,m} \\leq \\textup{IsVegetable}_{i} \\times U, \\quad \\forall i \\in [1,\\textup{I}], \\forall m \\in [1,\\textup{M}]",
            "related_variables": [
                "VegetableRefined"
            ],
            "related_parameters": [
                "IsVegetable",
                "I",
                "M"
            ]
        },
        {
            "description": "Link the refined amount of non-vegetable goods to the IsVegetable parameter, ensuring goods marked as non-vegetable are correctly handled.",
            "status": "formulated",
            "formulation": "\\textup{NonVegetableRefined}_{i,m} = (1 - \\textup{IsVegetable}_i) \\cdot \\textup{TotalRefined}_{i,m}, \\quad \\forall i \\in [1, \\textup{I}], \\forall m \\in [1, \\textup{M}]",
            "related_variables": [
                "NonVegetableRefined",
                "TotalRefined"
            ],
            "related_parameters": [
                "IsVegetable",
                "I",
                "M"
            ]
        },
        {
            "description": "Update the storage level for goods i at the end of each month m.",
            "status": "formulated",
            "formulation": "\\textup{StorageLevel}_{i, m} = \\textup{StorageLevel}_{i, m-1} + \\textup{InitialAmount}_{i} - \\textup{TotalRefined}_{i, m}, \\quad \\forall i \\in [1, I], \\forall m \\in [2, M]",
            "related_variables": [
                "StorageLevel",
                "TotalRefined"
            ],
            "related_parameters": [
                "InitialAmount"
            ]
        },
        {
            "description": "Initialize the storage level for goods i in the first month.",
            "status": "formulated",
            "formulation": "\\textup{StorageLevel}_{i, 1} = \\textup{InitialAmount}_{i} - \\textup{TotalRefined}_{i, 1}, \\quad \\forall i \\in [1, I]",
            "related_variables": [
                "StorageLevel",
                "TotalRefined"
            ],
            "related_parameters": [
                "InitialAmount"
            ]
        },
        {
            "description": "Ensure that the total refinement of good i in a given month equals the sum of its refining as a vegetable and non-vegetable.",
            "status": "formulated",
            "formulation": "\\textup{TotalRefined}_{i, m} = \\textup{VegetableRefined}_{i, m} + \\textup{NonVegetableRefined}_{i, m}, \\quad \\forall i, m.",
            "related_variables": [
                "VegetableRefined",
                "NonVegetableRefined",
                "TotalRefined"
            ],
            "related_parameters": []
        },
        {
            "description": "Define TotalRefined as the sum of VegetableRefined and NonVegetableRefined.",
            "status": "formulated",
            "formulation": "\\textup{TotalRefined}_{i,m} = \\textup{VegetableRefined}_{i,m} + \\textup{NonVegetableRefined}_{i,m}, \\quad \\forall i, m",
            "related_variables": [
                "TotalRefined",
                "VegetableRefined",
                "NonVegetableRefined"
            ],
            "related_parameters": []
        },
        {
            "description": "Limit the total refining of vegetables per month.",
            "status": "formulated",
            "formulation": "\\sum_{i=1}^{I} \\textup{IsVegetable}_{i} \\cdot \\textup{VegetableRefined}_{i,m} \\leq \\textup{MaxVegRefiningPerMonth}, \\quad \\forall m",
            "related_variables": [
                "VegetableRefined"
            ],
            "related_parameters": [
                "IsVegetable",
                "MaxVegRefiningPerMonth"
            ]
        },
        {
            "description": "Limit the total refining of non-vegetables per month.",
            "status": "formulated",
            "formulation": "\\sum_{i=1}^{I} (1 - \\textup{IsVegetable}_{i}) \\cdot \\textup{NonVegetableRefined}_{i,m} \\leq \\textup{MaxNonVegRefiningPerMonth}, \\quad \\forall m",
            "related_variables": [
                "NonVegetableRefined"
            ],
            "related_parameters": [
                "IsVegetable",
                "MaxNonVegRefiningPerMonth"
            ]
        },
        {
            "description": "Ensure storage levels do not exceed capacity.",
            "status": "formulated",
            "formulation": "\\sum_{i=1}^{I} \\textup{StorageLevel}_{i,m} \\leq \\textup{StorageSize}, \\quad \\forall m",
            "related_variables": [
                "StorageLevel"
            ],
            "related_parameters": [
                "StorageSize"
            ]
        },
        {
            "description": "Ensure hardness constraints are met for all refined goods.",
            "status": "formulated",
            "formulation": "\\textup{MinHardness} \\leq \\sum_{i=1}^{I} \\textup{Hardness}_{i} \\cdot \\textup{TotalRefined}_{i,m} \\leq \\textup{MaxHardness}, \\quad \\forall m",
            "related_variables": [
                "TotalRefined"
            ],
            "related_parameters": [
                "MinHardness",
                "MaxHardness",
                "Hardness"
            ]
        }
    ],
    "variables": [
        {
            "definition": "The amount of vegetable good i refined in month m.",
            "symbol": "VegetableRefined",
            "shape": [
                "I",
                "M"
            ],
            "status": "formulated"
        },
        {
            "definition": "The amount of non-vegetable good i refined in month m.",
            "symbol": "NonVegetableRefined",
            "shape": [
                "I",
                "M"
            ],
            "status": "formulated"
        },
        {
            "definition": "The total amount of good i refined in month m.",
            "symbol": "TotalRefined",
            "shape": [
                "I",
                "M"
            ],
            "status": "formulated"
        },
        {
            "definition": "The amount of good i stored at the end of month m.",
            "symbol": "StorageLevel",
            "shape": [
                "I",
                "M"
            ],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Maximize the company's profit from refining, storage, and costs across all items and time periods.",
            "status": "formulated",
            "formulation": "\\sum_{i=1}^{I} \\sum_{m=1}^{M} \\textup{SellPrice} \\cdot \\textup{TotalRefined}_{i,m} \\\\ - \\sum_{i=1}^{I} \\sum_{m=1}^{M} \\textup{BuyPrice}_{i,m} \\cdot \\textup{TotalRefined}_{i,m} \\\\ - \\sum_{i=1}^{I} \\sum_{m=1}^{M} \\textup{StorageCost} \\cdot \\textup{StorageLevel}_{i,m}",
            "related_variables": [
                "TotalRefined",
                "VegetableRefined",
                "NonVegetableRefined",
                "StorageLevel"
            ],
            "related_parameters": [
                "SellPrice",
                "BuyPrice",
                "StorageCost"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413153237_nlp4lp_20/",
    "problem_path": "data/nlp4lp/20/"
}