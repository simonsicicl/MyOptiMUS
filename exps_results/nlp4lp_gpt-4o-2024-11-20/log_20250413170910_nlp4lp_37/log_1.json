{
    "background": "The task involves selecting a mix of different food types to purchase in order to satisfy nutritional demands at the minimum cost. Each food type has a set price, and a nutrition matrix detailing the amounts of various nutrients it contains.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of different types of food",
            "symbol": "K",
            "value": "",
            "shape": [],
            "code": "K = data[\"K\"] # scalar parameter"
        },
        {
            "definition": "Number of nutrients to consider",
            "symbol": "M",
            "value": "",
            "shape": [],
            "code": "M = data[\"M\"] # scalar parameter"
        },
        {
            "definition": "Price of food k",
            "symbol": "Price",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "Price = np.array(data[\"Price\"]) # ['K']"
        },
        {
            "definition": "Demand for nutrient m",
            "symbol": "Demand",
            "value": "",
            "shape": [
                "M"
            ],
            "code": "Demand = np.array(data[\"Demand\"]) # ['M']"
        },
        {
            "definition": "Amount of nutrient m in food k",
            "symbol": "Nutrition",
            "value": "",
            "shape": [
                "K",
                "M"
            ],
            "code": "Nutrition = np.array(data[\"Nutrition\"]) # ['K', 'M']"
        }
    ],
    "constraints": [
        {
            "description": "The total amount of each nutrient from all food types must meet or exceed the specific demand for that nutrient.",
            "status": "coded",
            "formulation": "\\sum_{k=1}^{K} \\textup{Nutrition}_{k,m} \\cdot \\textup{FoodAmount}_{k} \\geq \\textup{Demand}_{m}, \\quad \\forall m \\in \\{1, 2, ..., M\\}",
            "related_variables": [
                "FoodAmount"
            ],
            "related_parameters": [
                "Nutrition",
                "Demand",
                "K",
                "M"
            ],
            "code": "# Add nutrient demand constraints\nfor m in range(M):\n    model.addConstr(\n        gp.quicksum(FoodAmount[k] * Nutrition[k, m] for k in range(K)) >= Demand[m],\n        name=f\"nutrient_demand_{m}\"\n    )"
        },
        {
            "description": "The number of units purchased from each food type is non-negative.",
            "status": "coded",
            "formulation": "\\textup{FoodAmount}_{k} \\geq 0 \\quad \\forall k \\in \\{1, 2, \\ldots, \\textup{K}\\}",
            "related_variables": [
                "FoodAmount"
            ],
            "related_parameters": [
                "K"
            ],
            "code": "# Add non-negativity constraints for FoodAmount variables\nfor k in range(K):\n    model.addConstr(FoodAmount[k] >= 0, name=f\"nonnegativity_FoodAmount_{k}\")"
        },
        {
            "description": "The total amount of each nutrient provided by purchased foods must meet or exceed the demand for the nutrient.",
            "status": "coded",
            "formulation": "\\sum_{k=1}^{K} \\textup{Nutrition}[k, m] \\cdot \\textup{FoodAmount}[k] \\geq \\textup{Demand}[m], \\quad \\forall m \\in \\{1, 2, \\ldots, M\\}",
            "related_variables": [
                "FoodAmount"
            ],
            "related_parameters": [
                "Nutrition",
                "Demand",
                "K",
                "M"
            ],
            "code": "# Add nutrient demand constraints\nfor m in range(M):\n    model.addConstr(gp.quicksum(Nutrition[k, m] * FoodAmount[k] for k in range(K)) >= Demand[m], name=f\"nutrient_demand_{m}\")"
        }
    ],
    "variables": [
        {
            "definition": "The quantity of food type k to purchase.",
            "symbol": "FoodAmount",
            "shape": [
                "K"
            ],
            "status": "coded",
            "code": "FoodAmount = model.addVars(K, vtype=gp.GRB.CONTINUOUS, name=\"FoodAmount\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total price of the foods purchased.",
            "status": "coded",
            "formulation": "\\sum_{k=1}^{K} \\textup{Price}[k] \\cdot \\textup{FoodAmount}[k]",
            "related_variables": [
                "FoodAmount"
            ],
            "related_parameters": [
                "Price",
                "K"
            ],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(Price[k] * FoodAmount[k] for k in range(K)), gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413170910_nlp4lp_37/",
    "problem_path": "data/nlp4lp/37/"
}