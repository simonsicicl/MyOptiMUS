{
    "background": "The problem focuses on finding the optimal powers for a set of lamps such that the illumination provided by the lamps has the minimum absolute error compared to the desired illumination levels. The relationship between lamp powers and their resulting illumination at various points is quantified by given coefficients.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of different illuminations",
            "symbol": "N",
            "value": "",
            "shape": [],
            "code": "N = data[\"N\"] # scalar parameter"
        },
        {
            "definition": "Number of lamp powers",
            "symbol": "M",
            "value": "",
            "shape": [],
            "code": "M = data[\"M\"] # scalar parameter"
        },
        {
            "definition": "Coefficients relating lamp powers to illumination",
            "symbol": "Coefficients",
            "value": "",
            "shape": [
                "N",
                "M"
            ],
            "code": "Coefficients = np.array(data[\"Coefficients\"]) # ['N', 'M']"
        },
        {
            "definition": "Desired level of illuminations",
            "symbol": "DesiredIlluminations",
            "value": "",
            "shape": [
                "N"
            ],
            "code": "DesiredIlluminations = np.array(data[\"DesiredIlluminations\"]) # ['N']"
        }
    ],
    "constraints": [
        {
            "description": "Lamp powers must be non-negative to ensure physically meaningful results.",
            "status": "coded",
            "formulation": "\\textup{LampPowers}_{j} \\geq 0 \\quad \\forall j \\in \\{1, 2, ..., M\\}",
            "related_variables": [
                "LampPowers"
            ],
            "related_parameters": [
                "M"
            ],
            "code": "# Add non-negativity constraints for LampPowers\nfor j in range(M):\n    model.addConstr(LampPowers[j] >= 0, name=f\"LampPowers_nonneg_{j}\")"
        },
        {
            "description": "The absolute error \\textup{AbsError}_{i} is greater than or equal to the difference between the actual and desired illuminations at point i.",
            "status": "coded",
            "formulation": "\\textup{AbsError}_{i} \\geq \\textup{ActualIllumination}_{i} - \\textup{DesiredIlluminations}_{i} \\quad \\forall i = 1, \\dots, \\textup{N}",
            "related_variables": [
                "AbsError",
                "LampPowers"
            ],
            "related_parameters": [
                "DesiredIlluminations",
                "Coefficients"
            ],
            "code": "# Add absolute error constraints\nfor i in range(N):\n    model.addConstr(AbsError[i] >= gp.quicksum(Coefficients[i, j] * LampPowers[j] for j in range(M)) - DesiredIlluminations[i], name=f\"abs_error_constraint_pos_{i}\")\n    model.addConstr(AbsError[i] >= DesiredIlluminations[i] - gp.quicksum(Coefficients[i, j] * LampPowers[j] for j in range(M)), name=f\"abs_error_constraint_neg_{i}\")"
        },
        {
            "description": "The absolute error \\textup{AbsError}_{i} is greater than or equal to the negative difference between the actual and desired illuminations at point i.",
            "status": "coded",
            "formulation": "\\textup{AbsError}_{i} \\geq \\textup{DesiredIlluminations}_{i} - \\textup{ActualIllumination}_{i} \\quad \\forall i = 1, \\dots, \\textup{N}",
            "related_variables": [
                "AbsError",
                "LampPowers"
            ],
            "related_parameters": [
                "DesiredIlluminations",
                "Coefficients"
            ],
            "code": "# Add constraints for absolute error being greater than or equal to the negative difference\nfor i in range(N):\n    model.addConstr(AbsError[i] >= DesiredIlluminations[i] - gp.quicksum(Coefficients[i, j] * LampPowers[j] for j in range(M)), \n                    name=f\"AbsError_constraint_{i}\")"
        },
        {
            "description": "The actual illumination at point i is the linear combination of lamp powers weighted by the coefficients.",
            "status": "coded",
            "formulation": "\\textup{ActualIllumination}_{i} = \\sum_{j=1}^{\\textup{M}} \\textup{Coefficients}_{i,j} \\cdot \\textup{LampPowers}_{j} \\quad \\forall i = 1, \\dots, \\textup{N}",
            "related_variables": [
                "LampPowers"
            ],
            "related_parameters": [
                "Coefficients"
            ],
            "code": "# Add actual illumination constraints\nfor i in range(N):\n    model.addConstr(\n        gp.quicksum(Coefficients[i, j] * LampPowers[j] for j in range(M)) == ActualIllumination[i],\n        name=f\"illumination_constraint_{i}\"\n    )"
        }
    ],
    "variables": [
        {
            "definition": "Power levels of the lamps, representing the decision variable for each lamp's power",
            "symbol": "LampPowers",
            "shape": [
                "M"
            ],
            "status": "coded",
            "code": "LampPowers = model.addVars(M, vtype=gp.GRB.CONTINUOUS, name=\"LampPowers\")"
        },
        {
            "definition": "The absolute error between the actual illumination and the desired illumination at each point i.",
            "symbol": "AbsError",
            "shape": [
                "N"
            ],
            "status": "coded",
            "code": "AbsError = model.addVars(N, vtype=gp.GRB.CONTINUOUS, name=\"AbsError\")"
        },
        {
            "definition": "The actual illumination level at each point i.",
            "symbol": "ActualIllumination",
            "shape": [
                "N"
            ],
            "status": "coded",
            "code": "ActualIllumination = model.addVars(N, vtype=gp.GRB.CONTINUOUS, name=\"ActualIllumination\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the sum of absolute errors between the actual illumination levels and the desired illumination levels.",
            "status": "coded",
            "formulation": "\\min \\quad \\sum_{i=1}^{\\textup{N}} \\textup{AbsError}_{i}",
            "related_variables": [
                "AbsError"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(AbsError[i] for i in range(N)), gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 7.370370370370372,
    "log_path": "logs/log_20250413154553_nlp4lp_10/",
    "problem_path": "data/nlp4lp/10/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nlp4lp/10/data.json\", \"r\") as f:\n    data = json.load(f)\n\nN = data[\"N\"] # scalar parameter\nM = data[\"M\"] # scalar parameter\nCoefficients = np.array(data[\"Coefficients\"]) # ['N', 'M']\nDesiredIlluminations = np.array(data[\"DesiredIlluminations\"]) # ['N']\nLampPowers = model.addVars(M, vtype=gp.GRB.CONTINUOUS, name=\"LampPowers\")\nAbsError = model.addVars(N, vtype=gp.GRB.CONTINUOUS, name=\"AbsError\")\nActualIllumination = model.addVars(N, vtype=gp.GRB.CONTINUOUS, name=\"ActualIllumination\")\n\n# Add non-negativity constraints for LampPowers\nfor j in range(M):\n    model.addConstr(LampPowers[j] >= 0, name=f\"LampPowers_nonneg_{j}\")\n\n# Add absolute error constraints\nfor i in range(N):\n    model.addConstr(AbsError[i] >= gp.quicksum(Coefficients[i, j] * LampPowers[j] for j in range(M)) - DesiredIlluminations[i], name=f\"abs_error_constraint_pos_{i}\")\n    model.addConstr(AbsError[i] >= DesiredIlluminations[i] - gp.quicksum(Coefficients[i, j] * LampPowers[j] for j in range(M)), name=f\"abs_error_constraint_neg_{i}\")\n\n# Add constraints for absolute error being greater than or equal to the negative difference\nfor i in range(N):\n    model.addConstr(AbsError[i] >= DesiredIlluminations[i] - gp.quicksum(Coefficients[i, j] * LampPowers[j] for j in range(M)), \n                    name=f\"AbsError_constraint_{i}\")\n\n# Add actual illumination constraints\nfor i in range(N):\n    model.addConstr(\n        gp.quicksum(Coefficients[i, j] * LampPowers[j] for j in range(M)) == ActualIllumination[i],\n        name=f\"illumination_constraint_{i}\"\n    )\n\n# Set objective\nmodel.setObjective(gp.quicksum(AbsError[i] for i in range(N)), gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}