{
    "background": "Determine the amount of regular and overtime labor to be used weekly for assembling baskets to maximize seasonal profit, considering labor costs, assembly time, material costs, selling price, holding costs, and salvage value.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Cost of regular labor per unit of time",
            "symbol": "RegularCost",
            "value": 0.0,
            "shape": [],
            "code": "RegularCost = data[\"RegularCost\"] # scalar parameter"
        },
        {
            "definition": "Cost of overtime labor per unit of time",
            "symbol": "OvertimeCost",
            "value": 0.0,
            "shape": [],
            "code": "OvertimeCost = data[\"OvertimeCost\"] # scalar parameter"
        },
        {
            "definition": "Time required to assemble a single basket",
            "symbol": "AssemblyTime",
            "value": 0.0,
            "shape": [],
            "code": "AssemblyTime = data[\"AssemblyTime\"] # scalar parameter"
        },
        {
            "definition": "Cost of materials per basket",
            "symbol": "MaterialCost",
            "value": 0.0,
            "shape": [],
            "code": "MaterialCost = data[\"MaterialCost\"] # scalar parameter"
        },
        {
            "definition": "Selling price per basket",
            "symbol": "SellingPrice",
            "value": 0.0,
            "shape": [],
            "code": "SellingPrice = data[\"SellingPrice\"] # scalar parameter"
        },
        {
            "definition": "Holding cost per basket per unit of time",
            "symbol": "HoldingCost",
            "value": 0.0,
            "shape": [],
            "code": "HoldingCost = data[\"HoldingCost\"] # scalar parameter"
        },
        {
            "definition": "Salvage value per unsold basket at the end of the season",
            "symbol": "SalvageValue",
            "value": 0.0,
            "shape": [],
            "code": "SalvageValue = data[\"SalvageValue\"] # scalar parameter"
        },
        {
            "definition": "Demand for baskets in week w",
            "symbol": "Demand",
            "value": 0.0,
            "shape": [
                "W"
            ],
            "code": "Demand = np.array(data[\"Demand\"]) # ['W']"
        },
        {
            "definition": "Number of regular labor units available in week w",
            "symbol": "RegularLabor",
            "value": 0.0,
            "shape": [
                "W"
            ],
            "code": "RegularLabor = np.array(data[\"RegularLabor\"]) # ['W']"
        },
        {
            "definition": "Number of overtime labor units available in week w",
            "symbol": "OvertimeLabor",
            "value": 0.0,
            "shape": [
                "W"
            ],
            "code": "OvertimeLabor = np.array(data[\"OvertimeLabor\"]) # ['W']"
        }
    ],
    "constraints": [
        {
            "description": "The regular labor used in any week must not exceed the available regular labor for that week.",
            "status": "coded",
            "formulation": "\\textup{RegularLaborUsed}_w \\\\leq \\\\textup{RegularLabor}_w \\quad \\forall w",
            "related_variables": [
                "RegularLaborUsed"
            ],
            "related_parameters": [
                "RegularLabor"
            ],
            "code": "# Add constraints to ensure regular labor used in a week does not exceed available regular labor\nfor w in range(W):\n    model.addConstr(RegularLaborUsed[w] <= RegularLabor[w], name=f\"regular_labor_limit_week_{w}\")"
        },
        {
            "description": "The overtime labor used in any week \\textup{w} is at most the maximum overtime labor available \\textup{OvertimeLabor}[w].",
            "status": "coded",
            "formulation": "\\textup{OvertimeLaborUsed}[w] \\\\leq \\\\textup{OvertimeLabor}[w], \\\\quad \\\\forall w",
            "related_variables": [
                "OvertimeLaborUsed"
            ],
            "related_parameters": [
                "OvertimeLabor"
            ],
            "code": "# Add maximum overtime labor constraints\nfor w in range(W):\n    model.addConstr(OvertimeLaborUsed[w] <= OvertimeLabor[w], name=f\"max_overtime_labor_week_{w}\")"
        },
        {
            "description": "The total assembly time in a week is limited by the sum of regular and overtime labor available.",
            "status": "coded",
            "formulation": "\\textup{RegularLaborUsed}_{w} + \\textup{OvertimeLaborUsed}_{w} \\\\leq \\textup{RegularLabor}_{w} + \\textup{OvertimeLabor}_{w}, \\quad \\forall w \\\\in W",
            "related_variables": [
                "RegularLaborUsed",
                "OvertimeLaborUsed"
            ],
            "related_parameters": [
                "RegularLabor",
                "OvertimeLabor"
            ],
            "code": "# Add total labor time constraints for each week\nfor w in range(len(W)):\n    model.addConstr(RegularLaborUsed[w] + OvertimeLaborUsed[w] <= RegularLabor[w] + OvertimeLabor[w], \n                    name=f\"labor_time_limit_week_{w}\")"
        },
        {
            "description": "The total number of baskets assembled must match the weekly demand.",
            "status": "coded",
            "formulation": "\\textup{BasketsAssembled}_{w} = \\textup{Demand}_{w}, \\\\quad \\forall w \\in W",
            "related_variables": [
                "BasketsAssembled"
            ],
            "related_parameters": [
                "Demand"
            ],
            "code": "# Add weekly demand satisfaction constraints\nfor w in W:\n    model.addConstr(BasketsAssembled[w] == Demand[w], name=f\"weekly_demand_satisfaction_{w}\")"
        },
        {
            "description": "The number of baskets assembled in any week must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{BasketsAssembled}_w \\geq 0 \\quad \\forall w \\in W",
            "related_variables": [
                "BasketsAssembled"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for baskets assembled\nfor w in range(W):\n    model.addConstr(BasketsAssembled[w] >= 0, name=f\"BasketsAssembled_nonneg_{w}\")"
        },
        {
            "description": "The amount of regular labor used in week w must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{RegularLaborUsed}_{w} \\geq 0, \\quad \\forall w \\in W",
            "related_variables": [
                "RegularLaborUsed"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for RegularLaborUsed\nfor w in W:\n    model.addConstr(RegularLaborUsed[w] >= 0, name=f\"non_negativity_RegularLaborUsed_{w}\")"
        },
        {
            "description": "The overtime labor used must be non-negative in any given week.",
            "status": "coded",
            "formulation": "\\textup{OvertimeLaborUsed}_w \\geq 0 \\quad \\forall w \\in \\textup{W}",
            "related_variables": [
                "OvertimeLaborUsed"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for overtime labor\nfor w in range(W):\n    model.addConstr(OvertimeLaborUsed[w] >= 0, name=f\"overtime_nonneg_{w}\")"
        },
        {
            "description": "Ensure that the total baskets assembled are calculated as the contribution of regular and overtime labor divided by assembly time.",
            "status": "coded",
            "formulation": "\\textup{BasketsAssembled}_{w} = \\frac{\\textup{RegularLaborUsed}_{w} + \\textup{OvertimeLaborUsed}_{w}}{\\textup{AssemblyTime}}, \\\\quad \\forall w \\in W",
            "related_variables": [
                "BasketsAssembled",
                "RegularLaborUsed",
                "OvertimeLaborUsed"
            ],
            "related_parameters": [
                "AssemblyTime"
            ],
            "code": "# Add constraint to ensure total baskets assembled are calculated from labor usage divided by assembly time\nfor w in W:\n    model.addConstr(\n        BasketsAssembled[w] == (RegularLaborUsed[w] + OvertimeLaborUsed[w]) / AssemblyTime,\n        name=f\"baskets_assembly_calc_{w}\"\n    )"
        },
        {
            "description": "Number of baskets sold in a week cannot exceed weekly demand",
            "status": "coded",
            "formulation": "\\textup{SoldBaskets}_{w} \\leq \\textup{Demand}_{w} \\quad \\forall w \\in \\{1, \\dots, W\\}",
            "related_variables": [
                "SoldBaskets"
            ],
            "related_parameters": [
                "Demand"
            ],
            "code": "# Add weekly demand constraints\nfor w in range(W):\n    model.addConstr(SoldBaskets[w] <= Demand[w], name=f\"weekly_demand_{w}\")"
        },
        {
            "description": "Time required for assembly must be within the total labor (regular and overtime) used",
            "status": "coded",
            "formulation": "\\textup{BasketsAssembled}_{w} \\times \\textup{AssemblyTime} \\leq \\textup{RegularLaborUsed}_{w} + \\textup{OvertimeLaborUsed}_{w} \\quad \\forall w \\in \\{1, \\dots, W\\}",
            "related_variables": [
                "BasketsAssembled",
                "RegularLaborUsed",
                "OvertimeLaborUsed"
            ],
            "related_parameters": [
                "AssemblyTime"
            ],
            "code": "# Add assembly time constraints\nfor w in range(W):\n    model.addConstr(BasketsAssembled[w] * AssemblyTime <= RegularLaborUsed[w] + OvertimeLaborUsed[w],\n                    name=f\"assembly_time_constraint_{w}\")"
        },
        {
            "description": "Regular labor usage must not exceed the maximum available regular labor",
            "status": "coded",
            "formulation": "\\textup{RegularLaborUsed}_{w} \\leq \\textup{RegularLabor}_{w} \\quad \\forall w \\in \\{1, \\dots, W\\}",
            "related_variables": [
                "RegularLaborUsed"
            ],
            "related_parameters": [
                "RegularLabor"
            ],
            "code": "# Add regular labor usage constraints\nfor w in range(W):\n    model.addConstr(RegularLaborUsed[w] <= RegularLabor[w], name=f\"regular_labor_usage_w{w}\")"
        },
        {
            "description": "Overtime labor usage must not exceed the maximum available overtime labor",
            "status": "coded",
            "formulation": "\\textup{OvertimeLaborUsed}_{w} \\leq \\textup{OvertimeLabor}_{w} \\quad \\forall w \\in \\{1, \\dots, W\\}",
            "related_variables": [
                "OvertimeLaborUsed"
            ],
            "related_parameters": [
                "OvertimeLabor"
            ],
            "code": "# Add constraints to ensure overtime labor usage does not exceed the maximum available overtime labor\nfor w in range(W):\n    model.addConstr(OvertimeLaborUsed[w] <= OvertimeLabor[w], name=f\"overtime_labor_limit_{w}\")"
        },
        {
            "description": "Inventory balance constraint for carried baskets across weeks",
            "status": "coded",
            "formulation": "\\textup{Inventory}_{w-1} + \\textup{BasketsAssembled}_{w} - \\textup{SoldBaskets}_{w} = \\textup{Inventory}_{w} \\quad \\forall w \\in \\{2, \\dots, W\\}",
            "related_variables": [
                "BasketsAssembled",
                "SoldBaskets",
                "Inventory"
            ],
            "related_parameters": [],
            "code": "# Add inventory balance constraints for carried baskets across weeks\nfor w in range(1, W):  # Weeks start from 1 because w-1 needs to refer to `Inventory[0]`\n    model.addConstr(Inventory[w-1] + BasketsAssembled[w] - SoldBaskets[w] == Inventory[w], \n                    name=f\"inventory_balance_week_{w}\")"
        },
        {
            "description": "Initial inventory is zero at the start of the season",
            "status": "coded",
            "formulation": "\\textup{Inventory}_{1} = \\textup{BasketsAssembled}_{1} - \\textup{SoldBaskets}_{1}",
            "related_variables": [
                "BasketsAssembled",
                "SoldBaskets",
                "Inventory"
            ],
            "related_parameters": [],
            "code": "# Add initial inventory constraint (Inventory_1 = BasketsAssembled_1 - SoldBaskets_1)\nmodel.addConstr(Inventory[1] == BasketsAssembled[1] - SoldBaskets[1], name=\"initial_inventory\")"
        }
    ],
    "variables": [
        {
            "definition": "The amount of regular labor used in week w",
            "symbol": "RegularLaborUsed",
            "shape": [
                "W"
            ],
            "status": "coded",
            "code": "RegularLaborUsed = model.addVars(W, vtype=gp.GRB.CONTINUOUS, name=\"RegularLaborUsed\")"
        },
        {
            "definition": "The amount of overtime labor used in week w",
            "symbol": "OvertimeLaborUsed",
            "shape": [
                "W"
            ],
            "status": "coded",
            "code": "OvertimeLaborUsed = model.addVars(W, vtype=gp.GRB.CONTINUOUS, name=\"OvertimeLaborUsed\")"
        },
        {
            "definition": "The total number of baskets assembled in week w",
            "symbol": "BasketsAssembled",
            "shape": [
                "W"
            ],
            "status": "coded",
            "code": "BasketsAssembled = model.addVars(W, vtype=gp.GRB.CONTINUOUS, name=\"BasketsAssembled\")"
        },
        {
            "definition": "The number of baskets sold in week w",
            "symbol": "SoldBaskets",
            "shape": [
                "W"
            ],
            "status": "coded",
            "code": "SoldBaskets = model.addVars(W, vtype=gp.GRB.CONTINUOUS, name=\"SoldBaskets\")"
        },
        {
            "definition": "The inventory of unsold baskets carried to week w",
            "symbol": "Inventory",
            "shape": [
                "W"
            ],
            "status": "coded",
            "code": "Inventory = model.addVars(W, vtype=gp.GRB.CONTINUOUS, name=\"Inventory\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the seasonal profit from assembly and sales of baskets",
            "status": "coded",
            "formulation": "\\sum_{w=1}^{W} \\big( \\textup{SoldBaskets}_{w} \\times \\textup{SellingPrice} \\big) - \\sum_{w=1}^{W} \\big( \\textup{RegularLaborUsed}_{w} \\times \\textup{RegularCost} + \\textup{OvertimeLaborUsed}_{w} \\times \\textup{OvertimeCost} + \\textup{BasketsAssembled}_{w} \\times \\textup{MaterialCost} + \\textup{Inventory}_{w} \\times \\textup{HoldingCost} \\big) + \\textup{Inventory}_{W} \\times \\textup{SalvageValue}",
            "related_variables": [
                "RegularLaborUsed",
                "OvertimeLaborUsed",
                "BasketsAssembled",
                "SoldBaskets",
                "Inventory"
            ],
            "related_parameters": [
                "SellingPrice",
                "RegularCost",
                "OvertimeCost",
                "MaterialCost",
                "HoldingCost",
                "SalvageValue"
            ],
            "code": "# Set objective\nmodel.setObjective(\n    gp.quicksum(SoldBaskets[w] * SellingPrice \n                - (RegularLaborUsed[w] * RegularCost \n                   + OvertimeLaborUsed[w] * OvertimeCost \n                   + BasketsAssembled[w] * MaterialCost \n                   + Inventory[w] * HoldingCost) \n                for w in range(W)) \n    + Inventory[W - 1] * SalvageValue, \n    gp.GRB.MAXIMIZE\n)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413152721_nlp4lp_51/",
    "problem_path": "data/nlp4lp/51/"
}