{
    "background": "The manufacturer has to manage steel production to meet specific manganese and silicon content percentages in order to maximize profits. This involves deciding the optimal quantity of steel to produce, while taking material costs, selling prices, and melting costs into account.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Amount of steel to produce in tons",
            "symbol": "SteelQuantity",
            "value": "",
            "shape": [],
            "code": "SteelQuantity = data[\"SteelQuantity\"] # scalar parameter"
        },
        {
            "definition": "Percentage of manganese in the steel required",
            "symbol": "ManganesePercent",
            "value": "",
            "shape": [],
            "code": "ManganesePercent = data[\"ManganesePercent\"] # scalar parameter"
        },
        {
            "definition": "Minimum percentage of silicon in the steel required",
            "symbol": "SiliconMinPercent",
            "value": "",
            "shape": [],
            "code": "SiliconMinPercent = data[\"SiliconMinPercent\"] # scalar parameter"
        },
        {
            "definition": "Maximum percentage of silicon in the steel allowed",
            "symbol": "SiliconMaxPercent",
            "value": "",
            "shape": [],
            "code": "SiliconMaxPercent = data[\"SiliconMaxPercent\"] # scalar parameter"
        },
        {
            "definition": "Silicon content in the k-th stock",
            "symbol": "SiliconContent",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "SiliconContent = np.array(data[\"SiliconContent\"]) # ['K']"
        },
        {
            "definition": "Manganese content in the k-th stock",
            "symbol": "ManganeseContent",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "ManganeseContent = np.array(data[\"ManganeseContent\"]) # ['K']"
        },
        {
            "definition": "Price of manganese per ton",
            "symbol": "ManganesePrice",
            "value": "",
            "shape": [],
            "code": "ManganesePrice = data[\"ManganesePrice\"] # scalar parameter"
        },
        {
            "definition": "Cost of the k-th stock material per ton",
            "symbol": "MaterialCost",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "MaterialCost = np.array(data[\"MaterialCost\"]) # ['K']"
        },
        {
            "definition": "Selling price of steel per ton",
            "symbol": "SellingPrice",
            "value": "",
            "shape": [],
            "code": "SellingPrice = data[\"SellingPrice\"] # scalar parameter"
        },
        {
            "definition": "Price to melt one ton of steel",
            "symbol": "MeltingPrice",
            "value": "",
            "shape": [],
            "code": "MeltingPrice = data[\"MeltingPrice\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Constraints for steel production to meet silicon and manganese content while matching total steel production.",
            "status": "coded",
            "formulation": "\\textup{SteelQuantity} = \\sum_{k=1}^{K} \\textup{StockSteel}_{k} \\\\ \\quad \\\\ \\textup{SiliconMinPercent} \\cdot \\textup{SteelQuantity} \\leq \\sum_{k=1}^{K} \\textup{StockSteel}_{k} \\cdot \\textup{SiliconContent}_{k} \\leq \\textup{SiliconMaxPercent} \\cdot \\textup{SteelQuantity} \\\\ \\quad \\\\ \\sum_{k=1}^{K} \\textup{StockSteel}_{k} \\cdot \\textup{ManganeseContent}_{k} = \\textup{ManganesePercent} \\cdot \\textup{SteelQuantity}",
            "related_variables": [
                "StockSteel",
                "SteelQuantity"
            ],
            "related_parameters": [
                "SiliconMinPercent",
                "SiliconMaxPercent",
                "ManganesePercent",
                "SiliconContent",
                "ManganeseContent"
            ],
            "code": "# Add constraints for total steel production\nSteelQuantity = sum(StockSteel[k] for k in range(K))\n\n# Silicon content bounds\nmodel.addConstr(\n    SiliconMinPercent * SteelQuantity <= sum(StockSteel[k] * SiliconContent[k] for k in range(K)),\n    name=\"silicon_min_bound\"\n)\nmodel.addConstr(\n    sum(StockSteel[k] * SiliconContent[k] for k in range(K)) <= SiliconMaxPercent * SteelQuantity,\n    name=\"silicon_max_bound\"\n)\n\n# Manganese content equality\nmodel.addConstr(\n    sum(StockSteel[k] * ManganeseContent[k] for k in range(K)) == ManganesePercent * SteelQuantity,\n    name=\"manganese_content\"\n)"
        },
        {
            "description": "The total manganese content in the final steel must meet the required percentage (ManganesePercent).",
            "status": "coded",
            "formulation": "\\sum_{k} \\textup{StockSteel}_k \\\\cdot \\textup{ManganeseContent}_k = \\textup{SteelQuantity} \\\\cdot \\textup{ManganesePercent}",
            "related_variables": [
                "StockSteel"
            ],
            "related_parameters": [
                "ManganeseContent",
                "SteelQuantity",
                "ManganesePercent"
            ],
            "code": "# Add constraint for total manganese content in the final steel\nmodel.addConstr(\n    gp.quicksum(StockSteel[k] * ManganeseContent[k] for k in range(len(ManganeseContent))) == SteelQuantity * ManganesePercent,\n    name=\"ManganeseContentConstraint\"\n)"
        },
        {
            "description": "Silicon content in steel must meet the minimum percentage requirement.",
            "status": "coded",
            "formulation": "\\sum_{k=1}^{K} \\textup{SiliconContent}_{k} \\cdot \\textup{StockSteel}_{k} \\geq \\frac{\\textup{SiliconMinPercent}}{100} \\cdot \\sum_{k=1}^{K} \\textup{StockSteel}_{k}",
            "related_variables": [
                "StockSteel"
            ],
            "related_parameters": [
                "SiliconContent",
                "SiliconMinPercent"
            ],
            "code": "# Add constraint ensuring silicon content meets the minimum percentage\nmodel.addConstr(\n    gp.quicksum(SiliconContent[k] * StockSteel[k] for k in range(K)) >= \n    (SiliconMinPercent / 100) * gp.quicksum(StockSteel[k] for k in range(K)),\n    name=\"silicon_content_constraint\"\n)"
        },
        {
            "description": "The total silicon percentage in the produced steel cannot exceed SiliconMaxPercent.",
            "status": "coded",
            "formulation": "\\\\textup{TotalSiliconProduced} \\\\leq \\\\textup{SiliconMaxPercent} \\\\cdot \\\\sum_{k=1}^{K} \\\\textup{StockSteel}_{k}",
            "related_variables": [
                "StockSteel",
                "TotalSiliconProduced"
            ],
            "related_parameters": [
                "SiliconMaxPercent",
                "SiliconContent"
            ],
            "code": "# Add constraint to ensure total silicon percentage doesn't exceed the allowed maximum\nmodel.addConstr(\n    TotalSiliconProduced <= SiliconMaxPercent * gp.quicksum(StockSteel[k] for k in range(K)),\n    name=\"total_silicon_limit\"\n)"
        },
        {
            "description": "Total silicon produced is calculated based on silicon content and steel production from each stock.",
            "status": "coded",
            "formulation": "\\\\textup{TotalSiliconProduced} = \\\\sum_{k=1}^{K} \\\\textup{SiliconContent}_{k} \\\\cdot \\\\textup{StockSteel}_{k}",
            "related_variables": [
                "StockSteel",
                "TotalSiliconProduced"
            ],
            "related_parameters": [
                "SiliconContent"
            ],
            "code": "# Add constraint to calculate TotalSiliconProduced\nmodel.addConstr(\n    TotalSiliconProduced == gp.quicksum(SiliconContent[k] * StockSteel[k] for k in range(K)),\n    name=\"TotalSiliconProduced_calc\"\n)"
        },
        {
            "description": "Ensure that the manganese percentage in the final steel meets the requirement.",
            "status": "coded",
            "formulation": "\\frac{\\sum_{k=1}^{K} \\textup{StockSteel}_{k} \\times \\textup{ManganeseContent}_{k}}{\\textup{SteelQuantity}} = \\textup{ManganesePercent}",
            "related_variables": [
                "StockSteel"
            ],
            "related_parameters": [
                "ManganesePercent",
                "ManganeseContent",
                "SteelQuantity"
            ],
            "code": "# Add constraint to ensure manganese percentage in final steel meets the requirement\nmodel.addConstr(\n    gp.quicksum(StockSteel[k] * ManganeseContent[k] for k in range(K)) / SteelQuantity == ManganesePercent, \n    name=\"manganese_percentage_constraint\"\n)"
        },
        {
            "description": "Ensure that the silicon percentage in the final steel is within the minimum and maximum bounds specified.",
            "status": "coded",
            "formulation": "\\textup{SiliconMinPercent} \\leq \\frac{\\sum_{k=1}^{K} \\textup{StockSteel}_{k} \\times \\textup{SiliconContent}_{k}}{\\textup{SteelQuantity}} \\leq \\textup{SiliconMaxPercent}",
            "related_variables": [
                "StockSteel"
            ],
            "related_parameters": [
                "SiliconMinPercent",
                "SiliconMaxPercent",
                "SiliconContent",
                "SteelQuantity"
            ],
            "code": "# Add constraints to ensure silicon percentage in steel is within specified bounds\nnumerator = gp.quicksum(StockSteel[k] * SiliconContent[k] for k in range(K))\nmodel.addConstr(numerator / SteelQuantity >= SiliconMinPercent, name=\"SiliconMinConstraint\")\nmodel.addConstr(numerator / SteelQuantity <= SiliconMaxPercent, name=\"SiliconMaxConstraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The amount of steel to be produced from stock k in tons",
            "symbol": "StockSteel",
            "shape": [
                "K"
            ],
            "status": "coded",
            "code": "StockSteel = model.addVars(K, vtype=gp.GRB.CONTINUOUS, name=\"StockSteel\")"
        },
        {
            "definition": "The total silicon produced in the steel production process",
            "symbol": "TotalSiliconProduced",
            "shape": [],
            "status": "coded",
            "code": "TotalSiliconProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalSiliconProduced\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the company's profit from the steel produced.",
            "status": "coded",
            "formulation": "\\textup{Maximize} \\quad \\textup{Profit} = \\textup{SellingPrice} \\times \\textup{SteelQuantity} - \\left( \\sum_{k=1}^{K} \\textup{StockSteel}_{k} \\times \\textup{MaterialCost}_{k} \\right) - \\left( \\textup{SteelQuantity} \\times \\textup{MeltingPrice} \\right)",
            "related_variables": [
                "StockSteel"
            ],
            "related_parameters": [
                "SellingPrice",
                "MaterialCost",
                "MeltingPrice",
                "SteelQuantity"
            ],
            "code": "# Set objective\nmodel.setObjective(\n    SellingPrice * SteelQuantity \n    - gp.quicksum(StockSteel[k] * MaterialCost[k] for k in range(K)) \n    - (SteelQuantity * MeltingPrice),\n    gp.GRB.MAXIMIZE\n)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413155129_nlp4lp_43/",
    "problem_path": "data/nlp4lp/43/"
}