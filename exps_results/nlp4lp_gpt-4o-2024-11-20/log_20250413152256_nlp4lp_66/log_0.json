{
    "background": "Identifying the shortest route for a traveler to visit a certain number of towns and return to the original starting town.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of towns to visit",
            "symbol": "N",
            "value": "",
            "shape": [],
            "code": "N = data[\"N\"] # scalar parameter"
        },
        {
            "definition": "Index of the start city",
            "symbol": "StartCity",
            "value": "",
            "shape": [],
            "code": "StartCity = data[\"StartCity\"] # scalar parameter"
        },
        {
            "definition": "Distance from city i to city j",
            "symbol": "Distances",
            "value": "",
            "shape": [
                "N",
                "N"
            ],
            "code": "Distances = np.array(data[\"Distances\"]) # ['N', 'N']"
        }
    ],
    "constraints": [
        {
            "description": "The traveler must visit each town exactly once, departing from each city and arriving at each city exactly one time.",
            "status": "formulated",
            "formulation": "\\sum_{j=1, j \\neq i}^{\\textup{N}} \\textup{VisitPath}_{i,j} = 1 \\quad \\forall \\quad i = 1, \\dots, \\textup{N} \\\\ \\sum_{i=1, i \\neq j}^{\\textup{N}} \\textup{VisitPath}_{i,j} = 1 \\quad \\forall \\quad j = 1, \\dots, \\textup{N}",
            "related_variables": [
                "VisitPath"
            ],
            "related_parameters": [
                "N"
            ]
        },
        {
            "description": "The traveler must return to StartCity after visiting all other towns.",
            "status": "formulated",
            "formulation": "\\sum_{i=1, i \\\\neq \\textup{StartCity}}^{\\textup{N}} \\textup{VisitPath}_{i, \\textup{StartCity}} = 1",
            "related_variables": [
                "VisitPath"
            ],
            "related_parameters": [
                "StartCity",
                "N"
            ]
        },
        {
            "description": "The distances between any two towns must be non-negative.",
            "status": "formulated",
            "formulation": "\\textup{Distances}_{i,j} \\geq 0, \\quad \\forall \\ i, j \\in \\{1, 2, \\dots, \\textup{N}\\}",
            "related_variables": [],
            "related_parameters": [
                "Distances",
                "N"
            ]
        },
        {
            "description": "Each city must have exactly one incoming path (exactly one other city leads to it).",
            "status": "formulated",
            "formulation": "\\sum_{i=1}^{N} \\textup{VisitPath}_{i,j} = 1 \\quad \\forall j \\in \\{1, \\dots, N\\}",
            "related_variables": [
                "VisitPath"
            ],
            "related_parameters": [
                "N"
            ]
        },
        {
            "description": "Each city must have exactly one outgoing path (it must travel to exactly one other city).",
            "status": "formulated",
            "formulation": "\\sum_{j=1}^{N} \\textup{VisitPath}_{i,j} = 1 \\quad \\forall i \\in \\{1, \\dots, N\\}",
            "related_variables": [
                "VisitPath"
            ],
            "related_parameters": [
                "N"
            ]
        },
        {
            "description": "Subtour elimination constraint: Prevents disjoint cycles by ensuring positional order.",
            "status": "formulated",
            "formulation": "\\textup{SubtourElim}_{i} - \\textup{SubtourElim}_{j} + N \\cdot \\textup{VisitPath}_{i,j} \\leq N - 1 \\quad \\forall i, j \\in \\{2, \\dots, N\\}, \\quad i \\neq j",
            "related_variables": [
                "VisitPath",
                "SubtourElim"
            ],
            "related_parameters": [
                "N"
            ]
        }
    ],
    "variables": [
        {
            "definition": "Binary variable indicating if the traveler travels from city i to city j",
            "symbol": "VisitPath",
            "shape": [
                "N",
                "N"
            ],
            "status": "formulated"
        },
        {
            "definition": "Auxiliary variable representing the position of a city in the travel sequence, used for subtour elimination.",
            "symbol": "SubtourElim",
            "shape": [
                "N"
            ],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total travel distance by ordering visits to all cities and returning to the starting city, ensuring the shortest possible route.",
            "status": "formulated",
            "formulation": "\\min \\sum_{i=1}^{N} \\sum_{j=1}^{N} \\textup{Distances}_{i,j} \\cdot \\textup{VisitPath}_{i,j}",
            "related_variables": [
                "VisitPath"
            ],
            "related_parameters": [
                "Distances",
                "N"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413152256_nlp4lp_66/",
    "problem_path": "data/nlp4lp/66/"
}