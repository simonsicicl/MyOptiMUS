{
    "background": "DEC is planning to maximize profit for the next quarter by producing an optimal mix of systems. The production will consider the type of systems (workstations or general purpose), various components such as memories and disks, and other constraints such as demand and available resources.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of systems",
            "symbol": "N",
            "value": 0,
            "shape": [],
            "code": "N = data[\"N\"] # scalar parameter"
        },
        {
            "definition": "Whether system i is a workstation",
            "symbol": "IsWorkstation",
            "value": 0,
            "shape": [
                "N"
            ],
            "code": "IsWorkstation = np.array(data[\"IsWorkstation\"]) # ['N']"
        },
        {
            "definition": "Price of system i",
            "symbol": "Price",
            "value": 0,
            "shape": [
                "N"
            ],
            "code": "Price = np.array(data[\"Price\"]) # ['N']"
        },
        {
            "definition": "Number of disk drives in system i",
            "symbol": "DiskDrives",
            "value": 0,
            "shape": [
                "N"
            ],
            "code": "DiskDrives = np.array(data[\"DiskDrives\"]) # ['N']"
        },
        {
            "definition": "Number of 256K memory boards in system i",
            "symbol": "MemoryBoards",
            "value": 0,
            "shape": [
                "N"
            ],
            "code": "MemoryBoards = np.array(data[\"MemoryBoards\"]) # ['N']"
        },
        {
            "definition": "Maximum number of CPUs available",
            "symbol": "MaxCpu",
            "value": 0,
            "shape": [],
            "code": "MaxCpu = data[\"MaxCpu\"] # scalar parameter"
        },
        {
            "definition": "Minimum total disk drives",
            "symbol": "MinDisk",
            "value": 0,
            "shape": [],
            "code": "MinDisk = data[\"MinDisk\"] # scalar parameter"
        },
        {
            "definition": "Maximum total disk drives",
            "symbol": "MaxDisk",
            "value": 0,
            "shape": [],
            "code": "MaxDisk = data[\"MaxDisk\"] # scalar parameter"
        },
        {
            "definition": "Minimum total memory boards",
            "symbol": "MinMemory",
            "value": 0,
            "shape": [],
            "code": "MinMemory = data[\"MinMemory\"] # scalar parameter"
        },
        {
            "definition": "Maximum total memory boards",
            "symbol": "MaxMemory",
            "value": 0,
            "shape": [],
            "code": "MaxMemory = data[\"MaxMemory\"] # scalar parameter"
        },
        {
            "definition": "Demand of system i",
            "symbol": "Demand",
            "value": 0,
            "shape": [
                "N"
            ],
            "code": "Demand = np.array(data[\"Demand\"]) # ['N']"
        },
        {
            "definition": "Demand for General Purpose systems",
            "symbol": "DemandGP",
            "value": 0,
            "shape": [],
            "code": "DemandGP = data[\"DemandGP\"] # scalar parameter"
        },
        {
            "definition": "Demand for Workstations",
            "symbol": "DemandWS",
            "value": 0,
            "shape": [],
            "code": "DemandWS = data[\"DemandWS\"] # scalar parameter"
        },
        {
            "definition": "Number of preordered system i",
            "symbol": "Preorder",
            "value": 0,
            "shape": [
                "N"
            ],
            "code": "Preorder = np.array(data[\"Preorder\"]) # ['N']"
        },
        {
            "definition": "Number of alternative memory configurations possible",
            "symbol": "AltMemory",
            "value": 0,
            "shape": [],
            "code": "AltMemory = data[\"AltMemory\"] # scalar parameter"
        },
        {
            "definition": "Whether the alternative memory is compatible with system i",
            "symbol": "AltCompatible",
            "value": 0,
            "shape": [
                "N"
            ],
            "code": "AltCompatible = np.array(data[\"AltCompatible\"]) # ['N']"
        }
    ],
    "constraints": [
        {
            "description": "The number of systems produced should be non-negative and integer for all systems.",
            "status": "coded",
            "formulation": "\\textup{SystemsProduced}_{i} \\geq 0 \\quad \\forall \\, i \\in \\{1, \\dots, \\textup{N}\\} \\\\\n\\textup{SystemsProduced}_{i} \\in \\mathbb{Z} \\quad \\forall \\, i \\in \\{1, \\dots, \\textup{N}\\}",
            "related_variables": [
                "SystemsProduced"
            ],
            "related_parameters": [
                "N"
            ],
            "code": "# Modify variable type to integer for non-negativity and integrality\nfor i in range(N):\n    SystemsProduced[i].vtype = gp.GRB.INTEGER"
        },
        {
            "description": "Only workstations or general-purpose systems can be produced for each system according to \\textup{IsWorkstation}.",
            "status": "coded",
            "formulation": "\\textup{SystemsProduced}_{i} \\\\leq M \\cdot \\textup{IsProducedWorkstation}_{i}, \\quad \\forall i \\; \\textup{such that} \\; \\textup{IsWorkstation}_{i} = 1 \\\\ \n\\textup{SystemsProduced}_{i} \\\\leq M \\cdot (1 - \\textup{IsProducedWorkstation}_{i}), \\quad \\forall i \\; \\textup{such that} \\; \\textup{IsWorkstation}_{i} = 0",
            "related_variables": [
                "SystemsProduced",
                "IsProducedWorkstation"
            ],
            "related_parameters": [
                "IsWorkstation"
            ],
            "code": "# Add constraints for restricting production based on system type\nM = 1e6  # Set a sufficiently large constant value for M\nfor i in range(N):\n    if IsWorkstation[i] == 1:\n        model.addConstr(SystemsProduced[i] <= M * IsProducedWorkstation[i], name=f\"workstation_limit_{i}\")\n    else:\n        model.addConstr(SystemsProduced[i] <= M * (1 - IsProducedWorkstation[i]), name=f\"general_system_limit_{i}\")"
        },
        {
            "description": "The total production of systems must not exceed the available MaxCpu CPUs.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{N} \\textup{SystemsProduced}_{i} \\leq \\textup{MaxCpu}",
            "related_variables": [
                "SystemsProduced"
            ],
            "related_parameters": [
                "MaxCpu",
                "N"
            ],
            "code": "# Add system production limit constraint\nmodel.addConstr(gp.quicksum(SystemsProduced[i] for i in range(N)) <= MaxCpu, name=\"production_limit\")"
        },
        {
            "description": "The total number of disk drives across all systems must be at least MinDisk and at most MaxDisk",
            "status": "coded",
            "formulation": "\\\\textup{MinDisk} \\\\leq \\\\sum_{i=1}^{N} \\\\textup{SystemsProduced}_{i} \\\\cdot \\\\textup{DiskDrives}_{i} \\\\leq \\\\textup{MaxDisk}",
            "related_variables": [
                "SystemsProduced"
            ],
            "related_parameters": [
                "DiskDrives",
                "MinDisk",
                "MaxDisk",
                "N"
            ],
            "code": "# Add constraints for the total number of disk drives\nmodel.addConstr(\n    gp.quicksum(SystemsProduced[i] * DiskDrives[i] for i in range(N)) >= MinDisk,\n    name=\"min_disk_constraint\"\n)\nmodel.addConstr(\n    gp.quicksum(SystemsProduced[i] * DiskDrives[i] for i in range(N)) <= MaxDisk,\n    name=\"max_disk_constraint\"\n)"
        },
        {
            "description": "The total number of 256K memory boards across all systems must be between MinMemory and MaxMemory.",
            "status": "coded",
            "formulation": "\\textup{MinMemory} \\leq \\sum_{i=1}^{\\textup{N}} \\textup{SystemsProduced}_{i} \\cdot \\textup{MemoryBoards}_{i} \\leq \\textup{MaxMemory}",
            "related_variables": [
                "SystemsProduced"
            ],
            "related_parameters": [
                "MemoryBoards",
                "MinMemory",
                "MaxMemory",
                "N"
            ],
            "code": "# Add constraint for total number of 256K memory boards\nmodel.addConstr(\n    gp.quicksum(SystemsProduced[i] * MemoryBoards[i] for i in range(N)) >= MinMemory,\n    name=\"min_memory_constraint\"\n)\nmodel.addConstr(\n    gp.quicksum(SystemsProduced[i] * MemoryBoards[i] for i in range(N)) <= MaxMemory,\n    name=\"max_memory_constraint\"\n)"
        },
        {
            "description": "The production quantity for each system cannot exceed its corresponding demand.",
            "status": "coded",
            "formulation": "\\textup{SystemsProduced}_{i} \\leq \\textup{Demand}_{i}, \\quad \\forall i = 1, \\dots, N",
            "related_variables": [
                "SystemsProduced"
            ],
            "related_parameters": [
                "Demand"
            ],
            "code": "# Add production-demand constraints\nfor i in range(N):\n    model.addConstr(SystemsProduced[i] <= Demand[i], name=f\"production_demand_constraint_{i}\")"
        },
        {
            "description": "The total production of general-purpose (\textup{GP}) systems must not exceed the demand, \textup{DemandGP}.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{N}} (1 - \\textup{IsWorkstation}_{i}) \\cdot \\textup{SystemsProduced}_{i} \\\\leq \\textup{DemandGP}",
            "related_variables": [
                "SystemsProduced",
                "IsWorkstation"
            ],
            "related_parameters": [
                "DemandGP",
                "N"
            ],
            "code": "# Add constraint for total production of general-purpose systems\nmodel.addConstr(\n    gp.quicksum((1 - IsWorkstation[i]) * SystemsProduced[i] for i in range(N)) <= DemandGP,\n    name=\"Production_GP_Constraint\"\n)"
        },
        {
            "description": "The total production of workstations must not exceed DemandWS.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{N} \\textup{SystemsProduced}_{i} \\cdot \\textup{IsWorkstation}_{i} \\leq \\textup{DemandWS}",
            "related_variables": [
                "SystemsProduced"
            ],
            "related_parameters": [
                "IsWorkstation",
                "DemandWS"
            ],
            "code": "# Add constraint ensuring total workstation production does not exceed DemandWS\nmodel.addConstr(\n    gp.quicksum(SystemsProduced[i] * IsWorkstation[i] for i in range(N)) <= DemandWS,\n    name=\"workstation_demand_constraint\"\n)"
        },
        {
            "description": "Preorder systems must be fulfilled as specified by Preorder",
            "status": "coded",
            "formulation": "\\textup{SystemsProduced}_{i} \\geq \\textup{Preorder}_{i}, \\quad \\forall \\, i \\in \\{1, ..., N\\}",
            "related_variables": [
                "SystemsProduced"
            ],
            "related_parameters": [
                "Preorder"
            ],
            "code": "# Add preorder fulfillment constraints\nfor i in range(N):\n    model.addConstr(SystemsProduced[i] >= Preorder[i], name=f\"Preorder_Fulfillment_{i}\")"
        },
        {
            "description": "Each system must be configured with compatible alternative memory configurations based on AltCompatible.",
            "status": "coded",
            "formulation": "\\textup{SystemsProduced}_{i} \\leq M \\cdot \\textup{IsCompatible}_{i} \\quad \\forall \\ i \\in \\{1, 2, \\dots, N\\}",
            "related_variables": [
                "SystemsProduced",
                "IsCompatible"
            ],
            "related_parameters": [
                "AltCompatible"
            ],
            "code": "# Add constraints to ensure systems are configured with compatible alternative memory\nM = 1e6  # Large constant to implement the big-M method\nfor i in range(N):\n    model.addConstr(SystemsProduced[i] <= M * IsCompatible[i], name=f\"compatibility_constraint_{i}\")"
        },
        {
            "description": "The total number of systems configured with alternative memory must not exceed the maximum alternative memory limit.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{N}} \\textup{IsCompatible}_{i} \\leq \\textup{AltMemory}",
            "related_variables": [
                "IsCompatible"
            ],
            "related_parameters": [
                "AltMemory",
                "N"
            ],
            "code": "# Add constraint to limit the total number of systems with alternative memory\nmodel.addConstr(gp.quicksum(IsCompatible[i] for i in range(N)) <= AltMemory, name=\"AltMemoryLimit\")"
        },
        {
            "description": "Ensure binary production logic for each system (produced as one type only).",
            "status": "coded",
            "formulation": "\\textup{IsProducedWorkstation}_{i} \\in \\{0, 1\\}, \\quad \\forall i",
            "related_variables": [
                "IsProducedWorkstation"
            ],
            "related_parameters": [],
            "code": "# No additional constraint code needed because the variable \"IsProducedWorkstation\" has already been defined as binary."
        },
        {
            "description": "Ensure that compatibility binary variable aligns with AltCompatible.",
            "status": "coded",
            "formulation": "\\textup{IsCompatible}_{i} \\leq \\textup{AltCompatible}_{i} \\quad \\forall \\ i \\in \\{1, 2, \\dots, N\\}",
            "related_variables": [
                "IsCompatible"
            ],
            "related_parameters": [
                "AltCompatible"
            ],
            "code": "# Add compatibility constraints\nfor i in range(N):\n    model.addConstr(IsCompatible[i] <= AltCompatible[i], name=f\"compatibility_constraint_{i}\")"
        },
        {
            "description": "For systems where alternate memory is not compatible, the variable IsCompatible must be 0.",
            "status": "coded",
            "formulation": "\\textup{IsCompatible}_{i} \\leq \\textup{AltCompatible}_{i} \\quad \\forall \\ i \\in \\{1, 2, \\dots, \\textup{N}\\}",
            "related_variables": [
                "IsCompatible"
            ],
            "related_parameters": [
                "AltCompatible",
                "N"
            ],
            "code": "# Add compatibility constraints\nfor i in range(N):\n    model.addConstr(IsCompatible[i] <= AltCompatible[i], name=f\"compatibility_constraint_{i}\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of units produced for each system i.",
            "symbol": "SystemsProduced",
            "shape": [
                "N"
            ],
            "status": "coded",
            "code": "SystemsProduced = model.addVars(N, vtype=gp.GRB.CONTINUOUS, name=\"SystemsProduced\")"
        },
        {
            "definition": "Binary decision variable indicating whether system i is produced as a workstation.",
            "symbol": "IsProducedWorkstation",
            "shape": [
                "N"
            ],
            "status": "coded",
            "code": "IsProducedWorkstation = model.addVars(N, vtype=gp.GRB.BINARY, name=\"IsProducedWorkstation\")"
        },
        {
            "definition": "Binary variable indicating if system i is configured with compatible memory.",
            "symbol": "IsCompatible",
            "shape": [
                "N"
            ],
            "status": "coded",
            "code": "IsCompatible = model.addVars(N, vtype=gp.GRB.BINARY, name=\"IsCompatible\")"
        },
        {
            "definition": "Binary decision variable indicating if system i is configured with alternative memory.",
            "symbol": "IsCompatible",
            "shape": [
                "N"
            ],
            "status": "coded",
            "code": "IsCompatible = model.addVars(N, vtype=gp.GRB.BINARY, name=\"IsCompatible\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total profit from systems produced, where profit is calculated as the sum of the number of each system produced multiplied by its corresponding price.",
            "status": "coded",
            "formulation": "\\textup{Maximize} \\quad \\sum_{i=1}^{N} (\\textup{SystemsProduced}_{i} \\cdot \\textup{Price}_{i})",
            "related_variables": [
                "SystemsProduced"
            ],
            "related_parameters": [
                "Price",
                "N"
            ],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(SystemsProduced[i] * Price[i] for i in range(N)), gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 4,
    "error_message": null,
    "obj_val": "infeasible or unbounded",
    "log_path": "logs/log_20250413172639_nlp4lp_2/",
    "problem_path": "data/nlp4lp/2/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nlp4lp/2/data.json\", \"r\") as f:\n    data = json.load(f)\n\nN = data[\"N\"] # scalar parameter\nIsWorkstation = np.array(data[\"IsWorkstation\"]) # ['N']\nPrice = np.array(data[\"Price\"]) # ['N']\nDiskDrives = np.array(data[\"DiskDrives\"]) # ['N']\nMemoryBoards = np.array(data[\"MemoryBoards\"]) # ['N']\nMaxCpu = data[\"MaxCpu\"] # scalar parameter\nMinDisk = data[\"MinDisk\"] # scalar parameter\nMaxDisk = data[\"MaxDisk\"] # scalar parameter\nMinMemory = data[\"MinMemory\"] # scalar parameter\nMaxMemory = data[\"MaxMemory\"] # scalar parameter\nDemand = np.array(data[\"Demand\"]) # ['N']\nDemandGP = data[\"DemandGP\"] # scalar parameter\nDemandWS = data[\"DemandWS\"] # scalar parameter\nPreorder = np.array(data[\"Preorder\"]) # ['N']\nAltMemory = data[\"AltMemory\"] # scalar parameter\nAltCompatible = np.array(data[\"AltCompatible\"]) # ['N']\nSystemsProduced = model.addVars(N, vtype=gp.GRB.CONTINUOUS, name=\"SystemsProduced\")\nIsProducedWorkstation = model.addVars(N, vtype=gp.GRB.BINARY, name=\"IsProducedWorkstation\")\nIsCompatible = model.addVars(N, vtype=gp.GRB.BINARY, name=\"IsCompatible\")\nIsCompatible = model.addVars(N, vtype=gp.GRB.BINARY, name=\"IsCompatible\")\n\n# Modify variable type to integer for non-negativity and integrality\nfor i in range(N):\n    SystemsProduced[i].vtype = gp.GRB.INTEGER\n\n# Add constraints for restricting production based on system type\nM = 1e6  # Set a sufficiently large constant value for M\nfor i in range(N):\n    if IsWorkstation[i] == 1:\n        model.addConstr(SystemsProduced[i] <= M * IsProducedWorkstation[i], name=f\"workstation_limit_{i}\")\n    else:\n        model.addConstr(SystemsProduced[i] <= M * (1 - IsProducedWorkstation[i]), name=f\"general_system_limit_{i}\")\n\n# Add system production limit constraint\nmodel.addConstr(gp.quicksum(SystemsProduced[i] for i in range(N)) <= MaxCpu, name=\"production_limit\")\n\n# Add constraints for the total number of disk drives\nmodel.addConstr(\n    gp.quicksum(SystemsProduced[i] * DiskDrives[i] for i in range(N)) >= MinDisk,\n    name=\"min_disk_constraint\"\n)\nmodel.addConstr(\n    gp.quicksum(SystemsProduced[i] * DiskDrives[i] for i in range(N)) <= MaxDisk,\n    name=\"max_disk_constraint\"\n)\n\n# Add constraint for total number of 256K memory boards\nmodel.addConstr(\n    gp.quicksum(SystemsProduced[i] * MemoryBoards[i] for i in range(N)) >= MinMemory,\n    name=\"min_memory_constraint\"\n)\nmodel.addConstr(\n    gp.quicksum(SystemsProduced[i] * MemoryBoards[i] for i in range(N)) <= MaxMemory,\n    name=\"max_memory_constraint\"\n)\n\n# Add production-demand constraints\nfor i in range(N):\n    model.addConstr(SystemsProduced[i] <= Demand[i], name=f\"production_demand_constraint_{i}\")\n\n# Add constraint for total production of general-purpose systems\nmodel.addConstr(\n    gp.quicksum((1 - IsWorkstation[i]) * SystemsProduced[i] for i in range(N)) <= DemandGP,\n    name=\"Production_GP_Constraint\"\n)\n\n# Add constraint ensuring total workstation production does not exceed DemandWS\nmodel.addConstr(\n    gp.quicksum(SystemsProduced[i] * IsWorkstation[i] for i in range(N)) <= DemandWS,\n    name=\"workstation_demand_constraint\"\n)\n\n# Add preorder fulfillment constraints\nfor i in range(N):\n    model.addConstr(SystemsProduced[i] >= Preorder[i], name=f\"Preorder_Fulfillment_{i}\")\n\n# Add constraints to ensure systems are configured with compatible alternative memory\nM = 1e6  # Large constant to implement the big-M method\nfor i in range(N):\n    model.addConstr(SystemsProduced[i] <= M * IsCompatible[i], name=f\"compatibility_constraint_{i}\")\n\n# Add constraint to limit the total number of systems with alternative memory\nmodel.addConstr(gp.quicksum(IsCompatible[i] for i in range(N)) <= AltMemory, name=\"AltMemoryLimit\")\n\n# No additional constraint code needed because the variable \"IsProducedWorkstation\" has already been defined as binary.\n\n# Add compatibility constraints\nfor i in range(N):\n    model.addConstr(IsCompatible[i] <= AltCompatible[i], name=f\"compatibility_constraint_{i}\")\n\n# Add compatibility constraints\nfor i in range(N):\n    model.addConstr(IsCompatible[i] <= AltCompatible[i], name=f\"compatibility_constraint_{i}\")\n\n# Set objective\nmodel.setObjective(gp.quicksum(SystemsProduced[i] * Price[i] for i in range(N)), gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}