{
    "background": "The problem involves the distribution of electricity from multiple power plants to multiple cities, with the goal of minimizing the transmission costs while respecting the supply and demand constraints of the power plants and cities respectively.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of power plants",
            "symbol": "P",
            "value": "",
            "shape": [],
            "code": "P = data[\"P\"] # scalar parameter"
        },
        {
            "definition": "Number of cities",
            "symbol": "C",
            "value": "",
            "shape": [],
            "code": "C = data[\"C\"] # scalar parameter"
        },
        {
            "definition": "Electricity supply capacity of power plant p",
            "symbol": "Supply",
            "value": "",
            "shape": [
                "P"
            ],
            "code": "Supply = np.array(data[\"Supply\"]) # ['P']"
        },
        {
            "definition": "Electricity demand of city c",
            "symbol": "Demand",
            "value": "",
            "shape": [
                "C"
            ],
            "code": "Demand = np.array(data[\"Demand\"]) # ['C']"
        },
        {
            "definition": "Transmission cost from power plant p to city c",
            "symbol": "TransmissionCosts",
            "value": "",
            "shape": [
                "P",
                "C"
            ],
            "code": "TransmissionCosts = np.array(data[\"TransmissionCosts\"]) # ['P', 'C']"
        }
    ],
    "constraints": [
        {
            "description": "The total electricity transferred from each power plant to all cities must not exceed the supply capacity of that power plant.",
            "status": "coded",
            "formulation": "\\sum_{c=1}^{\\textup{C}} \\textup{ElectricityTransferred}_{p,c} \\leq \\textup{Supply}_{p}, \\quad \\forall p \\in \\{1, \\dots, \\textup{P}\\}",
            "related_variables": [
                "ElectricityTransferred"
            ],
            "related_parameters": [
                "Supply",
                "C",
                "P"
            ],
            "code": "# Add constraints to ensure that the total electricity transferred from each power plant does not exceed its supply capacity\nfor p in range(P):\n    model.addConstr(\n        gp.quicksum(ElectricityTransferred[p, c] for c in range(C)) <= Supply[p],\n        name=f\"electricity_transfer_limit_{p}\"\n    )"
        },
        {
            "description": "Each city's electricity demand must be satisfied by the total electricity transferred from all power plants.",
            "status": "coded",
            "formulation": "\\sum_{p=1}^{\\textup{P}} \\textup{ElectricityTransferred}_{p, c} = \\textup{Demand}_{c} \\quad \\forall c \\in \\{1, 2, \\dots, \\textup{C}\\}",
            "related_variables": [
                "ElectricityTransferred"
            ],
            "related_parameters": [
                "P",
                "C",
                "Demand"
            ],
            "code": "# Ensure each city's electricity demand is satisfied\nfor c in range(C):\n    model.addConstr(\n        gp.quicksum(ElectricityTransferred[p, c] for p in range(P)) == Demand[c], \n        name=f\"city_demand_satisfaction_{c}\"\n    )"
        },
        {
            "description": "The total electricity supplied to each city must meet its demand.",
            "status": "coded",
            "formulation": "\\sum_{p=1}^{\\textup{P}} \\textup{ElectricityTransferred}_{p, c} = \\textup{Demand}_{c}, \\quad \\forall c \\in \\{1, 2, \\dots, \\textup{C}\\}",
            "related_variables": [
                "ElectricityTransferred"
            ],
            "related_parameters": [
                "Demand",
                "P",
                "C"
            ],
            "code": "# Add constraints to ensure the total electricity supplied to each city meets its demand\nfor c in range(C):\n    model.addConstr(gp.quicksum(ElectricityTransferred[p, c] for p in range(P)) == Demand[c], name=f\"demand_constraint_city_{c}\")"
        },
        {
            "description": "The total electricity transferred from each power plant cannot exceed its supply capacity.",
            "status": "coded",
            "formulation": "\\sum_{c=1}^{C} \\textup{ElectricityTransferred}_{p,c} \\leq \\textup{Supply}_{p} \\quad \\forall \\, p \\in P",
            "related_variables": [
                "ElectricityTransferred"
            ],
            "related_parameters": [
                "Supply",
                "P",
                "C"
            ],
            "code": "# Add electricity transfer capacity constraints\nfor p in range(P):\n    model.addConstr(gp.quicksum(ElectricityTransferred[p, c] for c in range(C)) <= Supply[p], name=f\"electricity_transfer_capacity_{p}\")"
        },
        {
            "description": "Electricity sent from any power plant to any city is non-negative",
            "status": "coded",
            "formulation": "\\textup{ElectricityTransferred}_{\\textup{p,c}} \\geq 0, \\quad \\forall\\ \\textup{p} \\in \\{1, 2, ..., P\\}, \\ \\textup{c} \\in \\{1, 2, ..., C\\}",
            "related_variables": [
                "ElectricityTransferred"
            ],
            "related_parameters": [
                "P",
                "C"
            ],
            "code": "# Add non-negativity constraints for electricity transferred\nfor p in range(P):\n    for c in range(C):\n        model.addConstr(ElectricityTransferred[p, c] >= 0, name=f\"non_negativity_p{p}_c{c}\")"
        },
        {
            "description": "The total electricity transferred from each power plant should not exceed its supply capacity",
            "status": "coded",
            "formulation": "\\sum_{c=1}^{C} \\textup{ElectricityTransferred}_{p,c} \\leq \\textup{Supply}_{p}, \\quad \\forall p=1,\\dots,P.",
            "related_variables": [
                "ElectricityTransferred"
            ],
            "related_parameters": [
                "Supply",
                "P",
                "C"
            ],
            "code": "# Add electricity transfer constraints for each power plant\nfor p in range(P):\n    model.addConstr(gp.quicksum(ElectricityTransferred[p, c] for c in range(C)) <= Supply[p], name=f\"electricity_transfer_{p}\")"
        },
        {
            "description": "The total electricity received by each city should meet its electricity demand",
            "status": "coded",
            "formulation": "\\sum_{p=1}^{P} \\textup{ElectricityTransferred}_{p,c} = \\textup{Demand}_{c}, \\quad \\forall c=1,\\dots,C.",
            "related_variables": [
                "ElectricityTransferred"
            ],
            "related_parameters": [
                "Demand",
                "P",
                "C"
            ],
            "code": "# Add electricity demand constraints for each city\nfor c in range(C):\n    model.addConstr(\n        gp.quicksum(ElectricityTransferred[p, c] for p in range(P)) == Demand[c],\n        name=f\"electricity_demand_city_{c}\"\n    )"
        },
        {
            "description": "Electricity transferred from any power plant to any city cannot be negative",
            "status": "coded",
            "formulation": "\\textup{ElectricityTransferred}_{p,c} \\geq 0, \\quad \\forall p=1,\\dots,P, \\quad \\forall c=1,\\dots,C.",
            "related_variables": [
                "ElectricityTransferred"
            ],
            "related_parameters": [
                "P",
                "C"
            ],
            "code": "# Add non-negativity constraints for electricity transferred\nfor p in range(P):\n    for c in range(C):\n        model.addConstr(ElectricityTransferred[p, c] >= 0, name=f\"non_negativity_{p}_{c}\")"
        }
    ],
    "variables": [
        {
            "definition": "The amount of electricity transferred from power plant p to city c.",
            "symbol": "ElectricityTransferred",
            "shape": [
                "P",
                "C"
            ],
            "status": "coded",
            "code": "ElectricityTransferred = model.addVars(P, C, vtype=gp.GRB.CONTINUOUS, name=\"ElectricityTransferred\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total transmission cost from power plants to cities",
            "status": "coded",
            "formulation": "\\sum_{p=1}^{P} \\sum_{c=1}^{C} \\textup{TransmissionCosts}_{p,c} \\\\cdot \\textup{ElectricityTransferred}_{p,c}",
            "related_variables": [
                "ElectricityTransferred"
            ],
            "related_parameters": [
                "TransmissionCosts",
                "P",
                "C"
            ],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(TransmissionCosts[p, c] * ElectricityTransferred[p, c] for p in range(P) for c in range(C)), gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413171145_nlp4lp_55/",
    "problem_path": "data/nlp4lp/55/"
}