{
    "background": "The problem is to optimize total manpower requirement over a period of five years considering the manpower needed for two different operations (one and two) for producing various products every year. Stock levels, production capacities, demands, and input coefficients between products are also considered.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "The number of years over which the total manpower requirement is maximized",
            "symbol": "K",
            "value": 5,
            "shape": [],
            "code": "K = data[\"K\"] # scalar parameter"
        },
        {
            "definition": "Manpower requirements for operations one in year k",
            "symbol": "ManpowerOne",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "ManpowerOne = np.array(data[\"ManpowerOne\"]) # ['K']"
        },
        {
            "definition": "Manpower requirements for operations two in year k",
            "symbol": "ManpowerTwo",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "ManpowerTwo = np.array(data[\"ManpowerTwo\"]) # ['K']"
        },
        {
            "definition": "Stock level of product k at the beginning of the year",
            "symbol": "Stock",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "Stock = np.array(data[\"Stock\"]) # ['K']"
        },
        {
            "definition": "Production capacity for product k for the year",
            "symbol": "Capacity",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "Capacity = np.array(data[\"Capacity\"]) # ['K']"
        },
        {
            "definition": "Demand for product k for the year",
            "symbol": "Demand",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "Demand = np.array(data[\"Demand\"]) # ['K']"
        },
        {
            "definition": "Input one coefficient for product k with respect to product j",
            "symbol": "InputOne",
            "value": "",
            "shape": [
                "K",
                "K"
            ],
            "code": "InputOne = np.array(data[\"InputOne\"]) # ['K', 'K']"
        },
        {
            "definition": "Input two coefficient for product k with respect to product j",
            "symbol": "InputTwo",
            "value": "",
            "shape": [
                "K",
                "K"
            ],
            "code": "InputTwo = np.array(data[\"InputTwo\"]) # ['K', 'K']"
        }
    ],
    "constraints": [
        {
            "description": "The manpower utilized for Operation One in any year cannot exceed the available manpower requirement for Operation One in that year.",
            "status": "coded",
            "formulation": "\\textup{ManpowerUsedOne}_{k} \\leq \\textup{ManpowerOne}_{k}, \\quad \\forall k \\in \\{1, 2, \\dots, K\\}",
            "related_variables": [
                "ManpowerUsedOne"
            ],
            "related_parameters": [
                "ManpowerOne",
                "K"
            ],
            "code": "# Add manpower utilized constraint for Operation One\nfor k in range(K):\n    model.addConstr(ManpowerUsedOne[k] <= ManpowerOne[k], name=f\"ManpowerOne_limit_{k}\")"
        },
        {
            "description": "The manpower utilized for Operation Two in any year cannot exceed the available manpower requirement for Operation Two in that year.",
            "status": "coded",
            "formulation": "\\textup{ManpowerUsedTwo}_{k} \\leq \\textup{ManpowerTwo}_{k}, \\quad \\forall k \\in \\{1, 2, \\dots, K\\}",
            "related_variables": [
                "ManpowerUsedTwo"
            ],
            "related_parameters": [
                "ManpowerTwo",
                "K"
            ],
            "code": "# Add constraints to ensure manpower utilized for Operation Two does not exceed available manpower for each year\nfor k in range(K):\n    model.addConstr(ManpowerUsedTwo[k] <= ManpowerTwo[k], name=f\"manpower_two_limit_{k}\")"
        }
    ],
    "variables": [
        {
            "definition": "Amount of manpower utilized for Operation One in year k",
            "symbol": "ManpowerUsedOne",
            "shape": [
                "K"
            ],
            "status": "coded",
            "code": "ManpowerUsedOne = model.addVars(K, vtype=gp.GRB.CONTINUOUS, name=\"ManpowerUsedOne\")"
        },
        {
            "definition": "Amount of manpower utilized for Operation Two in year k",
            "symbol": "ManpowerUsedTwo",
            "shape": [
                "K"
            ],
            "status": "coded",
            "code": "ManpowerUsedTwo = model.addVars(K, vtype=gp.GRB.CONTINUOUS, name=\"ManpowerUsedTwo\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total manpower requirements (sum of Operation One and Operation Two) over a five-year period.",
            "status": "coded",
            "formulation": "\\textup{Maximize:} \\quad \\sum_{k=1}^{K} (\\textup{ManpowerUsedOne}_{k} + \\textup{ManpowerUsedTwo}_{k})",
            "related_variables": [
                "ManpowerUsedOne",
                "ManpowerUsedTwo"
            ],
            "related_parameters": [
                "ManpowerOne",
                "ManpowerTwo",
                "K"
            ],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(ManpowerUsedOne[k] + ManpowerUsedTwo[k] for k in range(K)), gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413153902_nlp4lp_29/",
    "problem_path": "data/nlp4lp/29/"
}