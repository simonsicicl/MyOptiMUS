{
    "background": "The goal is to maximize total net income from producing various products with constraints on initial cash, machine hours, and production costs. Part of the income is to be reinvested, and there is an option to upgrade machinery.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of products",
            "symbol": "P",
            "value": "",
            "shape": [],
            "code": "P = data[\"P\"] # scalar parameter"
        },
        {
            "definition": "Initial cash available for investment",
            "symbol": "Cash",
            "value": "",
            "shape": [],
            "code": "Cash = data[\"Cash\"] # scalar parameter"
        },
        {
            "definition": "Hours required to produce one unit of product i",
            "symbol": "Hour",
            "value": "",
            "shape": [
                "P"
            ],
            "code": "Hour = np.array(data[\"Hour\"]) # ['P']"
        },
        {
            "definition": "Cost to produce one unit of product i",
            "symbol": "Cost",
            "value": "",
            "shape": [
                "P"
            ],
            "code": "Cost = np.array(data[\"Cost\"]) # ['P']"
        },
        {
            "definition": "Selling price for one unit of product i",
            "symbol": "Price",
            "value": "",
            "shape": [
                "P"
            ],
            "code": "Price = np.array(data[\"Price\"]) # ['P']"
        },
        {
            "definition": "Percentage of income to reinvest for product i",
            "symbol": "InvestPercentage",
            "value": "",
            "shape": [
                "P"
            ],
            "code": "InvestPercentage = np.array(data[\"InvestPercentage\"]) # ['P']"
        },
        {
            "definition": "Hours required for upgrading the machinery",
            "symbol": "UpgradeHours",
            "value": "",
            "shape": [],
            "code": "UpgradeHours = data[\"UpgradeHours\"] # scalar parameter"
        },
        {
            "definition": "Cost associated with upgrading the machinery",
            "symbol": "UpgradeCost",
            "value": "",
            "shape": [],
            "code": "UpgradeCost = data[\"UpgradeCost\"] # scalar parameter"
        },
        {
            "definition": "Total available machine hours",
            "symbol": "AvailableHours",
            "value": "",
            "shape": [],
            "code": "AvailableHours = data[\"AvailableHours\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The total initial cash requirement, including production and optional machinery upgrade costs, must not exceed the available initial cash (Cash).",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{P}} \\textup{ProducedUnits}_{i} \\cdot \\textup{Cost}_{i} + \\textup{UpgradePerformed} \\cdot \\textup{UpgradeCost} \\leq \\textup{Cash}",
            "related_variables": [
                "ProducedUnits",
                "UpgradePerformed"
            ],
            "related_parameters": [
                "Cost",
                "UpgradeCost",
                "Cash"
            ],
            "code": "# Add total initial cash requirement constraint\nmodel.addConstr(\n    gp.quicksum(ProducedUnits[i] * Cost[i] for i in range(P)) + UpgradePerformed * UpgradeCost <= Cash,\n    name=\"initial_cash_requirement\"\n)"
        },
        {
            "description": "The total production hours for all products and (if applicable) upgrading the machinery must not exceed AvailableHours.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{P}} \\textup{ProducedUnits}_{i} \\times \\textup{Hour}_{i} + \\textup{UpgradePerformed} \\times \\textup{UpgradeHours} \\leq \\textup{AvailableHours}",
            "related_variables": [
                "ProducedUnits",
                "UpgradePerformed"
            ],
            "related_parameters": [
                "Hour",
                "UpgradeHours",
                "AvailableHours"
            ],
            "code": "# Add constraint to ensure total production hours and upgrade hours do not exceed available hours\nmodel.addConstr(\n    gp.quicksum(ProducedUnits[i] * Hour[i] for i in range(P)) + UpgradePerformed * UpgradeHours <= AvailableHours,\n    name=\"total_production_hours\"\n)"
        },
        {
            "description": "Total cost to produce all products (including optional upgrade cost) must not exceed initial cash available.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{P}} (\\textup{Cost}_{i} \\times \\textup{ProducedUnits}_{i}) + (\\textup{UpgradeCost} \\times \\textup{UpgradePerformed}) \\leq \\textup{Cash}",
            "related_variables": [
                "ProducedUnits",
                "UpgradePerformed"
            ],
            "related_parameters": [
                "P",
                "Cost",
                "UpgradeCost",
                "Cash"
            ],
            "code": "# Add total cost constraint\nmodel.addConstr(\n    gp.quicksum(Cost[i] * ProducedUnits[i] for i in range(P)) + UpgradeCost * UpgradePerformed <= Cash,\n    name=\"total_cost_constraint\"\n)"
        },
        {
            "description": "The cost to upgrade machinery must not exceed available cash",
            "status": "coded",
            "formulation": "\\textup{UpgradePerformed} \\cdot \\textup{UpgradeCost} \\leq \\textup{Cash}",
            "related_variables": [
                "UpgradePerformed"
            ],
            "related_parameters": [
                "UpgradeCost",
                "Cash"
            ],
            "code": "# Add constraint ensuring that the cost to upgrade machinery does not exceed available cash\nmodel.addConstr(UpgradePerformed * UpgradeCost <= Cash, name=\"upgrade_cost_constraint\")"
        },
        {
            "description": "The total machine hours for production and upgrading do not exceed available machine hours.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{P}} (\\textup{ProducedUnits}_i \\cdot \\textup{Hour}_i) + (\\textup{UpgradePerformed} \\cdot \\textup{UpgradeHours}) \\leq \\textup{AvailableHours}",
            "related_variables": [
                "ProducedUnits",
                "UpgradePerformed"
            ],
            "related_parameters": [
                "Hour",
                "UpgradeHours",
                "AvailableHours"
            ],
            "code": "# Add total machine hours constraint\nmodel.addConstr(\n    gp.quicksum(ProducedUnits[i] * Hour[i] for i in range(P)) + (UpgradePerformed * UpgradeHours) <= AvailableHours,\n    name=\"machine_hours_constraint\"\n)"
        },
        {
            "description": "The decision variable UpgradePerformed must be binary (0 or 1) to indicate whether machinery is upgraded.",
            "status": "coded",
            "formulation": "\\textup{UpgradePerformed} \\in \\{0, 1\\}",
            "related_variables": [
                "UpgradePerformed"
            ],
            "related_parameters": [],
            "code": "# No additional code needed as the variable UpgradePerformed is already defined as binary"
        },
        {
            "description": "Limit the total machine hours used to be within available hours (including upgrades).",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{P}} \\textup{ProducedUnits}_{i} \\cdot \\textup{Hour}_{i} + \\textup{UpgradePerformed} \\cdot \\textup{UpgradeHours} \\leq \\textup{AvailableHours}",
            "related_variables": [
                "ProducedUnits",
                "UpgradePerformed"
            ],
            "related_parameters": [
                "Hour",
                "UpgradeHours",
                "AvailableHours",
                "P"
            ],
            "code": "# Add total machine hours constraint\nmodel.addConstr(\n    gp.quicksum(ProducedUnits[i] * Hour[i] for i in range(P)) + UpgradePerformed * UpgradeHours <= AvailableHours,\n    name=\"machine_hours_limit\"\n)"
        },
        {
            "description": "Limit the total cash spent to not exceed the initial available cash.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{P}} \\textup{ProducedUnits}_{i} \\cdot \\textup{Cost}_{i} + \\textup{UpgradePerformed} \\cdot \\textup{UpgradeCost} \\leq \\textup{Cash}",
            "related_variables": [
                "ProducedUnits",
                "UpgradePerformed"
            ],
            "related_parameters": [
                "Cost",
                "UpgradeCost",
                "Cash",
                "P"
            ],
            "code": "# Add cash usage constraint\nmodel.addConstr(\n    gp.quicksum(ProducedUnits[i] * Cost[i] for i in range(P)) + UpgradePerformed * UpgradeCost <= Cash,\n    name=\"cash_limit\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "Number of units of product i produced",
            "symbol": "ProducedUnits",
            "shape": [
                "P"
            ],
            "status": "coded",
            "code": "ProducedUnits = model.addVars(P, vtype=gp.GRB.CONTINUOUS, name=\"ProducedUnits\")"
        },
        {
            "definition": "Binary variable indicating whether the machinery is upgraded (1 if upgraded, 0 otherwise)",
            "symbol": "UpgradePerformed",
            "shape": [],
            "status": "coded",
            "code": "UpgradePerformed = model.addVar(vtype=gp.GRB.BINARY, name=\"UpgradePerformed\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize net income considering production revenue, costs, reinvestment, and upgrade costs.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{P}} \\textup{ProducedUnits}_{i} \\cdot \\textup{Price}_{i} - \\sum_{i=1}^{\\textup{P}} \\textup{ProducedUnits}_{i} \\cdot \\textup{Cost}_{i} - \\sum_{i=1}^{\\textup{P}} \\textup{ProducedUnits}_{i} \\cdot \\textup{Price}_{i} \\cdot \\textup{InvestPercentage}_{i} - \\textup{UpgradePerformed} \\cdot \\textup{UpgradeCost}",
            "related_variables": [
                "ProducedUnits",
                "UpgradePerformed"
            ],
            "related_parameters": [
                "Price",
                "Cost",
                "InvestPercentage",
                "UpgradeCost",
                "P"
            ],
            "code": "# Set objective\nmodel.setObjective(\n    gp.quicksum(\n        ProducedUnits[i] * Price[i] - \n        ProducedUnits[i] * Cost[i] - \n        ProducedUnits[i] * Price[i] * InvestPercentage[i] \n        for i in range(P)\n    ) - UpgradePerformed * UpgradeCost,\n    gp.GRB.MAXIMIZE\n)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413171935_nlp4lp_15/",
    "problem_path": "data/nlp4lp/15/"
}