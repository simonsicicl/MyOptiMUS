{
    "background": "The problem involves determining an optimal production schedule that minimizes the total cost, taking into account regular and overtime production along with storage.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Demand of product n",
            "symbol": "Demand",
            "value": "",
            "shape": [
                "N"
            ],
            "code": "Demand = np.array(data[\"Demand\"]) # ['N']"
        },
        {
            "definition": "Maximum production amount under regular conditions",
            "symbol": "MaxRegularAmount",
            "value": "",
            "shape": [],
            "code": "MaxRegularAmount = data[\"MaxRegularAmount\"] # scalar parameter"
        },
        {
            "definition": "Cost of production under regular conditions per unit",
            "symbol": "CostRegular",
            "value": "",
            "shape": [],
            "code": "CostRegular = data[\"CostRegular\"] # scalar parameter"
        },
        {
            "definition": "Cost of production under overtime conditions per unit",
            "symbol": "CostOvertime",
            "value": "",
            "shape": [],
            "code": "CostOvertime = data[\"CostOvertime\"] # scalar parameter"
        },
        {
            "definition": "Cost to store one unit of product",
            "symbol": "StoreCost",
            "value": "",
            "shape": [],
            "code": "StoreCost = data[\"StoreCost\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Total production (regular and overtime) must meet or exceed demand for each product",
            "status": "coded",
            "formulation": "\\textup{RegularProduction}_n + \\textup{OvertimeProduction}_n \\geq \\textup{Demand}_n \\quad \\forall n \\in N",
            "related_variables": [
                "RegularProduction",
                "OvertimeProduction"
            ],
            "related_parameters": [
                "Demand"
            ],
            "code": "# Ensure total production meets or exceeds demand for each product\nfor n in N:\n    model.addConstr((RegularProduction[n] + OvertimeProduction[n] >= Demand[n]), name=\"demand_meet_\"+str(n))"
        },
        {
            "description": "Maximum production under regular conditions cannot exceed MaxRegularAmount for each product n",
            "status": "coded",
            "formulation": "\\forall n: \\quad \\textup{RegularProduction}_{n} \\leq \\textup{MaxRegularAmount}",
            "related_variables": [
                "RegularProduction"
            ],
            "related_parameters": [
                "MaxRegularAmount"
            ],
            "code": "# Add maximum production constraints under regular conditions for each product n\nfor n in range(N):\n    model.addConstr(RegularProduction[n] <= MaxRegularAmount, name=\"max_regular_prod_{}\".format(n))"
        }
    ],
    "variables": [
        {
            "definition": "Amount of product n produced under regular conditions",
            "symbol": "RegularProduction",
            "shape": [
                "N"
            ],
            "status": "coded",
            "code": "RegularProduction = model.addVars(N, vtype=gp.GRB.CONTINUOUS, name=\"RegularProduction\")"
        },
        {
            "definition": "Amount of product n produced under overtime conditions",
            "symbol": "OvertimeProduction",
            "shape": [
                "N"
            ],
            "status": "coded",
            "code": "OvertimeProduction = model.addVars(N, vtype=gp.GRB.CONTINUOUS, name=\"OvertimeProduction\")"
        },
        {
            "definition": "Amount of product n stored",
            "symbol": "StoredUnits",
            "shape": [
                "N"
            ],
            "status": "coded",
            "code": "StoredUnits = model.addVars(N, vtype=gp.GRB.CONTINUOUS, name=\"StoredUnits\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cost of production and storage",
            "status": "coded",
            "formulation": "\\min \\left( \\sum_{n=1}^{N} (\\textup{CostRegular} \\cdot \\textup{RegularProduction}_{n} + \\textup{CostOvertime} \\cdot \\textup{OvertimeProduction}_{n} + \\textup{StoreCost} \\cdot \\textup{StoredUnits}_{n}) \\right)",
            "related_variables": [
                "RegularProduction",
                "OvertimeProduction",
                "StoredUnits"
            ],
            "related_parameters": [
                "CostRegular",
                "CostOvertime",
                "StoreCost"
            ],
            "code": "# Set objective function\nmodel.setObjective(\n    gp.quicksum(\n        CostRegular * RegularProduction[n] +\n        CostOvertime * OvertimeProduction[n] +\n        StoreCost * StoredUnits[n]\n        for n in range(N)\n    ),\n    gp.GRB.MINIMIZE\n)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413091618_nlp4lp_41/",
    "problem_path": "data/nlp4lp/41/"
}