{
    "background": "The problem involves assigning student groups from various neighborhoods to different schools with the aim of minimizing the total distance traveled by all students, taking into consideration the capacity of the schools and distribution of student groups.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total number of schools",
            "symbol": "S",
            "value": "",
            "shape": [],
            "code": "S = data[\"S\"] # scalar parameter"
        },
        {
            "definition": "Total number of student groups",
            "symbol": "G",
            "value": "",
            "shape": [],
            "code": "G = data[\"G\"] # scalar parameter"
        },
        {
            "definition": "Total number of neighborhoods",
            "symbol": "N",
            "value": "",
            "shape": [],
            "code": "N = data[\"N\"] # scalar parameter"
        },
        {
            "definition": "Capacity of school s for student group g",
            "symbol": "Capacity",
            "value": "",
            "shape": [
                "S",
                "G"
            ],
            "code": "Capacity = np.array(data[\"Capacity\"]) # ['S', 'G']"
        },
        {
            "definition": "Population of student group g in neighborhood n",
            "symbol": "Population",
            "value": "",
            "shape": [
                "N",
                "G"
            ],
            "code": "Population = np.array(data[\"Population\"]) # ['N', 'G']"
        },
        {
            "definition": "Distance between neighborhood n and school s",
            "symbol": "Distance",
            "value": "",
            "shape": [
                "N",
                "S"
            ],
            "code": "Distance = np.array(data[\"Distance\"]) # ['N', 'S']"
        }
    ],
    "constraints": [
        {
            "description": "Total number of students from each student group assigned from neighborhoods to schools does not exceed the group's population in those neighborhoods",
            "status": "coded",
            "formulation": "\\sum_{s=1}^{S} \\textup{Assignment}_{n, g, s} \\leq \\textup{Population}_{n, g} \\quad \\forall g \\in G, \\quad \\forall n \\in N",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Population"
            ],
            "code": "# Ensure that the total number of students assigned to schools does not exceed the population in the neighborhoods for each student group\nfor g in range(G):\n    for n in range(N):\n        model.addConstr(gp.quicksum(Assignment[n, g, s] for s in range(S)) <= Population[n, g], name=f\"pop_limit_g{g}_n{n}\")"
        },
        {
            "description": "Total number of students from each student group g assigned to school s does not exceed the Capacity of school s for student group g",
            "status": "coded",
            "formulation": "\\sum_{n=1}^{N} \\textup{Assignment}_{n,g,s} \\leq \\textup{Capacity}_{s,g} \\quad \\forall g \\in \\{1, \\ldots, G\\}, s \\in \\{1, \\ldots, S\\}",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Capacity"
            ],
            "code": "# Add constraints to ensure the total number of students from each student group assigned to a school does not exceed its capacity for that group\nfor g in range(G):\n    for s in range(S):\n        model.addConstr(gp.quicksum(Assignment[n, g, s] for n in range(N)) <= Capacity[s, g], \n                        name=f\"capacity_school_{s}_group_{g}\")"
        },
        {
            "description": "Each student group from the neighborhood must be assigned to exactly one school",
            "status": "coded",
            "formulation": "\\sum_{s=1}^{S} \\textup{Assignment}_{n,g,s} = \\textup{Population}_{n,g} \\quad \\forall n \\in \\{1, ..., N\\}, \\quad \\forall g \\in \\{1, ..., G\\}",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Population"
            ],
            "code": "# Ensure each student group from the neighborhood is assigned to exactly one school\nfor n in range(N):\n    for g in range(G):\n        model.addConstr(gp.quicksum(Assignment[n, g, s] for s in range(S)) == Population[n, g], \n                        name=f\"one_school_assignment_group_{n}_{g}\")"
        },
        {
            "description": "All populations, capacities, and distances are non-negative",
            "status": "coded",
            "formulation": "\\forall g \\in G, \\forall n \\in N, \\forall s \\in S, \\quad \\textup{Population}_{ng} \\geq 0 \\quad \\wedge \\quad \\textup{Capacity}_{sg} \\geq 0 \\quad \\wedge \\quad \\textup{Distance}_{ns} \\geq 0",
            "related_variables": [],
            "related_parameters": [
                "Population",
                "Capacity",
                "Distance"
            ],
            "code": "# As all populations, capacities, and distances are parameters, we don't need to write constraints for those,\n# but we can include sanity checks to ensure they are non-negative after they are loaded from the data.\nassert np.all(Population >= 0), \"All population values should be non-negative.\"\nassert np.all(Capacity >= 0), \"All capacity values should be non-negative.\"\nassert np.all(Distance >= 0), \"All distance values should be non-negative.\""
        },
        {
            "description": "Each student group from a neighborhood must be assigned to only one school and it should satisfy the population from that neighborhood",
            "status": "runtime_error",
            "formulation": "\\forall g \\in G, \\forall n \\in N, \\quad \\sum_{s=1}^{S} \\textup{Assignment}_{n,g,s} = \\textup{Population}_{n,g}",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Population"
            ],
            "code": "# Add constraint: Each student group from a neighborhood must be assigned to only one school\nfor g in G:\n    for n in N:\n        model.addConstr(gp.quicksum(Assignment[n, g, s] for s in S) == Population[n, g], name=\"assign_one_school_{}_{}\".format(n, g))"
        },
        {
            "description": "The assignment should not exceed the capacity of the schools for each student group",
            "status": "coded",
            "formulation": "\\forall g \\in G, \\forall s \\in S, \\quad \\sum_{n=1}^{N} \\textup{Assignment}_{n,g,s} \\leq \\textup{Capacity}_{s,g}",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Capacity"
            ],
            "code": "# Add school capacity constraints for each student group\nfor g in range(G):\n    for s in range(S):\n        model.addConstr(gp.quicksum(Assignment[n, g, s] for n in range(N)) <= Capacity[s, g], name=f\"capacity_group_{g}_school_{s}\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of students from student group g in neighborhood n assigned to school s",
            "symbol": "Assignment",
            "shape": [
                "N",
                "G",
                "S"
            ],
            "status": "coded",
            "code": "Assignment = model.addVars(N, G, S, vtype=gp.GRB.INTEGER, name=\"Assignment\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total distance traveled by all students in their assignments to schools",
            "status": "coded",
            "formulation": "\\textup{Minimize}\\quad \\sum_{n=1}^{N} \\sum_{g=1}^{G} \\sum_{s=1}^{S} \\textup{Distance}_{n,s} \\times \\textup{Assignment}_{n,g,s}",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Distance"
            ],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(Distance[n, s] * Assignment[n, g, s] for n in range(N) for g in range(G) for s in range(S)), gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "runtime_error",
    "solver_output_status": "runtime_error",
    "error_message": "Traceback (most recent call last):\n  File \"c:\\Users\\Simon\\Desktop\\Courses\\ECE 570\\ECE570_Project\\MyOptiMUS\\evaluator.py\", line 45, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 2, in <module>\nTypeError: 'int' object is not iterable\n",
    "obj_val": null,
    "log_path": "logs/log_20250413073304_nlp4lp_11/",
    "problem_path": "data/nlp4lp/11/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nlp4lp/11/data.json\", \"r\") as f:\n    data = json.load(f)\n"
}