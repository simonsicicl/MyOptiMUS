{
    "background": "The problem involves assigning student groups from various neighborhoods to different schools with the aim of minimizing the total distance traveled by all students, taking into consideration the capacity of the schools and distribution of student groups.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total number of schools",
            "symbol": "S",
            "value": "",
            "shape": [],
            "code": "S = data[\"S\"] # scalar parameter"
        },
        {
            "definition": "Total number of student groups",
            "symbol": "G",
            "value": "",
            "shape": [],
            "code": "G = data[\"G\"] # scalar parameter"
        },
        {
            "definition": "Total number of neighborhoods",
            "symbol": "N",
            "value": "",
            "shape": [],
            "code": "N = data[\"N\"] # scalar parameter"
        },
        {
            "definition": "Capacity of school s for student group g",
            "symbol": "Capacity",
            "value": "",
            "shape": [
                "S",
                "G"
            ],
            "code": "Capacity = np.array(data[\"Capacity\"]) # ['S', 'G']"
        },
        {
            "definition": "Population of student group g in neighborhood n",
            "symbol": "Population",
            "value": "",
            "shape": [
                "N",
                "G"
            ],
            "code": "Population = np.array(data[\"Population\"]) # ['N', 'G']"
        },
        {
            "definition": "Distance between neighborhood n and school s",
            "symbol": "Distance",
            "value": "",
            "shape": [
                "N",
                "S"
            ],
            "code": "Distance = np.array(data[\"Distance\"]) # ['N', 'S']"
        }
    ],
    "constraints": [
        {
            "description": "Total number of students from each student group assigned from neighborhoods to schools does not exceed the group's population in those neighborhoods",
            "status": "formulated",
            "formulation": "\\sum_{s=1}^{S} \\textup{Assignment}_{n, g, s} \\leq \\textup{Population}_{n, g} \\quad \\forall g \\in G, \\quad \\forall n \\in N",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Population"
            ]
        },
        {
            "description": "Total number of students from each student group g assigned to school s does not exceed the Capacity of school s for student group g",
            "status": "formulated",
            "formulation": "\\sum_{n=1}^{N} \\textup{Assignment}_{n,g,s} \\leq \\textup{Capacity}_{s,g} \\quad \\forall g \\in \\{1, \\ldots, G\\}, s \\in \\{1, \\ldots, S\\}",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Capacity"
            ]
        },
        {
            "description": "Each student group from the neighborhood must be assigned to exactly one school",
            "status": "formulated",
            "formulation": "\\sum_{s=1}^{S} \\textup{Assignment}_{n,g,s} = \\textup{Population}_{n,g} \\quad \\forall n \\in \\{1, ..., N\\}, \\quad \\forall g \\in \\{1, ..., G\\}",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Population"
            ]
        },
        {
            "description": "All populations, capacities, and distances are non-negative",
            "status": "formulated",
            "formulation": "\\forall g \\in G, \\forall n \\in N, \\forall s \\in S, \\quad \\textup{Population}_{ng} \\geq 0 \\quad \\wedge \\quad \\textup{Capacity}_{sg} \\geq 0 \\quad \\wedge \\quad \\textup{Distance}_{ns} \\geq 0",
            "related_variables": [],
            "related_parameters": [
                "Population",
                "Capacity",
                "Distance"
            ]
        },
        {
            "description": "Each student group from a neighborhood must be assigned to only one school and it should satisfy the population from that neighborhood",
            "status": "formulated",
            "formulation": "\\forall g \\in G, \\forall n \\in N, \\quad \\sum_{s=1}^{S} \\textup{Assignment}_{n,g,s} = \\textup{Population}_{n,g}",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Population"
            ]
        },
        {
            "description": "The assignment should not exceed the capacity of the schools for each student group",
            "status": "formulated",
            "formulation": "\\forall g \\in G, \\forall s \\in S, \\quad \\sum_{n=1}^{N} \\textup{Assignment}_{n,g,s} \\leq \\textup{Capacity}_{s,g}",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Capacity"
            ]
        }
    ],
    "variables": [
        {
            "definition": "Number of students from student group g in neighborhood n assigned to school s",
            "symbol": "Assignment",
            "shape": [
                "N",
                "G",
                "S"
            ],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total distance traveled by all students in their assignments to schools",
            "status": "formulated",
            "formulation": "\\textup{Minimize}\\quad \\sum_{n=1}^{N} \\sum_{g=1}^{G} \\sum_{s=1}^{S} \\textup{Distance}_{n,s} \\times \\textup{Assignment}_{n,g,s}",
            "related_variables": [
                "Assignment"
            ],
            "related_parameters": [
                "Distance"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413073304_nlp4lp_11/",
    "problem_path": "data/nlp4lp/11/"
}