{
    "background": "Determine the amount of regular and overtime labor to be used weekly for assembling baskets to maximize seasonal profit, considering labor costs, assembly time, material costs, selling price, holding costs, and salvage value.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Cost of regular labor per unit of time",
            "symbol": "RegularCost",
            "value": 0.0,
            "shape": [],
            "code": "RegularCost = data[\"RegularCost\"] # scalar parameter"
        },
        {
            "definition": "Cost of overtime labor per unit of time",
            "symbol": "OvertimeCost",
            "value": 0.0,
            "shape": [],
            "code": "OvertimeCost = data[\"OvertimeCost\"] # scalar parameter"
        },
        {
            "definition": "Time required to assemble a single basket",
            "symbol": "AssemblyTime",
            "value": 0.0,
            "shape": [],
            "code": "AssemblyTime = data[\"AssemblyTime\"] # scalar parameter"
        },
        {
            "definition": "Cost of materials per basket",
            "symbol": "MaterialCost",
            "value": 0.0,
            "shape": [],
            "code": "MaterialCost = data[\"MaterialCost\"] # scalar parameter"
        },
        {
            "definition": "Selling price per basket",
            "symbol": "SellingPrice",
            "value": 0.0,
            "shape": [],
            "code": "SellingPrice = data[\"SellingPrice\"] # scalar parameter"
        },
        {
            "definition": "Holding cost per basket per unit of time",
            "symbol": "HoldingCost",
            "value": 0.0,
            "shape": [],
            "code": "HoldingCost = data[\"HoldingCost\"] # scalar parameter"
        },
        {
            "definition": "Salvage value per unsold basket at the end of the season",
            "symbol": "SalvageValue",
            "value": 0.0,
            "shape": [],
            "code": "SalvageValue = data[\"SalvageValue\"] # scalar parameter"
        },
        {
            "definition": "Demand for baskets in week w",
            "symbol": "Demand",
            "value": 0.0,
            "shape": [
                "W"
            ],
            "code": "Demand = np.array(data[\"Demand\"]) # ['W']"
        },
        {
            "definition": "Number of regular labor units available in week w",
            "symbol": "RegularLabor",
            "value": 0.0,
            "shape": [
                "W"
            ],
            "code": "RegularLabor = np.array(data[\"RegularLabor\"]) # ['W']"
        },
        {
            "definition": "Number of overtime labor units available in week w",
            "symbol": "OvertimeLabor",
            "value": 0.0,
            "shape": [
                "W"
            ],
            "code": "OvertimeLabor = np.array(data[\"OvertimeLabor\"]) # ['W']"
        }
    ],
    "constraints": [
        {
            "description": "Regular labor used in any week is at most the available regular labor for that week",
            "status": "coded",
            "formulation": "\\textup{RegularLaborUsed}_{w} \\leq \\textup{RegularLabor}_{w} \\quad \\forall w \\in \\{1, 2, \\ldots, W\\}",
            "related_variables": [
                "RegularLaborUsed"
            ],
            "related_parameters": [
                "RegularLabor"
            ],
            "code": "# Add constraint for regular labor used not exceeding available labor\nfor w in range(W):\n    model.addConstr(RegularLaborUsed[w] <= RegularLabor[w], \n                    name=\"regular_labor_week_{}\".format(w))"
        },
        {
            "description": "Overtime labor used in any week is at most the available overtime labor units for that week",
            "status": "coded",
            "formulation": "OvertimeLaborUsed_{w} \\leq \\textup{OvertimeLabor}_{w} \\quad \\forall w \\in \\{1, \\dots, W\\}",
            "related_variables": [
                "OvertimeLaborUsed"
            ],
            "related_parameters": [
                "OvertimeLabor"
            ],
            "code": "# Add constraints for the maximum available overtime labor in any week\nfor w in range(W):\n    model.addConstr(OvertimeLaborUsed[w] <= OvertimeLabor[w], name=f\"overtime_limit_week_{w}\")"
        },
        {
            "description": "Total assembly time in a week is limited by the sum of regular and overtime labor available",
            "status": "coded",
            "formulation": "\\textup{RegularLaborUsed}_{w} + \\textup{OvertimeLaborUsed}_{w} \\leq \\textup{RegularLabor}_{w} + \\textup{OvertimeLabor}_{w} \\quad \\forall w \\in W",
            "related_variables": [
                "RegularLaborUsed",
                "OvertimeLaborUsed"
            ],
            "related_parameters": [
                "RegularLabor",
                "OvertimeLabor"
            ],
            "code": "# Add constraint to limit total assembly time by regular and overtime labor available\nfor w in W:\n    model.addConstr((RegularLaborUsed[w] + OvertimeLaborUsed[w] <= RegularLabor[w] + OvertimeLabor[w]), name=f\"labor_limit_week_{w}\")"
        },
        {
            "description": "Total number of baskets assembled must match weekly demand",
            "status": "coded",
            "formulation": "\\sum_{w=1}^{W} (\\frac{\\textup{RegularLaborUsed}_{w}}{\\textup{AssemblyTime}} + \\frac{\\textup{OvertimeLaborUsed}_{w}}{\\textup{AssemblyTime}}) = \\sum_{w=1}^{W} \\textup{Demand}_{w}",
            "related_variables": [
                "RegularLaborUsed",
                "OvertimeLaborUsed"
            ],
            "related_parameters": [
                "AssemblyTime",
                "Demand"
            ],
            "code": "# Add constraint to match total number of baskets assembled to weekly demand\ntotal_baskets_assembled = gp.quicksum((RegularLaborUsed[w]/AssemblyTime + OvertimeLaborUsed[w]/AssemblyTime) for w in range(W))\ntotal_demand = gp.quicksum(Demand[w] for w in range(W))\nmodel.addConstr(total_baskets_assembled == total_demand, name=\"demand_matching\")"
        },
        {
            "description": "The number of baskets assembled in each week must be non-negative",
            "status": "coded",
            "formulation": "\\forall w \\in W, \\quad \\textup{BasketsAssembled}_w \\geq 0",
            "related_variables": [
                "BasketsAssembled"
            ],
            "related_parameters": [],
            "code": "# Ensure that the number of baskets assembled each week is non-negative\nfor w in W:\n    model.addConstr(BasketsAssembled[w] >= 0, name=f\"BasketsAssembled_nonneg_{w}\")"
        },
        {
            "description": "Regular labor used must be non-negative",
            "status": "coded",
            "formulation": "\\textup{RegularLaborUsed}_{w} \\geq 0 \\quad \\forall w \\in W",
            "related_variables": [
                "RegularLaborUsed"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure regular labor used is non-negative\nfor w in W:\n    model.addConstr(RegularLaborUsed[w] >= 0, name=\"RegularLaborNonNegativity\")"
        },
        {
            "description": "Overtime labor used must be non-negative",
            "status": "coded",
            "formulation": "\\forall w \\in W, \\quad \\textup{OvertimeLaborUsed}_{w} \\geq 0",
            "related_variables": [
                "OvertimeLaborUsed"
            ],
            "related_parameters": [],
            "code": "# Ensure overtime labor used is non-negative\nfor w in W:\n    model.addConstr(OvertimeLaborUsed[w] >= 0, name=f\"non_negative_overtime_w{w}\")"
        },
        {
            "description": "The number of baskets held in storage must be the accumulated difference between baskets assembled and baskets sold up to each week w minus the surplus sold for salvage",
            "status": "coded",
            "formulation": "\\forall w \\in \\{1, \\ldots, W\\}, \\quad \\textup{BasketsHeld}_w = \\textup{max}(0, \\sum_{u=1}^{w} (\\textup{BasketsAssembled}_u - \\textup{Demand}_u) - \\textup{BasketsSalvaged})",
            "related_variables": [
                "BasketsAssembled",
                "BasketsHeld",
                "BasketsSalvaged"
            ],
            "related_parameters": [
                "Demand"
            ],
            "code": "# Constraint: Number of baskets held in storage must be the accumulated difference between baskets assembled and baskets sold up to each week w minus the surplus sold for salvage\nfor w in range(W):\n    model.addConstr(BasketsHeld[w] == gp.max_(0, gp.quicksum(BasketsAssembled[u] - Demand[u] for u in range(w+1)) - BasketsSalvaged), name=f\"BasketsHeld_week_{w}\")"
        },
        {
            "description": "The number of baskets assembled cannot exceed the total available labor time divided by the time required to assemble a single basket",
            "status": "coded",
            "formulation": "\\forall w \\in \\{1, \\ldots, W\\}, \\quad \\textup{BasketsAssembled}_w \\leq (\\textup{RegularLaborUsed}_w + \\textup{OvertimeLaborUsed}_w) / \\textup{AssemblyTime}",
            "related_variables": [
                "RegularLaborUsed",
                "OvertimeLaborUsed",
                "BasketsAssembled"
            ],
            "related_parameters": [
                "AssemblyTime"
            ],
            "code": "# Add constraints for the number of baskets assembled not exceeding available labor time\nfor w in range(W):\n    model.addConstr(BasketsAssembled[w] <= (RegularLaborUsed[w] + OvertimeLaborUsed[w]) / AssemblyTime, name=f\"BasketsAssembled_limit_week_{w}\")"
        }
    ],
    "variables": [
        {
            "definition": "Amount of regular labor used in week w",
            "symbol": "RegularLaborUsed",
            "shape": [
                "W"
            ],
            "status": "coded",
            "code": "W = range(1, num_periods+1)\\nRegularLaborUsed = model.addVars(W, vtype=gp.GRB.CONTINUOUS, name='RegularLaborUsed')"
        },
        {
            "definition": "Amount of overtime labor used in week w",
            "symbol": "OvertimeLaborUsed",
            "shape": [
                "W"
            ],
            "status": "coded",
            "code": "OvertimeLaborUsed = model.addVars(W, vtype=gp.GRB.CONTINUOUS, name=\"OvertimeLaborUsed\")"
        },
        {
            "definition": "Number of baskets assembled in week w",
            "symbol": "BasketsAssembled",
            "shape": [
                "W"
            ],
            "status": "coded",
            "code": "BasketsAssembled = model.addVars(W, vtype=gp.GRB.INTEGER, name=\"BasketsAssembled\")"
        },
        {
            "definition": "Number of baskets held in storage at the end of week w",
            "symbol": "BasketsHeld",
            "shape": [
                "W"
            ],
            "status": "coded",
            "code": "BasketsHeld = model.addVars(W, vtype=gp.GRB.CONTINUOUS, name=\"BasketsHeld\")"
        },
        {
            "definition": "Number of surplus baskets salvaged at the end of the season",
            "symbol": "BasketsSalvaged",
            "shape": [],
            "status": "coded",
            "code": "BasketsSalvaged = model.addVar(vtype=gp.GRB.INTEGER, name=\"BasketsSalvaged\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize seasonal profit from the assembly and sale of baskets, considering labor costs, material costs, and holding costs",
            "status": "coded",
            "formulation": "\\textup{Maximize} \\quad \\sum_{w=1}^{W} (\\textup{SellingPrice} * \\textup{BasketsAssembled}_w - \\textup{RegularCost} * \\textup{RegularLaborUsed}_w - \\textup{OvertimeCost} * \\textup{OvertimeLaborUsed}_w - \\textup{MaterialCost} * \\textup{BasketsAssembled}_w - \\textup{HoldingCost} * \\textup{BasketsHeld}_w)",
            "related_variables": [
                "RegularLaborUsed",
                "OvertimeLaborUsed",
                "BasketsAssembled",
                "BasketsHeld"
            ],
            "related_parameters": [
                "SellingPrice",
                "RegularCost",
                "OvertimeCost",
                "MaterialCost",
                "HoldingCost"
            ],
            "code": "# Define the objective function\nmodel.setObjective(\n    gp.quicksum(\n        SellingPrice * BasketsAssembled[w] -\n        RegularCost * RegularLaborUsed[w] -\n        OvertimeCost * OvertimeLaborUsed[w] -\n        MaterialCost * BasketsAssembled[w] -\n        HoldingCost * BasketsHeld[w]\n        for w in range(W)\n    ),\n    gp.GRB.MAXIMIZE\n)"
        }
    ],
    "solution_status": "runtime_error",
    "solver_output_status": "runtime_error",
    "error_message": "Traceback (most recent call last):\n  File \"c:\\Users\\Simon\\Desktop\\Courses\\ECE 570\\ECE570_Project\\MyOptiMUS\\evaluator.py\", line 39, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 1, in <module>\nNameError: name 'W' is not defined\n",
    "obj_val": null,
    "log_path": "logs/log_20250413101737_nlp4lp_51/",
    "problem_path": "data/nlp4lp/51/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nlp4lp/51/data.json\", \"r\") as f:\n    data = json.load(f)\n"
}