{
    "background": "The company is involved in the buying, storing, and manufacturing process where it deals with different types of items, which can either be vegetables or not. Each item has its own buying price and contributes differently to the manufacturing process concerning its hardness. There is also storage space which incurs a cost, and the company starts with an initial amount of items. The company wishes to maximize profit, considering the constraints related to the refining capacity for vegetable and non-vegetable items, storage size, cost, and item usage.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of goods I",
            "symbol": "I",
            "value": "",
            "shape": [],
            "code": "I = data[\"I\"] # scalar parameter"
        },
        {
            "definition": "Number of months M",
            "symbol": "M",
            "value": "",
            "shape": [],
            "code": "M = data[\"M\"] # scalar parameter"
        },
        {
            "definition": "Buying price of good i in month m",
            "symbol": "BuyPrice",
            "value": "",
            "shape": [
                "I",
                "M"
            ],
            "code": "BuyPrice = np.array(data[\"BuyPrice\"]) # ['I', 'M']"
        },
        {
            "definition": "Selling price",
            "symbol": "SellPrice",
            "value": "",
            "shape": [],
            "code": "SellPrice = data[\"SellPrice\"] # scalar parameter"
        },
        {
            "definition": "Indicator whether good i is a vegetable or not",
            "symbol": "IsVegetable",
            "value": "",
            "shape": [
                "I"
            ],
            "code": "IsVegetable = np.array(data[\"IsVegetable\"]) # ['I']"
        },
        {
            "definition": "Maximum refining capacity for vegetables per month",
            "symbol": "MaxVegRefiningPerMonth",
            "value": "",
            "shape": [],
            "code": "MaxVegRefiningPerMonth = data[\"MaxVegRefiningPerMonth\"] # scalar parameter"
        },
        {
            "definition": "Maximum refining capacity for non-vegetables per month",
            "symbol": "MaxNonVegRefiningPerMonth",
            "value": "",
            "shape": [],
            "code": "MaxNonVegRefiningPerMonth = data[\"MaxNonVegRefiningPerMonth\"] # scalar parameter"
        },
        {
            "definition": "Storage capacity",
            "symbol": "StorageSize",
            "value": "",
            "shape": [],
            "code": "StorageSize = data[\"StorageSize\"] # scalar parameter"
        },
        {
            "definition": "Storage cost per unit per month",
            "symbol": "StorageCost",
            "value": "",
            "shape": [],
            "code": "StorageCost = data[\"StorageCost\"] # scalar parameter"
        },
        {
            "definition": "Maximum hardness of goods that can be processed",
            "symbol": "MaxHardness",
            "value": "",
            "shape": [],
            "code": "MaxHardness = data[\"MaxHardness\"] # scalar parameter"
        },
        {
            "definition": "Minimum hardness of goods that can be processed",
            "symbol": "MinHardness",
            "value": "",
            "shape": [],
            "code": "MinHardness = data[\"MinHardness\"] # scalar parameter"
        },
        {
            "definition": "Hardness of good i",
            "symbol": "Hardness",
            "value": "",
            "shape": [
                "I"
            ],
            "code": "Hardness = np.array(data[\"Hardness\"]) # ['I']"
        },
        {
            "definition": "Initial amount of goods available for processing",
            "symbol": "InitialAmount",
            "value": "",
            "shape": [],
            "code": "InitialAmount = data[\"InitialAmount\"] # scalar parameter"
        },
        {
            "definition": "Minimum usage of goods",
            "symbol": "MinUsage",
            "value": "",
            "shape": [],
            "code": "MinUsage = data[\"MinUsage\"] # scalar parameter"
        },
        {
            "definition": "Dependencies of goods i",
            "symbol": "Dependencies",
            "value": "",
            "shape": [
                "I"
            ],
            "code": "Dependencies = np.array(data[\"Dependencies\"]) # ['I']"
        }
    ],
    "constraints": [
        {
            "description": "Total refined quantity of vegetable goods in each month should not exceed MaxVegRefiningPerMonth",
            "status": "coded",
            "formulation": "\\sum_{i \\in \\{i' \\; | \\; \\textup{IsVegetable}_{i'}=1\\}} \\textup{RefinedVegQuantity}_{im} \\leq \\textup{MaxVegRefiningPerMonth} \\quad \\forall m \\in \\{1,2,\\ldots,M\\}",
            "related_variables": [
                "RefinedVegQuantity"
            ],
            "related_parameters": [
                "MaxVegRefiningPerMonth",
                "IsVegetable"
            ],
            "code": "# Add constraints for maximum refining capacity for vegetables per month\nfor m in range(M):\n    model.addConstr(gp.quicksum(RefinedVegQuantity[i, m] for i in range(I) if IsVegetable[i] == 1) <= MaxVegRefiningPerMonth, name=f\"max_veg_refining_month_{m}\")"
        },
        {
            "description": "Maximum amount of non-vegetables that can be refined per month must not exceed MaxNonVegRefiningPerMonth",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{I} (1 - \\textup{IsVegetable}_i) \\times \\textup{RefinedNonVegQuantity}_{i,m} \\leq \\textup{MaxNonVegRefiningPerMonth} \\quad \\forall m \\in \\{1, \\ldots, M\\}",
            "related_variables": [
                "RefinedNonVegQuantity"
            ],
            "related_parameters": [
                "I",
                "M",
                "IsVegetable",
                "MaxNonVegRefiningPerMonth"
            ],
            "code": "# Maximum non-vegetable refining constraint per month\nfor m in range(M):\n    model.addConstr(gp.quicksum((1 - IsVegetable[i]) * RefinedNonVegQuantity[i, m] for i in range(I))\n                    <= MaxNonVegRefiningPerMonth, \n                    name=f\"max_non_veg_refine_month_{m}\")"
        },
        {
            "description": "Total quantity of goods in storage must not exceed storage capacity",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{I}} (\\textup{RefinedVegQuantity}_{i, m} + \\textup{RefinedNonVegQuantity}_{i, m}) \\leq \\textup{StorageSize} \\quad \\forall m \\in \\{1, \\ldots, \\textup{M}\\}",
            "related_variables": [
                "RefinedVegQuantity",
                "RefinedNonVegQuantity"
            ],
            "related_parameters": [
                "StorageSize"
            ],
            "code": "# Add constraint for total quantity of goods in storage not exceeding storage capacity for each month m\nfor m in range(M):\n    model.addConstr(sum(RefinedVegQuantity[i, m] + RefinedNonVegQuantity[i, m] for i in range(I)) <= StorageSize, name=\"storage_capacity_month_{}\".format(m))"
        },
        {
            "description": "Ensure the hardness of each item used in manufacturing is within the specified range",
            "status": "coded",
            "formulation": "\\textup{MinHardness} \\leq \\textup{Hardness}_{i} \\leq \\textup{MaxHardness} \\quad \\forall i \\in \\{1, \\ldots, \\textup{I}\\}",
            "related_variables": [],
            "related_parameters": [
                "MinHardness",
                "MaxHardness",
                "Hardness"
            ],
            "code": "# Add hardness constraints for each item\nfor i in range(I):\n    model.addConstr(Hardness[i] >= MinHardness, name=f\"min_hardness_item_{i}\")\n    model.addConstr(Hardness[i] <= MaxHardness, name=f\"max_hardness_item_{i}\")"
        },
        {
            "description": "Each good i must be used at least at the minimum usage level in all months, respecting the MinUsage parameter",
            "status": "coded",
            "formulation": "\\sum_{m=1}^{M} (\\textup{RefinedVegQuantity}_{i,m} + \\textup{RefinedNonVegQuantity}_{i,m}) \\geq \\textup{MinUsage}",
            "related_variables": [
                "RefinedVegQuantity",
                "RefinedNonVegQuantity"
            ],
            "related_parameters": [
                "MinUsage"
            ],
            "code": "# Add constraint for minimum usage level of goods in all months\nfor i in range(I):\n    model.addConstr((gp.quicksum(RefinedVegQuantity[i, m] + RefinedNonVegQuantity[i, m] for m in range(M)) >= MinUsage), name=f\"MinUsage_good_{i}\")"
        },
        {
            "description": "Constraints to model the dependencies between vegetable goods",
            "status": "coded",
            "formulation": "\\sum_{m=1}^{M} \\textup{RefinedVegQuantity}_{i,m} \\leq \\sum_{m=1}^{M} \\textup{RefinedVegQuantity}_{j,m} \\quad \\forall i, j: \\textup{IsVegetable}_{i} = 1 \\land \\textup{Dependent}_{i,j} = 1",
            "related_variables": [
                "RefinedVegQuantity"
            ],
            "related_parameters": [
                "M",
                "IsVegetable",
                "Dependencies"
            ],
            "code": "# Add dependency constraints for vegetable goods\nfor i in range(I):\n    if IsVegetable[i] == 1:\n        for j in range(I):\n            if Dependencies[i, j] == 1:\n                model.addConstr(\n                    gp.quicksum(RefinedVegQuantity[i, m] for m in range(M)) <= gp.quicksum(RefinedVegQuantity[j, m] for m in range(M)),\n                    name=f\"dependency_constraint_{i}_{j}\"\n                )"
        },
        {
            "description": "Constraints to model the dependencies between non-vegetable goods",
            "status": "coded",
            "formulation": "\\sum_{m=1}^{M} \\textup{RefinedNonVegQuantity}_{i,m} \\leq \\sum_{m=1}^{M} \\textup{RefinedNonVegQuantity}_{j,m} \\quad \\forall i, j: \\textup{IsVegetable}_{i} = 0 \\land \\textup{Dependent}_{i,j} = 1",
            "related_variables": [
                "RefinedNonVegQuantity"
            ],
            "related_parameters": [
                "M",
                "IsVegetable",
                "Dependencies"
            ],
            "code": "# Add constraints to model the dependencies between non-vegetable goods\nfor i in range(I):\n    if IsVegetable[i] == 0:\n        for j in range(I):\n            if Dependencies[i, j] == 1:\n                lhs_expr = gp.quicksum(RefinedNonVegQuantity[i, m] for m in range(M))\n                rhs_expr = gp.quicksum(RefinedNonVegQuantity[j, m] for m in range(M))\n                model.addConstr(lhs_expr <= rhs_expr, name=f\"dep_nonveg_{i}_{j}\")"
        }
    ],
    "variables": [
        {
            "definition": "Quantity of vegetable good i processed in month m",
            "symbol": "RefinedVegQuantity",
            "shape": [
                "I",
                "M"
            ],
            "status": "coded",
            "code": "RefinedVegQuantity = model.addVars(I, M, vtype=gp.GRB.CONTINUOUS, name=\"RefinedVegQuantity\")"
        },
        {
            "definition": "Quantity of non-vegetable good i processed in month m",
            "symbol": "RefinedNonVegQuantity",
            "shape": [
                "I",
                "M"
            ],
            "status": "coded",
            "code": "RefinedNonVegQuantity = model.addVars(I, M, vtype=gp.GRB.CONTINUOUS, name=\"RefinedNonVegQuantity\")"
        },
        {
            "definition": "Binary variable indicating if good i depends on good j",
            "symbol": "Dependent",
            "shape": [
                "I",
                "I"
            ],
            "status": "coded",
            "code": "Dependent = model.addVars(I, I, vtype=gp.GRB.BINARY, name=\"Dependent\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the company's profit from its buying, storing, and manufacturing policy",
            "status": "coded",
            "formulation": "\\maximize \\quad \\sum_{i=1}^{\\textup{I}} \\sum_{m=1}^{\\textup{M}} (\\textup{SellPrice} - \\textup{StorageCost} - \\textup{BuyPrice}_{im}) \\cdot (\\textup{RefinedVegQuantity}_{im} + \\textup{RefinedNonVegQuantity}_{im})",
            "related_variables": [
                "RefinedVegQuantity",
                "RefinedNonVegQuantity"
            ],
            "related_parameters": [
                "SellPrice",
                "StorageCost",
                "BuyPrice"
            ],
            "code": "# Set objective\nmodel.setObjective(\n    gp.quicksum(\n        (SellPrice - StorageCost - BuyPrice[i, m]) * \n        (RefinedVegQuantity[i, m] + RefinedNonVegQuantity[i, m])\n        for i in range(I) for m in range(M)\n    ),\n    gp.GRB.MAXIMIZE\n)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413083120_nlp4lp_20/",
    "problem_path": "data/nlp4lp/20/"
}