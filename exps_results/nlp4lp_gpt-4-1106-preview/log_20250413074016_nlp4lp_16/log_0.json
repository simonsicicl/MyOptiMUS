{
    "background": "The company seeks to maximize daily profit by determining an optimal production mix for N different products, considering assembly and testing time constraints, material costs, and the potential for overtime and discounts.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of different products",
            "symbol": "N",
            "value": "",
            "shape": [],
            "code": "N = data[\"N\"] # scalar parameter"
        },
        {
            "definition": "Hours required to assemble product i",
            "symbol": "AssemblyHour",
            "value": "",
            "shape": [
                "N"
            ],
            "code": "AssemblyHour = np.array(data[\"AssemblyHour\"]) # ['N']"
        },
        {
            "definition": "Hours required to test product i",
            "symbol": "TestingHour",
            "value": "",
            "shape": [
                "N"
            ],
            "code": "TestingHour = np.array(data[\"TestingHour\"]) # ['N']"
        },
        {
            "definition": "Material cost for product i",
            "symbol": "MaterialCost",
            "value": "",
            "shape": [
                "N"
            ],
            "code": "MaterialCost = np.array(data[\"MaterialCost\"]) # ['N']"
        },
        {
            "definition": "Maximum total hours available for assembly",
            "symbol": "MaxAssembly",
            "value": 0,
            "shape": [],
            "code": "MaxAssembly = data[\"MaxAssembly\"] # scalar parameter"
        },
        {
            "definition": "Maximum total hours available for testing",
            "symbol": "MaxTesting",
            "value": 0,
            "shape": [],
            "code": "MaxTesting = data[\"MaxTesting\"] # scalar parameter"
        },
        {
            "definition": "Selling price for product i",
            "symbol": "Price",
            "value": "",
            "shape": [
                "N"
            ],
            "code": "Price = np.array(data[\"Price\"]) # ['N']"
        },
        {
            "definition": "Maximum overtime hours available for assembly",
            "symbol": "MaxOvertimeAssembly",
            "value": 0,
            "shape": [],
            "code": "MaxOvertimeAssembly = data[\"MaxOvertimeAssembly\"] # scalar parameter"
        },
        {
            "definition": "Overtime cost for assembly per hour",
            "symbol": "OvertimeAssemblyCost",
            "value": 0,
            "shape": [],
            "code": "OvertimeAssemblyCost = data[\"OvertimeAssemblyCost\"] # scalar parameter"
        },
        {
            "definition": "Discount on material cost when a certain threshold is reached",
            "symbol": "MaterialDiscount",
            "value": 0.0,
            "shape": [],
            "code": "MaterialDiscount = data[\"MaterialDiscount\"] # scalar parameter"
        },
        {
            "definition": "Threshold for the quantity to reach to obtain the material discount",
            "symbol": "DiscountThreshold",
            "value": 0,
            "shape": [],
            "code": "DiscountThreshold = data[\"DiscountThreshold\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Total assembly hours must not exceed maximum available assembly hours",
            "status": "formulated",
            "formulation": "\\sum_{i=1}^{N} (\\textup{AssemblyHour}_{i} \\times \\textup{ProductionQuantity}_{i}) \\leq \\textup{MaxAssembly}",
            "related_variables": [
                "ProductionQuantity"
            ],
            "related_parameters": [
                "AssemblyHour",
                "MaxAssembly"
            ]
        },
        {
            "description": "Total testing hours for all products must not exceed maximum available testing hours",
            "status": "formulated",
            "formulation": "\\sum_{i=1}^{N} (\\textup{ProductionQuantity}[i] \\cdot \\textup{TestingHour}[i]) \\leq \\textup{MaxTesting}",
            "related_variables": [
                "ProductionQuantity"
            ],
            "related_parameters": [
                "N",
                "TestingHour",
                "MaxTesting"
            ]
        },
        {
            "description": "All products produced must be non-negative quantities",
            "status": "formulated",
            "formulation": "\\forall i \\in \\{1, ..., N\\}, \\quad \\textup{ProductionQuantity}_{i} \\geq 0",
            "related_variables": [
                "ProductionQuantity"
            ],
            "related_parameters": [
                "N"
            ]
        },
        {
            "description": "The total overtime assembly hours must not exceed the maximum overtime assembly hours available",
            "status": "formulated",
            "formulation": "\\text{OvertimeHoursUsed} \\leq \\text{MaxOvertimeAssembly}",
            "related_variables": [
                "ProductionQuantity",
                "OvertimeHoursUsed"
            ],
            "related_parameters": [
                "N",
                "AssemblyHour",
                "MaxAssembly",
                "MaxOvertimeAssembly"
            ]
        },
        {
            "description": "Excess assembly hours must be greater than or equal to the difference between total assembly hours and the maximum assembly hours, if positive",
            "status": "formulated",
            "formulation": "\\text{ExcessAssemblyHours} \\geq \\sum_{i=1}^{N} (\\text{AssemblyHour}[i] \\cdot \\text{ProductionQuantity}[i]) - \\text{MaxAssembly}",
            "related_variables": [
                "ProductionQuantity",
                "ExcessAssemblyHours"
            ],
            "related_parameters": [
                "N",
                "AssemblyHour",
                "MaxAssembly"
            ]
        },
        {
            "description": "Excess assembly hours must be non-negative",
            "status": "formulated",
            "formulation": "\\text{ExcessAssemblyHours} \\geq 0",
            "related_variables": [
                "ExcessAssemblyHours"
            ],
            "related_parameters": []
        },
        {
            "description": "Constraint to calculate the TotalMaterialDiscount based on production quantity and the discount threshold",
            "status": "formulated",
            "formulation": "\\textup{TotalMaterialDiscount} \\geq \\sum_{i=1}^{N} (\\textup{MaterialCost}_i \\cdot \\textup{ProductionQuantity}_i \\cdot \\textup{MaterialDiscount}) \\cdot \\left(\\textup{ProductionQuantity}_i \\geq \\textup{DiscountThreshold}\\right)",
            "related_variables": [
                "ProductionQuantity",
                "TotalMaterialDiscount"
            ],
            "related_parameters": [
                "MaterialCost",
                "MaterialDiscount",
                "DiscountThreshold"
            ]
        },
        {
            "description": "Overtime hours used must not exceed the maximum overtime hours available for assembly",
            "status": "formulated",
            "formulation": "\\textup{OvertimeHoursUsed} \\leq \\textup{MaxOvertimeAssembly}",
            "related_variables": [
                "OvertimeHoursUsed"
            ],
            "related_parameters": [
                "MaxOvertimeAssembly"
            ]
        }
    ],
    "variables": [
        {
            "definition": "Quantity of product i to produce",
            "symbol": "ProductionQuantity",
            "shape": [
                "N"
            ],
            "status": "formulated"
        },
        {
            "definition": "Total overtime assembly hours used",
            "symbol": "OvertimeHoursUsed",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Excess assembly hours beyond the maximum assembly capacity",
            "symbol": "ExcessAssemblyHours",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Total discount received on material costs if a certain threshold is reached",
            "symbol": "TotalMaterialDiscount",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total daily profit, which is the total revenue minus the total cost including overtime costs, regular material costs, and considering material discounts",
            "status": "formulated",
            "formulation": "\\max \\left(\\sum_{i=1}^{N} (\\textup{Price}_i \\cdot \\textup{ProductionQuantity}_i) - \\sum_{i=1}^{N} (\\textup{MaterialCost}_i \\cdot \\textup{ProductionQuantity}_i) - (\\textup{OvertimeHoursUsed} \\cdot \\textup{OvertimeAssemblyCost}) + \\textup{TotalMaterialDiscount} \\right)",
            "related_variables": [
                "ProductionQuantity",
                "OvertimeHoursUsed",
                "TotalMaterialDiscount"
            ],
            "related_parameters": [
                "Price",
                "MaterialCost",
                "OvertimeAssemblyCost",
                "MaterialDiscount"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413074016_nlp4lp_16/",
    "problem_path": "data/nlp4lp/16/"
}