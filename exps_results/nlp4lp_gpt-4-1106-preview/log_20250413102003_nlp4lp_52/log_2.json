{
    "background": "A manufacturer is producing multiple parts using several machines, where each machine has associated costs, time requirements, and monthly availability. Each part has a selling price and a minimum production requirement.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of machines",
            "symbol": "M",
            "value": "",
            "shape": [],
            "code": "M = data[\"M\"] # scalar parameter"
        },
        {
            "definition": "Number of parts to be produced",
            "symbol": "P",
            "value": "",
            "shape": [],
            "code": "P = data[\"P\"] # scalar parameter"
        },
        {
            "definition": "Time required to produce a batch of part p on machine m",
            "symbol": "TimeRequired",
            "value": "",
            "shape": [
                "M",
                "P"
            ],
            "code": "TimeRequired = np.array(data[\"TimeRequired\"]) # ['M', 'P']"
        },
        {
            "definition": "Cost associated with running machine m",
            "symbol": "MachineCosts",
            "value": "",
            "shape": [
                "M"
            ],
            "code": "MachineCosts = np.array(data[\"MachineCosts\"]) # ['M']"
        },
        {
            "definition": "Availability of machine m per month",
            "symbol": "Availability",
            "value": "",
            "shape": [
                "M"
            ],
            "code": "Availability = np.array(data[\"Availability\"]) # ['M']"
        },
        {
            "definition": "Selling price of a batch of part p",
            "symbol": "Prices",
            "value": "",
            "shape": [
                "P"
            ],
            "code": "Prices = np.array(data[\"Prices\"]) # ['P']"
        },
        {
            "definition": "Minimum number of batches of part p that should be produced",
            "symbol": "MinBatches",
            "value": "",
            "shape": [
                "P"
            ],
            "code": "MinBatches = np.array(data[\"MinBatches\"]) # ['P']"
        }
    ],
    "constraints": [
        {
            "description": "Each part must have a non-negative number of batches produced.",
            "status": "coded",
            "formulation": "\\forall p \\in \\{1, \\ldots, P\\}, \\quad \\textup{BatchesProduced}_{p} \\geq 0",
            "related_variables": [
                "BatchesProduced"
            ],
            "related_parameters": [
                "P"
            ],
            "code": "# Ensure that each part has a non-negative number of batches produced\nfor p in range(P):\n    model.addConstr(BatchesProduced[p] >= 0, name=\"non_negativity_batches_produced_{}\".format(p))"
        },
        {
            "description": "Each machine m can be used for up to Availability[m] hours per month",
            "status": "coded",
            "formulation": "\\sum_{p=1}^{P} \\textup{TimeRequired}_{m,p} \\cdot \\textup{BatchesProduced}_{p} \\leq \\textup{Availability}_{m} \\quad \\forall m \\in \\{1, \\ldots, M\\}",
            "related_variables": [
                "BatchesProduced"
            ],
            "related_parameters": [
                "TimeRequired",
                "Availability"
            ],
            "code": "# Add machine availability constraints for each machine m\nfor m in range(M):\n    model.addConstr(gp.quicksum(TimeRequired[m,p] * BatchesProduced[p] for p in range(P)) <= Availability[m], name=f\"machine_availability_{m}\")"
        },
        {
            "description": "Each part must be produced in at least the minimum number of batches specified by MinBatches",
            "status": "runtime_error",
            "formulation": "\\textup{BatchesProduced}_{p} \\geq \\textup{MinBatches}_{p} \\quad \\forall p \\in \\{1, \\ldots, \\textup{P}\\}",
            "related_variables": [
                "BatchesProduced"
            ],
            "related_parameters": [
                "MinBatches"
            ],
            "code": "```"
        },
        {
            "description": "Total time used on each machine by all parts does not exceed the time required multiplied by the number of batches for each part, summed across all parts",
            "status": "coded",
            "formulation": "\\sum_{p=1}^{\\textup{P}} \\textup{TimeRequired}[m][p] \\times \\textup{BatchesProduced}[p] \\leq \\textup{Availability}[m] \\quad \\forall m \\in \\{1, ..., \\textup{M}\\}",
            "related_variables": [
                "BatchesProduced"
            ],
            "related_parameters": [
                "TimeRequired",
                "Availability"
            ],
            "code": "# Add constraints for total time used on each machine by all parts\nfor m in range(M):\n    model.addConstr(gp.quicksum(TimeRequired[m, p] * BatchesProduced[p] for p in range(P)) <= Availability[m], name=f\"machine_time_usage_{m}\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of batches of part p produced",
            "symbol": "BatchesProduced",
            "shape": [
                "P"
            ],
            "status": "coded",
            "code": "BatchesProduced = model.addVars(P, vtype=gp.GRB.CONTINUOUS, name=\"BatchesProduced\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the manufacturer's profit calculated as the difference between the selling prices of parts and the costs of using machines",
            "status": "coded",
            "formulation": "\\max \\quad \\sum_{p=1}^{P} \\textup{Prices}_p \\cdot \\textup{BatchesProduced}_p - \\sum_{m=1}^{M} \\textup{MachineCosts}_m \\cdot \\sum_{p=1}^{P} \\textup{TimeRequired}_{mp} \\cdot \\textup{BatchesProduced}_p",
            "related_variables": [
                "BatchesProduced"
            ],
            "related_parameters": [
                "Prices",
                "MachineCosts",
                "TimeRequired",
                "P",
                "M"
            ],
            "code": "# Define the objective function\nobjective = gp.quicksum(Prices[p] * BatchesProduced[p] for p in range(P)) \\\n            - gp.quicksum(MachineCosts[m] * gp.quicksum(TimeRequired[m, p] * BatchesProduced[p] for p in range(P)) for m in range(M))\n\n# Set the model to maximize the objective\nmodel.setObjective(objective, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "runtime_error",
    "solver_output_status": "runtime_error",
    "error_message": "Traceback (most recent call last):\n  File \"c:\\Users\\Simon\\Desktop\\Courses\\ECE 570\\ECE570_Project\\MyOptiMUS\\evaluator.py\", line 45, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 1\n    ```\n    ^\nSyntaxError: invalid syntax\n",
    "obj_val": null,
    "log_path": "logs/log_20250413102003_nlp4lp_52/",
    "problem_path": "data/nlp4lp/52/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nlp4lp/52/data.json\", \"r\") as f:\n    data = json.load(f)\n"
}