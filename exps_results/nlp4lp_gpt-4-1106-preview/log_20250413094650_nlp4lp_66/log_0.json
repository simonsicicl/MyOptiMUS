{
    "background": "Identifying the shortest route for a traveler to visit a certain number of towns and return to the original starting town.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of towns to visit",
            "symbol": "N",
            "value": "",
            "shape": [],
            "code": "N = data[\"N\"] # scalar parameter"
        },
        {
            "definition": "Index of the start city",
            "symbol": "StartCity",
            "value": "",
            "shape": [],
            "code": "StartCity = data[\"StartCity\"] # scalar parameter"
        },
        {
            "definition": "Distance from city i to city j",
            "symbol": "Distances",
            "value": "",
            "shape": [
                "N",
                "N"
            ],
            "code": "Distances = np.array(data[\"Distances\"]) # ['N', 'N']"
        }
    ],
    "constraints": [
        {
            "description": "Each town must be visited exactly once.",
            "status": "formulated",
            "formulation": "\\sum_{j=1, j \\neq i}^{N} \\textup{Visit}_{ij} = 1 \\quad \\forall i \\in \\{1, ..., N\\}, \\quad i \\neq \\textup{StartCity}",
            "related_variables": [
                "Visit"
            ],
            "related_parameters": [
                "N",
                "StartCity"
            ]
        },
        {
            "description": "The traveler must return to StartCity after visiting all other towns",
            "status": "formulated",
            "formulation": "\\sum_{j=1, j \\neq \\textup{StartCity}}^{N} \\textup{Visit}_{\\textup{StartCity},j} = 1 \\quad \\text{and} \\quad \\sum_{i=1, i \\neq \\textup{StartCity}}^{N} \\textup{Visit}_{i,\\textup{StartCity}} = 1",
            "related_variables": [
                "Visit"
            ],
            "related_parameters": [
                "N",
                "StartCity"
            ]
        },
        {
            "description": "The distance between any two towns is non-negative",
            "status": "formulated",
            "formulation": "\\forall i, j \\in \\{1, ..., \\textup{N}\\}, \\quad \\textup{Distances}_{ij} \\geq 0",
            "related_variables": [],
            "related_parameters": [
                "Distances"
            ]
        },
        {
            "description": "Each town must have exactly one departure.",
            "status": "formulated",
            "formulation": "\\sum_{i=1, i \\neq j}^{N} \\textup{Visit}_{ij} = 1 \\quad \\forall j \\in \\{1, ..., N\\}, \\quad j \\neq \\textup{StartCity}",
            "related_variables": [
                "Visit"
            ],
            "related_parameters": [
                "N",
                "StartCity"
            ]
        },
        {
            "description": "Binary variable denoting if town i is visited after town j.",
            "status": "formulated",
            "formulation": "\\textup{Visit}_{ij} \\in \\{0, 1\\} \\quad \\forall i, j \\in \\{1, ..., N\\}, \\quad i \\neq j",
            "related_variables": [
                "Visit"
            ],
            "related_parameters": [
                "N"
            ]
        }
    ],
    "variables": [
        {
            "definition": "Binary variable indicating whether the traveler visits town j immediately after town i.",
            "symbol": "Visit",
            "shape": [
                "N",
                "N"
            ],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total travel distance for the route",
            "status": "formulated",
            "formulation": "\\sum_{i=1}^{N} \\sum_{j=1, j \\neq i}^{N} \\textup{Distances}_{ij} \\cdot \\textup{Visit}_{ij}",
            "related_variables": [
                "Visit"
            ],
            "related_parameters": [
                "N",
                "Distances"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413094650_nlp4lp_66/",
    "problem_path": "data/nlp4lp/66/"
}