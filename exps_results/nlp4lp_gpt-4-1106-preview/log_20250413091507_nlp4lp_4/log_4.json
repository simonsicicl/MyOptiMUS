{
    "background": "A hospital is trying to determine the minimal number of nurses to hire over a planning period to meet the daily demand for nursing staff.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of days",
            "symbol": "T",
            "value": "",
            "shape": [],
            "code": "T = data[\"T\"] # scalar parameter"
        },
        {
            "definition": "The planning period for nurse staffing",
            "symbol": "Period",
            "value": "",
            "shape": [],
            "code": "Period = data[\"Period\"] # scalar parameter"
        },
        {
            "definition": "Array of demands for nurses for days",
            "symbol": "Demand",
            "value": "",
            "shape": [
                "T"
            ],
            "code": "Demand = np.array(data[\"Demand\"]) # ['T']"
        }
    ],
    "constraints": [
        {
            "description": "Each day must have a non-negative number of nurses",
            "status": "coded",
            "formulation": "\\textup{NumberOfNurses}[t] \\geq 0 \\quad \\forall t \\in \\{1, 2, \\ldots, T\\}",
            "related_variables": [
                "NumberOfNurses"
            ],
            "related_parameters": [
                "T"
            ],
            "code": "# Ensure a non-negative number of nurses for each day\nfor t in range(T):\n    model.addConstr(NumberOfNurses[t] >= 0, name=f\"non_negative_nurses_day_{t}\")"
        },
        {
            "description": "The number of nurses hired must meet or exceed the demand for each day of the planning period",
            "status": "coded",
            "formulation": "\\forall t \\in \\{1, \\ldots, T\\}, \\quad \\textup{NumberOfNurses}_t \\geq \\textup{Demand}_t",
            "related_variables": [
                "NumberOfNurses"
            ],
            "related_parameters": [
                "T",
                "Demand"
            ],
            "code": "NumberOfNurses = model.addVars(T, vtype=gp.GRB.INTEGER, name=\"NumberOfNurses\")"
        },
        {
            "description": "The number of nurses on each day must meet the daily demand",
            "status": "coded",
            "formulation": "\\textup{NumberOfNurses}_{t} \\geq \\textup{Demand}_{t} \\quad \\forall t \\in \\{1, \\ldots, \\textup{T}\\}",
            "related_variables": [
                "NumberOfNurses"
            ],
            "related_parameters": [
                "Demand",
                "T"
            ],
            "code": "# Constraint: Number of nurses on each day must meet the daily demand\nfor t in range(T):\n    model.addConstr(NumberOfNurses[t] >= Demand[t], name=f\"demand_day_{t}\")"
        }
    ],
    "variables": [
        {
            "definition": "Array representing the number of nurses for each day of the planning period",
            "symbol": "NumberOfNurses",
            "shape": [
                "T"
            ],
            "status": "coded",
            "code": "NumberOfNurses = model.addVars(T, vtype=gp.GRB.INTEGER, name=\"NumberOfNurses\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of nurses required over the planning period",
            "status": "coded",
            "formulation": "\\min \\sum_{t=1}^{\\textup{T}} \\textup{NumberOfNurses}_{t}",
            "related_variables": [
                "NumberOfNurses"
            ],
            "related_parameters": [
                "T"
            ],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(NumberOfNurses[t] for t in range(T)), gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": "Traceback (most recent call last):\n  File \"c:\\Users\\Simon\\Desktop\\Courses\\ECE 570\\ECE570_Project\\MyOptiMUS\\evaluator.py\", line 45, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 1\n    ```\n    ^\nSyntaxError: invalid syntax\n",
    "obj_val": 43.0,
    "log_path": "logs/log_20250413091507_nlp4lp_4/",
    "problem_path": "data/nlp4lp/4/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nlp4lp/4/data.json\", \"r\") as f:\n    data = json.load(f)\n",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nlp4lp/4/data.json\", \"r\") as f:\n    data = json.load(f)\n\nT = data[\"T\"] # scalar parameter\nPeriod = data[\"Period\"] # scalar parameter\nDemand = np.array(data[\"Demand\"]) # ['T']\nNumberOfNurses = model.addVars(T, vtype=gp.GRB.INTEGER, name=\"NumberOfNurses\")\n\n# Ensure a non-negative number of nurses for each day\nfor t in range(T):\n    model.addConstr(NumberOfNurses[t] >= 0, name=f\"non_negative_nurses_day_{t}\")\n\nNumberOfNurses = model.addVars(T, vtype=gp.GRB.INTEGER, name=\"NumberOfNurses\")\n\n# Constraint: Number of nurses on each day must meet the daily demand\nfor t in range(T):\n    model.addConstr(NumberOfNurses[t] >= Demand[t], name=f\"demand_day_{t}\")\n\n# Set objective\nmodel.setObjective(gp.quicksum(NumberOfNurses[t] for t in range(T)), gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}