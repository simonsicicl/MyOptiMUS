{
    "background": "The problem is to find the minimum number of employees needed to meet a certain coverage requirement where employees work for a set number of consecutive days followed by a mandatory rest period.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "The number of users on the nth day",
            "symbol": "Num",
            "value": "",
            "shape": [
                "N"
            ],
            "code": "Num = np.array(data[\"Num\"]) # ['N']"
        },
        {
            "definition": "Number of consecutive working days before a resting period",
            "symbol": "WorkingDays",
            "value": "",
            "shape": [],
            "code": "WorkingDays = data[\"WorkingDays\"] # scalar parameter"
        },
        {
            "definition": "Number of consecutive resting days",
            "symbol": "RestingDays",
            "value": "",
            "shape": [],
            "code": "RestingDays = data[\"RestingDays\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Ensure that each employee works for WorkingDays consecutive days",
            "status": "coded",
            "formulation": "\\sum_{k=j}^{j+\\textup{WorkingDays}-1} \\textup{EmployeeWorking}_{i,k} = \\textup{WorkingDays} \\times \\textup{EmployeeWorking}_{i,j} \\quad \\forall i, \\forall j: j+\\textup{WorkingDays}-1 \\leq N",
            "related_variables": [
                "EmployeeWorking"
            ],
            "related_parameters": [
                "WorkingDays",
                "N"
            ],
            "code": "# Ensure that each employee works for WorkingDays consecutive days\nfor i in range(E):\n    for j in range(N - WorkingDays + 1):\n        model.addConstr(gp.quicksum(EmployeeWorking[i, k] for k in range(j, j + WorkingDays)) == WorkingDays * EmployeeWorking[i, j], name=f\"consec_work_{i}_{j}\")"
        },
        {
            "description": "Ensure that each employee must have at least RestingDays consecutive days of rest",
            "status": "coded",
            "formulation": "\\sum_{j=k}^{\\min(k+\\textup{RestingDays}-1, N)} (1 - \\textup{EmployeeWorking}_{i,j}) \\geq \\textup{RestingDays} \\times \\textup{EmployeeStartRest}_{i, k}, \\quad \\forall i \\in E, \\quad \\forall k \\in \\{1, \\ldots, N-\\textup{RestingDays}+1\\}",
            "related_variables": [
                "EmployeeWorking",
                "EmployeeStartRest"
            ],
            "related_parameters": [
                "RestingDays"
            ],
            "code": "# Ensure that each employee must have at least RestingDays consecutive days of rest\nfor i in range(E):\n    for k in range(N - RestingDays + 1):\n        model.addConstr(gp.quicksum(1 - EmployeeWorking[i, j] for j in range(k, min(k + RestingDays, N))) >= RestingDays * EmployeeStartRest[i, k], \n                        name=f\"consec_rest_emp_{i}_start_{k}\")"
        },
        {
            "description": "The total number of employees needed for coverage is a non-negative integer.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{E} \\textup{EmployeeWorking}_{i,j} \\geq \\textup{Num}_j \\quad \\forall j \\in \\{1, ..., N\\}",
            "related_variables": [
                "EmployeeWorking"
            ],
            "related_parameters": [
                "Num"
            ],
            "code": "# Ensure the total number of employees needed for coverage is at least the number required on each day\nfor j in range(N):\n    model.addConstr(gp.quicksum(EmployeeWorking[i, j] for i in range(E)) >= Num[j], name=\"coverage_day_{0}\".format(j))"
        },
        {
            "description": "Define the minimum gap (rest period) between working blocks of an employee",
            "status": "coded",
            "formulation": "\\sum_{k=j}^{j+\\textup{WorkingDays}+\\textup{RestingDays}-1} \\textup{EmployeeWorking}_{i,k} \\leq \\textup{WorkingDays} \\quad \\forall i, \\forall j: j+\\textup{WorkingDays}+\\textup{RestingDays}-1 \\leq N",
            "related_variables": [
                "EmployeeWorking"
            ],
            "related_parameters": [
                "WorkingDays",
                "RestingDays",
                "N"
            ],
            "code": "# Minimum gap (rest period) between working blocks constraint\nfor i in range(E):\n    for j in range(N - WorkingDays - RestingDays + 1):\n        model.addConstr(gp.quicksum(EmployeeWorking[i, k] for k in range(j, j + WorkingDays + RestingDays)) <= WorkingDays,\n                        name=f\"min_gap_rest_period_{i}_{j}\")"
        },
        {
            "description": "Define the start of the resting period for an employee",
            "status": "coded",
            "formulation": "\\textup{EmployeeStartRest}_{i,k} \\geq \\textup{EmployeeWorking}_{i, k-1} - \\textup{EmployeeWorking}_{i, k}, \\quad \\forall i \\in E, k \\in \\{2, \\ldots, N\\}",
            "related_variables": [
                "EmployeeWorking",
                "EmployeeStartRest"
            ],
            "related_parameters": [],
            "code": "# Constraint for defining the start of the resting period for an employee\nfor i in E:\n    for k in range(2, N):\n        model.addConstr(EmployeeStartRest[i, k] >= EmployeeWorking[i, k-1] - EmployeeWorking[i, k],\n                        name=f\"start_rest_constraint_{i}_{k}\")"
        },
        {
            "description": "Ensure that EmployeeStartRest is 0 if the employee continues to work",
            "status": "coded",
            "formulation": "\\textup{EmployeeStartRest}_{i,k} = 0, \\quad \\textup{if} \\quad \\textup{EmployeeWorking}_{i, k} = 1, \\quad \\forall i \\in E, k \\in \\{1, \\ldots, N\\}",
            "related_variables": [
                "EmployeeWorking",
                "EmployeeStartRest"
            ],
            "related_parameters": [],
            "code": "```"
        },
        {
            "description": "Each variable representing the number of employees needs to be an integer",
            "status": "coded",
            "formulation": "\\textup{EmployeeWorking}_{i,j} \\in \\{0,1\\} \\quad \\forall i \\in \\{1, ..., E\\}, \\forall j \\in \\{1, ..., N\\}",
            "related_variables": [
                "EmployeeWorking"
            ],
            "related_parameters": [],
            "code": "# Since the variables are already defined as binary, no additional code is required for integrality constraints."
        },
        {
            "description": "Employees must be working for a set number of consecutive days before starting their rest period",
            "status": "coded",
            "formulation": "\\sum_{k=j}^{j+\\textup{WorkingDays}-1} \\textup{EmployeeWorking}_{i,k} = \\textup{WorkingDays} \\times \\textup{EmployeeStartRest}_{i,j} \\quad \\forall i \\in \\{1, ..., E\\}, \\forall j \\in \\{1, ..., N-\\textup{WorkingDays}+1\\}",
            "related_variables": [
                "EmployeeWorking",
                "EmployeeStartRest"
            ],
            "related_parameters": [
                "WorkingDays"
            ],
            "code": "# Enforce employees to work for a set number of consecutive days before starting their rest period\nfor i in range(E):\n    for j in range(N - WorkingDays + 1):\n        model.addConstr(gp.quicksum(EmployeeWorking[i,k] for k in range(j, j + WorkingDays)) == WorkingDays * EmployeeStartRest[i,j], name=\"consec_working_days\")"
        },
        {
            "description": "After working for the set number of consecutive days, employees must have a mandatory rest period",
            "status": "coded",
            "formulation": "\\sum_{k=j+\\textup{WorkingDays}}^{j+\\textup{WorkingDays}+\\textup{RestingDays}-1} \\textup{EmployeeWorking}_{i,k} = 0 \\quad \\forall i \\in \\{1, ..., E\\}, \\forall j \\in \\{1, ..., N-\\textup{WorkingDays}-\\textup{RestingDays}+1\\}",
            "related_variables": [
                "EmployeeWorking"
            ],
            "related_parameters": [
                "WorkingDays",
                "RestingDays"
            ],
            "code": "# Mandatory rest period constraints\nfor i in range(E):\n    for j in range(N-WorkingDays-RestingDays+1):\n        model.addConstr(gp.quicksum(EmployeeWorking[i, k] for k in range(j+WorkingDays, j+WorkingDays+RestingDays)) == 0, name=\"rest_period_employee{}_day{}\".format(i, j))"
        },
        {
            "description": "Ensure that each employee that is worked at least one day is counted",
            "status": "coded",
            "formulation": "\\sum_{j=1}^{N} \\textup{EmployeeWorking}_{ij} \\geq \\textup{EmployeeCounted}_i, \\quad \\forall i \\in \\{1, \\ldots, E\\}",
            "related_variables": [
                "EmployeeWorking",
                "EmployeeCounted"
            ],
            "related_parameters": [],
            "code": "# Ensure that each employee that is worked at least one day is counted\nE, N = gp.multidict({i: 0 for i in range(E)})  # Assuming E has been defined and is the total number of employees\nfor i in range(E):\n    model.addConstr(gp.quicksum(EmployeeWorking[i, j] for j in range(N)) >= EmployeeCounted[i], name=f\"employee_counted_{i}\")"
        },
        {
            "description": "Ensure employee i starts their rest period after WorkingDays consecutive working days",
            "status": "coded",
            "formulation": "\\sum_{j=k}^{k+\\textup{WorkingDays}-1} \\textup{EmployeeWorking}_{ij} = \\textup{WorkingDays} \\times \\textup{EmployeeStartRest}_{ik}, \\quad \\forall i \\in \\{1, \\ldots, E\\}, \\forall k \\in \\{1, \\ldots, N-\\textup{WorkingDays}+1\\}",
            "related_variables": [
                "EmployeeWorking",
                "EmployeeStartRest"
            ],
            "related_parameters": [
                "WorkingDays"
            ],
            "code": "# Ensure employee i starts their rest period after WorkingDays consecutive working days\nfor i in range(E):\n    for k in range(N - WorkingDays + 1):\n        model.addConstr(\n            gp.quicksum(EmployeeWorking[i, j] for j in range(k, k + WorkingDays)) == WorkingDays * EmployeeStartRest[i, k],\n            name=f\"rest_period_start_constraint_{i}_{k}\"\n        )"
        },
        {
            "description": "Ensure employee i does not work during their rest period",
            "status": "coded",
            "formulation": "\\sum_{j=k}^{k+\\textup{RestingDays}-1} \\textup{EmployeeWorking}_{ij} = 0, \\quad \\textup{if} \\quad \\textup{EmployeeStartRest}_{i,k-\\textup{WorkingDays}} = 1, \\quad \\forall i \\in \\{1, \\ldots, E\\}, k > \\textup{WorkingDays}, k+\\textup{RestingDays} \\leq N",
            "related_variables": [
                "EmployeeWorking",
                "EmployeeStartRest"
            ],
            "related_parameters": [
                "RestingDays",
                "WorkingDays"
            ],
            "code": "# Ensure employee i does not work during their rest period\nfor i in range(E):\n    for k in range(WorkingDays + 1, N - RestingDays + 1):\n        model.addConstrs((gp.quicksum(EmployeeWorking[i, j] for j in range(k, k + RestingDays)) == 0\n                          for k in range(WorkingDays + 1, N - RestingDays + 1) if EmployeeStartRest[i, k - WorkingDays].x == 1),\n                         name=f\"rest_period_employee_{i}\")"
        },
        {
            "description": "Ensure the coverage requirement is met on each day",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{E} \\textup{EmployeeWorking}_{ij} \\geq \\textup{Num}_j, \\quad \\forall j \\in \\{1, \\ldots, N\\}",
            "related_variables": [
                "EmployeeWorking"
            ],
            "related_parameters": [
                "Num"
            ],
            "code": "# Ensure the coverage requirement is met on each day\nfor j in range(N):\n    model.addConstr(gp.quicksum(EmployeeWorking[i, j] for i in range(E)) >= Num[j], name=f\"coverage_day_{j}\")"
        }
    ],
    "variables": [
        {
            "definition": "1 if employee i is working on day j, 0 otherwise",
            "symbol": "EmployeeWorking",
            "shape": [
                "E",
                "N"
            ],
            "status": "coded",
            "code": "EmployeeWorking = model.addVars(E, N, vtype=gp.GRB.BINARY, name=\"EmployeeWorking\")"
        },
        {
            "definition": "1 if employee i starts rest on day k, 0 otherwise",
            "symbol": "EmployeeStartRest",
            "shape": [
                "E",
                "N"
            ],
            "status": "coded",
            "code": "EmployeeStartRest = model.addVars(E, N, vtype=gp.GRB.BINARY, name=\"EmployeeStartRest\")"
        },
        {
            "definition": "Indicator variable for whether employee i is counted towards the total number of employees needed, which is 1 when employee i is working at least once within the period under consideration, 0 otherwise",
            "symbol": "EmployeeCounted",
            "shape": [
                "E"
            ],
            "status": "coded",
            "code": "EmployeeCounted = model.addVars(E, vtype=gp.GRB.BINARY, name=\"EmployeeCounted\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of employees needed to meet the coverage requirements",
            "status": "coded",
            "formulation": "\\min \\sum_{i=1}^{E} \\textup{EmployeeCounted}_i",
            "related_variables": [
                "EmployeeCounted"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(EmployeeCounted[i] for i in range(E)), gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413091650_nlp4lp_42/",
    "problem_path": "data/nlp4lp/42/"
}