{
    "background": "The objective is to maximize the total production in the last two years, taking into consideration the constraints of two different types of resources, manpower allocation, stock levels, capacities, and a limit on the total manpower available.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "The production inputs from resource type one to product k in year j",
            "symbol": "InputOne",
            "value": "",
            "shape": [
                "K",
                "K"
            ],
            "code": "InputOne = np.array(data[\"InputOne\"]) # ['K', 'K']"
        },
        {
            "definition": "The manpower allocated to resource type one for product k",
            "symbol": "ManpowerOne",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "ManpowerOne = np.array(data[\"ManpowerOne\"]) # ['K']"
        },
        {
            "definition": "The production inputs from resource type two to product k in year j",
            "symbol": "InputTwo",
            "value": "",
            "shape": [
                "K",
                "K"
            ],
            "code": "InputTwo = np.array(data[\"InputTwo\"]) # ['K', 'K']"
        },
        {
            "definition": "The manpower allocated to resource type two for product k",
            "symbol": "ManpowerTwo",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "ManpowerTwo = np.array(data[\"ManpowerTwo\"]) # ['K']"
        },
        {
            "definition": "Stock levels of product k at the start of the planning horizon",
            "symbol": "Stock",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "Stock = np.array(data[\"Stock\"]) # ['K']"
        },
        {
            "definition": "Production capacity for product k",
            "symbol": "Capacity",
            "value": "",
            "shape": [
                "K"
            ],
            "code": "Capacity = np.array(data[\"Capacity\"]) # ['K']"
        },
        {
            "definition": "The upper limit of manpower",
            "symbol": "ManpowerLimit",
            "value": "",
            "shape": [],
            "code": "ManpowerLimit = data[\"ManpowerLimit\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The consumption of \\textup{InputOne} per year is non-negative and within its availability",
            "status": "coded",
            "formulation": "\\forall k, j: 0 \\leq \\textup{InputOne}_{k,j} \\leq \\textup{Capacity}_{k}",
            "related_variables": [
                "InputOne"
            ],
            "related_parameters": [
                "Capacity"
            ],
            "code": "# Add constraints to ensure consumption of InputOne per year is non-negative and within its availability\nfor k in range(K):\n    for j in range(J):  # Assuming J is the number of years or other appropriate index\n        model.addConstr(0 <= InputOne[k, j], name=f\"InputOne_nonneg_{k}_{j}\")\n        model.addConstr(InputOne[k, j] <= Capacity[k], name=f\"InputOne_capacity_{k}_{j}\")"
        },
        {
            "description": "The consumption of \\textup{InputTwo} per year is non-negative and within its availability",
            "status": "coded",
            "formulation": "\\forall j \\in \\textup{Years}, \\forall k \\in \\textup{Products}: 0 \\leq \\textup{InputTwo}_{k, j} \\leq \\textup{Availability}_{k, j}",
            "related_variables": [
                "InputTwo"
            ],
            "related_parameters": [
                "Availability"
            ],
            "code": "# Add constraints for InputTwo consumption non-negativity and availability\nfor j in Years:\n    for k in Products:\n        model.addConstr(0 <= InputTwo[k, j], name=f\"inputtwo_nonnegativity_{k}_{j}\")\n        model.addConstr(InputTwo[k, j] <= Availability[k, j], name=f\"inputtwo_availability_{k}_{j}\")"
        },
        {
            "description": "ManpowerOne allocation must be non-negative and not exceed ManpowerLimit",
            "status": "coded",
            "formulation": "\\forall k: 0 \\leq \\textup{ManpowerOne}_k \\leq \\textup{ManpowerLimit}",
            "related_variables": [
                "ManpowerOne"
            ],
            "related_parameters": [
                "ManpowerLimit"
            ],
            "code": "# ManpowerOne allocation constraints\nfor k in range(K):\n    model.addConstr(0 <= ManpowerOne[k], name=\"manpower_nonnegativity_\" + str(k))\n    model.addConstr(ManpowerOne[k] <= ManpowerLimit, name=\"manpower_upper_limit_\" + str(k))"
        },
        {
            "description": "The allocated manpower for resource type two for each product must be non-negative and cannot exceed the upper limit of manpower",
            "status": "coded",
            "formulation": "\\forall k: 0 \\leq \\textup{ManpowerTwo}_k \\leq \\textup{ManpowerLimit}",
            "related_variables": [
                "ManpowerTwo"
            ],
            "related_parameters": [
                "ManpowerLimit"
            ],
            "code": "# Define upper limit manpower constraint for each product\nfor k in range(K):\n    model.addConstr(0 <= ManpowerTwo[k], name=f\"manpower_nonnegativity_{k}\")\n    model.addConstr(ManpowerTwo[k] <= ManpowerLimit, name=f\"manpower_upper_limit_{k}\")"
        },
        {
            "description": "Stock levels of product k must be non-negative and can not exceed their initial levels plus the production capacity.",
            "status": "coded",
            "formulation": "\\forall k \\in K, \\quad \\textup{Stock}_k + \\sum_{j=1}^{J} (\\textup{InputOne}_{kj} + \\textup{InputTwo}_{kj}) - \\textup{Production}_k \\leq \\textup{Stock}_k + \\textup{Capacity}_k, \\quad \\textup{Production}_k \\geq 0",
            "related_variables": [
                "Stock",
                "Production",
                "InputOne",
                "InputTwo"
            ],
            "related_parameters": [
                "Capacity"
            ],
            "code": "# Constraint: Stock levels must be non-negative and cannot exceed initial levels plus production capacity\nfor k in K:\n    stock_level_expr = Stock[k] + sum(InputOne[k, j] + InputTwo[k, j] for j in range(J)) - Production[k]\n    initial_plus_capacity_expr = Stock[k] + Capacity[k]\n    model.addConstr(stock_level_expr <= initial_plus_capacity_expr, name=f\"stock_limit_{k}\")\n    model.addConstr(Production[k] >= 0, name=f\"non_negative_production_{k}\")"
        },
        {
            "description": "Production capacities for each product must be respected",
            "status": "coded",
            "formulation": "\\textup{Production}_k \\leq \\textup{Capacity}_k \\quad \\forall k \\in K",
            "related_variables": [
                "Production"
            ],
            "related_parameters": [
                "Capacity"
            ],
            "code": "# Add production capacity constraints for each product\nfor k in K:\n    model.addConstr(Production[k] <= Capacity[k], name=f\"prod_capacity_{k}\")"
        },
        {
            "description": "The total manpower used must not exceed the upper limit, ManpowerLimit",
            "status": "coded",
            "formulation": "\\sum_{k} (\\textup{ManpowerOne}_k + \\textup{ManpowerTwo}_k) \\leq \\textup{ManpowerLimit}",
            "related_variables": [
                "ManpowerOne",
                "ManpowerTwo"
            ],
            "related_parameters": [
                "ManpowerLimit"
            ],
            "code": "# Manpower constraint: the total manpower used must not exceed the upper limit, ManpowerLimit\nmodel.addConstr(gp.quicksum(ManpowerOne[k] + ManpowerTwo[k] for k in range(K)) <= ManpowerLimit, name=\"manpower_limit\")"
        },
        {
            "description": "All variables of production, resources, and manpower must be non-negative",
            "status": "coded",
            "formulation": "\\forall k, j: \\quad \\textup{Availability}_{kj} \\geq 0, \\quad \\textup{Production}_k \\geq 0",
            "related_variables": [
                "Availability",
                "Production"
            ],
            "related_parameters": [],
            "code": "# Add constraints for non-negativity of Availability and Production variables\nfor k in K:\n    for j in J:\n        model.addConstr(Availability[k, j] >= 0, name=f\"non_negativity_Availability_{k}_{j}\")\nfor k in K:\n    model.addConstr(Production[k] >= 0, name=f\"non_negativity_Production_{k}\")"
        }
    ],
    "variables": [
        {
            "definition": "The availability of resource type two for product k in year j",
            "symbol": "Availability",
            "shape": [
                "K",
                "K"
            ],
            "status": "coded",
            "code": "Availability = model.addVars(K, J, vtype=gp.GRB.CONTINUOUS, name=\"Availability\")"
        },
        {
            "definition": "The total production of product k over the planning horizon",
            "symbol": "Production",
            "shape": [
                "K"
            ],
            "status": "coded",
            "code": "Production = model.addVars(K, vtype=gp.GRB.CONTINUOUS, name=\"Production\")"
        },
        {
            "definition": "The production of product k in year j",
            "symbol": "ProductionYearly",
            "shape": [
                "K",
                "J"
            ],
            "status": "coded",
            "code": "ProductionYearly = model.addVars(K, J, vtype=gp.GRB.CONTINUOUS, name=\"ProductionYearly\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total production of all products in the last two years of the planning horizon",
            "status": "coded",
            "formulation": "\\max \\sum_{k \\in K} (\\textup{ProductionYearly}_{k, J-1} + \\textup{ProductionYearly}_{k, J})",
            "related_variables": [
                "ProductionYearly"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(ProductionYearly[k, J-2] + ProductionYearly[k, J-1] for k in K), gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413085734_nlp4lp_28/",
    "problem_path": "data/nlp4lp/28/"
}