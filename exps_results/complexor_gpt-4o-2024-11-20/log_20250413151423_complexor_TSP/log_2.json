{
    "background": "The problem is focused on allocating goods from multiple origins to multiple destinations, considering the individual supply limits at each origin and demand requirements at each destination, with the goal of minimizing the total transportation cost.",
    "problem_type": "LP",
    "parameters": [
        {
            "symbol": "OriginNum",
            "definition": "The total number of origins",
            "shape": [],
            "code": "OriginNum = data[\"OriginNum\"] # scalar parameter"
        },
        {
            "symbol": "DestinationNum",
            "definition": "The total number of destinations",
            "shape": [],
            "code": "DestinationNum = data[\"DestinationNum\"] # scalar parameter"
        },
        {
            "symbol": "Supply",
            "definition": "The supply of goods available at each origin",
            "shape": [
                "OriginNum"
            ],
            "code": "Supply = np.array(data[\"Supply\"]) # ['OriginNum']"
        },
        {
            "symbol": "Demand",
            "definition": "The demand for goods to be satisfied at each destination",
            "shape": [
                "DestinationNum"
            ],
            "code": "Demand = np.array(data[\"Demand\"]) # ['DestinationNum']"
        },
        {
            "symbol": "Cost",
            "definition": "The cost of transporting goods from origin i to destination j",
            "shape": [
                "OriginNum",
                "DestinationNum"
            ],
            "code": "Cost = np.array(data[\"Cost\"]) # ['OriginNum', 'DestinationNum']"
        }
    ],
    "constraints": [
        {
            "description": "Each origin i has a supply limit, restricting the total amount of goods transported from that origin to destinations.",
            "status": "coded",
            "formulation": "\\sum_{j=1}^{\\textup{DestinationNum}} \\textup{GoodsTransported}_{ij} \\leq \\textup{Supply}_{i}, \\quad \\forall i \\in \\{1, 2, \\dots, \\textup{OriginNum}\\}",
            "related_variables": [
                "GoodsTransported"
            ],
            "related_parameters": [
                "Supply",
                "OriginNum",
                "DestinationNum"
            ],
            "code": "# Add supply limit constraints for each origin\nfor i in range(OriginNum):\n    model.addConstr(\n        gp.quicksum(GoodsTransported[i, j] for j in range(DestinationNum)) <= Supply[i],\n        name=f\"supply_limit_origin_{i}\"\n    )"
        },
        {
            "description": "The total goods transported to each destination j must satisfy its demand requirement.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{OriginNum}} \\textup{GoodsTransported}_{i,j} = \\textup{Demand}_{j} \\quad \\forall j \\in \\{1, 2, \\dots, \\textup{DestinationNum}\\}",
            "related_variables": [
                "GoodsTransported"
            ],
            "related_parameters": [
                "Demand",
                "OriginNum",
                "DestinationNum"
            ],
            "code": "# Add constraints to ensure demand is met at each destination\nfor j in range(DestinationNum):\n    model.addConstr(gp.quicksum(GoodsTransported[i, j] for i in range(OriginNum)) == Demand[j], name=f\"demand_satisfaction_dest_{j}\")"
        },
        {
            "description": "The amount of goods transported from any origin to any destination must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{GoodsTransported}_{ij} \\geq 0 \\quad \\textup{for all} \\quad i \\in \\{1, 2, \\dots, \\textup{OriginNum}\\}, \\quad j \\in \\{1, 2, \\dots, \\textup{DestinationNum}\\}",
            "related_variables": [
                "GoodsTransported"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for GoodsTransported variables\nfor i in range(OriginNum):\n    for j in range(DestinationNum):\n        model.addConstr(GoodsTransported[i, j] >= 0, name=f\"non_negative_GoodsTransported_{i}_{j}\")"
        },
        {
            "description": "Ensure the total goods transported from each origin does not exceed its supply limit",
            "status": "coded",
            "formulation": "\\sum_{j=1}^{\\textup{DestinationNum}} \\textup{GoodsTransported}_{i,j} \\leq \\textup{Supply}_{i}, \\quad \\forall \\, i \\in \\{1, 2, ..., \\textup{OriginNum}\\}",
            "related_variables": [
                "GoodsTransported"
            ],
            "related_parameters": [
                "Supply",
                "DestinationNum",
                "OriginNum"
            ],
            "code": "# Add constraints to ensure total goods transported from each origin does not exceed its supply limit\nfor i in range(OriginNum):\n    model.addConstr(\n        gp.quicksum(GoodsTransported[i, j] for j in range(DestinationNum)) <= Supply[i],\n        name=f\"supply_limit_origin_{i}\"\n    )"
        },
        {
            "description": "Ensure the total goods transported to each destination meets its demand",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{OriginNum}} \\textup{GoodsTransported}_{i,j} = \\textup{Demand}_{j}, \\quad \\forall \\, j \\in \\{1, 2, ..., \\textup{DestinationNum}\\}",
            "related_variables": [
                "GoodsTransported"
            ],
            "related_parameters": [
                "Demand",
                "OriginNum",
                "DestinationNum"
            ],
            "code": "# Ensure the total goods transported to each destination meets its demand\nfor j in range(DestinationNum):\n    model.addConstr(\n        gp.quicksum(GoodsTransported[i, j] for i in range(OriginNum)) == Demand[j],\n        name=f\"demand_satisfaction_{j}\"\n    )"
        },
        {
            "description": "Ensure non-negativity of the transported goods",
            "status": "coded",
            "formulation": "\\textup{GoodsTransported}_{i,j} \\geq 0, \\quad \\forall \\, i \\in \\{1, 2, ..., \\textup{OriginNum}\\}, \\, \\forall \\, j \\in \\{1, 2, ..., \\textup{DestinationNum}\\}",
            "related_variables": [
                "GoodsTransported"
            ],
            "related_parameters": [
                "OriginNum",
                "DestinationNum"
            ],
            "code": "# Ensure non-negativity of the transported goods\nfor i in range(OriginNum):\n    for j in range(DestinationNum):\n        model.addConstr(GoodsTransported[i, j] >= 0, name=f\"nonnegativity_transport_{i}_{j}\")"
        }
    ],
    "variables": [
        {
            "definition": "The amount of goods transported from origin i to destination j",
            "symbol": "GoodsTransported",
            "shape": [
                "OriginNum",
                "DestinationNum"
            ],
            "status": "coded",
            "code": "GoodsTransported = model.addVars(OriginNum, DestinationNum, vtype=gp.GRB.CONTINUOUS, name=\"GoodsTransported\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total transportation cost from origins to destinations",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{OriginNum}} \\sum_{j=1}^{\\textup{DestinationNum}} \\textup{Cost}_{i,j} \\cdot \\textup{GoodsTransported}_{i,j}",
            "related_variables": [
                "GoodsTransported"
            ],
            "related_parameters": [
                "Cost",
                "OriginNum",
                "DestinationNum"
            ],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(Cost[i, j] * GoodsTransported[i, j] for i in range(OriginNum) for j in range(DestinationNum)), gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 315.0,
    "log_path": "logs/log_20250413151423_complexor_TSP/",
    "problem_path": "data/complexor/TSP/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/complexor/TSP/data.json\", \"r\") as f:\n    data = json.load(f)\n\nOriginNum = data[\"OriginNum\"] # scalar parameter\nDestinationNum = data[\"DestinationNum\"] # scalar parameter\nSupply = np.array(data[\"Supply\"]) # ['OriginNum']\nDemand = np.array(data[\"Demand\"]) # ['DestinationNum']\nCost = np.array(data[\"Cost\"]) # ['OriginNum', 'DestinationNum']\nGoodsTransported = model.addVars(OriginNum, DestinationNum, vtype=gp.GRB.CONTINUOUS, name=\"GoodsTransported\")\n\n# Add supply limit constraints for each origin\nfor i in range(OriginNum):\n    model.addConstr(\n        gp.quicksum(GoodsTransported[i, j] for j in range(DestinationNum)) <= Supply[i],\n        name=f\"supply_limit_origin_{i}\"\n    )\n\n# Add constraints to ensure demand is met at each destination\nfor j in range(DestinationNum):\n    model.addConstr(gp.quicksum(GoodsTransported[i, j] for i in range(OriginNum)) == Demand[j], name=f\"demand_satisfaction_dest_{j}\")\n\n# Non-negativity constraint for GoodsTransported variables\nfor i in range(OriginNum):\n    for j in range(DestinationNum):\n        model.addConstr(GoodsTransported[i, j] >= 0, name=f\"non_negative_GoodsTransported_{i}_{j}\")\n\n# Add constraints to ensure total goods transported from each origin does not exceed its supply limit\nfor i in range(OriginNum):\n    model.addConstr(\n        gp.quicksum(GoodsTransported[i, j] for j in range(DestinationNum)) <= Supply[i],\n        name=f\"supply_limit_origin_{i}\"\n    )\n\n# Ensure the total goods transported to each destination meets its demand\nfor j in range(DestinationNum):\n    model.addConstr(\n        gp.quicksum(GoodsTransported[i, j] for i in range(OriginNum)) == Demand[j],\n        name=f\"demand_satisfaction_{j}\"\n    )\n\n# Ensure non-negativity of the transported goods\nfor i in range(OriginNum):\n    for j in range(DestinationNum):\n        model.addConstr(GoodsTransported[i, j] >= 0, name=f\"nonnegativity_transport_{i}_{j}\")\n\n# Set objective\nmodel.setObjective(gp.quicksum(Cost[i, j] * GoodsTransported[i, j] for i in range(OriginNum) for j in range(DestinationNum)), gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}