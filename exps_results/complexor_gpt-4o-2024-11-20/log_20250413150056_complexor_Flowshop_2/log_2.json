{
    "background": "A set of jobs need to be processed on a set of machines in series, with each machine being able to work in parallel. Jobs must follow the same processing order through all machines, with the objective to minimize the total time to complete all jobs, known as the makespan.",
    "problem_type": "LP",
    "parameters": [
        {
            "symbol": "JobCount",
            "definition": "The total number of jobs to be processed",
            "shape": [],
            "code": "JobCount = data[\"JobCount\"] # scalar parameter"
        },
        {
            "symbol": "MachineCount",
            "definition": "The total number of machines available for processing",
            "shape": [],
            "code": "MachineCount = data[\"MachineCount\"] # scalar parameter"
        },
        {
            "symbol": "ProcessingTime",
            "definition": "The time required to process job j on machine m",
            "shape": [
                "JobCount",
                "MachineCount"
            ],
            "code": "ProcessingTime = np.array(data[\"ProcessingTime\"]) # ['JobCount', 'MachineCount']"
        }
    ],
    "constraints": [
        {
            "description": "Ensure jobs follow sequential processing across machines and no two jobs overlap on the same machine.",
            "status": "coded",
            "formulation": "\\textup{JobStartTimes}_{j,m+1} \\geq \\textup{JobStartTimes}_{j,m} + \\textup{ProcessingTime}_{j,m}, \\quad \\forall j = 1, \\ldots, \\textup{JobCount}, \\quad \\forall m = 1, \\ldots, \\textup{MachineCount}-1",
            "related_variables": [
                "JobStartTimes"
            ],
            "related_parameters": [
                "JobCount",
                "MachineCount",
                "ProcessingTime"
            ],
            "code": "# Add sequential processing constraints across machines\nfor j in range(JobCount):\n    for m in range(MachineCount - 1):\n        model.addConstr(\n            JobStartTimes[j, m + 1] >= JobStartTimes[j, m] + ProcessingTime[j, m],\n            name=f\"sequential_processing_{j}_{m}\"\n        )"
        },
        {
            "description": "Each machine can process only one job at a time.",
            "status": "coded",
            "formulation": "\\textup{JobStartTimes}_{j1,m} + \\textup{ProcessingTime}_{j1,m} \\leq \\textup{JobStartTimes}_{j2,m} + M \\cdot (1 - \\textup{MachineSequenceOrder}_{j1,j2,m}) \\\\ \\textup{JobStartTimes}_{j2,m} + \\textup{ProcessingTime}_{j2,m} \\leq \\textup{JobStartTimes}_{j1,m} + M \\cdot (1 - \\textup{MachineSequenceOrder}_{j2,j1,m})",
            "related_variables": [
                "JobStartTimes",
                "MachineSequenceOrder"
            ],
            "related_parameters": [
                "ProcessingTime",
                "JobCount",
                "MachineCount"
            ],
            "code": "# Add constraints to ensure that each machine processes only one job at a time\nM = 1e6  # Large constant value for big-M formulation\nfor m in range(MachineCount):\n    for j1 in range(JobCount):\n        for j2 in range(JobCount):\n            if j1 != j2:\n                model.addConstr(\n                    JobStartTimes[j1, m] + ProcessingTime[j1, m] \n                    <= JobStartTimes[j2, m] + M * (1 - MachineSequenceOrder[j1, j2, m]),\n                    name=f\"MachineOneJob_{j1}_{j2}_{m}_1\"\n                )\n                model.addConstr(\n                    JobStartTimes[j2, m] + ProcessingTime[j2, m] \n                    <= JobStartTimes[j1, m] + M * (1 - MachineSequenceOrder[j2, j1, m]),\n                    name=f\"MachineOneJob_{j1}_{j2}_{m}_2\"\n                )"
        },
        {
            "description": "Ensure jobs on the same machine do not overlap using binary sequence order.",
            "status": "coded",
            "formulation": "\\textup{JobStartTimes}_{j',m} \\geq \\textup{JobStartTimes}_{j,m} + \\textup{ProcessingTime}_{j,m} - (1 - \\textup{MachineSequenceOrder}_{j,j',m}) \\cdot M, \\quad \\forall j, j' = 1, \\ldots, \\textup{JobCount}, \\quad \\forall m = 1, \\ldots, \\textup{MachineCount}",
            "related_variables": [
                "JobStartTimes",
                "MachineSequenceOrder"
            ],
            "related_parameters": [
                "JobCount",
                "MachineCount",
                "ProcessingTime"
            ],
            "code": "# Add constraints to ensure jobs on the same machine do not overlap\nfor j in range(JobCount):\n    for j_prime in range(JobCount):\n        if j != j_prime:  # Ensure we are comparing two different jobs\n            for m in range(MachineCount):\n                model.addConstr(\n                    JobStartTimes[j_prime, m] >= JobStartTimes[j, m] + ProcessingTime[j, m] - (1 - MachineSequenceOrder[j, j_prime, m]) * M,\n                    name=f\"job_non_overlap_{j}_{j_prime}_machine_{m}\"\n                )"
        },
        {
            "description": "Binary variable logic ensures sequencing order is correctly enforced.",
            "status": "coded",
            "formulation": "\\textup{MachineSequenceOrder}_{j,j',m} + \\textup{MachineSequenceOrder}_{j',j,m} = 1, \\quad \\forall j \\neq j', \\quad \\forall m",
            "related_variables": [
                "MachineSequenceOrder"
            ],
            "related_parameters": [
                "JobCount",
                "MachineCount"
            ],
            "code": "# Add binary variable sequencing constraints for job order on each machine\nfor m in range(MachineCount):\n    for j in range(JobCount):\n        for j_prime in range(JobCount):\n            if j != j_prime:\n                model.addConstr(\n                    MachineSequenceOrder[j, j_prime, m] + MachineSequenceOrder[j_prime, j, m] == 1,\n                    name=f\"seq_order_{j}_{j_prime}_{m}\"\n                )"
        },
        {
            "description": "Each pair of jobs must have exactly one sequencing order on each machine.",
            "status": "coded",
            "formulation": "\\textup{MachineSequenceOrder}_{j1,j2,m} + \\textup{MachineSequenceOrder}_{j2,j1,m} = 1 \\quad \\forall j1 \\neq j2, \\forall m",
            "related_variables": [
                "MachineSequenceOrder"
            ],
            "related_parameters": [
                "JobCount",
                "MachineCount"
            ],
            "code": "# Add sequencing constraints to ensure each pair of jobs has exactly one sequencing order on each machine\nfor j1 in range(JobCount):\n    for j2 in range(JobCount):\n        if j1 != j2:  # Ensuring j1 and j2 are distinct jobs\n            for m in range(MachineCount):\n                model.addConstr(MachineSequenceOrder[j1, j2, m] + MachineSequenceOrder[j2, j1, m] == 1, \n                                name=f\"seq_order_j{j1}_j{j2}_m{m}\")"
        },
        {
            "description": "Ensures that the makespan is greater than or equal to the completion time of all jobs on the last machine",
            "status": "coded",
            "formulation": "\\textup{Makespan} \\geq \\textup{JobStartTimes}_{j, \\textup{MachineCount}} + \\textup{ProcessingTime}_{j, \\textup{MachineCount}} \\quad \\forall j \\in \\{1, 2, \\ldots, \\textup{JobCount}\\}",
            "related_variables": [
                "Makespan",
                "JobStartTimes"
            ],
            "related_parameters": [
                "ProcessingTime",
                "JobCount",
                "MachineCount"
            ],
            "code": "# Add constraint to ensure Makespan is greater than or equal to the completion time of all jobs on the last machine\nfor j in range(JobCount):\n    model.addConstr(Makespan >= JobStartTimes[j, MachineCount - 1] + ProcessingTime[j, MachineCount - 1], name=f\"MakespanConstraint_job{j}\")"
        }
    ],
    "variables": [
        {
            "definition": "Start time of job j on machine m",
            "symbol": "JobStartTimes",
            "shape": [
                "JobCount",
                "MachineCount"
            ],
            "status": "coded",
            "code": "JobStartTimes = model.addVars(JobCount, MachineCount, vtype=gp.GRB.CONTINUOUS, name=\"JobStartTimes\")"
        },
        {
            "definition": "Binary variable representing job sequencing on the same machine",
            "symbol": "MachineSequenceOrder",
            "shape": [
                "JobCount",
                "JobCount",
                "MachineCount"
            ],
            "status": "coded",
            "code": "MachineSequenceOrder = model.addVars(JobCount, JobCount, MachineCount, vtype=gp.GRB.BINARY, name=\"MachineSequenceOrder\")"
        },
        {
            "definition": "The completion time of the last job on the last machine, representing the makespan",
            "symbol": "Makespan",
            "shape": [],
            "status": "coded",
            "code": "Makespan = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"Makespan\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total makespan, which is the time when the last job is completed on the last machine",
            "status": "coded",
            "formulation": "\\min \\textup{Makespan}",
            "related_variables": [
                "Makespan"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(Makespan, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 233.0,
    "log_path": "logs/log_20250413150056_complexor_Flowshop_2/",
    "problem_path": "data/complexor/Flowshop_2/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/complexor/Flowshop_2/data.json\", \"r\") as f:\n    data = json.load(f)\n\nJobCount = data[\"JobCount\"] # scalar parameter\nMachineCount = data[\"MachineCount\"] # scalar parameter\nProcessingTime = np.array(data[\"ProcessingTime\"]) # ['JobCount', 'MachineCount']\nJobStartTimes = model.addVars(JobCount, MachineCount, vtype=gp.GRB.CONTINUOUS, name=\"JobStartTimes\")\nMachineSequenceOrder = model.addVars(JobCount, JobCount, MachineCount, vtype=gp.GRB.BINARY, name=\"MachineSequenceOrder\")\nMakespan = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"Makespan\")\n\n# Add sequential processing constraints across machines\nfor j in range(JobCount):\n    for m in range(MachineCount - 1):\n        model.addConstr(\n            JobStartTimes[j, m + 1] >= JobStartTimes[j, m] + ProcessingTime[j, m],\n            name=f\"sequential_processing_{j}_{m}\"\n        )\n\n# Add constraints to ensure that each machine processes only one job at a time\nM = 1e6  # Large constant value for big-M formulation\nfor m in range(MachineCount):\n    for j1 in range(JobCount):\n        for j2 in range(JobCount):\n            if j1 != j2:\n                model.addConstr(\n                    JobStartTimes[j1, m] + ProcessingTime[j1, m] \n                    <= JobStartTimes[j2, m] + M * (1 - MachineSequenceOrder[j1, j2, m]),\n                    name=f\"MachineOneJob_{j1}_{j2}_{m}_1\"\n                )\n                model.addConstr(\n                    JobStartTimes[j2, m] + ProcessingTime[j2, m] \n                    <= JobStartTimes[j1, m] + M * (1 - MachineSequenceOrder[j2, j1, m]),\n                    name=f\"MachineOneJob_{j1}_{j2}_{m}_2\"\n                )\n\n# Add constraints to ensure jobs on the same machine do not overlap\nfor j in range(JobCount):\n    for j_prime in range(JobCount):\n        if j != j_prime:  # Ensure we are comparing two different jobs\n            for m in range(MachineCount):\n                model.addConstr(\n                    JobStartTimes[j_prime, m] >= JobStartTimes[j, m] + ProcessingTime[j, m] - (1 - MachineSequenceOrder[j, j_prime, m]) * M,\n                    name=f\"job_non_overlap_{j}_{j_prime}_machine_{m}\"\n                )\n\n# Add binary variable sequencing constraints for job order on each machine\nfor m in range(MachineCount):\n    for j in range(JobCount):\n        for j_prime in range(JobCount):\n            if j != j_prime:\n                model.addConstr(\n                    MachineSequenceOrder[j, j_prime, m] + MachineSequenceOrder[j_prime, j, m] == 1,\n                    name=f\"seq_order_{j}_{j_prime}_{m}\"\n                )\n\n# Add sequencing constraints to ensure each pair of jobs has exactly one sequencing order on each machine\nfor j1 in range(JobCount):\n    for j2 in range(JobCount):\n        if j1 != j2:  # Ensuring j1 and j2 are distinct jobs\n            for m in range(MachineCount):\n                model.addConstr(MachineSequenceOrder[j1, j2, m] + MachineSequenceOrder[j2, j1, m] == 1, \n                                name=f\"seq_order_j{j1}_j{j2}_m{m}\")\n\n# Add constraint to ensure Makespan is greater than or equal to the completion time of all jobs on the last machine\nfor j in range(JobCount):\n    model.addConstr(Makespan >= JobStartTimes[j, MachineCount - 1] + ProcessingTime[j, MachineCount - 1], name=f\"MakespanConstraint_job{j}\")\n\n# Set objective\nmodel.setObjective(Makespan, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}