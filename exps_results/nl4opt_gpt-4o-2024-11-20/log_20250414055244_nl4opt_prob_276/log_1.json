{
    "background": "A senior home is scheduling the intake of spinach and soybeans for elderly to meet certain nutritional fibre and iron requirements while maximizing caloric intake.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of fibre in a cup of spinach",
            "symbol": "FibreSpinach",
            "value": 100,
            "shape": [],
            "code": "FibreSpinach = data[\"FibreSpinach\"] # scalar parameter"
        },
        {
            "definition": "Milligrams of iron in a cup of spinach",
            "symbol": "IronSpinach",
            "value": 5,
            "shape": [],
            "code": "IronSpinach = data[\"IronSpinach\"] # scalar parameter"
        },
        {
            "definition": "Calories in a cup of spinach",
            "symbol": "CaloriesSpinach",
            "value": 30,
            "shape": [],
            "code": "CaloriesSpinach = data[\"CaloriesSpinach\"] # scalar parameter"
        },
        {
            "definition": "Units of fibre in a cup of soybeans",
            "symbol": "FibreSoybeans",
            "value": 80,
            "shape": [],
            "code": "FibreSoybeans = data[\"FibreSoybeans\"] # scalar parameter"
        },
        {
            "definition": "Milligrams of iron in a cup of soybeans",
            "symbol": "IronSoybeans",
            "value": 12,
            "shape": [],
            "code": "IronSoybeans = data[\"IronSoybeans\"] # scalar parameter"
        },
        {
            "definition": "Calories in a cup of soybeans",
            "symbol": "CaloriesSoybeans",
            "value": 100,
            "shape": [],
            "code": "CaloriesSoybeans = data[\"CaloriesSoybeans\"] # scalar parameter"
        },
        {
            "definition": "Total minimum required units of fibre",
            "symbol": "TotalFibre",
            "value": 12000,
            "shape": [],
            "code": "TotalFibre = data[\"TotalFibre\"] # scalar parameter"
        },
        {
            "definition": "Total minimum required milligrams of iron",
            "symbol": "TotalIron",
            "value": 300,
            "shape": [],
            "code": "TotalIron = data[\"TotalIron\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The non-negativity constraint for the number of cups of spinach consumed.",
            "status": "coded",
            "formulation": "\\\\textup{NumberOfCupsSpinach} \\\\geq 0",
            "related_variables": [
                "NumberOfCupsSpinach"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for NumberOfCupsSpinach\nmodel.addConstr(NumberOfCupsSpinach >= 0, name=\"non_negativity_spinach\")"
        },
        {
            "description": "The number of cups of soybeans must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfCupsSoybeans} \\geq 0",
            "related_variables": [
                "NumberOfCupsSoybeans"
            ],
            "related_parameters": [],
            "code": "# The non-negativity constraint is inherently satisfied as the variable \"NumberOfCupsSoybeans\" is defined with type CONTINUOUS, which is non-negative by default."
        },
        {
            "description": "Number of cups of spinach must exceed the number of cups of soybeans.",
            "status": "coded",
            "formulation": "\\textup{NumberOfCupsSpinach} \\geq \\textup{NumberOfCupsSoybeans} + 1",
            "related_variables": [
                "NumberOfCupsSpinach",
                "NumberOfCupsSoybeans"
            ],
            "related_parameters": [],
            "code": "# Add constraint: Number of cups of spinach must exceed the number of cups of soybeans by at least 1\nmodel.addConstr(NumberOfCupsSpinach >= NumberOfCupsSoybeans + 1, name=\"SpinachExceedsSoybeans\")"
        },
        {
            "description": "The total intake of fibre must be at least TotalFibre units.",
            "status": "coded",
            "formulation": "\\\\textup{FibreSpinach} \\\\times \\\\textup{NumberOfCupsSpinach} + \\\\textup{FibreSoybeans} \\\\times \\\\textup{NumberOfCupsSoybeans} \\\\geq \\\\textup{TotalFibre}",
            "related_variables": [
                "NumberOfCupsSpinach",
                "NumberOfCupsSoybeans"
            ],
            "related_parameters": [
                "FibreSpinach",
                "FibreSoybeans",
                "TotalFibre"
            ],
            "code": "# Add fibre constraint\nmodel.addConstr(\n    FibreSpinach * NumberOfCupsSpinach + FibreSoybeans * NumberOfCupsSoybeans >= TotalFibre,\n    name=\"fibre_constraint\"\n)"
        },
        {
            "description": "The total intake of iron from both spinach and soybeans must be at least TotalIron mg.",
            "status": "coded",
            "formulation": "\\\\textup{IronSpinach} \\\\cdot \\\\textup{NumberOfCupsSpinach} + \\\\textup{IronSoybeans} \\\\cdot \\\\textup{NumberOfCupsSoybeans} \\\\geq \\\\textup{TotalIron}",
            "related_variables": [
                "NumberOfCupsSpinach",
                "NumberOfCupsSoybeans"
            ],
            "related_parameters": [
                "IronSpinach",
                "IronSoybeans",
                "TotalIron"
            ],
            "code": "# Adding the constraint for total iron intake\nmodel.addConstr(\n    IronSpinach * NumberOfCupsSpinach + IronSoybeans * NumberOfCupsSoybeans >= TotalIron,\n    name=\"total_iron_intake\"\n)"
        },
        {
            "description": "The total fibre consumption must be at least the minimum required units of fibre.",
            "status": "coded",
            "formulation": "\\\\textup{FibreSpinach} \\\\cdot \\\\textup{NumberOfCupsSpinach} + \\\\textup{FibreSoybeans} \\\\cdot \\\\textup{NumberOfCupsSoybeans} \\\\geq \\\\textup{TotalFibre}",
            "related_variables": [
                "NumberOfCupsSpinach",
                "NumberOfCupsSoybeans"
            ],
            "related_parameters": [
                "FibreSpinach",
                "FibreSoybeans",
                "TotalFibre"
            ],
            "code": "# Add constraint for total fibre consumption\nmodel.addConstr(FibreSpinach * NumberOfCupsSpinach + FibreSoybeans * NumberOfCupsSoybeans >= TotalFibre, name=\"fibre_requirement\")"
        },
        {
            "description": "The total iron consumption must be at least the minimum required milligrams of iron.",
            "status": "coded",
            "formulation": "\\\\textup{IronSpinach} \\\\cdot \\\\textup{NumberOfCupsSpinach} + \\\\textup{IronSoybeans} \\\\cdot \\\\textup{NumberOfCupsSoybeans} \\\\geq \\\\textup{TotalIron}",
            "related_variables": [
                "NumberOfCupsSpinach",
                "NumberOfCupsSoybeans"
            ],
            "related_parameters": [
                "IronSpinach",
                "IronSoybeans",
                "TotalIron"
            ],
            "code": "# Add constraint for minimum required milligrams of iron\nmodel.addConstr(\n    NumberOfCupsSpinach * IronSpinach + NumberOfCupsSoybeans * IronSoybeans >= TotalIron,\n    name=\"minimum_iron_requirement\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "The number of cups of spinach consumed.",
            "symbol": "NumberOfCupsSpinach",
            "shape": [],
            "status": "coded",
            "code": "NumberOfCupsSpinach = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfCupsSpinach\")"
        },
        {
            "definition": "The number of cups of soybeans consumed.",
            "symbol": "NumberOfCupsSoybeans",
            "shape": [],
            "status": "coded",
            "code": "NumberOfCupsSoybeans = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfCupsSoybeans\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the seniors' total caloric intake from cups of spinach and soybeans.",
            "status": "coded",
            "formulation": "\\\\textup{Maximize: } Z = \\\\textup{CaloriesSpinach} \\\\cdot \\\\textup{NumberOfCupsSpinach} + \\\\textup{CaloriesSoybeans} \\\\cdot \\\\textup{NumberOfCupsSoybeans}",
            "related_variables": [
                "NumberOfCupsSpinach",
                "NumberOfCupsSoybeans"
            ],
            "related_parameters": [
                "CaloriesSpinach",
                "CaloriesSoybeans"
            ],
            "code": "# Set objective\nmodel.setObjective(CaloriesSpinach * NumberOfCupsSpinach + CaloriesSoybeans * NumberOfCupsSoybeans, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250414055244_nl4opt_prob_276/",
    "problem_path": "data/nl4opt/prob_276/"
}