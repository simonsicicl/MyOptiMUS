{
    "background": "A butcher shop is considering the purchase of manual and automatic meat slicers, each with different slicing capacities and maintenance requirements, and aims to find the optimal mix.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of slices per minute a manual slicer can cut",
            "symbol": "SlicesPerMinuteManual",
            "value": 5,
            "shape": [],
            "code": "SlicesPerMinuteManual = data[\"SlicesPerMinuteManual\"] # scalar parameter"
        },
        {
            "definition": "Number of slices per minute an automatic slicer can cut",
            "symbol": "SlicesPerMinuteAutomatic",
            "value": 8,
            "shape": [],
            "code": "SlicesPerMinuteAutomatic = data[\"SlicesPerMinuteAutomatic\"] # scalar parameter"
        },
        {
            "definition": "Units of grease required per minute by a manual slicer",
            "symbol": "GreasePerMinuteManual",
            "value": 3,
            "shape": [],
            "code": "GreasePerMinuteManual = data[\"GreasePerMinuteManual\"] # scalar parameter"
        },
        {
            "definition": "Units of grease required per minute by an automatic slicer",
            "symbol": "GreasePerMinuteAutomatic",
            "value": 6,
            "shape": [],
            "code": "GreasePerMinuteAutomatic = data[\"GreasePerMinuteAutomatic\"] # scalar parameter"
        },
        {
            "definition": "Minimum total number of slices required per minute",
            "symbol": "MinTotalSlices",
            "value": 50,
            "shape": [],
            "code": "MinTotalSlices = data[\"MinTotalSlices\"] # scalar parameter"
        },
        {
            "definition": "Maximum total units of grease that can be used per minute",
            "symbol": "MaxTotalGrease",
            "value": 35,
            "shape": [],
            "code": "MaxTotalGrease = data[\"MaxTotalGrease\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of manual slicers must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{NumberManualSlicers} \\\\geq 0",
            "related_variables": [
                "NumberManualSlicers"
            ],
            "related_parameters": [],
            "code": "# Since the variable \"NumberManualSlicers\" is already defined with non-negativity enforced as it is declared as a continuous variable (default lower bound is 0), no additional code is needed for this constraint."
        },
        {
            "description": "Ensure the number of automatic meat slicers is non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{NumberAutomaticSlicers} \\\\geq 0",
            "related_variables": [
                "NumberAutomaticSlicers"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since the variable 'NumberAutomaticSlicers' domain already ensures non-negativity due to its default lower bound of 0."
        },
        {
            "description": "The number of manual slicers must be less than the number of automatic slicers.",
            "status": "coded",
            "formulation": "\\\\textup{NumberManualSlicers} \\\\leq \\\\textup{NumberAutomaticSlicers} - 1",
            "related_variables": [
                "NumberManualSlicers",
                "NumberAutomaticSlicers"
            ],
            "related_parameters": [],
            "code": "# Add constraint: Number of manual slicers must be less than the number of automatic slicers\nmodel.addConstr(NumberManualSlicers <= NumberAutomaticSlicers - 1, name=\"manual_vs_automatic_slicers\")"
        },
        {
            "description": "The total slicing capacity must be at least equal to the minimum required slices per minute.",
            "status": "coded",
            "formulation": "\\\\textup{SlicesPerMinuteManual} \\\\cdot \\\\textup{NumberManualSlicers} + \\\\textup{SlicesPerMinuteAutomatic} \\\\cdot \\\\textup{NumberAutomaticSlicers} \\\\geq \\\\textup{MinTotalSlices}",
            "related_variables": [
                "NumberManualSlicers",
                "NumberAutomaticSlicers"
            ],
            "related_parameters": [
                "SlicesPerMinuteManual",
                "SlicesPerMinuteAutomatic",
                "MinTotalSlices"
            ],
            "code": "# Add constraint for minimum required slicing capacity\nmodel.addConstr(\n    SlicesPerMinuteManual * NumberManualSlicers + SlicesPerMinuteAutomatic * NumberAutomaticSlicers >= MinTotalSlices, \n    name=\"min_slicing_capacity\"\n)"
        },
        {
            "description": "Total grease usage must be at most \\textup{MaxTotalGrease} units per minute.",
            "status": "coded",
            "formulation": "\\textup{NumberManualSlicers} \\cdot \\textup{GreasePerMinuteManual} + \\textup{NumberAutomaticSlicers} \\cdot \\textup{GreasePerMinuteAutomatic} \\leq \\textup{MaxTotalGrease}",
            "related_variables": [
                "NumberManualSlicers",
                "NumberAutomaticSlicers"
            ],
            "related_parameters": [
                "GreasePerMinuteManual",
                "GreasePerMinuteAutomatic",
                "MaxTotalGrease"
            ],
            "code": "# Add grease usage constraint\nmodel.addConstr(\n    NumberManualSlicers * GreasePerMinuteManual + NumberAutomaticSlicers * GreasePerMinuteAutomatic <= MaxTotalGrease,\n    name=\"grease_usage_constraint\"\n)"
        },
        {
            "description": "The total slicing capacity of slicers should meet or exceed the minimum required slicing rate.",
            "status": "coded",
            "formulation": "\\textup{SlicesPerMinuteManual} \\cdot \\textup{NumberManualSlicers} + \\textup{SlicesPerMinuteAutomatic} \\cdot \\textup{NumberAutomaticSlicers} \\geq \\textup{MinTotalSlices}",
            "related_variables": [
                "NumberManualSlicers",
                "NumberAutomaticSlicers"
            ],
            "related_parameters": [
                "SlicesPerMinuteManual",
                "SlicesPerMinuteAutomatic",
                "MinTotalSlices"
            ],
            "code": "# Add constraint to ensure total slicing capacity meets the minimum required slicing rate\nmodel.addConstr(\n    NumberManualSlicers * SlicesPerMinuteManual + NumberAutomaticSlicers * SlicesPerMinuteAutomatic >= MinTotalSlices,\n    name=\"slicing_capacity_constraint\"\n)"
        },
        {
            "description": "The total grease usage of slicers per minute should not exceed the maximum allowable grease capacity.",
            "status": "coded",
            "formulation": "\\textup{GreasePerMinuteManual} \\cdot \\textup{NumberManualSlicers} + \\textup{GreasePerMinuteAutomatic} \\cdot \\textup{NumberAutomaticSlicers} \\leq \\textup{MaxTotalGrease}",
            "related_variables": [
                "NumberManualSlicers",
                "NumberAutomaticSlicers"
            ],
            "related_parameters": [
                "GreasePerMinuteManual",
                "GreasePerMinuteAutomatic",
                "MaxTotalGrease"
            ],
            "code": "# Add constraint for grease usage of slicers per minute\nmodel.addConstr(\n    GreasePerMinuteManual * NumberManualSlicers + GreasePerMinuteAutomatic * NumberAutomaticSlicers <= MaxTotalGrease,\n    name=\"grease_usage_limit\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "The number of manual slicers purchased.",
            "symbol": "NumberManualSlicers",
            "shape": [],
            "status": "coded",
            "code": "NumberManualSlicers = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberManualSlicers\")"
        },
        {
            "definition": "The number of automatic slicers purchased.",
            "symbol": "NumberAutomaticSlicers",
            "shape": [],
            "status": "coded",
            "code": "NumberAutomaticSlicers = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberAutomaticSlicers\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of slicers (manual + automatic) in the shop.",
            "status": "coded",
            "formulation": "\\textup{Minimize: } \\quad \\textup{NumberManualSlicers} + \\textup{NumberAutomaticSlicers}",
            "related_variables": [
                "NumberManualSlicers",
                "NumberAutomaticSlicers"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(NumberManualSlicers + NumberAutomaticSlicers, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250414061414_nl4opt_prob_87/",
    "problem_path": "data/nl4opt/prob_87/"
}