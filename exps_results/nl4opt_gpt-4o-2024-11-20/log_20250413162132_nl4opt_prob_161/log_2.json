{
    "background": "A toy store needs to deliver gifts using two different shipping companies, the store aims to minimize the diesel consumption while meeting gift delivery and company usage requirements.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of gifts delivered by the new company per trip",
            "symbol": "GiftsNew",
            "value": 50,
            "shape": [],
            "code": "GiftsNew = data[\"GiftsNew\"] # scalar parameter"
        },
        {
            "definition": "Number of gifts delivered by the old company per trip",
            "symbol": "GiftsOld",
            "value": 70,
            "shape": [],
            "code": "GiftsOld = data[\"GiftsOld\"] # scalar parameter"
        },
        {
            "definition": "Amount of diesel used by the new company per trip",
            "symbol": "DieselNew",
            "value": 30,
            "shape": [],
            "code": "DieselNew = data[\"DieselNew\"] # scalar parameter"
        },
        {
            "definition": "Amount of diesel used by the old company per trip",
            "symbol": "DieselOld",
            "value": 40,
            "shape": [],
            "code": "DieselOld = data[\"DieselOld\"] # scalar parameter"
        },
        {
            "definition": "Minimum total number of gifts that need to be delivered",
            "symbol": "MinGifts",
            "value": 1000,
            "shape": [],
            "code": "MinGifts = data[\"MinGifts\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of trips the new company can make",
            "symbol": "MaxTripsNew",
            "value": 15,
            "shape": [],
            "code": "MaxTripsNew = data[\"MaxTripsNew\"] # scalar parameter"
        },
        {
            "definition": "Minimum percentage of all trips that must be made by the old company",
            "symbol": "MinPercentOld",
            "value": 0.4,
            "shape": [],
            "code": "MinPercentOld = data[\"MinPercentOld\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of trips by the new company must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{TripsNew} \\\\geq 0",
            "related_variables": [
                "TripsNew"
            ],
            "related_parameters": [],
            "code": "# The variable TripsNew already has the non-negativity constraint because it was defined as a continuous variable (default non-negative domain)."
        },
        {
            "description": "The number of trips made by the old company must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{TripsOld} \\geq 0",
            "related_variables": [
                "TripsOld"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for TripsOld\nmodel.addConstr(TripsOld >= 0, name=\"non_negativity_TripsOld\")"
        },
        {
            "description": "Ensure at least MinGifts gifts are delivered in total, considering the trips made by both companies and the number of gifts delivered per trip by each company.",
            "status": "coded",
            "formulation": "\\\\textup{TripsNew} \\\\times \\\\textup{GiftsNew} + \\\\textup{TripsOld} \\\\times \\\\textup{GiftsOld} \\\\geq \\\\textup{MinGifts}",
            "related_variables": [
                "TripsNew",
                "TripsOld"
            ],
            "related_parameters": [
                "GiftsNew",
                "GiftsOld",
                "MinGifts"
            ],
            "code": "# Add constraint to ensure at least MinGifts are delivered\nmodel.addConstr(TripsNew * GiftsNew + TripsOld * GiftsOld >= MinGifts, name=\"min_gifts_constraint\")"
        },
        {
            "description": "The number of trips made by the new company cannot exceed the maximum limit allowed, MaxTripsNew.",
            "status": "coded",
            "formulation": "\\textup{TripsNew} \\leq \\textup{MaxTripsNew}",
            "related_variables": [
                "TripsNew"
            ],
            "related_parameters": [
                "MaxTripsNew"
            ],
            "code": "# Add constraint ensuring the number of trips made by the new company does not exceed the maximum limit\nmodel.addConstr(TripsNew <= MaxTripsNew, name=\"max_trips_new\")"
        },
        {
            "description": "At least MinPercentOld percent of all trips must be made by the old company.",
            "status": "coded",
            "formulation": "\\\\textup{TripsOld} \\\\geq \\\\frac{\\\\textup{MinPercentOld}}{1 - \\\\textup{MinPercentOld}} \\\\cdot \\\\textup{TripsNew}",
            "related_variables": [
                "TripsOld",
                "TripsNew"
            ],
            "related_parameters": [
                "MinPercentOld"
            ],
            "code": "# Add the constraint to ensure at least MinPercentOld percent of all trips are made by the old company\nmodel.addConstr(TripsOld >= (MinPercentOld / (1 - MinPercentOld)) * TripsNew, name=\"min_percent_old_constraint\")"
        },
        {
            "description": "The total number of gifts delivered must be at least the minimum required",
            "status": "coded",
            "formulation": "\\textup{GiftsNew} \\cdot \\textup{TripsNew} + \\textup{GiftsOld} \\cdot \\textup{TripsOld} \\geq \\textup{MinGifts}",
            "related_variables": [
                "TripsNew",
                "TripsOld"
            ],
            "related_parameters": [
                "GiftsNew",
                "GiftsOld",
                "MinGifts"
            ],
            "code": "# Add constraint for minimum required gifts delivered\nmodel.addConstr(TripsNew * GiftsNew + TripsOld * GiftsOld >= MinGifts, name=\"min_gifts_delivery\")"
        },
        {
            "description": "The number of trips made by the new company must not exceed the maximum allowed",
            "status": "coded",
            "formulation": "\\textup{TripsNew} \\leq \\textup{MaxTripsNew}",
            "related_variables": [
                "TripsNew"
            ],
            "related_parameters": [
                "MaxTripsNew"
            ],
            "code": "# Add constraint to ensure the number of trips made by the new company does not exceed the maximum\nmodel.addConstr(TripsNew <= MaxTripsNew, name=\"max_trips_constraint\")"
        },
        {
            "description": "The old company must make at least a minimum percentage of all trips",
            "status": "coded",
            "formulation": "\\textup{TripsOld} \\geq \\frac{\\textup{MinPercentOld}}{1 - \\textup{MinPercentOld}} \\cdot \\textup{TripsNew}",
            "related_variables": [
                "TripsNew",
                "TripsOld"
            ],
            "related_parameters": [
                "MinPercentOld"
            ],
            "code": "# Add constraint to ensure the old company makes at least the minimum percentage of all trips\nmodel.addConstr(TripsOld >= (MinPercentOld / (1 - MinPercentOld)) * TripsNew, name=\"min_percent_old_trips\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of trips made by the new company.",
            "symbol": "TripsNew",
            "shape": [],
            "status": "coded",
            "code": "TripsNew = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TripsNew\")"
        },
        {
            "definition": "The number of trips made by the old company.",
            "symbol": "TripsOld",
            "shape": [],
            "status": "coded",
            "code": "TripsOld = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TripsOld\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total amount of diesel used for delivering the gifts",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{DieselNew} \\cdot \\textup{TripsNew} + \\textup{DieselOld} \\cdot \\textup{TripsOld}",
            "related_variables": [
                "TripsNew",
                "TripsOld"
            ],
            "related_parameters": [
                "DieselNew",
                "DieselOld"
            ],
            "code": "# Set objective\nmodel.setObjective(DieselNew * TripsNew + DieselOld * TripsOld, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 571.4285714285714,
    "log_path": "logs/log_20250413162132_nl4opt_prob_161/",
    "problem_path": "data/nl4opt/prob_161/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_161/data.json\", \"r\") as f:\n    data = json.load(f)\n\nGiftsNew = data[\"GiftsNew\"] # scalar parameter\nGiftsOld = data[\"GiftsOld\"] # scalar parameter\nDieselNew = data[\"DieselNew\"] # scalar parameter\nDieselOld = data[\"DieselOld\"] # scalar parameter\nMinGifts = data[\"MinGifts\"] # scalar parameter\nMaxTripsNew = data[\"MaxTripsNew\"] # scalar parameter\nMinPercentOld = data[\"MinPercentOld\"] # scalar parameter\nTripsNew = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TripsNew\")\nTripsOld = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TripsOld\")\n\n# The variable TripsNew already has the non-negativity constraint because it was defined as a continuous variable (default non-negative domain).\n\n# Add non-negativity constraint for TripsOld\nmodel.addConstr(TripsOld >= 0, name=\"non_negativity_TripsOld\")\n\n# Add constraint to ensure at least MinGifts are delivered\nmodel.addConstr(TripsNew * GiftsNew + TripsOld * GiftsOld >= MinGifts, name=\"min_gifts_constraint\")\n\n# Add constraint ensuring the number of trips made by the new company does not exceed the maximum limit\nmodel.addConstr(TripsNew <= MaxTripsNew, name=\"max_trips_new\")\n\n# Add the constraint to ensure at least MinPercentOld percent of all trips are made by the old company\nmodel.addConstr(TripsOld >= (MinPercentOld / (1 - MinPercentOld)) * TripsNew, name=\"min_percent_old_constraint\")\n\n# Add constraint for minimum required gifts delivered\nmodel.addConstr(TripsNew * GiftsNew + TripsOld * GiftsOld >= MinGifts, name=\"min_gifts_delivery\")\n\n# Add constraint to ensure the number of trips made by the new company does not exceed the maximum\nmodel.addConstr(TripsNew <= MaxTripsNew, name=\"max_trips_constraint\")\n\n# Add constraint to ensure the old company makes at least the minimum percentage of all trips\nmodel.addConstr(TripsOld >= (MinPercentOld / (1 - MinPercentOld)) * TripsNew, name=\"min_percent_old_trips\")\n\n# Set objective\nmodel.setObjective(DieselNew * TripsNew + DieselOld * TripsOld, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}