{
    "background": "A metal-working shop needs to decide on the purchase of metal-working equipment, considering the capacities and waste generation of chop saws and steel cutters to meet an expected daily metal cutting demand without exceeding the waste production limit.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Pounds of steel worked by the chop saw per day",
            "symbol": "PoundsChopSaw",
            "value": 25,
            "shape": [],
            "code": "PoundsChopSaw = data[\"PoundsChopSaw\"] # scalar parameter"
        },
        {
            "definition": "Units of waste generated by the chop saw per day",
            "symbol": "WasteChopSaw",
            "value": 25,
            "shape": [],
            "code": "WasteChopSaw = data[\"WasteChopSaw\"] # scalar parameter"
        },
        {
            "definition": "Pounds of steel worked by the steel cutter per day",
            "symbol": "PoundsSteelCutter",
            "value": 5,
            "shape": [],
            "code": "PoundsSteelCutter = data[\"PoundsSteelCutter\"] # scalar parameter"
        },
        {
            "definition": "Units of waste generated by the steel cutter per day",
            "symbol": "WasteSteelCutter",
            "value": 3,
            "shape": [],
            "code": "WasteSteelCutter = data[\"WasteSteelCutter\"] # scalar parameter"
        },
        {
            "definition": "Total pounds of steel required to be worked per day",
            "symbol": "TotalPounds",
            "value": 520,
            "shape": [],
            "code": "TotalPounds = data[\"TotalPounds\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowed units of waste per day",
            "symbol": "MaxWaste",
            "value": 400,
            "shape": [],
            "code": "MaxWaste = data[\"MaxWaste\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of chop saws must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfChopSaws} \\geq 0",
            "related_variables": [
                "NumberOfChopSaws"
            ],
            "related_parameters": [],
            "code": "# No additional code needed; non-negativity is enforced as the variable \"NumberOfChopSaws\" is defined as CONTINUOUS, which includes non-negative values by default in Gurobi."
        },
        {
            "description": "The total pounds of steel worked must meet or exceed the daily steel requirement. Additionally, the total waste generated by both equipment types must not exceed the allowable daily waste limit.",
            "status": "coded",
            "formulation": "\\textup{PoundsChopSaw} \\\\cdot \\textup{NumberOfChopSaws} + \\textup{PoundsSteelCutter} \\\\cdot \\textup{NumberOfSteelCutters} \\geq \\textup{TotalPounds}, \\\\quad \\textup{WasteChopSaw} \\\\cdot \\textup{NumberOfChopSaws} + \\textup{WasteSteelCutter} \\\\cdot \\textup{NumberOfSteelCutters} \\leq \\textup{MaxWaste}",
            "related_variables": [
                "NumberOfChopSaws",
                "NumberOfSteelCutters"
            ],
            "related_parameters": [
                "PoundsChopSaw",
                "PoundsSteelCutter",
                "TotalPounds",
                "WasteChopSaw",
                "WasteSteelCutter",
                "MaxWaste"
            ],
            "code": "# Add constraints for steel requirement and waste limit\nmodel.addConstr(\n    NumberOfChopSaws * PoundsChopSaw + NumberOfSteelCutters * PoundsSteelCutter >= TotalPounds,\n    name=\"steel_requirement\"\n)\nmodel.addConstr(\n    NumberOfChopSaws * WasteChopSaw + NumberOfSteelCutters * WasteSteelCutter <= MaxWaste,\n    name=\"waste_limit\"\n)"
        },
        {
            "description": "The total pounds of metal cut daily must meet or exceed the required \\textup{TotalPounds}.",
            "status": "coded",
            "formulation": "\\textup{PoundsChopSaw} \\times \\textup{NumberOfChopSaws} + \\textup{PoundsSteelCutter} \\times \\textup{NumberOfSteelCutters} \\geq \\textup{TotalPounds}",
            "related_variables": [
                "NumberOfChopSaws",
                "NumberOfSteelCutters"
            ],
            "related_parameters": [
                "PoundsChopSaw",
                "PoundsSteelCutter",
                "TotalPounds"
            ],
            "code": "# Add daily production constraint for metal cutting\nmodel.addConstr(\n    PoundsChopSaw * NumberOfChopSaws + PoundsSteelCutter * NumberOfSteelCutters >= TotalPounds,\n    name=\"daily_metal_cutting_requirement\"\n)"
        },
        {
            "description": "The total waste produced by the chop saws and steel cutters must not exceed the maximum allowed units of waste per day.",
            "status": "coded",
            "formulation": "(\\textup{NumberOfChopSaws} \\times \\textup{WasteChopSaw}) + (\\textup{NumberOfSteelCutters} \\times \\textup{WasteSteelCutter}) \\leq \\textup{MaxWaste}",
            "related_variables": [
                "NumberOfChopSaws",
                "NumberOfSteelCutters"
            ],
            "related_parameters": [
                "WasteChopSaw",
                "WasteSteelCutter",
                "MaxWaste"
            ],
            "code": "# Add waste production constraint\nmodel.addConstr(NumberOfChopSaws * WasteChopSaw + NumberOfSteelCutters * WasteSteelCutter <= MaxWaste, name=\"waste_limit\")"
        },
        {
            "description": "The number of steel cutters is non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfSteelCutters} \\geq 0",
            "related_variables": [
                "NumberOfSteelCutters"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since the variable 'NumberOfSteelCutters' is already defined as non-negative due to its default lower bound of 0 in Gurobi (gp.GRB.CONTINUOUS)."
        },
        {
            "description": "The number of chop saws is non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfChopSaws} \\geq 0",
            "related_variables": [
                "NumberOfChopSaws"
            ],
            "related_parameters": [],
            "code": "# No additional code needed as the non-negativity constraint is implicitly enforced by the default variable bounds (>= 0) when defining the continuous variable \"NumberOfChopSaws\" in Gurobipy."
        },
        {
            "description": "Ensure that the total pounds of steel worked by chop saws and steel cutters meets or exceeds the daily demand.",
            "status": "coded",
            "formulation": "(\\textup{PoundsChopSaw} \\cdot \\textup{NumberOfChopSaws}) + (\\textup{PoundsSteelCutter} \\cdot \\textup{NumberOfSteelCutters}) \\geq \\textup{TotalPounds}",
            "related_variables": [
                "NumberOfChopSaws",
                "NumberOfSteelCutters"
            ],
            "related_parameters": [
                "PoundsChopSaw",
                "PoundsSteelCutter",
                "TotalPounds"
            ],
            "code": "# Add constraint to ensure the total pounds of steel worked meets the daily demand\nmodel.addConstr(\n    (PoundsChopSaw * NumberOfChopSaws) + (PoundsSteelCutter * NumberOfSteelCutters) >= TotalPounds, \n    name=\"total_pounds_constraint\"\n)"
        },
        {
            "description": "Ensure that the total waste generated by chop saws and steel cutters does not exceed the maximum allowed waste.",
            "status": "coded",
            "formulation": "(\\textup{WasteChopSaw} \\cdot \\textup{NumberOfChopSaws}) + (\\textup{WasteSteelCutter} \\cdot \\textup{NumberOfSteelCutters}) \\leq \\textup{MaxWaste}",
            "related_variables": [
                "NumberOfChopSaws",
                "NumberOfSteelCutters"
            ],
            "related_parameters": [
                "WasteChopSaw",
                "WasteSteelCutter",
                "MaxWaste"
            ],
            "code": "# Ensure total waste from chop saws and steel cutters does not exceed maximum allowed waste\nmodel.addConstr(\n    WasteChopSaw * NumberOfChopSaws + WasteSteelCutter * NumberOfSteelCutters <= MaxWaste, \n    name=\"waste_constraint\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "The number of chop saws purchased or operated in the metal-working shop.",
            "symbol": "NumberOfChopSaws",
            "shape": [],
            "status": "coded",
            "code": "NumberOfChopSaws = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfChopSaws\")"
        },
        {
            "definition": "The number of steel cutters purchased or operated in the metal-working shop.",
            "symbol": "NumberOfSteelCutters",
            "shape": [],
            "status": "coded",
            "code": "NumberOfSteelCutters = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfSteelCutters\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of metal-working equipment needed by the shop.",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{NumberOfChopSaws} + \\textup{NumberOfSteelCutters}",
            "related_variables": [
                "NumberOfChopSaws",
                "NumberOfSteelCutters"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(NumberOfChopSaws + NumberOfSteelCutters, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 68.8,
    "log_path": "logs/log_20250413180243_nl4opt_prob_244/",
    "problem_path": "data/nl4opt/prob_244/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_244/data.json\", \"r\") as f:\n    data = json.load(f)\n\nPoundsChopSaw = data[\"PoundsChopSaw\"] # scalar parameter\nWasteChopSaw = data[\"WasteChopSaw\"] # scalar parameter\nPoundsSteelCutter = data[\"PoundsSteelCutter\"] # scalar parameter\nWasteSteelCutter = data[\"WasteSteelCutter\"] # scalar parameter\nTotalPounds = data[\"TotalPounds\"] # scalar parameter\nMaxWaste = data[\"MaxWaste\"] # scalar parameter\nNumberOfChopSaws = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfChopSaws\")\nNumberOfSteelCutters = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfSteelCutters\")\n\n# No additional code needed; non-negativity is enforced as the variable \"NumberOfChopSaws\" is defined as CONTINUOUS, which includes non-negative values by default in Gurobi.\n\n# Add constraints for steel requirement and waste limit\nmodel.addConstr(\n    NumberOfChopSaws * PoundsChopSaw + NumberOfSteelCutters * PoundsSteelCutter >= TotalPounds,\n    name=\"steel_requirement\"\n)\nmodel.addConstr(\n    NumberOfChopSaws * WasteChopSaw + NumberOfSteelCutters * WasteSteelCutter <= MaxWaste,\n    name=\"waste_limit\"\n)\n\n# Add daily production constraint for metal cutting\nmodel.addConstr(\n    PoundsChopSaw * NumberOfChopSaws + PoundsSteelCutter * NumberOfSteelCutters >= TotalPounds,\n    name=\"daily_metal_cutting_requirement\"\n)\n\n# Add waste production constraint\nmodel.addConstr(NumberOfChopSaws * WasteChopSaw + NumberOfSteelCutters * WasteSteelCutter <= MaxWaste, name=\"waste_limit\")\n\n# No additional code needed since the variable 'NumberOfSteelCutters' is already defined as non-negative due to its default lower bound of 0 in Gurobi (gp.GRB.CONTINUOUS).\n\n# No additional code needed as the non-negativity constraint is implicitly enforced by the default variable bounds (>= 0) when defining the continuous variable \"NumberOfChopSaws\" in Gurobipy.\n\n# Add constraint to ensure the total pounds of steel worked meets the daily demand\nmodel.addConstr(\n    (PoundsChopSaw * NumberOfChopSaws) + (PoundsSteelCutter * NumberOfSteelCutters) >= TotalPounds, \n    name=\"total_pounds_constraint\"\n)\n\n# Ensure total waste from chop saws and steel cutters does not exceed maximum allowed waste\nmodel.addConstr(\n    WasteChopSaw * NumberOfChopSaws + WasteSteelCutter * NumberOfSteelCutters <= MaxWaste, \n    name=\"waste_constraint\"\n)\n\n# Set objective\nmodel.setObjective(NumberOfChopSaws + NumberOfSteelCutters, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}