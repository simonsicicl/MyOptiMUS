{
    "background": "A woman requires a certain number of calories and protein in her diet, which she obtains from servings of almonds and cashews, each with known nutritional content.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Calories per serving of almonds",
            "symbol": "CaloriesAlmonds",
            "value": 200,
            "shape": [],
            "code": "CaloriesAlmonds = data[\"CaloriesAlmonds\"] # scalar parameter"
        },
        {
            "definition": "Protein per serving of almonds",
            "symbol": "ProteinAlmonds",
            "value": 20,
            "shape": [],
            "code": "ProteinAlmonds = data[\"ProteinAlmonds\"] # scalar parameter"
        },
        {
            "definition": "Calories per serving of cashews",
            "symbol": "CaloriesCashews",
            "value": 300,
            "shape": [],
            "code": "CaloriesCashews = data[\"CaloriesCashews\"] # scalar parameter"
        },
        {
            "definition": "Protein per serving of cashews",
            "symbol": "ProteinCashews",
            "value": 25,
            "shape": [],
            "code": "ProteinCashews = data[\"ProteinCashews\"] # scalar parameter"
        },
        {
            "definition": "Fat per serving of almonds",
            "symbol": "FatAlmonds",
            "value": 15,
            "shape": [],
            "code": "FatAlmonds = data[\"FatAlmonds\"] # scalar parameter"
        },
        {
            "definition": "Fat per serving of cashews",
            "symbol": "FatCashews",
            "value": 12,
            "shape": [],
            "code": "FatCashews = data[\"FatCashews\"] # scalar parameter"
        },
        {
            "definition": "Minimum total calories required",
            "symbol": "MinCalories",
            "value": 10000,
            "shape": [],
            "code": "MinCalories = data[\"MinCalories\"] # scalar parameter"
        },
        {
            "definition": "Minimum total protein required",
            "symbol": "MinProtein",
            "value": 800,
            "shape": [],
            "code": "MinProtein = data[\"MinProtein\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of servings of almonds must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{ServingsAlmonds} \\\\geq 0",
            "related_variables": [
                "ServingsAlmonds"
            ],
            "related_parameters": [],
            "code": "# No code is needed as the non-negativity is defined inherently by the lower bound of the ServingsAlmonds variable during variable definition (default lb=0)."
        },
        {
            "description": "The number of servings of cashews must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{ServingsCashews} \\\\geq 0",
            "related_variables": [
                "ServingsCashews"
            ],
            "related_parameters": [],
            "code": "# Ensure the number of servings of cashews is non-negative\nmodel.addConstr(ServingsCashews >= 0, name=\"non_negative_servings_cashews\")"
        },
        {
            "description": "The number of servings of almonds must be at least twice the number of servings of cashews.",
            "status": "coded",
            "formulation": "\\\\textup{ServingsAlmonds} \\\\geq 2 \\\\times \\\\textup{ServingsCashews}",
            "related_variables": [
                "ServingsAlmonds",
                "ServingsCashews"
            ],
            "related_parameters": [],
            "code": "# Add constraint ensuring the number of servings of almonds is at least twice the number of servings of cashews\nmodel.addConstr(ServingsAlmonds >= 2 * ServingsCashews, name=\"almonds_cashews_ratio\")"
        },
        {
            "description": "Ensure total calorie intake is at least the minimum required calories (MinCalories).",
            "status": "coded",
            "formulation": "\\textup{ServingsAlmonds} \\times \\textup{CaloriesAlmonds} + \\textup{ServingsCashews} \\times \\textup{CaloriesCashews} \\geq \\textup{MinCalories}",
            "related_variables": [
                "ServingsAlmonds",
                "ServingsCashews"
            ],
            "related_parameters": [
                "CaloriesAlmonds",
                "CaloriesCashews",
                "MinCalories"
            ],
            "code": "# Add calorie intake constraint\nmodel.addConstr(\n    ServingsAlmonds * CaloriesAlmonds + ServingsCashews * CaloriesCashews >= MinCalories,\n    name=\"calorie_intake\"\n)"
        },
        {
            "description": "Total protein intake must be at least \\textup{MinProtein}",
            "status": "coded",
            "formulation": "\\textup{ProteinAlmonds} \\cdot \\textup{ServingsAlmonds} + \\textup{ProteinCashews} \\cdot \\textup{ServingsCashews} \\geq \\textup{MinProtein}",
            "related_variables": [
                "ServingsAlmonds",
                "ServingsCashews"
            ],
            "related_parameters": [
                "ProteinAlmonds",
                "ProteinCashews",
                "MinProtein"
            ],
            "code": "# Add total protein intake constraint\nmodel.addConstr(\n    ProteinAlmonds * ServingsAlmonds + ProteinCashews * ServingsCashews >= MinProtein,\n    name=\"total_protein_constraint\"\n)"
        },
        {
            "description": "Ensure the total calorie intake meets or exceeds the minimum required calories.",
            "status": "coded",
            "formulation": "\\textup{CaloriesAlmonds} \\cdot \\textup{ServingsAlmonds} + \\textup{CaloriesCashews} \\cdot \\textup{ServingsCashews} \\geq \\textup{MinCalories}",
            "related_variables": [
                "ServingsAlmonds",
                "ServingsCashews"
            ],
            "related_parameters": [
                "CaloriesAlmonds",
                "CaloriesCashews",
                "MinCalories"
            ],
            "code": "# Add calorie intake constraint\nmodel.addConstr(\n    ServingsAlmonds * CaloriesAlmonds + ServingsCashews * CaloriesCashews >= MinCalories,\n    name=\"calorie_intake_constraint\"\n)"
        },
        {
            "description": "Ensure the total protein intake meets or exceeds the minimum required protein.",
            "status": "coded",
            "formulation": "\\textup{ProteinAlmonds} \\cdot \\textup{ServingsAlmonds} + \\textup{ProteinCashews} \\cdot \\textup{ServingsCashews} \\geq \\textup{MinProtein}",
            "related_variables": [
                "ServingsAlmonds",
                "ServingsCashews"
            ],
            "related_parameters": [
                "ProteinAlmonds",
                "ProteinCashews",
                "MinProtein"
            ],
            "code": "# Add total protein intake constraint\nmodel.addConstr(ProteinAlmonds * ServingsAlmonds + ProteinCashews * ServingsCashews >= MinProtein, name=\"protein_requirement\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of servings of almonds",
            "symbol": "ServingsAlmonds",
            "shape": [],
            "status": "coded",
            "code": "ServingsAlmonds = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ServingsAlmonds\")"
        },
        {
            "definition": "The number of servings of cashews",
            "symbol": "ServingsCashews",
            "shape": [],
            "status": "coded",
            "code": "ServingsCashews = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ServingsCashews\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total fat intake from servings of almonds and cashews.",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{FatAlmonds} \\cdot \\textup{ServingsAlmonds} + \\textup{FatCashews} \\cdot \\textup{ServingsCashews}",
            "related_variables": [
                "ServingsAlmonds",
                "ServingsCashews"
            ],
            "related_parameters": [
                "FatAlmonds",
                "FatCashews"
            ],
            "code": "# Set objective\nmodel.setObjective(FatAlmonds * ServingsAlmonds + FatCashews * ServingsCashews, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 600.0,
    "log_path": "logs/log_20250413154815_nl4opt_prob_127/",
    "problem_path": "data/nl4opt/prob_127/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_127/data.json\", \"r\") as f:\n    data = json.load(f)\n\nCaloriesAlmonds = data[\"CaloriesAlmonds\"] # scalar parameter\nProteinAlmonds = data[\"ProteinAlmonds\"] # scalar parameter\nCaloriesCashews = data[\"CaloriesCashews\"] # scalar parameter\nProteinCashews = data[\"ProteinCashews\"] # scalar parameter\nFatAlmonds = data[\"FatAlmonds\"] # scalar parameter\nFatCashews = data[\"FatCashews\"] # scalar parameter\nMinCalories = data[\"MinCalories\"] # scalar parameter\nMinProtein = data[\"MinProtein\"] # scalar parameter\nServingsAlmonds = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ServingsAlmonds\")\nServingsCashews = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ServingsCashews\")\n\n# No code is needed as the non-negativity is defined inherently by the lower bound of the ServingsAlmonds variable during variable definition (default lb=0).\n\n# Ensure the number of servings of cashews is non-negative\nmodel.addConstr(ServingsCashews >= 0, name=\"non_negative_servings_cashews\")\n\n# Add constraint ensuring the number of servings of almonds is at least twice the number of servings of cashews\nmodel.addConstr(ServingsAlmonds >= 2 * ServingsCashews, name=\"almonds_cashews_ratio\")\n\n# Add calorie intake constraint\nmodel.addConstr(\n    ServingsAlmonds * CaloriesAlmonds + ServingsCashews * CaloriesCashews >= MinCalories,\n    name=\"calorie_intake\"\n)\n\n# Add total protein intake constraint\nmodel.addConstr(\n    ProteinAlmonds * ServingsAlmonds + ProteinCashews * ServingsCashews >= MinProtein,\n    name=\"total_protein_constraint\"\n)\n\n# Add calorie intake constraint\nmodel.addConstr(\n    ServingsAlmonds * CaloriesAlmonds + ServingsCashews * CaloriesCashews >= MinCalories,\n    name=\"calorie_intake_constraint\"\n)\n\n# Add total protein intake constraint\nmodel.addConstr(ProteinAlmonds * ServingsAlmonds + ProteinCashews * ServingsCashews >= MinProtein, name=\"protein_requirement\")\n\n# Set objective\nmodel.setObjective(FatAlmonds * ServingsAlmonds + FatCashews * ServingsCashews, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}