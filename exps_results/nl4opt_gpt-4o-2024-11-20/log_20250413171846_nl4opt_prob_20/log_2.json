{
    "background": "A grocery store wants to liquidate its stock by selling banana-haters packages and combo packages that contain different quantities of apples, bananas, and grapes, for different profit margins.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Initial stock of apples",
            "symbol": "ApplesStock",
            "value": 10,
            "shape": [],
            "code": "ApplesStock = data[\"ApplesStock\"] # scalar parameter"
        },
        {
            "definition": "Initial stock of bananas",
            "symbol": "BananasStock",
            "value": 20,
            "shape": [],
            "code": "BananasStock = data[\"BananasStock\"] # scalar parameter"
        },
        {
            "definition": "Initial stock of grapes",
            "symbol": "GrapesStock",
            "value": 80,
            "shape": [],
            "code": "GrapesStock = data[\"GrapesStock\"] # scalar parameter"
        },
        {
            "definition": "Number of apples in a banana-haters package",
            "symbol": "ApplesBHPack",
            "value": 6,
            "shape": [],
            "code": "ApplesBHPack = data[\"ApplesBHPack\"] # scalar parameter"
        },
        {
            "definition": "Number of grapes in a banana-haters package",
            "symbol": "GrapesBHPack",
            "value": 30,
            "shape": [],
            "code": "GrapesBHPack = data[\"GrapesBHPack\"] # scalar parameter"
        },
        {
            "definition": "Profit from a banana-haters package",
            "symbol": "ProfitBHPack",
            "value": 6,
            "shape": [],
            "code": "ProfitBHPack = data[\"ProfitBHPack\"] # scalar parameter"
        },
        {
            "definition": "Number of apples in a combo package",
            "symbol": "ApplesCombo",
            "value": 5,
            "shape": [],
            "code": "ApplesCombo = data[\"ApplesCombo\"] # scalar parameter"
        },
        {
            "definition": "Number of bananas in a combo package",
            "symbol": "BananasCombo",
            "value": 6,
            "shape": [],
            "code": "BananasCombo = data[\"BananasCombo\"] # scalar parameter"
        },
        {
            "definition": "Number of grapes in a combo package",
            "symbol": "GrapesCombo",
            "value": 20,
            "shape": [],
            "code": "GrapesCombo = data[\"GrapesCombo\"] # scalar parameter"
        },
        {
            "definition": "Profit from a combo package",
            "symbol": "ProfitCombo",
            "value": 7,
            "shape": [],
            "code": "ProfitCombo = data[\"ProfitCombo\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of banana-haters packages must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{BananaHaterPackages} \\geq 0",
            "related_variables": [
                "BananaHaterPackages"
            ],
            "related_parameters": [],
            "code": "# No code needed, as non-negativity is inherent to the default lower bound of Gurobi continuous variables,\n# i.e., variables are >= 0 by default."
        },
        {
            "description": "The number of combo packages must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{ComboPackages} \\\\geq 0",
            "related_variables": [
                "ComboPackages"
            ],
            "related_parameters": [],
            "code": "# The variable ComboPackages already has a non-negativity constraint due to being continuous, no additional code needed."
        },
        {
            "description": "The total number of apples used in banana-haters packages and combo packages cannot exceed the available initial stock of apples.",
            "status": "coded",
            "formulation": "\\\\textup{ApplesBHPack} \\\\cdot \\\\textup{BananaHaterPackages} + \\\\textup{ApplesCombo} \\\\cdot \\\\textup{ComboPackages} \\\\leq \\\\textup{ApplesStock}",
            "related_variables": [
                "BananaHaterPackages",
                "ComboPackages"
            ],
            "related_parameters": [
                "ApplesBHPack",
                "ApplesCombo",
                "ApplesStock"
            ],
            "code": "# Add constraint for total number of apples used in banana-haters and combo packages\nmodel.addConstr(ApplesBHPack * BananaHaterPackages + ApplesCombo * ComboPackages <= ApplesStock, \n                name=\"apple_stock_constraint\")"
        },
        {
            "description": "The number of bananas used in combo packages is less than or equal to BananasStock.",
            "status": "coded",
            "formulation": "\\textup{BananasCombo} \\cdot \\textup{ComboPackages} \\leq \\textup{BananasStock}",
            "related_variables": [
                "ComboPackages"
            ],
            "related_parameters": [
                "BananasStock",
                "BananasCombo"
            ],
            "code": "# Adding the constraint for banana combos and stock\nmodel.addConstr(ComboPackages * BananasCombo <= BananasStock, \n                name=\"bananas_stock_constraint\")"
        },
        {
            "description": "The number of grapes used in banana-haters and combo packages is less than or equal to GrapesStock.",
            "status": "coded",
            "formulation": "\\textup{BananaHaterPackages} \\times \\textup{GrapesBHPack} + \\textup{ComboPackages} \\times \\textup{GrapesCombo} \\leq \\textup{GrapesStock}",
            "related_variables": [
                "BananaHaterPackages",
                "ComboPackages"
            ],
            "related_parameters": [
                "GrapesStock",
                "GrapesBHPack",
                "GrapesCombo"
            ],
            "code": "# Add grape stock constraint\nmodel.addConstr(\n    BananaHaterPackages * GrapesBHPack + ComboPackages * GrapesCombo <= GrapesStock,\n    name=\"grape_stock_limit\"\n)"
        },
        {
            "description": "The total number of apples used cannot exceed the stock of apples",
            "status": "coded",
            "formulation": "\\\\textup{ApplesBHPack} \\\\cdot \\\\textup{BananaHaterPackages} + \\\\textup{ApplesCombo} \\\\cdot \\\\textup{ComboPackages} \\\\leq \\\\textup{ApplesStock}",
            "related_variables": [
                "BananaHaterPackages",
                "ComboPackages"
            ],
            "related_parameters": [
                "ApplesBHPack",
                "ApplesCombo",
                "ApplesStock"
            ],
            "code": "# Add constraint to ensure apple usage does not exceed the stock\nmodel.addConstr(\n    ApplesBHPack * BananaHaterPackages + ApplesCombo * ComboPackages <= ApplesStock,\n    name=\"apple_stock_limit\"\n)"
        },
        {
            "description": "The total number of bananas used cannot exceed the stock of bananas",
            "status": "coded",
            "formulation": "\\\\textup{BananasCombo} \\\\cdot \\\\textup{ComboPackages} \\\\leq \\\\textup{BananasStock}",
            "related_variables": [
                "ComboPackages"
            ],
            "related_parameters": [
                "BananasCombo",
                "BananasStock"
            ],
            "code": "# Add constraint to ensure the total bananas used do not exceed the stock\nmodel.addConstr(ComboPackages * BananasCombo <= BananasStock, name=\"bananas_stock_constraint\")"
        },
        {
            "description": "The total number of grapes used cannot exceed the stock of grapes",
            "status": "coded",
            "formulation": "\\\\textup{GrapesBHPack} \\\\cdot \\\\textup{BananaHaterPackages} + \\\\textup{GrapesCombo} \\\\cdot \\\\textup{ComboPackages} \\\\leq \\\\textup{GrapesStock}",
            "related_variables": [
                "BananaHaterPackages",
                "ComboPackages"
            ],
            "related_parameters": [
                "GrapesBHPack",
                "GrapesCombo",
                "GrapesStock"
            ],
            "code": "# Add constraint: total number of grapes used cannot exceed the stock of grapes\nmodel.addConstr(\n    GrapesBHPack * BananaHaterPackages + GrapesCombo * ComboPackages <= GrapesStock, \n    name=\"grapes_stock_limit\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "The number of banana-haters packages sold.",
            "symbol": "BananaHaterPackages",
            "shape": [],
            "status": "coded",
            "code": "BananaHaterPackages = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"BananaHaterPackages\")"
        },
        {
            "definition": "The number of combo packages sold.",
            "symbol": "ComboPackages",
            "shape": [],
            "status": "coded",
            "code": "ComboPackages = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ComboPackages\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the profit from selling banana-haters packages and combo packages",
            "status": "coded",
            "formulation": "\\\\textup{ProfitBHPack} \\\\cdot \\\\textup{BananaHaterPackages} + \\\\textup{ProfitCombo} \\\\cdot \\\\textup{ComboPackages}",
            "related_variables": [
                "BananaHaterPackages",
                "ComboPackages"
            ],
            "related_parameters": [
                "ProfitBHPack",
                "ProfitCombo"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitBHPack * BananaHaterPackages + ProfitCombo * ComboPackages, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 14.0,
    "log_path": "logs/log_20250413171846_nl4opt_prob_20/",
    "problem_path": "data/nl4opt/prob_20/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_20/data.json\", \"r\") as f:\n    data = json.load(f)\n\nApplesStock = data[\"ApplesStock\"] # scalar parameter\nBananasStock = data[\"BananasStock\"] # scalar parameter\nGrapesStock = data[\"GrapesStock\"] # scalar parameter\nApplesBHPack = data[\"ApplesBHPack\"] # scalar parameter\nGrapesBHPack = data[\"GrapesBHPack\"] # scalar parameter\nProfitBHPack = data[\"ProfitBHPack\"] # scalar parameter\nApplesCombo = data[\"ApplesCombo\"] # scalar parameter\nBananasCombo = data[\"BananasCombo\"] # scalar parameter\nGrapesCombo = data[\"GrapesCombo\"] # scalar parameter\nProfitCombo = data[\"ProfitCombo\"] # scalar parameter\nBananaHaterPackages = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"BananaHaterPackages\")\nComboPackages = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ComboPackages\")\n\n# No code needed, as non-negativity is inherent to the default lower bound of Gurobi continuous variables,\n# i.e., variables are >= 0 by default.\n\n# The variable ComboPackages already has a non-negativity constraint due to being continuous, no additional code needed.\n\n# Add constraint for total number of apples used in banana-haters and combo packages\nmodel.addConstr(ApplesBHPack * BananaHaterPackages + ApplesCombo * ComboPackages <= ApplesStock, \n                name=\"apple_stock_constraint\")\n\n# Adding the constraint for banana combos and stock\nmodel.addConstr(ComboPackages * BananasCombo <= BananasStock, \n                name=\"bananas_stock_constraint\")\n\n# Add grape stock constraint\nmodel.addConstr(\n    BananaHaterPackages * GrapesBHPack + ComboPackages * GrapesCombo <= GrapesStock,\n    name=\"grape_stock_limit\"\n)\n\n# Add constraint to ensure apple usage does not exceed the stock\nmodel.addConstr(\n    ApplesBHPack * BananaHaterPackages + ApplesCombo * ComboPackages <= ApplesStock,\n    name=\"apple_stock_limit\"\n)\n\n# Add constraint to ensure the total bananas used do not exceed the stock\nmodel.addConstr(ComboPackages * BananasCombo <= BananasStock, name=\"bananas_stock_constraint\")\n\n# Add constraint: total number of grapes used cannot exceed the stock of grapes\nmodel.addConstr(\n    GrapesBHPack * BananaHaterPackages + GrapesCombo * ComboPackages <= GrapesStock, \n    name=\"grapes_stock_limit\"\n)\n\n# Set objective\nmodel.setObjective(ProfitBHPack * BananaHaterPackages + ProfitCombo * ComboPackages, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}