{
    "background": "There are two machines available to deliver medicine to a patient's heart and brain, with each machine delivering different quantities of medicine and producing different amounts of waste.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Amount of medicine delivered to the heart per minute by machine 1",
            "symbol": "MedicineHeartMachine1",
            "value": 0.5,
            "shape": [],
            "code": "MedicineHeartMachine1 = data[\"MedicineHeartMachine1\"] # scalar parameter"
        },
        {
            "definition": "Amount of medicine delivered to the heart per minute by machine 2",
            "symbol": "MedicineHeartMachine2",
            "value": 0.3,
            "shape": [],
            "code": "MedicineHeartMachine2 = data[\"MedicineHeartMachine2\"] # scalar parameter"
        },
        {
            "definition": "Amount of medicine delivered to the brain per minute by machine 1",
            "symbol": "MedicineBrainMachine1",
            "value": 0.8,
            "shape": [],
            "code": "MedicineBrainMachine1 = data[\"MedicineBrainMachine1\"] # scalar parameter"
        },
        {
            "definition": "Amount of medicine delivered to the brain per minute by machine 2",
            "symbol": "MedicineBrainMachine2",
            "value": 1.0,
            "shape": [],
            "code": "MedicineBrainMachine2 = data[\"MedicineBrainMachine2\"] # scalar parameter"
        },
        {
            "definition": "Amount of waste produced per minute by machine 1",
            "symbol": "WasteMachine1",
            "value": 0.3,
            "shape": [],
            "code": "WasteMachine1 = data[\"WasteMachine1\"] # scalar parameter"
        },
        {
            "definition": "Amount of waste produced per minute by machine 2",
            "symbol": "WasteMachine2",
            "value": 0.5,
            "shape": [],
            "code": "WasteMachine2 = data[\"WasteMachine2\"] # scalar parameter"
        },
        {
            "definition": "Maximum units of medicine that can be received by the heart",
            "symbol": "MaxMedicineHeart",
            "value": 8,
            "shape": [],
            "code": "MaxMedicineHeart = data[\"MaxMedicineHeart\"] # scalar parameter"
        },
        {
            "definition": "Minimum units of medicine that should be received by the brain",
            "symbol": "MinMedicineBrain",
            "value": 4,
            "shape": [],
            "code": "MinMedicineBrain = data[\"MinMedicineBrain\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The operational time for machine 1 is constrained to be non-negative.",
            "status": "formulated",
            "formulation": "\\textup{MinutesMachine1} \\geq 0",
            "related_variables": [
                "MinutesMachine1"
            ],
            "related_parameters": []
        },
        {
            "description": "The operational time on Machine 2 must be non-negative",
            "status": "formulated",
            "formulation": "\\\\textup{MinutesMachine2} \\\\geq 0",
            "related_variables": [
                "MinutesMachine2"
            ],
            "related_parameters": []
        },
        {
            "description": "The amount of medicine delivered to the heart by both machines combined should not exceed the maximum allowed units (MaxMedicineHeart).",
            "status": "formulated",
            "formulation": "\\\\textup{MedicineHeartMachine1} \\\\times \\\\textup{MinutesMachine1} + \\\\textup{MedicineHeartMachine2} \\\\times \\\\textup{MinutesMachine2} \\\\leq \\\\textup{MaxMedicineHeart}",
            "related_variables": [
                "MinutesMachine1",
                "MinutesMachine2"
            ],
            "related_parameters": [
                "MedicineHeartMachine1",
                "MedicineHeartMachine2",
                "MaxMedicineHeart"
            ]
        },
        {
            "description": "Ensure the brain receives at least MinMedicineBrain units of medicine.",
            "status": "formulated",
            "formulation": "\\textup{MinutesMachine1} \\times \\textup{MedicineBrainMachine1} + \\textup{MinutesMachine2} \\times \\textup{MedicineBrainMachine2} \\geq \\textup{MinMedicineBrain}",
            "related_variables": [
                "MinutesMachine1",
                "MinutesMachine2"
            ],
            "related_parameters": [
                "MedicineBrainMachine1",
                "MedicineBrainMachine2",
                "MinMedicineBrain"
            ]
        },
        {
            "description": "Medicine delivered to the heart should not exceed its maximum capacity.",
            "status": "formulated",
            "formulation": "\\textup{MinutesMachine1} \\cdot \\textup{MedicineHeartMachine1} + \\textup{MinutesMachine2} \\cdot \\textup{MedicineHeartMachine2} \\leq \\textup{MaxMedicineHeart}",
            "related_variables": [
                "MinutesMachine1",
                "MinutesMachine2"
            ],
            "related_parameters": [
                "MedicineHeartMachine1",
                "MedicineHeartMachine2",
                "MaxMedicineHeart"
            ]
        },
        {
            "description": "Medicine delivered to the brain should meet the minimum required amount.",
            "status": "formulated",
            "formulation": "\\textup{MinutesMachine1} \\cdot \\textup{MedicineBrainMachine1} + \\textup{MinutesMachine2} \\cdot \\textup{MedicineBrainMachine2} \\geq \\textup{MinMedicineBrain}",
            "related_variables": [
                "MinutesMachine1",
                "MinutesMachine2"
            ],
            "related_parameters": [
                "MedicineBrainMachine1",
                "MedicineBrainMachine2",
                "MinMedicineBrain"
            ]
        },
        {
            "description": "Operational time of each machine should be non-negative.",
            "status": "formulated",
            "formulation": "\\textup{MinutesMachine1} \\geq 0, \\quad \\textup{MinutesMachine2} \\geq 0",
            "related_variables": [
                "MinutesMachine1",
                "MinutesMachine2"
            ],
            "related_parameters": []
        }
    ],
    "variables": [
        {
            "definition": "The operational time for machine 1 in minutes.",
            "symbol": "MinutesMachine1",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The operational time for machine 2 in minutes.",
            "symbol": "MinutesMachine2",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total amount of waste produced by machine operations.",
            "status": "formulated",
            "formulation": "\\textup{Minimize} \\quad \\textup{MinutesMachine1} \\cdot \\textup{WasteMachine1} + \\textup{MinutesMachine2} \\cdot \\textup{WasteMachine2}",
            "related_variables": [
                "MinutesMachine1",
                "MinutesMachine2"
            ],
            "related_parameters": [
                "WasteMachine1",
                "WasteMachine2"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413154144_nl4opt_prob_120/",
    "problem_path": "data/nl4opt/prob_120/"
}