{
    "background": "The landscaper needs to decide how to allocate square footage of grass cutting between a heavy-duty yard machine and a gas lawn mower, considering pollution and fuel constraints.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total area of grass land",
            "symbol": "A",
            "value": 2500,
            "shape": [],
            "code": "A = data[\"A\"] # scalar parameter"
        },
        {
            "definition": "Time taken by heavy-duty yard machine per square foot",
            "symbol": "TimeHeavyDuty",
            "value": 2,
            "shape": [],
            "code": "TimeHeavyDuty = data[\"TimeHeavyDuty\"] # scalar parameter"
        },
        {
            "definition": "Time taken by gas lawn mower per square foot",
            "symbol": "TimeGasMower",
            "value": 5,
            "shape": [],
            "code": "TimeGasMower = data[\"TimeGasMower\"] # scalar parameter"
        },
        {
            "definition": "Pollution generated by heavy-duty yard machine per square foot",
            "symbol": "PollutionHeavyDuty",
            "value": 12,
            "shape": [],
            "code": "PollutionHeavyDuty = data[\"PollutionHeavyDuty\"] # scalar parameter"
        },
        {
            "definition": "Fuel required by heavy-duty yard machine per square foot",
            "symbol": "FuelHeavyDuty",
            "value": 3,
            "shape": [],
            "code": "FuelHeavyDuty = data[\"FuelHeavyDuty\"] # scalar parameter"
        },
        {
            "definition": "Pollution generated by gas lawn mower per square foot",
            "symbol": "PollutionGasMower",
            "value": 10,
            "shape": [],
            "code": "PollutionGasMower = data[\"PollutionGasMower\"] # scalar parameter"
        },
        {
            "definition": "Fuel required by gas lawn mower per square foot",
            "symbol": "FuelGasMower",
            "value": 2,
            "shape": [],
            "code": "FuelGasMower = data[\"FuelGasMower\"] # scalar parameter"
        },
        {
            "definition": "Total amount of fuel available",
            "symbol": "FuelTotal",
            "value": 450,
            "shape": [],
            "code": "FuelTotal = data[\"FuelTotal\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowable pollution",
            "symbol": "PollutionMax",
            "value": 2000,
            "shape": [],
            "code": "PollutionMax = data[\"PollutionMax\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The square feet cut by the heavy-duty yard machine must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{SquareFeetHeavyDuty} \\geq 0",
            "related_variables": [
                "SquareFeetHeavyDuty"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for SquareFeetHeavyDuty\nmodel.addConstr(SquareFeetHeavyDuty >= 0, name=\"non_negativity_HeavyDuty\")"
        },
        {
            "description": "Square feet cut by gas lawn mower is non-negative",
            "status": "coded",
            "formulation": "\\textup{SquareFeetGasMower} \\geq 0",
            "related_variables": [
                "SquareFeetGasMower"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for SquareFeetGasMower\nmodel.addConstr(SquareFeetGasMower >= 0, name=\"non_negative_SquareFeetGasMower\")"
        },
        {
            "description": "The total square footage of grass cut between the heavy-duty yard machine and the gas lawn mower must equal the total area A.",
            "status": "coded",
            "formulation": "\\\\textup{SquareFeetHeavyDuty} + \\\\textup{SquareFeetGasMower} = \\\\textup{A}",
            "related_variables": [
                "SquareFeetHeavyDuty",
                "SquareFeetGasMower"
            ],
            "related_parameters": [
                "A"
            ],
            "code": "# Add constraint ensuring the total square footage of grass cut equals the total area A\nmodel.addConstr(SquareFeetHeavyDuty + SquareFeetGasMower == A, name=\"total_grass_cut_area\")"
        },
        {
            "description": "The total pollution produced by the heavy-duty yard machine and gas lawn mower cannot exceed the maximum allowable pollution (PollutionMax).",
            "status": "coded",
            "formulation": "\\textup{PollutionHeavyDuty} \\cdot \\textup{SquareFeetHeavyDuty} + \\textup{PollutionGasMower} \\cdot \\textup{SquareFeetGasMower} \\leq \\textup{PollutionMax}",
            "related_variables": [
                "SquareFeetHeavyDuty",
                "SquareFeetGasMower"
            ],
            "related_parameters": [
                "PollutionHeavyDuty",
                "PollutionGasMower",
                "PollutionMax"
            ],
            "code": "# Add pollution constraint\nmodel.addConstr(\n    PollutionHeavyDuty * SquareFeetHeavyDuty + PollutionGasMower * SquareFeetGasMower <= PollutionMax, \n    name=\"pollution_constraint\"\n)"
        },
        {
            "description": "The total fuel used by the heavy-duty yard machine and the gas lawn mower must be less than or equal to FuelTotal.",
            "status": "coded",
            "formulation": "\\\\textup{FuelHeavyDuty} \\\\cdot \\\\textup{SquareFeetHeavyDuty} + \\\\textup{FuelGasMower} \\\\cdot \\\\textup{SquareFeetGasMower} \\\\leq \\\\textup{FuelTotal}",
            "related_variables": [
                "SquareFeetHeavyDuty",
                "SquareFeetGasMower"
            ],
            "related_parameters": [
                "FuelHeavyDuty",
                "FuelGasMower",
                "FuelTotal"
            ],
            "code": "# Add constraint for total fuel usage\nmodel.addConstr(\n    SquareFeetHeavyDuty * FuelHeavyDuty + SquareFeetGasMower * FuelGasMower <= FuelTotal,\n    name=\"total_fuel_constraint\"\n)"
        },
        {
            "description": "The total square footage of grass cut must equal A.",
            "status": "coded",
            "formulation": "\\textup{SquareFeetHeavyDuty} + \\textup{SquareFeetGasMower} = \\textup{A}",
            "related_variables": [
                "SquareFeetHeavyDuty",
                "SquareFeetGasMower"
            ],
            "related_parameters": [
                "A"
            ],
            "code": "# Add constraint for total grass cut area \nmodel.addConstr(SquareFeetHeavyDuty + SquareFeetGasMower == A, name=\"total_grass_cut_constraint\")"
        },
        {
            "description": "The total fuel consumed by both machines must not exceed the FuelTotal.",
            "status": "coded",
            "formulation": "\\textup{FuelHeavyDuty} \\cdot \\textup{SquareFeetHeavyDuty} + \\textup{FuelGasMower} \\cdot \\textup{SquareFeetGasMower} \\leq \\textup{FuelTotal}",
            "related_variables": [
                "SquareFeetHeavyDuty",
                "SquareFeetGasMower"
            ],
            "related_parameters": [
                "FuelHeavyDuty",
                "FuelGasMower",
                "FuelTotal"
            ],
            "code": "# Add constraint to ensure total fuel consumption does not exceed FuelTotal\nmodel.addConstr(\n    FuelHeavyDuty * SquareFeetHeavyDuty + FuelGasMower * SquareFeetGasMower <= FuelTotal, \n    name=\"total_fuel_limit\"\n)"
        },
        {
            "description": "The total pollution generated by both machines must not exceed the PollutionMax.",
            "status": "coded",
            "formulation": "\\textup{PollutionHeavyDuty} \\cdot \\textup{SquareFeetHeavyDuty} + \\textup{PollutionGasMower} \\cdot \\textup{SquareFeetGasMower} \\leq \\textup{PollutionMax}",
            "related_variables": [
                "SquareFeetHeavyDuty",
                "SquareFeetGasMower"
            ],
            "related_parameters": [
                "PollutionHeavyDuty",
                "PollutionGasMower",
                "PollutionMax"
            ],
            "code": "# Add pollution constraint\nmodel.addConstr(PollutionHeavyDuty * SquareFeetHeavyDuty + PollutionGasMower * SquareFeetGasMower <= PollutionMax, name=\"pollution_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "Square footage of grass cut by the heavy-duty yard machine",
            "symbol": "SquareFeetHeavyDuty",
            "shape": [],
            "status": "coded",
            "code": "SquareFeetHeavyDuty = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SquareFeetHeavyDuty\")"
        },
        {
            "definition": "Square footage of grass cut by the gas lawn mower",
            "symbol": "SquareFeetGasMower",
            "shape": [],
            "status": "coded",
            "code": "SquareFeetGasMower = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SquareFeetGasMower\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total time required to cut A square feet of grass by allocating work between the heavy-duty yard machine and the gas lawn mower.",
            "status": "coded",
            "formulation": "\\textup{Minimize: } \\quad \\textup{TimeHeavyDuty} \\cdot \\textup{SquareFeetHeavyDuty} + \\textup{TimeGasMower} \\cdot \\textup{SquareFeetGasMower}",
            "related_variables": [
                "SquareFeetHeavyDuty",
                "SquareFeetGasMower"
            ],
            "related_parameters": [
                "TimeHeavyDuty",
                "TimeGasMower"
            ],
            "code": "# Set objective\nmodel.setObjective(\n    TimeHeavyDuty * SquareFeetHeavyDuty + TimeGasMower * SquareFeetGasMower,\n    gp.GRB.MINIMIZE\n)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250414055928_nl4opt_prob_284/",
    "problem_path": "data/nl4opt/prob_284/"
}