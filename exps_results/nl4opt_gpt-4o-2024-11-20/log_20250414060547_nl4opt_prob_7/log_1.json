{
    "background": "A audio company makes two types of headphones: wired headphones and wireless headphones.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Maximum number of wired headphones that can be produced per day by the wired team",
            "symbol": "MaxWired",
            "value": 100,
            "shape": [],
            "code": "MaxWired = data[\"MaxWired\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of wireless headphones that can be produced per day by the wireless team",
            "symbol": "MaxWireless",
            "value": 170,
            "shape": [],
            "code": "MaxWireless = data[\"MaxWireless\"] # scalar parameter"
        },
        {
            "definition": "Maximum capacity of shared audio testing machine per day",
            "symbol": "MaxTesting",
            "value": 150,
            "shape": [],
            "code": "MaxTesting = data[\"MaxTesting\"] # scalar parameter"
        },
        {
            "definition": "Profit per wired headphone",
            "symbol": "ProfitWired",
            "value": 50,
            "shape": [],
            "code": "ProfitWired = data[\"ProfitWired\"] # scalar parameter"
        },
        {
            "definition": "Profit per wireless headphone",
            "symbol": "ProfitWireless",
            "value": 20,
            "shape": [],
            "code": "ProfitWireless = data[\"ProfitWireless\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of wired headphones produced per day must be an integer.",
            "status": "coded",
            "formulation": "\\\\textup{WiredHeadphones} \\\\in \\\\mathbb{Z}",
            "related_variables": [
                "WiredHeadphones"
            ],
            "related_parameters": [],
            "code": "# The integrality of \"WiredHeadphones\" is already enforced as it is declared as an integer variable. No additional constraint is needed."
        },
        {
            "description": "Constraint specifying that the number of wireless headphones is an integer decision variable.",
            "status": "coded",
            "formulation": "\\\\textup{WirelessHeadphones} \\in \\mathbb{Z}",
            "related_variables": [
                "WirelessHeadphones"
            ],
            "related_parameters": [],
            "code": "# No code is needed as the integer nature of the WirelessHeadphones variable is already established during its definition."
        },
        {
            "description": "The number of wired headphones produced per day must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{WiredHeadphones} \\geq 0",
            "related_variables": [
                "WiredHeadphones"
            ],
            "related_parameters": [],
            "code": "# WiredHeadphones is already declared non-negative due to its default lower bound (0) in Gurobi.\n# No additional code is needed for this constraint."
        },
        {
            "description": "Non-negativity constraint for the number of wireless headphones produced per day.",
            "status": "coded",
            "formulation": "\\textup{WirelessHeadphones} \\geq 0",
            "related_variables": [
                "WirelessHeadphones"
            ],
            "related_parameters": [],
            "code": "# The non-negativity constraint is inherently satisfied as variables in Gurobi default to a lower bound of 0 unless explicitly set otherwise."
        },
        {
            "description": "The number of wired headphones produced per day must not exceed the maximum production limit set by the wired team.",
            "status": "coded",
            "formulation": "\\textup{WiredHeadphones} \\\\leq \\textup{MaxWired}",
            "related_variables": [
                "WiredHeadphones"
            ],
            "related_parameters": [
                "MaxWired"
            ],
            "code": "# Add constraint for maximum wired headphones production\nmodel.addConstr(WiredHeadphones <= MaxWired, name=\"max_wired_headphones\")"
        },
        {
            "description": "The wireless team can make at most MaxWireless wireless headphones per day.",
            "status": "coded",
            "formulation": "\\textup{WirelessHeadphones} \\leq \\textup{MaxWireless}",
            "related_variables": [
                "WirelessHeadphones"
            ],
            "related_parameters": [
                "MaxWireless"
            ],
            "code": "# Add constraint to limit the number of wireless headphones produced per day\nmodel.addConstr(WirelessHeadphones <= MaxWireless, name=\"MaxWirelessConstraint\")"
        },
        {
            "description": "Ensure total usage of the audio testing machine is within its daily capacity (MaxTesting).",
            "status": "coded",
            "formulation": "\\textup{WiredHeadphones} + \\textup{WirelessHeadphones} \\leq \\textup{MaxTesting}",
            "related_variables": [
                "WiredHeadphones",
                "WirelessHeadphones"
            ],
            "related_parameters": [
                "MaxTesting"
            ],
            "code": "# Add constraint to ensure total usage of the audio testing machine is within its daily capacity\nmodel.addConstr(WiredHeadphones + WirelessHeadphones <= MaxTesting, name=\"testing_capacity\")"
        },
        {
            "description": "Wired headphone production cannot exceed the maximum limit set by the wired team.",
            "status": "coded",
            "formulation": "\\textup{WiredHeadphones} \\leq \\textup{MaxWired}",
            "related_variables": [
                "WiredHeadphones"
            ],
            "related_parameters": [
                "MaxWired"
            ],
            "code": "# Add constraint for limiting wired headphone production\nmodel.addConstr(WiredHeadphones <= MaxWired, name=\"wired_headphone_limit\")"
        },
        {
            "description": "Wireless headphone production cannot exceed the maximum limit set by the wireless team.",
            "status": "coded",
            "formulation": "\\textup{WirelessHeadphones} \\leq \\textup{MaxWireless}",
            "related_variables": [
                "WirelessHeadphones"
            ],
            "related_parameters": [
                "MaxWireless"
            ],
            "code": "# Add constraint to ensure wireless headphone production does not exceed maximum limit\nmodel.addConstr(WirelessHeadphones <= MaxWireless, name=\"max_wireless_constraint\")"
        },
        {
            "description": "The total number of headphones tested per day cannot exceed the testing capacity.",
            "status": "coded",
            "formulation": "\\textup{WiredHeadphones} + \\textup{WirelessHeadphones} \\leq \\textup{MaxTesting}",
            "related_variables": [
                "WiredHeadphones",
                "WirelessHeadphones"
            ],
            "related_parameters": [
                "MaxTesting"
            ],
            "code": "# Add testing capacity constraint\nmodel.addConstr(WiredHeadphones + WirelessHeadphones <= MaxTesting, name=\"testing_capacity\")"
        },
        {
            "description": "The number of wired headphones produced must be non-negative and integer.",
            "status": "coded",
            "formulation": "\\textup{WiredHeadphones} \\geq 0 \\quad \\textup{and integer}",
            "related_variables": [
                "WiredHeadphones"
            ],
            "related_parameters": [],
            "code": "# No additional code is needed as the non-negativity and integrality of WiredHeadphones are already captured by its definition."
        },
        {
            "description": "The number of wireless headphones produced must be non-negative and integer.",
            "status": "coded",
            "formulation": "\\textup{WirelessHeadphones} \\geq 0 \\quad \\textup{and integer}",
            "related_variables": [
                "WirelessHeadphones"
            ],
            "related_parameters": [],
            "code": "# The non-negativity and integrality of the WirelessHeadphones variable is already defined in its creation (`vtype=gp.GRB.INTEGER` and no negative values allowed by default)."
        }
    ],
    "variables": [
        {
            "definition": "Number of wired headphones produced per day (integer decision variable).",
            "symbol": "WiredHeadphones",
            "shape": [],
            "status": "coded",
            "code": "WiredHeadphones = model.addVar(vtype=gp.GRB.INTEGER, name=\"WiredHeadphones\")"
        },
        {
            "definition": "Number of wireless headphones produced per day (integer decision variable).",
            "symbol": "WirelessHeadphones",
            "shape": [],
            "status": "coded",
            "code": "WirelessHeadphones = model.addVar(vtype=gp.GRB.INTEGER, name=\"WirelessHeadphones\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the company's profit from selling wired and wireless headphones.",
            "status": "coded",
            "formulation": "\\textup{Maximize: } \\quad \\textup{ProfitWired} \\cdot \\textup{WiredHeadphones} + \\textup{ProfitWireless} \\cdot \\textup{WirelessHeadphones}",
            "related_variables": [
                "WiredHeadphones",
                "WirelessHeadphones"
            ],
            "related_parameters": [
                "ProfitWired",
                "ProfitWireless"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitWired * WiredHeadphones + ProfitWireless * WirelessHeadphones, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250414060547_nl4opt_prob_7/",
    "problem_path": "data/nl4opt/prob_7/"
}