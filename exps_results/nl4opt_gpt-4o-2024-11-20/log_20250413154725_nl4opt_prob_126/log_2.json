{
    "background": "A pharmacy manufactures eye cream and foot cream using two machines with specific production capabilities and distilled water requirements. The goal is to minimize the total production time while meeting minimum cream production requirements.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Amount of eye cream produced by machine 1 per hour",
            "symbol": "EyeMachine1",
            "value": 30,
            "shape": [],
            "code": "EyeMachine1 = data[\"EyeMachine1\"] # scalar parameter"
        },
        {
            "definition": "Amount of foot cream produced by machine 1 per hour",
            "symbol": "FootMachine1",
            "value": 60,
            "shape": [],
            "code": "FootMachine1 = data[\"FootMachine1\"] # scalar parameter"
        },
        {
            "definition": "Amount of eye cream produced by machine 2 per hour",
            "symbol": "EyeMachine2",
            "value": 45,
            "shape": [],
            "code": "EyeMachine2 = data[\"EyeMachine2\"] # scalar parameter"
        },
        {
            "definition": "Amount of foot cream produced by machine 2 per hour",
            "symbol": "FootMachine2",
            "value": 30,
            "shape": [],
            "code": "FootMachine2 = data[\"FootMachine2\"] # scalar parameter"
        },
        {
            "definition": "Amount of distilled water required by machine 1 per hour",
            "symbol": "WaterMachine1",
            "value": 20,
            "shape": [],
            "code": "WaterMachine1 = data[\"WaterMachine1\"] # scalar parameter"
        },
        {
            "definition": "Amount of distilled water required by machine 2 per hour",
            "symbol": "WaterMachine2",
            "value": 15,
            "shape": [],
            "code": "WaterMachine2 = data[\"WaterMachine2\"] # scalar parameter"
        },
        {
            "definition": "Total amount of distilled water available",
            "symbol": "TotalWater",
            "value": 1200,
            "shape": [],
            "code": "TotalWater = data[\"TotalWater\"] # scalar parameter"
        },
        {
            "definition": "Minimum required amount of eye cream to be produced",
            "symbol": "MinEyeCream",
            "value": 1300,
            "shape": [],
            "code": "MinEyeCream = data[\"MinEyeCream\"] # scalar parameter"
        },
        {
            "definition": "Minimum required amount of foot cream to be produced",
            "symbol": "MinFootCream",
            "value": 1500,
            "shape": [],
            "code": "MinFootCream = data[\"MinFootCream\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The total amount of eye cream produced must be at least MinEyeCream",
            "status": "coded",
            "formulation": "\\\\textup{TimeMachine1Eye} \\\\times \\\\textup{EyeMachine1} + \\\\textup{TimeMachine2Eye} \\\\times \\\\textup{EyeMachine2} \\\\geq \\\\textup{MinEyeCream}",
            "related_variables": [
                "TimeMachine1Eye",
                "TimeMachine2Eye"
            ],
            "related_parameters": [
                "MinEyeCream",
                "EyeMachine1",
                "EyeMachine2"
            ],
            "code": "# Add constraint ensuring total eye cream production meets the minimum required amount\nmodel.addConstr(\n    TimeMachine1Eye * EyeMachine1 + TimeMachine2Eye * EyeMachine2 >= MinEyeCream,\n    name=\"MinEyeCreamProduction\"\n)"
        },
        {
            "description": "The total production of foot cream from both machines should be at least the minimum required amount of foot cream (MinFootCream).",
            "status": "coded",
            "formulation": "\\textup{FootMachine1} \\cdot \\textup{TimeMachine1Foot} + \\textup{FootMachine2} \\cdot \\textup{TimeMachine2Foot} \\geq \\textup{MinFootCream}",
            "related_variables": [
                "TimeMachine1Foot",
                "TimeMachine2Foot"
            ],
            "related_parameters": [
                "FootMachine1",
                "FootMachine2",
                "MinFootCream"
            ],
            "code": "# Add constraint for total production of foot cream being at least the minimum required amount\nmodel.addConstr(FootMachine1 * TimeMachine1Foot + FootMachine2 * TimeMachine2Foot >= MinFootCream, name=\"min_foot_cream_requirement\")"
        },
        {
            "description": "Time spent on Machine 1 is non-negative. Machine 1 consists of two variables representing time spent producing eye cream and foot cream, both of which must be greater than or equal to zero.",
            "status": "coded",
            "formulation": "\\textup{TimeMachine1Eye} \\geq 0 \\quad \\textup{and} \\quad \\textup{TimeMachine1Foot} \\geq 0",
            "related_variables": [
                "TimeMachine1Eye",
                "TimeMachine1Foot"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraints for TimeMachine1Eye and TimeMachine1Foot\nmodel.addConstr(TimeMachine1Eye >= 0, name=\"nonnegative_TimeMachine1Eye\")\nmodel.addConstr(TimeMachine1Foot >= 0, name=\"nonnegative_TimeMachine1Foot\")"
        },
        {
            "description": "Non-negativity constraints for time spent on Machine 2",
            "status": "coded",
            "formulation": "\\textup{TimeMachine2Eye} \\geq 0 \\quad \\\\\\\\ \\quad \\textup{TimeMachine2Foot} \\geq 0",
            "related_variables": [
                "TimeMachine2Eye",
                "TimeMachine2Foot"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraints for time spent on Machine 2\nmodel.addConstr(TimeMachine2Eye >= 0, name=\"nonneg_TimeMachine2Eye\")\nmodel.addConstr(TimeMachine2Foot >= 0, name=\"nonneg_TimeMachine2Foot\")"
        },
        {
            "description": "Ensure that the total production of eye cream meets the minimum requirement.",
            "status": "coded",
            "formulation": "\\textup{TimeMachine1Eye} \\cdot \\textup{EyeMachine1} + \\textup{TimeMachine2Eye} \\cdot \\textup{EyeMachine2} \\geq \\textup{MinEyeCream}",
            "related_variables": [
                "TimeMachine1Eye",
                "TimeMachine2Eye"
            ],
            "related_parameters": [
                "EyeMachine1",
                "EyeMachine2",
                "MinEyeCream"
            ],
            "code": "# Add constraint to ensure minimum production requirement for eye cream\nmodel.addConstr(TimeMachine1Eye * EyeMachine1 + TimeMachine2Eye * EyeMachine2 >= MinEyeCream, name=\"min_eye_cream_production\")"
        },
        {
            "description": "Ensure that the total production of foot cream meets the minimum requirement.",
            "status": "coded",
            "formulation": "\\textup{TimeMachine1Foot} \\cdot \\textup{FootMachine1} + \\textup{TimeMachine2Foot} \\cdot \\textup{FootMachine2} \\geq \\textup{MinFootCream}",
            "related_variables": [
                "TimeMachine1Foot",
                "TimeMachine2Foot"
            ],
            "related_parameters": [
                "FootMachine1",
                "FootMachine2",
                "MinFootCream"
            ],
            "code": "# Add constraint to ensure total production of foot cream meets the minimum requirement\nmodel.addConstr(TimeMachine1Foot * FootMachine1 + TimeMachine2Foot * FootMachine2 >= MinFootCream, name=\"min_foot_cream_production\")"
        },
        {
            "description": "Ensure that the total distilled water used does not exceed the available amount.",
            "status": "coded",
            "formulation": "(\\textup{TimeMachine1Eye} + \\textup{TimeMachine1Foot}) \\cdot \\textup{WaterMachine1} + (\\textup{TimeMachine2Eye} + \\textup{TimeMachine2Foot}) \\cdot \\textup{WaterMachine2} \\leq \\textup{TotalWater}",
            "related_variables": [
                "TimeMachine1Eye",
                "TimeMachine1Foot",
                "TimeMachine2Eye",
                "TimeMachine2Foot"
            ],
            "related_parameters": [
                "WaterMachine1",
                "WaterMachine2",
                "TotalWater"
            ],
            "code": "# Add constraint to ensure total distilled water usage doesn't exceed available amount\nmodel.addConstr(\n    (TimeMachine1Eye + TimeMachine1Foot) * WaterMachine1 + \n    (TimeMachine2Eye + TimeMachine2Foot) * WaterMachine2 <= TotalWater, \n    name=\"water_usage_limit\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "Hours Machine 1 runs to produce eye cream",
            "symbol": "TimeMachine1Eye",
            "shape": [],
            "status": "coded",
            "code": "TimeMachine1Eye = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TimeMachine1Eye\")"
        },
        {
            "definition": "Hours Machine 1 runs to produce foot cream",
            "symbol": "TimeMachine1Foot",
            "shape": [],
            "status": "coded",
            "code": "TimeMachine1Foot = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TimeMachine1Foot\")"
        },
        {
            "definition": "Hours Machine 2 runs to produce eye cream",
            "symbol": "TimeMachine2Eye",
            "shape": [],
            "status": "coded",
            "code": "TimeMachine2Eye = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TimeMachine2Eye\")"
        },
        {
            "definition": "Hours Machine 2 runs to produce foot cream",
            "symbol": "TimeMachine2Foot",
            "shape": [],
            "status": "coded",
            "code": "TimeMachine2Foot = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TimeMachine2Foot\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total time spent using Machine 1 and Machine 2 to manufacture eye cream and foot cream.",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{TimeMachine1Eye} + \\textup{TimeMachine1Foot} + \\textup{TimeMachine2Eye} + \\textup{TimeMachine2Foot}",
            "related_variables": [
                "TimeMachine1Eye",
                "TimeMachine1Foot",
                "TimeMachine2Eye",
                "TimeMachine2Foot"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(TimeMachine1Eye + TimeMachine1Foot + TimeMachine2Eye + TimeMachine2Foot, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 53.888888888888886,
    "log_path": "logs/log_20250413154725_nl4opt_prob_126/",
    "problem_path": "data/nl4opt/prob_126/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_126/data.json\", \"r\") as f:\n    data = json.load(f)\n\nEyeMachine1 = data[\"EyeMachine1\"] # scalar parameter\nFootMachine1 = data[\"FootMachine1\"] # scalar parameter\nEyeMachine2 = data[\"EyeMachine2\"] # scalar parameter\nFootMachine2 = data[\"FootMachine2\"] # scalar parameter\nWaterMachine1 = data[\"WaterMachine1\"] # scalar parameter\nWaterMachine2 = data[\"WaterMachine2\"] # scalar parameter\nTotalWater = data[\"TotalWater\"] # scalar parameter\nMinEyeCream = data[\"MinEyeCream\"] # scalar parameter\nMinFootCream = data[\"MinFootCream\"] # scalar parameter\nTimeMachine1Eye = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TimeMachine1Eye\")\nTimeMachine1Foot = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TimeMachine1Foot\")\nTimeMachine2Eye = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TimeMachine2Eye\")\nTimeMachine2Foot = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TimeMachine2Foot\")\n\n# Add constraint ensuring total eye cream production meets the minimum required amount\nmodel.addConstr(\n    TimeMachine1Eye * EyeMachine1 + TimeMachine2Eye * EyeMachine2 >= MinEyeCream,\n    name=\"MinEyeCreamProduction\"\n)\n\n# Add constraint for total production of foot cream being at least the minimum required amount\nmodel.addConstr(FootMachine1 * TimeMachine1Foot + FootMachine2 * TimeMachine2Foot >= MinFootCream, name=\"min_foot_cream_requirement\")\n\n# Add non-negativity constraints for TimeMachine1Eye and TimeMachine1Foot\nmodel.addConstr(TimeMachine1Eye >= 0, name=\"nonnegative_TimeMachine1Eye\")\nmodel.addConstr(TimeMachine1Foot >= 0, name=\"nonnegative_TimeMachine1Foot\")\n\n# Add non-negativity constraints for time spent on Machine 2\nmodel.addConstr(TimeMachine2Eye >= 0, name=\"nonneg_TimeMachine2Eye\")\nmodel.addConstr(TimeMachine2Foot >= 0, name=\"nonneg_TimeMachine2Foot\")\n\n# Add constraint to ensure minimum production requirement for eye cream\nmodel.addConstr(TimeMachine1Eye * EyeMachine1 + TimeMachine2Eye * EyeMachine2 >= MinEyeCream, name=\"min_eye_cream_production\")\n\n# Add constraint to ensure total production of foot cream meets the minimum requirement\nmodel.addConstr(TimeMachine1Foot * FootMachine1 + TimeMachine2Foot * FootMachine2 >= MinFootCream, name=\"min_foot_cream_production\")\n\n# Add constraint to ensure total distilled water usage doesn't exceed available amount\nmodel.addConstr(\n    (TimeMachine1Eye + TimeMachine1Foot) * WaterMachine1 + \n    (TimeMachine2Eye + TimeMachine2Foot) * WaterMachine2 <= TotalWater, \n    name=\"water_usage_limit\"\n)\n\n# Set objective\nmodel.setObjective(TimeMachine1Eye + TimeMachine1Foot + TimeMachine2Eye + TimeMachine2Foot, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}