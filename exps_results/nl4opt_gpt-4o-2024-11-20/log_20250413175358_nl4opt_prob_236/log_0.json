{
    "background": "A food delivery person can work shifts on either bikes or scooters, with different numbers of orders delivered, energy required, and tips earned for each. They have limited shifts and energy per month, and a minimum order and scooter shift requirement.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Orders delivered on a bike shift",
            "symbol": "OrdersBike",
            "value": 10,
            "shape": [],
            "code": "OrdersBike = data[\"OrdersBike\"] # scalar parameter"
        },
        {
            "definition": "Energy consumed on a bike shift",
            "symbol": "EnergyBike",
            "value": 5,
            "shape": [],
            "code": "EnergyBike = data[\"EnergyBike\"] # scalar parameter"
        },
        {
            "definition": "Tips received on a bike shift",
            "symbol": "TipsBike",
            "value": 50,
            "shape": [],
            "code": "TipsBike = data[\"TipsBike\"] # scalar parameter"
        },
        {
            "definition": "Orders delivered on a scooter shift",
            "symbol": "OrdersScooter",
            "value": 7,
            "shape": [],
            "code": "OrdersScooter = data[\"OrdersScooter\"] # scalar parameter"
        },
        {
            "definition": "Energy consumed on a scooter shift",
            "symbol": "EnergyScooter",
            "value": 6,
            "shape": [],
            "code": "EnergyScooter = data[\"EnergyScooter\"] # scalar parameter"
        },
        {
            "definition": "Tips received on a scooter shift",
            "symbol": "TipsScooter",
            "value": 43,
            "shape": [],
            "code": "TipsScooter = data[\"TipsScooter\"] # scalar parameter"
        },
        {
            "definition": "Total shifts available per month",
            "symbol": "TotalShifts",
            "value": 40,
            "shape": [],
            "code": "TotalShifts = data[\"TotalShifts\"] # scalar parameter"
        },
        {
            "definition": "Total energy available",
            "symbol": "TotalEnergy",
            "value": 230,
            "shape": [],
            "code": "TotalEnergy = data[\"TotalEnergy\"] # scalar parameter"
        },
        {
            "definition": "Minimum orders required",
            "symbol": "MinOrders",
            "value": 320,
            "shape": [],
            "code": "MinOrders = data[\"MinOrders\"] # scalar parameter"
        },
        {
            "definition": "Minimum scooter shifts required",
            "symbol": "MinScooterShifts",
            "value": 5,
            "shape": [],
            "code": "MinScooterShifts = data[\"MinScooterShifts\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The total number of shifts is non-negative.",
            "status": "formulated",
            "formulation": "\\textup{BikeShifts} + \\textup{ScooterShifts} \\geq 0",
            "related_variables": [
                "BikeShifts",
                "ScooterShifts"
            ],
            "related_parameters": []
        },
        {
            "description": "The number of bike shifts must be non-negative.",
            "status": "formulated",
            "formulation": "\\textup{BikeShifts} \\geq 0",
            "related_variables": [
                "BikeShifts"
            ],
            "related_parameters": []
        },
        {
            "description": "The number of scooter shifts worked must be non-negative.",
            "status": "formulated",
            "formulation": "\\textup{ScooterShifts} \\geq 0",
            "related_variables": [
                "ScooterShifts"
            ],
            "related_parameters": []
        },
        {
            "description": "The total number of shifts worked using bikes and scooters should not exceed the maximum number of shifts available per month.",
            "status": "formulated",
            "formulation": "\\textup{BikeShifts} + \\textup{ScooterShifts} \\\\leq \\textup{TotalShifts}",
            "related_variables": [
                "BikeShifts",
                "ScooterShifts"
            ],
            "related_parameters": [
                "TotalShifts"
            ]
        },
        {
            "description": "The total energy used by all shifts (bike and scooter) should not exceed the available total energy (TotalEnergy).",
            "status": "formulated",
            "formulation": "\\\\textup{EnergyBike} \\\\times \\\\textup{BikeShifts} + \\\\textup{EnergyScooter} \\\\times \\\\textup{ScooterShifts} \\\\leq \\\\textup{TotalEnergy}",
            "related_variables": [
                "BikeShifts",
                "ScooterShifts"
            ],
            "related_parameters": [
                "EnergyBike",
                "EnergyScooter",
                "TotalEnergy"
            ]
        },
        {
            "description": "The total number of orders delivered must be at least the minimum required orders \\textup{MinOrders}.",
            "status": "formulated",
            "formulation": "\\textup{OrdersBike} \\times \\textup{BikeShifts} + \\textup{OrdersScooter} \\times \\textup{ScooterShifts} \\geq \\textup{MinOrders}",
            "related_variables": [
                "BikeShifts",
                "ScooterShifts"
            ],
            "related_parameters": [
                "OrdersBike",
                "OrdersScooter",
                "MinOrders"
            ]
        },
        {
            "description": "The number of scooter shifts must be at least the minimum required scooter shifts.",
            "status": "formulated",
            "formulation": "\\textup{ScooterShifts} \\geq \\textup{MinScooterShifts}",
            "related_variables": [
                "ScooterShifts"
            ],
            "related_parameters": [
                "MinScooterShifts"
            ]
        },
        {
            "description": "Bike shifts must be non-negative.",
            "status": "formulated",
            "formulation": "\\textup{BikeShifts} \\geq 0",
            "related_variables": [
                "BikeShifts"
            ],
            "related_parameters": []
        },
        {
            "description": "Scooter shifts must be non-negative.",
            "status": "formulated",
            "formulation": "\\textup{ScooterShifts} \\geq 0",
            "related_variables": [
                "ScooterShifts"
            ],
            "related_parameters": []
        },
        {
            "description": "The total number of shifts cannot exceed the total shifts available.",
            "status": "formulated",
            "formulation": "\\textup{BikeShifts} + \\textup{ScooterShifts} \\leq \\textup{TotalShifts}",
            "related_variables": [
                "BikeShifts",
                "ScooterShifts"
            ],
            "related_parameters": [
                "TotalShifts"
            ]
        },
        {
            "description": "The total energy consumed by shifts cannot exceed the available energy.",
            "status": "formulated",
            "formulation": "\\textup{EnergyBike} \\cdot \\textup{BikeShifts} + \\textup{EnergyScooter} \\cdot \\textup{ScooterShifts} \\leq \\textup{TotalEnergy}",
            "related_variables": [
                "BikeShifts",
                "ScooterShifts"
            ],
            "related_parameters": [
                "EnergyBike",
                "EnergyScooter",
                "TotalEnergy"
            ]
        },
        {
            "description": "The total orders delivered should be at least the minimum required orders.",
            "status": "formulated",
            "formulation": "\\textup{OrdersBike} \\cdot \\textup{BikeShifts} + \\textup{OrdersScooter} \\cdot \\textup{ScooterShifts} \\geq \\textup{MinOrders}",
            "related_variables": [
                "BikeShifts",
                "ScooterShifts"
            ],
            "related_parameters": [
                "OrdersBike",
                "OrdersScooter",
                "MinOrders"
            ]
        },
        {
            "description": "The minimum number of scooter shifts must be at least the required threshold.",
            "status": "formulated",
            "formulation": "\\textup{ScooterShifts} \\geq \\textup{MinScooterShifts}",
            "related_variables": [
                "ScooterShifts"
            ],
            "related_parameters": [
                "MinScooterShifts"
            ]
        }
    ],
    "variables": [
        {
            "definition": "The number of shifts worked using a bike.",
            "symbol": "BikeShifts",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The number of shifts worked using a scooter.",
            "symbol": "ScooterShifts",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total tips received from all shifts worked on bikes and scooters.",
            "status": "formulated",
            "formulation": "\\textup{Maximize} \\quad \\textup{TipsBike} \\cdot \\textup{BikeShifts} + \\textup{TipsScooter} \\cdot \\textup{ScooterShifts}",
            "related_variables": [
                "BikeShifts",
                "ScooterShifts"
            ],
            "related_parameters": [
                "TipsBike",
                "TipsScooter"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413175358_nl4opt_prob_236/",
    "problem_path": "data/nl4opt/prob_236/"
}