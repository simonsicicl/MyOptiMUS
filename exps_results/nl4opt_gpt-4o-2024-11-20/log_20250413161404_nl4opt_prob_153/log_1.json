{
    "background": "A soda company distributes bottles to stores using a fleet of old and new vans, each with different capacities and pollution outputs.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Capacity of an old van",
            "symbol": "OldVanCapacity",
            "value": 100,
            "shape": [],
            "code": "OldVanCapacity = data[\"OldVanCapacity\"] # scalar parameter"
        },
        {
            "definition": "Capacity of a new van",
            "symbol": "NewVanCapacity",
            "value": 80,
            "shape": [],
            "code": "NewVanCapacity = data[\"NewVanCapacity\"] # scalar parameter"
        },
        {
            "definition": "Pollution produced by an old van",
            "symbol": "OldVanPollution",
            "value": 50,
            "shape": [],
            "code": "OldVanPollution = data[\"OldVanPollution\"] # scalar parameter"
        },
        {
            "definition": "Pollution produced by a new van",
            "symbol": "NewVanPollution",
            "value": 30,
            "shape": [],
            "code": "NewVanPollution = data[\"NewVanPollution\"] # scalar parameter"
        },
        {
            "definition": "Minimum quantity of soda bottles to be sent",
            "symbol": "MinBottles",
            "value": 5000,
            "shape": [],
            "code": "MinBottles = data[\"MinBottles\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of new vans allowed",
            "symbol": "MaxNewVans",
            "value": 30,
            "shape": [],
            "code": "MaxNewVans = data[\"MaxNewVans\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of old vans used must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfOldVans} \\geq 0",
            "related_variables": [
                "NumberOfOldVans"
            ],
            "related_parameters": [],
            "code": "# Since the variable \"NumberOfOldVans\" is already defined with non-negativity enforced as it is continuous, no constraint code is needed."
        },
        {
            "description": "The number of new vans used is non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfNewVans} \\geq 0",
            "related_variables": [
                "NumberOfNewVans"
            ],
            "related_parameters": [],
            "code": "# The variable \"NumberOfNewVans\" is already defined as non-negative because it is continuous and Gurobi enforces non-negativity by default for such variables."
        },
        {
            "description": "The total number of bottles delivered using old and new vans must be at least MinBottles.",
            "status": "coded",
            "formulation": "\\\\textup{NumberOfOldVans} \\\\times \\\\textup{OldVanCapacity} + \\\\textup{NumberOfNewVans} \\\\times \\\\textup{NewVanCapacity} \\\\geq \\\\textup{MinBottles}",
            "related_variables": [
                "NumberOfOldVans",
                "NumberOfNewVans"
            ],
            "related_parameters": [
                "OldVanCapacity",
                "NewVanCapacity",
                "MinBottles"
            ],
            "code": "# Add constraint for delivering at least MinBottles\nmodel.addConstr(NumberOfOldVans * OldVanCapacity + NumberOfNewVans * NewVanCapacity >= MinBottles, name=\"min_bottles_constraint\")"
        },
        {
            "description": "The number of new vans used must not exceed the maximum allowable number of new vans.",
            "status": "coded",
            "formulation": "\\textup{NumberOfNewVans} \\leq \\textup{MaxNewVans}",
            "related_variables": [
                "NumberOfNewVans"
            ],
            "related_parameters": [
                "MaxNewVans"
            ],
            "code": "# Add constraint to ensure the number of new vans used does not exceed the maximum allowable number\nmodel.addConstr(NumberOfNewVans <= MaxNewVans, name=\"max_new_vans_constraint\")"
        },
        {
            "description": "Ensure that the total capacity of vans used satisfies the minimum quantity of soda bottles required",
            "status": "coded",
            "formulation": "\\textup{NumberOfOldVans} \\times \\textup{OldVanCapacity} + \\textup{NumberOfNewVans} \\times \\textup{NewVanCapacity} \\geq \\textup{MinBottles}",
            "related_variables": [
                "NumberOfOldVans",
                "NumberOfNewVans"
            ],
            "related_parameters": [
                "OldVanCapacity",
                "NewVanCapacity",
                "MinBottles"
            ],
            "code": "# Add constraint to ensure total capacity of vans satisfies the minimum quantity of soda bottles required\nmodel.addConstr(\n    NumberOfOldVans * OldVanCapacity + NumberOfNewVans * NewVanCapacity >= MinBottles,\n    name=\"van_capacity_constraint\"\n)"
        },
        {
            "description": "Ensure that the number of new vans used does not exceed the maximum allowed",
            "status": "coded",
            "formulation": "\\textup{NumberOfNewVans} \\leq \\textup{MaxNewVans}",
            "related_variables": [
                "NumberOfNewVans"
            ],
            "related_parameters": [
                "MaxNewVans"
            ],
            "code": "# Add constraint to ensure the number of new vans used does not exceed the maximum allowed\nmodel.addConstr(NumberOfNewVans <= MaxNewVans, name=\"max_new_vans_constraint\")"
        },
        {
            "description": "Ensure that the number of vans used is non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfOldVans} \\geq 0, \\quad \\textup{NumberOfNewVans} \\geq 0",
            "related_variables": [
                "NumberOfOldVans",
                "NumberOfNewVans"
            ],
            "related_parameters": [],
            "code": "# As NumberOfOldVans and NumberOfNewVans are already defined as continuous variables, and continuous variables in Gurobi are non-negative by default, no code is required."
        },
        {
            "description": "Ensure that the number of vans used is an integer",
            "status": "coded",
            "formulation": "\\textup{NumberOfOldVans}, \\textup{NumberOfNewVans} \\in \\mathbb{Z^+}",
            "related_variables": [
                "NumberOfOldVans",
                "NumberOfNewVans"
            ],
            "related_parameters": [],
            "code": "# Change the variable types to integer as they need to be integers\nNumberOfOldVans.vtype = gp.GRB.INTEGER\nNumberOfNewVans.vtype = gp.GRB.INTEGER"
        }
    ],
    "variables": [
        {
            "definition": "The number of old vans used in the distribution process.",
            "symbol": "NumberOfOldVans",
            "shape": [],
            "status": "coded",
            "code": "NumberOfOldVans = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfOldVans\")"
        },
        {
            "definition": "The number of new vans used in the distribution process.",
            "symbol": "NumberOfNewVans",
            "shape": [],
            "status": "coded",
            "code": "NumberOfNewVans = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfNewVans\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total amount of pollution produced while meeting delivery requirements",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{TotalPollution} = \\textup{NumberOfOldVans} \\times \\textup{OldVanPollution} + \\textup{NumberOfNewVans} \\times \\textup{NewVanPollution}",
            "related_variables": [
                "NumberOfOldVans",
                "NumberOfNewVans"
            ],
            "related_parameters": [
                "OldVanPollution",
                "NewVanPollution"
            ],
            "code": "# Set objective\nmodel.setObjective(NumberOfOldVans * OldVanPollution + NumberOfNewVans * NewVanPollution, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413161404_nl4opt_prob_153/",
    "problem_path": "data/nl4opt/prob_153/"
}