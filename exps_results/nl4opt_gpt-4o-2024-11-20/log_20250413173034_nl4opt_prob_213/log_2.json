{
    "background": "A fashion company sells regular and premium handbags, each yielding different profits while having different manufacturing costs within a budget and a maximum sales capacity.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Profit per regular handbag sold",
            "symbol": "ProfitRegular",
            "value": 30,
            "shape": [],
            "code": "ProfitRegular = data[\"ProfitRegular\"] # scalar parameter"
        },
        {
            "definition": "Profit per premium handbag sold",
            "symbol": "ProfitPremium",
            "value": 180,
            "shape": [],
            "code": "ProfitPremium = data[\"ProfitPremium\"] # scalar parameter"
        },
        {
            "definition": "Cost of manufacturing a regular handbag",
            "symbol": "CostRegular",
            "value": 200,
            "shape": [],
            "code": "CostRegular = data[\"CostRegular\"] # scalar parameter"
        },
        {
            "definition": "Cost of manufacturing a premium handbag",
            "symbol": "CostPremium",
            "value": 447,
            "shape": [],
            "code": "CostPremium = data[\"CostPremium\"] # scalar parameter"
        },
        {
            "definition": "Total monthly budget for manufacturing",
            "symbol": "Budget",
            "value": 250000,
            "shape": [],
            "code": "Budget = data[\"Budget\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of handbags that can be sold per month",
            "symbol": "MaxHandbags",
            "value": 475,
            "shape": [],
            "code": "MaxHandbags = data[\"MaxHandbags\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of regular handbags sold is non-negative.",
            "status": "coded",
            "formulation": "\\textup{RegularHandbagsSold} \\geq 0",
            "related_variables": [
                "RegularHandbagsSold"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for regular handbags sold\nmodel.addConstr(RegularHandbagsSold >= 0, name=\"non_negativity_regular_handbags\")"
        },
        {
            "description": "The number of premium handbags sold must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{PremiumHandbagsSold} \\\\geq 0",
            "related_variables": [
                "PremiumHandbagsSold"
            ],
            "related_parameters": [],
            "code": "# The variable \"PremiumHandbagsSold\" is non-negative due to its default lower bound (0) in Gurobi."
        },
        {
            "description": "The total manufacturing cost of regular handbags and premium handbags cannot exceed the budget.",
            "status": "coded",
            "formulation": "\\\\textup{CostRegular} \\\\cdot \\\\textup{RegularHandbagsSold} + \\\\textup{CostPremium} \\\\cdot \\\\textup{PremiumHandbagsSold} \\\\leq \\\\textup{Budget}",
            "related_variables": [
                "RegularHandbagsSold",
                "PremiumHandbagsSold"
            ],
            "related_parameters": [
                "CostRegular",
                "CostPremium",
                "Budget"
            ],
            "code": "# Add total manufacturing cost constraint\nmodel.addConstr(\n    CostRegular * RegularHandbagsSold + CostPremium * PremiumHandbagsSold <= Budget,\n    name=\"total_manufacturing_cost\"\n)"
        },
        {
            "description": "The total number of handbags sold (regular and premium) cannot exceed MaxHandbags per month.",
            "status": "coded",
            "formulation": "\\textup{RegularHandbagsSold} + \\textup{PremiumHandbagsSold} \\leq \\textup{MaxHandbags}",
            "related_variables": [
                "RegularHandbagsSold",
                "PremiumHandbagsSold"
            ],
            "related_parameters": [
                "MaxHandbags"
            ],
            "code": "# Add constraint to limit the total number of handbags sold\nmodel.addConstr(RegularHandbagsSold + PremiumHandbagsSold <= MaxHandbags, name=\"limit_total_handbags_sold\")"
        },
        {
            "description": "The manufacturing cost of both types of handbags cannot exceed the total monthly budget",
            "status": "coded",
            "formulation": "\\textup{CostRegular} \\cdot \\textup{RegularHandbagsSold} + \\textup{CostPremium} \\cdot \\textup{PremiumHandbagsSold} \\leq \\textup{Budget}",
            "related_variables": [
                "RegularHandbagsSold",
                "PremiumHandbagsSold"
            ],
            "related_parameters": [
                "CostRegular",
                "CostPremium",
                "Budget"
            ],
            "code": "# Add budget constraint for manufacturing cost\nmodel.addConstr(\n    RegularHandbagsSold * CostRegular + PremiumHandbagsSold * CostPremium <= Budget,\n    name=\"budget_constraint\"\n)"
        },
        {
            "description": "The total number of handbags sold cannot exceed the maximum sales capacity",
            "status": "coded",
            "formulation": "\\textup{RegularHandbagsSold} + \\textup{PremiumHandbagsSold} \\leq \\textup{MaxHandbags}",
            "related_variables": [
                "RegularHandbagsSold",
                "PremiumHandbagsSold"
            ],
            "related_parameters": [
                "MaxHandbags"
            ],
            "code": "# Add sales capacity constraint\nmodel.addConstr(RegularHandbagsSold + PremiumHandbagsSold <= MaxHandbags, name=\"sales_capacity\")"
        },
        {
            "description": "The number of regular handbags sold cannot be negative",
            "status": "coded",
            "formulation": "\\textup{RegularHandbagsSold} \\geq 0",
            "related_variables": [
                "RegularHandbagsSold"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since RegularHandbagsSold is already defined as non-negative due to its default lower bound (0) in Gurobi."
        },
        {
            "description": "The number of premium handbags sold cannot be negative",
            "status": "coded",
            "formulation": "\\textup{PremiumHandbagsSold} \\geq 0",
            "related_variables": [
                "PremiumHandbagsSold"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since PremiumHandbagsSold is already defined as non-negative due to its default lower bound (lb=0) in gurobipy."
        }
    ],
    "variables": [
        {
            "definition": "The number of regular handbags sold.",
            "symbol": "RegularHandbagsSold",
            "shape": [],
            "status": "coded",
            "code": "RegularHandbagsSold = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"RegularHandbagsSold\")"
        },
        {
            "definition": "The number of premium handbags sold.",
            "symbol": "PremiumHandbagsSold",
            "shape": [],
            "status": "coded",
            "code": "PremiumHandbagsSold = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PremiumHandbagsSold\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the company's monthly profit from selling regular and premium handbags",
            "status": "coded",
            "formulation": "\\textup{ProfitRegular} \\cdot \\textup{RegularHandbagsSold} + \\textup{ProfitPremium} \\cdot \\textup{PremiumHandbagsSold}",
            "related_variables": [
                "RegularHandbagsSold",
                "PremiumHandbagsSold"
            ],
            "related_parameters": [
                "ProfitRegular",
                "ProfitPremium"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitRegular * RegularHandbagsSold + ProfitPremium * PremiumHandbagsSold, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 85500.0,
    "log_path": "logs/log_20250413173034_nl4opt_prob_213/",
    "problem_path": "data/nl4opt/prob_213/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_213/data.json\", \"r\") as f:\n    data = json.load(f)\n\nProfitRegular = data[\"ProfitRegular\"] # scalar parameter\nProfitPremium = data[\"ProfitPremium\"] # scalar parameter\nCostRegular = data[\"CostRegular\"] # scalar parameter\nCostPremium = data[\"CostPremium\"] # scalar parameter\nBudget = data[\"Budget\"] # scalar parameter\nMaxHandbags = data[\"MaxHandbags\"] # scalar parameter\nRegularHandbagsSold = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"RegularHandbagsSold\")\nPremiumHandbagsSold = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PremiumHandbagsSold\")\n\n# Add non-negativity constraint for regular handbags sold\nmodel.addConstr(RegularHandbagsSold >= 0, name=\"non_negativity_regular_handbags\")\n\n# The variable \"PremiumHandbagsSold\" is non-negative due to its default lower bound (0) in Gurobi.\n\n# Add total manufacturing cost constraint\nmodel.addConstr(\n    CostRegular * RegularHandbagsSold + CostPremium * PremiumHandbagsSold <= Budget,\n    name=\"total_manufacturing_cost\"\n)\n\n# Add constraint to limit the total number of handbags sold\nmodel.addConstr(RegularHandbagsSold + PremiumHandbagsSold <= MaxHandbags, name=\"limit_total_handbags_sold\")\n\n# Add budget constraint for manufacturing cost\nmodel.addConstr(\n    RegularHandbagsSold * CostRegular + PremiumHandbagsSold * CostPremium <= Budget,\n    name=\"budget_constraint\"\n)\n\n# Add sales capacity constraint\nmodel.addConstr(RegularHandbagsSold + PremiumHandbagsSold <= MaxHandbags, name=\"sales_capacity\")\n\n# No additional code needed since RegularHandbagsSold is already defined as non-negative due to its default lower bound (0) in Gurobi.\n\n# No additional code needed since PremiumHandbagsSold is already defined as non-negative due to its default lower bound (lb=0) in gurobipy.\n\n# Set objective\nmodel.setObjective(ProfitRegular * RegularHandbagsSold + ProfitPremium * PremiumHandbagsSold, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}