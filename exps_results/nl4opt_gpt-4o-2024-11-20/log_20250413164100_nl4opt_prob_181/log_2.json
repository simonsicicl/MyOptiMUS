{
    "background": "A tropical city needs to transport mail to islands using submarines and boats with different capacities and fuel consumption, under trip quantity constraints.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Mail carrying capacity of a submarine per trip",
            "symbol": "SubmarineCapacity",
            "value": 100,
            "shape": [],
            "code": "SubmarineCapacity = data[\"SubmarineCapacity\"] # scalar parameter"
        },
        {
            "definition": "Fuel consumption of a submarine per trip",
            "symbol": "SubmarineFuel",
            "value": 30,
            "shape": [],
            "code": "SubmarineFuel = data[\"SubmarineFuel\"] # scalar parameter"
        },
        {
            "definition": "Mail carrying capacity of a boat per trip",
            "symbol": "BoatCapacity",
            "value": 80,
            "shape": [],
            "code": "BoatCapacity = data[\"BoatCapacity\"] # scalar parameter"
        },
        {
            "definition": "Fuel consumption of a boat per trip",
            "symbol": "BoatFuel",
            "value": 25,
            "shape": [],
            "code": "BoatFuel = data[\"BoatFuel\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of submarine trips allowed",
            "symbol": "MaxSubmarineTrips",
            "value": 6,
            "shape": [],
            "code": "MaxSubmarineTrips = data[\"MaxSubmarineTrips\"] # scalar parameter"
        },
        {
            "definition": "Minimum proportion of total trips that must be by boat",
            "symbol": "MinBoatTripProportion",
            "value": 0.5,
            "shape": [],
            "code": "MinBoatTripProportion = data[\"MinBoatTripProportion\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of pieces of mail to be transported",
            "symbol": "MinMail",
            "value": 1000,
            "shape": [],
            "code": "MinMail = data[\"MinMail\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of submarine trips must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{NumberOfSubmarineTrips} \\\\geq 0",
            "related_variables": [
                "NumberOfSubmarineTrips"
            ],
            "related_parameters": [],
            "code": "# No code needed, as non-negativity is defined inherently for variables in gurobipy unless explicitly set otherwise."
        },
        {
            "description": "The number of trips using boats must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBoatTrips} \\geq 0",
            "related_variables": [
                "NumberOfBoatTrips"
            ],
            "related_parameters": [],
            "code": "# As the non-negativity constraint is inherent to the variable's domain (continuous variables in Gurobi are non-negative by default unless explicitly bounded to be negative), no additional constraint code is needed."
        },
        {
            "description": "The total number of submarine trips cannot exceed the maximum allowed submarine trips.",
            "status": "coded",
            "formulation": "\\textup{NumberOfSubmarineTrips} \\leq \\textup{MaxSubmarineTrips}",
            "related_variables": [
                "NumberOfSubmarineTrips"
            ],
            "related_parameters": [
                "MaxSubmarineTrips"
            ],
            "code": "# Add constraint to limit the number of submarine trips\nmodel.addConstr(NumberOfSubmarineTrips <= MaxSubmarineTrips, name=\"submarine_trip_limit\")"
        },
        {
            "description": "At least MinBoatTripProportion of the trips must be by boat.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBoatTrips} \\geq \\frac{\\textup{MinBoatTripProportion} \\times \\textup{NumberOfSubmarineTrips}}{1 - \\textup{MinBoatTripProportion}}",
            "related_variables": [
                "NumberOfBoatTrips",
                "NumberOfSubmarineTrips"
            ],
            "related_parameters": [
                "MinBoatTripProportion"
            ],
            "code": "# Add constraint to ensure at least MinBoatTripProportion of the trips are by boat\nmodel.addConstr(\n    NumberOfBoatTrips >= (MinBoatTripProportion * NumberOfSubmarineTrips) / (1 - MinBoatTripProportion),\n    name=\"min_boat_trip_proportion\"\n)"
        },
        {
            "description": "The minimum amount of mail (MinMail) that must be transported by submarines and boats combined.",
            "status": "coded",
            "formulation": "\\\\textup{SubmarineCapacity} \\\\times \\\\textup{NumberOfSubmarineTrips} + \\\\textup{BoatCapacity} \\\\times \\\\textup{NumberOfBoatTrips} \\\\geq \\\\textup{MinMail}",
            "related_variables": [
                "NumberOfSubmarineTrips",
                "NumberOfBoatTrips"
            ],
            "related_parameters": [
                "SubmarineCapacity",
                "BoatCapacity",
                "MinMail"
            ],
            "code": "# Add minimum mail transportation constraint\nmodel.addConstr(\n    SubmarineCapacity * NumberOfSubmarineTrips + BoatCapacity * NumberOfBoatTrips >= MinMail,\n    name=\"min_mail_transportation\"\n)"
        },
        {
            "description": "Total mail transported must meet or exceed the minimum mail requirement.",
            "status": "coded",
            "formulation": "\\textup{SubmarineCapacity} \\cdot \\textup{NumberOfSubmarineTrips} + \\textup{BoatCapacity} \\cdot \\textup{NumberOfBoatTrips} \\geq \\textup{MinMail}",
            "related_variables": [
                "NumberOfSubmarineTrips",
                "NumberOfBoatTrips"
            ],
            "related_parameters": [
                "SubmarineCapacity",
                "BoatCapacity",
                "MinMail"
            ],
            "code": "# Add constraint for minimum mail requirement\nmodel.addConstr(\n    SubmarineCapacity * NumberOfSubmarineTrips + BoatCapacity * NumberOfBoatTrips >= MinMail,\n    name=\"min_mail_requirement\"\n)"
        },
        {
            "description": "The number of submarine trips should not exceed the maximum allowed.",
            "status": "coded",
            "formulation": "\\textup{NumberOfSubmarineTrips} \\leq \\textup{MaxSubmarineTrips}",
            "related_variables": [
                "NumberOfSubmarineTrips"
            ],
            "related_parameters": [
                "MaxSubmarineTrips"
            ],
            "code": "# Add constraint to limit the number of submarine trips\nmodel.addConstr(NumberOfSubmarineTrips <= MaxSubmarineTrips, name=\"submarine_trip_limit\")"
        },
        {
            "description": "A minimum proportion of trips must be made using boats.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBoatTrips} \\geq \\textup{MinBoatTripProportion} \\cdot (\\textup{NumberOfSubmarineTrips} + \\textup{NumberOfBoatTrips})",
            "related_variables": [
                "NumberOfSubmarineTrips",
                "NumberOfBoatTrips"
            ],
            "related_parameters": [
                "MinBoatTripProportion"
            ],
            "code": "# Add constraint to ensure a minimum proportion of trips must be made using boats\nmodel.addConstr(\n    NumberOfBoatTrips >= MinBoatTripProportion * (NumberOfSubmarineTrips + NumberOfBoatTrips),\n    name=\"min_boat_trip_proportion\"\n)"
        },
        {
            "description": "Define the total number of trips as the sum of submarine and boat trips.",
            "status": "coded",
            "formulation": "\\textup{TotalTrips} = \\textup{NumberOfSubmarineTrips} + \\textup{NumberOfBoatTrips}",
            "related_variables": [
                "NumberOfSubmarineTrips",
                "NumberOfBoatTrips",
                "TotalTrips"
            ],
            "related_parameters": [],
            "code": "# Add constraint to define TotalTrips as the sum of NumberOfSubmarineTrips and NumberOfBoatTrips\nmodel.addConstr(TotalTrips == NumberOfSubmarineTrips + NumberOfBoatTrips, name=\"total_trips_definition\")"
        },
        {
            "description": "Non-negativity of the number of trips.",
            "status": "coded",
            "formulation": "\\textup{NumberOfSubmarineTrips} \\geq 0, \\quad \\textup{NumberOfBoatTrips} \\geq 0",
            "related_variables": [
                "NumberOfSubmarineTrips",
                "NumberOfBoatTrips"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraints for the number of trips\nmodel.addConstr(NumberOfSubmarineTrips >= 0, name=\"non_negativity_submarine_trips\")\nmodel.addConstr(NumberOfBoatTrips >= 0, name=\"non_negativity_boat_trips\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of trips using submarines.",
            "symbol": "NumberOfSubmarineTrips",
            "shape": [],
            "status": "coded",
            "code": "NumberOfSubmarineTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfSubmarineTrips\")"
        },
        {
            "definition": "The number of trips using boats.",
            "symbol": "NumberOfBoatTrips",
            "shape": [],
            "status": "coded",
            "code": "NumberOfBoatTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfBoatTrips\")"
        },
        {
            "definition": "The total number of trips, equal to the sum of submarine and boat trips.",
            "symbol": "TotalTrips",
            "shape": [],
            "status": "coded",
            "code": "TotalTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalTrips\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total fuel consumption of submarines and boats for transporting mail.",
            "status": "coded",
            "formulation": "\\textup{Minimize:} \\quad \\textup{SubmarineFuel} \\cdot \\textup{NumberOfSubmarineTrips} + \\textup{BoatFuel} \\cdot \\textup{NumberOfBoatTrips}",
            "related_variables": [
                "NumberOfSubmarineTrips",
                "NumberOfBoatTrips"
            ],
            "related_parameters": [
                "SubmarineFuel",
                "BoatFuel"
            ],
            "code": "# Set objective\nmodel.setObjective(SubmarineFuel * NumberOfSubmarineTrips + BoatFuel * NumberOfBoatTrips, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 305.55555555555554,
    "log_path": "logs/log_20250413164100_nl4opt_prob_181/",
    "problem_path": "data/nl4opt/prob_181/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_181/data.json\", \"r\") as f:\n    data = json.load(f)\n\nSubmarineCapacity = data[\"SubmarineCapacity\"] # scalar parameter\nSubmarineFuel = data[\"SubmarineFuel\"] # scalar parameter\nBoatCapacity = data[\"BoatCapacity\"] # scalar parameter\nBoatFuel = data[\"BoatFuel\"] # scalar parameter\nMaxSubmarineTrips = data[\"MaxSubmarineTrips\"] # scalar parameter\nMinBoatTripProportion = data[\"MinBoatTripProportion\"] # scalar parameter\nMinMail = data[\"MinMail\"] # scalar parameter\nNumberOfSubmarineTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfSubmarineTrips\")\nNumberOfBoatTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfBoatTrips\")\nTotalTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalTrips\")\n\n# No code needed, as non-negativity is defined inherently for variables in gurobipy unless explicitly set otherwise.\n\n# As the non-negativity constraint is inherent to the variable's domain (continuous variables in Gurobi are non-negative by default unless explicitly bounded to be negative), no additional constraint code is needed.\n\n# Add constraint to limit the number of submarine trips\nmodel.addConstr(NumberOfSubmarineTrips <= MaxSubmarineTrips, name=\"submarine_trip_limit\")\n\n# Add constraint to ensure at least MinBoatTripProportion of the trips are by boat\nmodel.addConstr(\n    NumberOfBoatTrips >= (MinBoatTripProportion * NumberOfSubmarineTrips) / (1 - MinBoatTripProportion),\n    name=\"min_boat_trip_proportion\"\n)\n\n# Add minimum mail transportation constraint\nmodel.addConstr(\n    SubmarineCapacity * NumberOfSubmarineTrips + BoatCapacity * NumberOfBoatTrips >= MinMail,\n    name=\"min_mail_transportation\"\n)\n\n# Add constraint for minimum mail requirement\nmodel.addConstr(\n    SubmarineCapacity * NumberOfSubmarineTrips + BoatCapacity * NumberOfBoatTrips >= MinMail,\n    name=\"min_mail_requirement\"\n)\n\n# Add constraint to limit the number of submarine trips\nmodel.addConstr(NumberOfSubmarineTrips <= MaxSubmarineTrips, name=\"submarine_trip_limit\")\n\n# Add constraint to ensure a minimum proportion of trips must be made using boats\nmodel.addConstr(\n    NumberOfBoatTrips >= MinBoatTripProportion * (NumberOfSubmarineTrips + NumberOfBoatTrips),\n    name=\"min_boat_trip_proportion\"\n)\n\n# Add constraint to define TotalTrips as the sum of NumberOfSubmarineTrips and NumberOfBoatTrips\nmodel.addConstr(TotalTrips == NumberOfSubmarineTrips + NumberOfBoatTrips, name=\"total_trips_definition\")\n\n# Add non-negativity constraints for the number of trips\nmodel.addConstr(NumberOfSubmarineTrips >= 0, name=\"non_negativity_submarine_trips\")\nmodel.addConstr(NumberOfBoatTrips >= 0, name=\"non_negativity_boat_trips\")\n\n# Set objective\nmodel.setObjective(SubmarineFuel * NumberOfSubmarineTrips + BoatFuel * NumberOfBoatTrips, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}