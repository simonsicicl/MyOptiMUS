{
    "background": "A snow removal company operates small and large trucks requiring different numbers of people for snow shoveling and having different snow capacities.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of people required to shovel snow for a small truck",
            "symbol": "PeopleSmallTruck",
            "value": 2,
            "shape": [],
            "code": "PeopleSmallTruck = data[\"PeopleSmallTruck\"] # scalar parameter"
        },
        {
            "definition": "Capacity of snow that a small truck can carry",
            "symbol": "CapacitySmallTruck",
            "value": 30,
            "shape": [],
            "code": "CapacitySmallTruck = data[\"CapacitySmallTruck\"] # scalar parameter"
        },
        {
            "definition": "Number of people required to shovel snow for a large truck",
            "symbol": "PeopleLargeTruck",
            "value": 4,
            "shape": [],
            "code": "PeopleLargeTruck = data[\"PeopleLargeTruck\"] # scalar parameter"
        },
        {
            "definition": "Capacity of snow that a large truck can carry",
            "symbol": "CapacityLargeTruck",
            "value": 50,
            "shape": [],
            "code": "CapacityLargeTruck = data[\"CapacityLargeTruck\"] # scalar parameter"
        },
        {
            "definition": "Total number of people available for shoveling snow",
            "symbol": "TotalPeople",
            "value": 30,
            "shape": [],
            "code": "TotalPeople = data[\"TotalPeople\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of small trucks required",
            "symbol": "MinSmallTrucks",
            "value": 10,
            "shape": [],
            "code": "MinSmallTrucks = data[\"MinSmallTrucks\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of large trucks required",
            "symbol": "MinLargeTrucks",
            "value": 3,
            "shape": [],
            "code": "MinLargeTrucks = data[\"MinLargeTrucks\"] # scalar parameter"
        },
        {
            "definition": "Proportion of the number of small trucks to large trucks",
            "symbol": "TruckProportion",
            "value": 2,
            "shape": [],
            "code": "TruckProportion = data[\"TruckProportion\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of people assigned to small trucks is non-negative",
            "status": "coded",
            "formulation": "\\textup{PeopleAssignedSmallTrucks} \\geq 0",
            "related_variables": [
                "PeopleAssignedSmallTrucks"
            ],
            "related_parameters": [],
            "code": "# The non-negativity constraint is inherently satisfied as the variable PeopleAssignedSmallTrucks is defined as continuous, which defaults to being non-negative in Gurobi. Thus, no additional code is needed."
        },
        {
            "description": "The number of people assigned to large trucks must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{PeopleAssignedLargeTrucks} \\\\geq 0",
            "related_variables": [
                "PeopleAssignedLargeTrucks"
            ],
            "related_parameters": [],
            "code": "# No additional code needed; non-negativity is enforced as the variable \"PeopleAssignedLargeTrucks\" is defined with a lower bound of 0 by default in Gurobi (continuous variables are non-negative by default unless explicitly stated otherwise through bounds)."
        },
        {
            "description": "The number of people assigned to small and large trucks combined cannot exceed the total number of people available (TotalPeople).",
            "status": "coded",
            "formulation": "\\\\textup{PeopleAssignedSmallTrucks} + \\\\textup{PeopleAssignedLargeTrucks} \\\\leq \\\\textup{TotalPeople}",
            "related_variables": [
                "PeopleAssignedSmallTrucks",
                "PeopleAssignedLargeTrucks"
            ],
            "related_parameters": [
                "TotalPeople"
            ],
            "code": "# Add constraint to ensure that the total number of people assigned to small and large trucks does not exceed TotalPeople\nmodel.addConstr(PeopleAssignedSmallTrucks + PeopleAssignedLargeTrucks <= TotalPeople, name=\"people_assignment_limit\")"
        },
        {
            "description": "At least MinSmallTrucks small trucks must be used",
            "status": "coded",
            "formulation": "\\textup{SmallTrucksUsed} \\geq \\textup{MinSmallTrucks}",
            "related_variables": [
                "SmallTrucksUsed"
            ],
            "related_parameters": [
                "MinSmallTrucks"
            ],
            "code": "# Add constraint for minimum number of small trucks used\nmodel.addConstr(SmallTrucksUsed >= MinSmallTrucks, name=\"min_small_trucks\")"
        },
        {
            "description": "Ensure that at least MinLargeTrucks large trucks are used.",
            "status": "coded",
            "formulation": "\\\\textup{LargeTrucksUsed} \\\\geq \\\\textup{MinLargeTrucks}",
            "related_variables": [
                "LargeTrucksUsed"
            ],
            "related_parameters": [
                "MinLargeTrucks"
            ],
            "code": "# Add constraint to ensure that at least MinLargeTrucks large trucks are used\nmodel.addConstr(LargeTrucksUsed >= MinLargeTrucks, name=\"min_large_trucks\")"
        },
        {
            "description": "Relate SmallTrucksUsed to PeopleAssignedSmallTrucks",
            "status": "coded",
            "formulation": "\\textup{PeopleAssignedSmallTrucks} = \\textup{SmallTrucksUsed} \\times \\textup{PeopleSmallTruck}",
            "related_variables": [
                "SmallTrucksUsed",
                "PeopleAssignedSmallTrucks"
            ],
            "related_parameters": [
                "PeopleSmallTruck"
            ],
            "code": "# Add constraint relating PeopleAssignedSmallTrucks to SmallTrucksUsed\nmodel.addConstr(PeopleAssignedSmallTrucks == SmallTrucksUsed * PeopleSmallTruck, name=\"relate_small_trucks_to_people\")"
        },
        {
            "description": "The total number of people assigned must not exceed the total number of available people.",
            "status": "coded",
            "formulation": "\\textup{PeopleSmallTruck} \\times \\textup{SmallTrucksUsed} + \\textup{PeopleLargeTruck} \\times \\textup{LargeTrucksUsed} \\leq \\textup{TotalPeople}",
            "related_variables": [
                "SmallTrucksUsed",
                "LargeTrucksUsed"
            ],
            "related_parameters": [
                "PeopleSmallTruck",
                "PeopleLargeTruck",
                "TotalPeople"
            ],
            "code": "# Add constraint to ensure total assigned people do not exceed available people\nmodel.addConstr(\n    PeopleSmallTruck * SmallTrucksUsed + PeopleLargeTruck * LargeTrucksUsed <= TotalPeople,\n    name=\"limit_total_people\"\n)"
        },
        {
            "description": "The number of small trucks used must be at least the minimum required.",
            "status": "coded",
            "formulation": "\\textup{SmallTrucksUsed} \\geq \\textup{MinSmallTrucks}",
            "related_variables": [
                "SmallTrucksUsed"
            ],
            "related_parameters": [
                "MinSmallTrucks"
            ],
            "code": "# Add constraint to ensure the number of small trucks used meets the minimum requirement\nmodel.addConstr(SmallTrucksUsed >= MinSmallTrucks, name=\"min_small_trucks_requirement\")"
        },
        {
            "description": "The number of large trucks used must be at least the minimum required.",
            "status": "coded",
            "formulation": "\\textup{LargeTrucksUsed} \\geq \\textup{MinLargeTrucks}",
            "related_variables": [
                "LargeTrucksUsed"
            ],
            "related_parameters": [
                "MinLargeTrucks"
            ],
            "code": "# Add constraint to ensure the number of large trucks used meets or exceeds the minimum required\nmodel.addConstr(LargeTrucksUsed >= MinLargeTrucks, name=\"min_large_trucks\")"
        },
        {
            "description": "The ratio of small trucks to large trucks must respect the proportion constraint.",
            "status": "coded",
            "formulation": "\\textup{SmallTrucksUsed} \\geq \\textup{TruckProportion} \\times \\textup{LargeTrucksUsed}",
            "related_variables": [
                "SmallTrucksUsed",
                "LargeTrucksUsed"
            ],
            "related_parameters": [
                "TruckProportion"
            ],
            "code": "# Add proportion constraint to ensure ratio of small trucks to large trucks\nmodel.addConstr(SmallTrucksUsed >= TruckProportion * LargeTrucksUsed, name=\"truck_proportion_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of people assigned to small trucks for snow shoveling.",
            "symbol": "PeopleAssignedSmallTrucks",
            "shape": [],
            "status": "coded",
            "code": "PeopleAssignedSmallTrucks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PeopleAssignedSmallTrucks\")"
        },
        {
            "definition": "The number of people assigned to large trucks for snow shoveling.",
            "symbol": "PeopleAssignedLargeTrucks",
            "shape": [],
            "status": "coded",
            "code": "PeopleAssignedLargeTrucks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PeopleAssignedLargeTrucks\")"
        },
        {
            "definition": "The number of small trucks being used",
            "symbol": "SmallTrucksUsed",
            "shape": [],
            "status": "coded",
            "code": "SmallTrucksUsed = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SmallTrucksUsed\")"
        },
        {
            "definition": "The number of large trucks being used",
            "symbol": "LargeTrucksUsed",
            "shape": [],
            "status": "coded",
            "code": "LargeTrucksUsed = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"LargeTrucksUsed\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total amount of snow transported by the company.",
            "status": "coded",
            "formulation": "\\textup{Maximize} \\quad \\textup{CapacitySmallTruck} \\times \\textup{SmallTrucksUsed} + \\textup{CapacityLargeTruck} \\times \\textup{LargeTrucksUsed}",
            "related_variables": [
                "SmallTrucksUsed",
                "LargeTrucksUsed"
            ],
            "related_parameters": [
                "CapacitySmallTruck",
                "CapacityLargeTruck"
            ],
            "code": "# Set objective\nmodel.setObjective(\n    CapacitySmallTruck * SmallTrucksUsed + CapacityLargeTruck * LargeTrucksUsed, \n    gp.GRB.MAXIMIZE\n)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 4,
    "error_message": null,
    "obj_val": "infeasible or unbounded",
    "log_path": "logs/log_20250413171243_nl4opt_prob_194/",
    "problem_path": "data/nl4opt/prob_194/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_194/data.json\", \"r\") as f:\n    data = json.load(f)\n\nPeopleSmallTruck = data[\"PeopleSmallTruck\"] # scalar parameter\nCapacitySmallTruck = data[\"CapacitySmallTruck\"] # scalar parameter\nPeopleLargeTruck = data[\"PeopleLargeTruck\"] # scalar parameter\nCapacityLargeTruck = data[\"CapacityLargeTruck\"] # scalar parameter\nTotalPeople = data[\"TotalPeople\"] # scalar parameter\nMinSmallTrucks = data[\"MinSmallTrucks\"] # scalar parameter\nMinLargeTrucks = data[\"MinLargeTrucks\"] # scalar parameter\nTruckProportion = data[\"TruckProportion\"] # scalar parameter\nPeopleAssignedSmallTrucks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PeopleAssignedSmallTrucks\")\nPeopleAssignedLargeTrucks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PeopleAssignedLargeTrucks\")\nSmallTrucksUsed = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SmallTrucksUsed\")\nLargeTrucksUsed = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"LargeTrucksUsed\")\n\n# The non-negativity constraint is inherently satisfied as the variable PeopleAssignedSmallTrucks is defined as continuous, which defaults to being non-negative in Gurobi. Thus, no additional code is needed.\n\n# No additional code needed; non-negativity is enforced as the variable \"PeopleAssignedLargeTrucks\" is defined with a lower bound of 0 by default in Gurobi (continuous variables are non-negative by default unless explicitly stated otherwise through bounds).\n\n# Add constraint to ensure that the total number of people assigned to small and large trucks does not exceed TotalPeople\nmodel.addConstr(PeopleAssignedSmallTrucks + PeopleAssignedLargeTrucks <= TotalPeople, name=\"people_assignment_limit\")\n\n# Add constraint for minimum number of small trucks used\nmodel.addConstr(SmallTrucksUsed >= MinSmallTrucks, name=\"min_small_trucks\")\n\n# Add constraint to ensure that at least MinLargeTrucks large trucks are used\nmodel.addConstr(LargeTrucksUsed >= MinLargeTrucks, name=\"min_large_trucks\")\n\n# Add constraint relating PeopleAssignedSmallTrucks to SmallTrucksUsed\nmodel.addConstr(PeopleAssignedSmallTrucks == SmallTrucksUsed * PeopleSmallTruck, name=\"relate_small_trucks_to_people\")\n\n# Add constraint to ensure total assigned people do not exceed available people\nmodel.addConstr(\n    PeopleSmallTruck * SmallTrucksUsed + PeopleLargeTruck * LargeTrucksUsed <= TotalPeople,\n    name=\"limit_total_people\"\n)\n\n# Add constraint to ensure the number of small trucks used meets the minimum requirement\nmodel.addConstr(SmallTrucksUsed >= MinSmallTrucks, name=\"min_small_trucks_requirement\")\n\n# Add constraint to ensure the number of large trucks used meets or exceeds the minimum required\nmodel.addConstr(LargeTrucksUsed >= MinLargeTrucks, name=\"min_large_trucks\")\n\n# Add proportion constraint to ensure ratio of small trucks to large trucks\nmodel.addConstr(SmallTrucksUsed >= TruckProportion * LargeTrucksUsed, name=\"truck_proportion_constraint\")\n\n# Set objective\nmodel.setObjective(\n    CapacitySmallTruck * SmallTrucksUsed + CapacityLargeTruck * LargeTrucksUsed, \n    gp.GRB.MAXIMIZE\n)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}