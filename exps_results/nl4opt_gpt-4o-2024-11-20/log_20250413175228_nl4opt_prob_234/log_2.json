{
    "background": "A hospital aims to schedule ultrasound technicians and graduate researchers to image patients, considering shift lengths, shift costs, regulatory ratios, service hours needed, and budget constraints.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of hours per shift for an ultrasound technician",
            "symbol": "TechnicianHoursPerShift",
            "value": 8,
            "shape": [],
            "code": "TechnicianHoursPerShift = data[\"TechnicianHoursPerShift\"] # scalar parameter"
        },
        {
            "definition": "Number of hours per shift for a graduate researcher",
            "symbol": "ResearcherHoursPerShift",
            "value": 5,
            "shape": [],
            "code": "ResearcherHoursPerShift = data[\"ResearcherHoursPerShift\"] # scalar parameter"
        },
        {
            "definition": "Payment per shift for an ultrasound technician",
            "symbol": "TechnicianPaymentPerShift",
            "value": 300,
            "shape": [],
            "code": "TechnicianPaymentPerShift = data[\"TechnicianPaymentPerShift\"] # scalar parameter"
        },
        {
            "definition": "Payment per shift for a graduate researcher",
            "symbol": "ResearcherPaymentPerShift",
            "value": 100,
            "shape": [],
            "code": "ResearcherPaymentPerShift = data[\"ResearcherPaymentPerShift\"] # scalar parameter"
        },
        {
            "definition": "Required ratio of ultrasound technician shifts to graduate researcher shifts",
            "symbol": "RequiredTechnicianToResearcherRatio",
            "value": 2,
            "shape": [],
            "code": "RequiredTechnicianToResearcherRatio = data[\"RequiredTechnicianToResearcherRatio\"] # scalar parameter"
        },
        {
            "definition": "Total hours of ultrasound service needed",
            "symbol": "TotalUltrasoundHoursNeeded",
            "value": 500,
            "shape": [],
            "code": "TotalUltrasoundHoursNeeded = data[\"TotalUltrasoundHoursNeeded\"] # scalar parameter"
        },
        {
            "definition": "Total budget for hiring workers",
            "symbol": "TotalBudget",
            "value": 14000,
            "shape": [],
            "code": "TotalBudget = data[\"TotalBudget\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of ultrasound technician shifts is non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{TechnicianShifts} \\\\geq 0",
            "related_variables": [
                "TechnicianShifts"
            ],
            "related_parameters": [],
            "code": "# The variable \"TechnicianShifts\" is non-negative by default since it is a continuous variable."
        },
        {
            "description": "The number of graduate researcher shifts must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{ResearcherShifts} \\geq 0",
            "related_variables": [
                "ResearcherShifts"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for the number of graduate researcher shifts\nmodel.addConstr(ResearcherShifts >= 0, name=\"non_negative_researcher_shifts\")"
        },
        {
            "description": "Ensure the ratio of ultrasound technician shifts to graduate researcher shifts is equal to RequiredTechnicianToResearcherRatio.",
            "status": "coded",
            "formulation": "\\textup{TechnicianShifts} = \\textup{RequiredTechnicianToResearcherRatio} \\cdot \\textup{ResearcherShifts}",
            "related_variables": [
                "TechnicianShifts",
                "ResearcherShifts"
            ],
            "related_parameters": [
                "RequiredTechnicianToResearcherRatio"
            ],
            "code": "# Add equality constraint to ensure the ratio of technician shifts to researcher shifts matches the required ratio\nmodel.addConstr(TechnicianShifts == RequiredTechnicianToResearcherRatio * ResearcherShifts, name=\"technician_researcher_ratio\")"
        },
        {
            "description": "The total expenditure for all shifts must not exceed the total budget.",
            "status": "coded",
            "formulation": "\\textup{TechnicianPaymentPerShift} \\times \\textup{TechnicianShifts} + \\textup{ResearcherPaymentPerShift} \\times \\textup{ResearcherShifts} \\leq \\textup{TotalBudget}",
            "related_variables": [
                "TechnicianShifts",
                "ResearcherShifts"
            ],
            "related_parameters": [
                "TechnicianPaymentPerShift",
                "ResearcherPaymentPerShift",
                "TotalBudget"
            ],
            "code": "# Add total expenditure constraint\nmodel.addConstr(\n    TechnicianPaymentPerShift * TechnicianShifts + ResearcherPaymentPerShift * ResearcherShifts <= TotalBudget,\n    name=\"total_expenditure_constraint\"\n)"
        },
        {
            "description": "Ensure that if no graduate researcher shifts are scheduled, no technician shifts are scheduled (to avoid divide-by-zero issues in the ratio).",
            "status": "coded",
            "formulation": "\\textup{ResearcherShifts} = 0 \\quad \\implies \\quad \\textup{TechnicianShifts} = 0",
            "related_variables": [
                "TechnicianShifts",
                "ResearcherShifts"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure technician shifts are only scheduled if researcher shifts are scheduled\nmodel.addConstr((ResearcherShifts == 0) >> (TechnicianShifts == 0), name=\"no_technician_without_researcher\")"
        },
        {
            "description": "Ensure that total service hours provided by technicians and researchers meet or exceed the required ultrasound hours",
            "status": "coded",
            "formulation": "\\textup{TechnicianShifts} \\times \\textup{TechnicianHoursPerShift} + \\textup{ResearcherShifts} \\times \\textup{ResearcherHoursPerShift} \\geq \\textup{TotalUltrasoundHoursNeeded}",
            "related_variables": [
                "TechnicianShifts",
                "ResearcherShifts"
            ],
            "related_parameters": [
                "TechnicianHoursPerShift",
                "ResearcherHoursPerShift",
                "TotalUltrasoundHoursNeeded"
            ],
            "code": "# Add constraint to ensure total service hours meet or exceed the required ultrasound hours\nmodel.addConstr(\n    TechnicianShifts * TechnicianHoursPerShift + ResearcherShifts * ResearcherHoursPerShift >= TotalUltrasoundHoursNeeded,\n    name=\"total_service_hours_constraint\"\n)"
        },
        {
            "description": "Ensure the total worker payment does not exceed the budget",
            "status": "coded",
            "formulation": "\\textup{TechnicianShifts} \\times \\textup{TechnicianPaymentPerShift} + \\textup{ResearcherShifts} \\times \\textup{ResearcherPaymentPerShift} \\leq \\textup{TotalBudget}",
            "related_variables": [
                "TechnicianShifts",
                "ResearcherShifts"
            ],
            "related_parameters": [
                "TechnicianPaymentPerShift",
                "ResearcherPaymentPerShift",
                "TotalBudget"
            ],
            "code": "# Add a budget constraint to ensure worker payments do not exceed the budget\nmodel.addConstr(\n    TechnicianShifts * TechnicianPaymentPerShift + ResearcherShifts * ResearcherPaymentPerShift <= TotalBudget,\n    name=\"budget_constraint\"\n)"
        },
        {
            "description": "Maintain the required ratio of ultrasound technician shifts to graduate researcher shifts",
            "status": "coded",
            "formulation": "\\textup{TechnicianShifts} \\geq \\textup{RequiredTechnicianToResearcherRatio} \\times \\textup{ResearcherShifts}",
            "related_variables": [
                "TechnicianShifts",
                "ResearcherShifts"
            ],
            "related_parameters": [
                "RequiredTechnicianToResearcherRatio"
            ],
            "code": "# Add constraint to maintain the required ratio of ultrasound technician shifts to graduate researcher shifts\nmodel.addConstr(TechnicianShifts >= RequiredTechnicianToResearcherRatio * ResearcherShifts, \n                name=\"TechnicianToResearcherRatio\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of shifts scheduled for ultrasound technicians",
            "symbol": "TechnicianShifts",
            "shape": [],
            "status": "coded",
            "code": "TechnicianShifts = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TechnicianShifts\")"
        },
        {
            "definition": "Number of shifts scheduled for graduate researchers",
            "symbol": "ResearcherShifts",
            "shape": [],
            "status": "coded",
            "code": "ResearcherShifts = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ResearcherShifts\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of shifts scheduled for workers (ultrasound technicians and graduate researchers)",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{TechnicianShifts} + \\textup{ResearcherShifts}",
            "related_variables": [
                "TechnicianShifts",
                "ResearcherShifts"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(TechnicianShifts + ResearcherShifts, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 3,
    "error_message": null,
    "obj_val": "infeasible",
    "log_path": "logs/log_20250413175228_nl4opt_prob_234/",
    "problem_path": "data/nl4opt/prob_234/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_234/data.json\", \"r\") as f:\n    data = json.load(f)\n\nTechnicianHoursPerShift = data[\"TechnicianHoursPerShift\"] # scalar parameter\nResearcherHoursPerShift = data[\"ResearcherHoursPerShift\"] # scalar parameter\nTechnicianPaymentPerShift = data[\"TechnicianPaymentPerShift\"] # scalar parameter\nResearcherPaymentPerShift = data[\"ResearcherPaymentPerShift\"] # scalar parameter\nRequiredTechnicianToResearcherRatio = data[\"RequiredTechnicianToResearcherRatio\"] # scalar parameter\nTotalUltrasoundHoursNeeded = data[\"TotalUltrasoundHoursNeeded\"] # scalar parameter\nTotalBudget = data[\"TotalBudget\"] # scalar parameter\nTechnicianShifts = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TechnicianShifts\")\nResearcherShifts = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ResearcherShifts\")\n\n# The variable \"TechnicianShifts\" is non-negative by default since it is a continuous variable.\n\n# Non-negativity constraint for the number of graduate researcher shifts\nmodel.addConstr(ResearcherShifts >= 0, name=\"non_negative_researcher_shifts\")\n\n# Add equality constraint to ensure the ratio of technician shifts to researcher shifts matches the required ratio\nmodel.addConstr(TechnicianShifts == RequiredTechnicianToResearcherRatio * ResearcherShifts, name=\"technician_researcher_ratio\")\n\n# Add total expenditure constraint\nmodel.addConstr(\n    TechnicianPaymentPerShift * TechnicianShifts + ResearcherPaymentPerShift * ResearcherShifts <= TotalBudget,\n    name=\"total_expenditure_constraint\"\n)\n\n# Add constraint to ensure technician shifts are only scheduled if researcher shifts are scheduled\nmodel.addConstr((ResearcherShifts == 0) >> (TechnicianShifts == 0), name=\"no_technician_without_researcher\")\n\n# Add constraint to ensure total service hours meet or exceed the required ultrasound hours\nmodel.addConstr(\n    TechnicianShifts * TechnicianHoursPerShift + ResearcherShifts * ResearcherHoursPerShift >= TotalUltrasoundHoursNeeded,\n    name=\"total_service_hours_constraint\"\n)\n\n# Add a budget constraint to ensure worker payments do not exceed the budget\nmodel.addConstr(\n    TechnicianShifts * TechnicianPaymentPerShift + ResearcherShifts * ResearcherPaymentPerShift <= TotalBudget,\n    name=\"budget_constraint\"\n)\n\n# Add constraint to maintain the required ratio of ultrasound technician shifts to graduate researcher shifts\nmodel.addConstr(TechnicianShifts >= RequiredTechnicianToResearcherRatio * ResearcherShifts, \n                name=\"TechnicianToResearcherRatio\")\n\n# Set objective\nmodel.setObjective(TechnicianShifts + ResearcherShifts, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}