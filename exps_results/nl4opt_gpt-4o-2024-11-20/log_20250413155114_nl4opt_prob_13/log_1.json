{
    "background": "A cleaning company in Edmonton is planning to advertise their new dishwashing detergent using a limited budget on radio and social media ads to get the best possible exposure.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total advertising budget",
            "symbol": "B",
            "value": 250000,
            "shape": [],
            "code": "B = data[\"B\"] # scalar parameter"
        },
        {
            "definition": "Cost of one radio ad",
            "symbol": "Cr",
            "value": 5000,
            "shape": [],
            "code": "Cr = data[\"Cr\"] # scalar parameter"
        },
        {
            "definition": "Cost of one social media ad",
            "symbol": "Cs",
            "value": 9150,
            "shape": [],
            "code": "Cs = data[\"Cs\"] # scalar parameter"
        },
        {
            "definition": "Expected exposure per radio ad",
            "symbol": "Er",
            "value": 60500,
            "shape": [],
            "code": "Er = data[\"Er\"] # scalar parameter"
        },
        {
            "definition": "Expected exposure per social media ad",
            "symbol": "Es",
            "value": 50000,
            "shape": [],
            "code": "Es = data[\"Es\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of radio ads",
            "symbol": "MinR",
            "value": 15,
            "shape": [],
            "code": "MinR = data[\"MinR\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of radio ads",
            "symbol": "MaxR",
            "value": 40,
            "shape": [],
            "code": "MaxR = data[\"MaxR\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of social media ads",
            "symbol": "MinS",
            "value": 35,
            "shape": [],
            "code": "MinS = data[\"MinS\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The total cost of running radio and social media ads must not exceed the advertising budget \\textup{B}.",
            "status": "coded",
            "formulation": "\\textup{Cr} \\cdot \\textup{NumRadioAds} + \\textup{Cs} \\cdot \\textup{NumSocialAds} \\leq \\textup{B}",
            "related_variables": [
                "NumRadioAds",
                "NumSocialAds"
            ],
            "related_parameters": [
                "Cr",
                "Cs",
                "B"
            ],
            "code": "# Add advertising budget constraint\nmodel.addConstr(Cr * NumRadioAds + Cs * NumSocialAds <= B, name=\"advertising_budget\")"
        },
        {
            "description": "The number of radio ads purchased must be at least MinR.",
            "status": "coded",
            "formulation": "\\textup{NumRadioAds} \\geq \\textup{MinR}",
            "related_variables": [
                "NumRadioAds"
            ],
            "related_parameters": [
                "MinR"
            ],
            "code": "# Add constraint to ensure the number of radio ads purchased is at least the minimum required\nmodel.addConstr(NumRadioAds >= MinR, name=\"num_radio_ads_minimum\")"
        },
        {
            "description": "The number of radio ads purchased must not exceed the maximum allowable number of radio ads (MaxR).",
            "status": "coded",
            "formulation": "\\textup{NumRadioAds} \\leq \\textup{MaxR}",
            "related_variables": [
                "NumRadioAds"
            ],
            "related_parameters": [
                "MaxR"
            ],
            "code": "# Add constraint on the number of radio ads\nmodel.addConstr(NumRadioAds <= MaxR, name=\"max_radio_ads\")"
        },
        {
            "description": "At least MinS social media ads should be contracted.",
            "status": "coded",
            "formulation": "\\textup{NumSocialAds} \\geq \\textup{MinS}",
            "related_variables": [
                "NumSocialAds"
            ],
            "related_parameters": [
                "MinS"
            ],
            "code": "# Ensure at least MinS social media ads are contracted\nmodel.addConstr(NumSocialAds >= MinS, name=\"min_social_ads\")"
        },
        {
            "description": "Minimum and maximum number of radio ads constraint.",
            "status": "coded",
            "formulation": "\\textup{MinR} \\leq \\textup{NumRadioAds} \\leq \\textup{MaxR}",
            "related_variables": [
                "NumRadioAds"
            ],
            "related_parameters": [
                "MinR",
                "MaxR"
            ],
            "code": "# Add constraint for minimum and maximum number of radio ads\nmodel.addConstr(NumRadioAds >= MinR, name=\"min_radio_ads\")\nmodel.addConstr(NumRadioAds <= MaxR, name=\"max_radio_ads\")"
        },
        {
            "description": "Minimum number of social media ads constraint.",
            "status": "coded",
            "formulation": "\\textup{NumSocialAds} \\geq \\textup{MinS}",
            "related_variables": [
                "NumSocialAds"
            ],
            "related_parameters": [
                "MinS"
            ],
            "code": "# Add minimum number of social media ads constraint\nmodel.addConstr(NumSocialAds >= MinS, name=\"min_social_ads\")"
        },
        {
            "description": "Ensure the total cost of ads does not exceed the budget.",
            "status": "coded",
            "formulation": "\\textup{Cr} \\cdot \\textup{NumRadioAds} + \\textup{Cs} \\cdot \\textup{NumSocialAds} \\leq \\textup{B}",
            "related_variables": [
                "NumRadioAds",
                "NumSocialAds"
            ],
            "related_parameters": [
                "Cr",
                "Cs",
                "B"
            ],
            "code": "# Add total cost constraint for ads within the budget\nmodel.addConstr(Cr * NumRadioAds + Cs * NumSocialAds <= B, name=\"ads_budget_constraint\")"
        },
        {
            "description": "Minimum and maximum limit on the number of radio ads.",
            "status": "coded",
            "formulation": "\\textup{MinR} \\leq \\textup{NumRadioAds} \\leq \\textup{MaxR}",
            "related_variables": [
                "NumRadioAds"
            ],
            "related_parameters": [
                "MinR",
                "MaxR"
            ],
            "code": "# Add constraints to enforce the minimum and maximum limits on the number of radio ads\nmodel.addConstr(NumRadioAds >= MinR, name=\"min_radio_ads\")\nmodel.addConstr(NumRadioAds <= MaxR, name=\"max_radio_ads\")"
        },
        {
            "description": "Minimum number of social media ads required.",
            "status": "coded",
            "formulation": "\\textup{NumSocialAds} \\geq \\textup{MinS}",
            "related_variables": [
                "NumSocialAds"
            ],
            "related_parameters": [
                "MinS"
            ],
            "code": "# Add minimum number of social media ads constraint\nmodel.addConstr(NumSocialAds >= MinS, name=\"min_social_ads\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of radio ads purchased",
            "symbol": "NumRadioAds",
            "shape": [],
            "status": "coded",
            "code": "NumRadioAds = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumRadioAds\")"
        },
        {
            "definition": "Number of social media ads purchased",
            "symbol": "NumSocialAds",
            "shape": [],
            "status": "coded",
            "code": "NumSocialAds = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumSocialAds\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total exposure, in terms of viewers, from both radio and social media ads.",
            "status": "coded",
            "formulation": "\\max \\quad (\\textup{Er} \\cdot \\textup{NumRadioAds} + \\textup{Es} \\cdot \\textup{NumSocialAds})",
            "related_variables": [
                "NumRadioAds",
                "NumSocialAds"
            ],
            "related_parameters": [
                "Er",
                "Es"
            ],
            "code": "# Set objective\nmodel.setObjective(Er * NumRadioAds + Es * NumSocialAds, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413155114_nl4opt_prob_13/",
    "problem_path": "data/nl4opt/prob_13/"
}