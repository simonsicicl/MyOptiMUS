{
    "background": "A theme park requires transportation for its visitors using scooters and rickshaws, with each mode having a specific capacity and a limit on the proportion of rickshaws to reduce pollution.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Carrying capacity of a scooter",
            "symbol": "ScooterCapacity",
            "value": 2,
            "shape": [],
            "code": "ScooterCapacity = data[\"ScooterCapacity\"] # scalar parameter"
        },
        {
            "definition": "Carrying capacity of a rickshaw",
            "symbol": "RickshawCapacity",
            "value": 3,
            "shape": [],
            "code": "RickshawCapacity = data[\"RickshawCapacity\"] # scalar parameter"
        },
        {
            "definition": "Maximum proportion of vehicles that can be rickshaws",
            "symbol": "MaxRickshawProportion",
            "value": 0.4,
            "shape": [],
            "code": "MaxRickshawProportion = data[\"MaxRickshawProportion\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of visitors to be transported",
            "symbol": "MinVisitors",
            "value": 300,
            "shape": [],
            "code": "MinVisitors = data[\"MinVisitors\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of scooters must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{ScootersCount} \\geq 0",
            "related_variables": [
                "ScootersCount"
            ],
            "related_parameters": [],
            "code": "# ScootersCount is already coded as a model variable. No additional code is required for non-negativity since Gurobi variables are non-negative by default unless explicitly set to allow negative values (lb < 0)."
        },
        {
            "description": "The number of rickshaws must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{RickshawsCount} \\\\geq 0",
            "related_variables": [
                "RickshawsCount"
            ],
            "related_parameters": [],
            "code": "# Since the variable RickshawsCount is defined with non-negativity by default in Gurobi (continuous variables have their lower bound set to 0), no additional constraint needs to be added."
        },
        {
            "description": "At most MaxRickshawProportion of the vehicles used can be rickshaws.",
            "status": "coded",
            "formulation": "(1 - \\textup{MaxRickshawProportion}) \\cdot \\textup{RickshawsCount} \\leq \\textup{MaxRickshawProportion} \\cdot \\textup{ScootersCount}",
            "related_variables": [
                "ScootersCount",
                "RickshawsCount"
            ],
            "related_parameters": [
                "MaxRickshawProportion"
            ],
            "code": "# Add constraint to ensure at most MaxRickshawProportion of vehicles are rickshaws\nmodel.addConstr((1 - MaxRickshawProportion) * RickshawsCount <= MaxRickshawProportion * ScootersCount, name=\"max_rickshaw_proportion\")"
        },
        {
            "description": "The total number of visitors transported by scooters and rickshaws must be at least the minimum number of visitors (MinVisitors).",
            "status": "coded",
            "formulation": "\\\\textup{ScooterCapacity} \\\\cdot \\\\textup{ScootersCount} + \\\\textup{RickshawCapacity} \\\\cdot \\\\textup{RickshawsCount} \\\\geq \\\\textup{MinVisitors}",
            "related_variables": [
                "ScootersCount",
                "RickshawsCount"
            ],
            "related_parameters": [
                "ScooterCapacity",
                "RickshawCapacity",
                "MinVisitors"
            ],
            "code": "# Add constraint to ensure the total number of visitors transported by scooters and rickshaws meets or exceeds the minimum required\nmodel.addConstr(ScooterCapacity * ScootersCount + RickshawCapacity * RickshawsCount >= MinVisitors, name=\"MinVisitorsConstraint\")"
        },
        {
            "description": "The combined carrying capacity of scooters and rickshaws must be at least the minimum visitors to transport",
            "status": "coded",
            "formulation": "\\textup{ScooterCapacity} \\cdot \\textup{ScootersCount} + \\textup{RickshawCapacity} \\cdot \\textup{RickshawsCount} \\geq \\textup{MinVisitors}",
            "related_variables": [
                "ScootersCount",
                "RickshawsCount"
            ],
            "related_parameters": [
                "ScooterCapacity",
                "RickshawCapacity",
                "MinVisitors"
            ],
            "code": "# Add constraint ensuring combined carrying capacity meets minimum visitors\nmodel.addConstr(ScooterCapacity * ScootersCount + RickshawCapacity * RickshawsCount >= MinVisitors, name=\"combined_capacity\")"
        },
        {
            "description": "The number of rickshaws cannot exceed the maximum proportion of total vehicles allowed",
            "status": "coded",
            "formulation": "\\textup{RickshawsCount} \\leq \\frac{\\textup{MaxRickshawProportion}}{1 - \\textup{MaxRickshawProportion}} \\cdot \\textup{ScootersCount}",
            "related_variables": [
                "ScootersCount",
                "RickshawsCount"
            ],
            "related_parameters": [
                "MaxRickshawProportion"
            ],
            "code": "# Add constraint to limit the number of rickshaws based on the maximum proportion of total vehicles\nmodel.addConstr(\n    RickshawsCount <= (MaxRickshawProportion / (1 - MaxRickshawProportion)) * ScootersCount, \n    name=\"max_rickshaw_proportion\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "The number of scooters used in transportation.",
            "symbol": "ScootersCount",
            "shape": [],
            "status": "coded",
            "code": "ScootersCount = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ScootersCount\")"
        },
        {
            "definition": "The number of rickshaws used in transportation.",
            "symbol": "RickshawsCount",
            "shape": [],
            "status": "coded",
            "code": "RickshawsCount = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"RickshawsCount\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of scooters used",
            "status": "coded",
            "formulation": "\\min \\textup{ScootersCount}",
            "related_variables": [
                "ScootersCount"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(ScootersCount, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413162707_nl4opt_prob_168/",
    "problem_path": "data/nl4opt/prob_168/"
}