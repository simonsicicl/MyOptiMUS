{
    "background": "A florist needs to determine the optimal number of small and large bouquets to maximize the number of flowers delivered to stores given the constraints on transportation and bouquet sizes.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of flowers in a small bouquet",
            "symbol": "SmallBouquetSize",
            "value": 5,
            "shape": [],
            "code": "SmallBouquetSize = data[\"SmallBouquetSize\"] # scalar parameter"
        },
        {
            "definition": "Number of flowers in a large bouquet",
            "symbol": "LargeBouquetSize",
            "value": 10,
            "shape": [],
            "code": "LargeBouquetSize = data[\"LargeBouquetSize\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of small bouquets that can be transported",
            "symbol": "MaxSmallBouquets",
            "value": 80,
            "shape": [],
            "code": "MaxSmallBouquets = data[\"MaxSmallBouquets\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of large bouquets that can be transported",
            "symbol": "MaxLargeBouquets",
            "value": 50,
            "shape": [],
            "code": "MaxLargeBouquets = data[\"MaxLargeBouquets\"] # scalar parameter"
        },
        {
            "definition": "Total maximum number of bouquets that can be transported",
            "symbol": "MaxTotalBouquets",
            "value": 70,
            "shape": [],
            "code": "MaxTotalBouquets = data[\"MaxTotalBouquets\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of large bouquets that must be transported",
            "symbol": "MinLargeBouquets",
            "value": 20,
            "shape": [],
            "code": "MinLargeBouquets = data[\"MinLargeBouquets\"] # scalar parameter"
        },
        {
            "definition": "Minimum ratio of small bouquets to large bouquets",
            "symbol": "MinSmallLargeRatio",
            "value": 2,
            "shape": [],
            "code": "MinSmallLargeRatio = data[\"MinSmallLargeRatio\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of small bouquets must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{SmallBouquets} \\\\geq 0",
            "related_variables": [
                "SmallBouquets"
            ],
            "related_parameters": [],
            "code": "# The variable \"SmallBouquets\" already has a non-negativity constraint automatically applied because it is defined as a continuous Gurobi variable (which defaults to having a lower bound of 0). No additional constraint needs to be explicitly added."
        },
        {
            "description": "The number of large bouquets to be transported must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{LargeBouquets} \\\\geq 0",
            "related_variables": [
                "LargeBouquets"
            ],
            "related_parameters": [],
            "code": "# The variable \"LargeBouquets\" already has non-negativity enforced internally due to its default non-negative domain in Gurobi,\n# so no additional constraint code is required."
        },
        {
            "description": "At most MaxSmallBouquets small bouquets can be transported.",
            "status": "coded",
            "formulation": "\\textup{SmallBouquets} \\leq \\textup{MaxSmallBouquets}",
            "related_variables": [
                "SmallBouquets"
            ],
            "related_parameters": [
                "MaxSmallBouquets"
            ],
            "code": "# Add constraint for maximum number of small bouquets that can be transported\nmodel.addConstr(SmallBouquets <= MaxSmallBouquets, name=\"max_small_bouquets\")"
        },
        {
            "description": "At most MaxLargeBouquets large bouquets can be transported.",
            "status": "coded",
            "formulation": "\\textup{LargeBouquets} \\leq \\textup{MaxLargeBouquets}",
            "related_variables": [
                "LargeBouquets"
            ],
            "related_parameters": [
                "MaxLargeBouquets"
            ],
            "code": "# Add constraint for maximum number of large bouquets that can be transported\nmodel.addConstr(LargeBouquets <= MaxLargeBouquets, name=\"max_large_bouquets\")"
        },
        {
            "description": "The total number of bouquets transported (small and large) cannot exceed the maximum allowed, MaxTotalBouquets.",
            "status": "coded",
            "formulation": "\\textup{SmallBouquets} + \\textup{LargeBouquets} \\leq \\textup{MaxTotalBouquets}",
            "related_variables": [
                "SmallBouquets",
                "LargeBouquets"
            ],
            "related_parameters": [
                "MaxTotalBouquets"
            ],
            "code": "# Add constraint for the total number of bouquets\nmodel.addConstr(SmallBouquets + LargeBouquets <= MaxTotalBouquets, name=\"total_bouquets_limit\")"
        },
        {
            "description": "At least MinLargeBouquets large bouquets must be transported",
            "status": "coded",
            "formulation": "\\\\textup{LargeBouquets} \\\\geq \\\\textup{MinLargeBouquets}",
            "related_variables": [
                "LargeBouquets"
            ],
            "related_parameters": [
                "MinLargeBouquets"
            ],
            "code": "# Add constraint to ensure at least MinLargeBouquets large bouquets are transported\nmodel.addConstr(LargeBouquets >= MinLargeBouquets, name=\"min_large_bouquets\")"
        },
        {
            "description": "The number of small bouquets must be at least MinSmallLargeRatio times the number of large bouquets.",
            "status": "coded",
            "formulation": "\\textup{SmallBouquets} \\geq \\textup{MinSmallLargeRatio} \\cdot \\textup{LargeBouquets}",
            "related_variables": [
                "SmallBouquets",
                "LargeBouquets"
            ],
            "related_parameters": [
                "MinSmallLargeRatio"
            ],
            "code": "# Add constraint to ensure SmallBouquets is at least MinSmallLargeRatio times LargeBouquets\nmodel.addConstr(SmallBouquets >= MinSmallLargeRatio * LargeBouquets, name=\"min_small_large_ratio\")"
        },
        {
            "description": "The number of small bouquets transported cannot exceed the maximum allowed.",
            "status": "coded",
            "formulation": "\\textup{SmallBouquets} \\leq \\textup{MaxSmallBouquets}",
            "related_variables": [
                "SmallBouquets"
            ],
            "related_parameters": [
                "MaxSmallBouquets"
            ],
            "code": "# Add constraint for maximum number of small bouquets\nmodel.addConstr(SmallBouquets <= MaxSmallBouquets, name=\"max_small_bouquets_constraint\")"
        },
        {
            "description": "The number of large bouquets transported cannot exceed the maximum allowed.",
            "status": "coded",
            "formulation": "\\textup{LargeBouquets} \\leq \\textup{MaxLargeBouquets}",
            "related_variables": [
                "LargeBouquets"
            ],
            "related_parameters": [
                "MaxLargeBouquets"
            ],
            "code": "# Add constraint for maximum number of large bouquets\nmodel.addConstr(LargeBouquets <= MaxLargeBouquets, name=\"max_large_bouquets\")"
        },
        {
            "description": "The total number of bouquets transported cannot exceed the maximum limit.",
            "status": "coded",
            "formulation": "\\textup{SmallBouquets} + \\textup{LargeBouquets} \\leq \\textup{MaxTotalBouquets}",
            "related_variables": [
                "SmallBouquets",
                "LargeBouquets"
            ],
            "related_parameters": [
                "MaxTotalBouquets"
            ],
            "code": "# Add constraint for the maximum number of bouquets transported\nmodel.addConstr(SmallBouquets + LargeBouquets <= MaxTotalBouquets, name=\"max_bouquets_limit\")"
        },
        {
            "description": "The number of large bouquets transported must meet the minimum requirement.",
            "status": "coded",
            "formulation": "\\textup{LargeBouquets} \\geq \\textup{MinLargeBouquets}",
            "related_variables": [
                "LargeBouquets"
            ],
            "related_parameters": [
                "MinLargeBouquets"
            ],
            "code": "# Add constraint to ensure the number of large bouquets meets the minimum requirement\nmodel.addConstr(LargeBouquets >= MinLargeBouquets, name=\"min_large_bouquets\")"
        },
        {
            "description": "The ratio of small bouquets to large bouquets must meet the specified minimum ratio.",
            "status": "coded",
            "formulation": "\\textup{SmallBouquets} \\geq \\textup{MinSmallLargeRatio} \\times \\textup{LargeBouquets}",
            "related_variables": [
                "SmallBouquets",
                "LargeBouquets"
            ],
            "related_parameters": [
                "MinSmallLargeRatio"
            ],
            "code": "# Add constraint to ensure the ratio of small bouquets to large bouquets meets the specified minimum\nmodel.addConstr(SmallBouquets >= MinSmallLargeRatio * LargeBouquets, name=\"min_small_large_ratio\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of small bouquets to be transported.",
            "symbol": "SmallBouquets",
            "shape": [],
            "status": "coded",
            "code": "SmallBouquets = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SmallBouquets\")"
        },
        {
            "definition": "The number of large bouquets to be transported.",
            "symbol": "LargeBouquets",
            "shape": [],
            "status": "coded",
            "code": "LargeBouquets = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"LargeBouquets\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total number of flowers transported to the stores, considering small and large bouquets.",
            "status": "coded",
            "formulation": "\\textup{Maximize:}\\\\quad Z = \\textup{SmallBouquets} \\times \\textup{SmallBouquetSize} + \\textup{LargeBouquets} \\times \\textup{LargeBouquetSize}",
            "related_variables": [
                "SmallBouquets",
                "LargeBouquets"
            ],
            "related_parameters": [
                "SmallBouquetSize",
                "LargeBouquetSize"
            ],
            "code": "# Set objective\nmodel.setObjective(SmallBouquets * SmallBouquetSize + LargeBouquets * LargeBouquetSize, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 466.66666666666663,
    "log_path": "logs/log_20250413162040_nl4opt_prob_160/",
    "problem_path": "data/nl4opt/prob_160/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_160/data.json\", \"r\") as f:\n    data = json.load(f)\n\nSmallBouquetSize = data[\"SmallBouquetSize\"] # scalar parameter\nLargeBouquetSize = data[\"LargeBouquetSize\"] # scalar parameter\nMaxSmallBouquets = data[\"MaxSmallBouquets\"] # scalar parameter\nMaxLargeBouquets = data[\"MaxLargeBouquets\"] # scalar parameter\nMaxTotalBouquets = data[\"MaxTotalBouquets\"] # scalar parameter\nMinLargeBouquets = data[\"MinLargeBouquets\"] # scalar parameter\nMinSmallLargeRatio = data[\"MinSmallLargeRatio\"] # scalar parameter\nSmallBouquets = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SmallBouquets\")\nLargeBouquets = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"LargeBouquets\")\n\n# The variable \"SmallBouquets\" already has a non-negativity constraint automatically applied because it is defined as a continuous Gurobi variable (which defaults to having a lower bound of 0). No additional constraint needs to be explicitly added.\n\n# The variable \"LargeBouquets\" already has non-negativity enforced internally due to its default non-negative domain in Gurobi,\n# so no additional constraint code is required.\n\n# Add constraint for maximum number of small bouquets that can be transported\nmodel.addConstr(SmallBouquets <= MaxSmallBouquets, name=\"max_small_bouquets\")\n\n# Add constraint for maximum number of large bouquets that can be transported\nmodel.addConstr(LargeBouquets <= MaxLargeBouquets, name=\"max_large_bouquets\")\n\n# Add constraint for the total number of bouquets\nmodel.addConstr(SmallBouquets + LargeBouquets <= MaxTotalBouquets, name=\"total_bouquets_limit\")\n\n# Add constraint to ensure at least MinLargeBouquets large bouquets are transported\nmodel.addConstr(LargeBouquets >= MinLargeBouquets, name=\"min_large_bouquets\")\n\n# Add constraint to ensure SmallBouquets is at least MinSmallLargeRatio times LargeBouquets\nmodel.addConstr(SmallBouquets >= MinSmallLargeRatio * LargeBouquets, name=\"min_small_large_ratio\")\n\n# Add constraint for maximum number of small bouquets\nmodel.addConstr(SmallBouquets <= MaxSmallBouquets, name=\"max_small_bouquets_constraint\")\n\n# Add constraint for maximum number of large bouquets\nmodel.addConstr(LargeBouquets <= MaxLargeBouquets, name=\"max_large_bouquets\")\n\n# Add constraint for the maximum number of bouquets transported\nmodel.addConstr(SmallBouquets + LargeBouquets <= MaxTotalBouquets, name=\"max_bouquets_limit\")\n\n# Add constraint to ensure the number of large bouquets meets the minimum requirement\nmodel.addConstr(LargeBouquets >= MinLargeBouquets, name=\"min_large_bouquets\")\n\n# Add constraint to ensure the ratio of small bouquets to large bouquets meets the specified minimum\nmodel.addConstr(SmallBouquets >= MinSmallLargeRatio * LargeBouquets, name=\"min_small_large_ratio\")\n\n# Set objective\nmodel.setObjective(SmallBouquets * SmallBouquetSize + LargeBouquets * LargeBouquetSize, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}