{
    "background": "A researcher schedules in-vivo and ex-vivo experiments, each requiring its own preparation and execution times. Both types of experiments expose the researcher to some level of radiation.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Time to prepare one in-vivo experiment",
            "symbol": "TimeInVivoPrep",
            "value": 30,
            "shape": [],
            "code": "TimeInVivoPrep = data[\"TimeInVivoPrep\"] # scalar parameter"
        },
        {
            "definition": "Time to execute one in-vivo experiment",
            "symbol": "TimeInVivoExec",
            "value": 60,
            "shape": [],
            "code": "TimeInVivoExec = data[\"TimeInVivoExec\"] # scalar parameter"
        },
        {
            "definition": "Time to prepare one ex-vivo experiment",
            "symbol": "TimeExVivoPrep",
            "value": 45,
            "shape": [],
            "code": "TimeExVivoPrep = data[\"TimeExVivoPrep\"] # scalar parameter"
        },
        {
            "definition": "Time to execute one ex-vivo experiment",
            "symbol": "TimeExVivoExec",
            "value": 30,
            "shape": [],
            "code": "TimeExVivoExec = data[\"TimeExVivoExec\"] # scalar parameter"
        },
        {
            "definition": "Radiation units received from one in-vivo experiment",
            "symbol": "RadiationInVivo",
            "value": 2,
            "shape": [],
            "code": "RadiationInVivo = data[\"RadiationInVivo\"] # scalar parameter"
        },
        {
            "definition": "Radiation units received from one ex-vivo experiment",
            "symbol": "RadiationExVivo",
            "value": 3,
            "shape": [],
            "code": "RadiationExVivo = data[\"RadiationExVivo\"] # scalar parameter"
        },
        {
            "definition": "Maximum time allowed for preparing the experiments",
            "symbol": "MaxTimePrep",
            "value": 400,
            "shape": [],
            "code": "MaxTimePrep = data[\"MaxTimePrep\"] # scalar parameter"
        },
        {
            "definition": "Maximum time allowed for executing the experiments",
            "symbol": "MaxTimeExec",
            "value": 500,
            "shape": [],
            "code": "MaxTimeExec = data[\"MaxTimeExec\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of in-vivo experiments must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumInVivo} \\geq 0",
            "related_variables": [
                "NumInVivo"
            ],
            "related_parameters": [],
            "code": "# Add constraint for non-negativity of NumInVivo\nmodel.addConstr(NumInVivo >= 0, name=\"non_negativity_NumInVivo\")"
        },
        {
            "description": "The number of ex-vivo experiments must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumExVivo} \\geq 0",
            "related_variables": [
                "NumExVivo"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since the variable \"NumExVivo\" is defined with non-negativity by default through Gurobi's constraints for continuous variables (lower bound is 0)."
        },
        {
            "description": "The total preparation time for all in-vivo and ex-vivo experiments must not exceed the maximum preparation time allowed (\\textup{MaxTimePrep}).",
            "status": "coded",
            "formulation": "\\textup{NumInVivo} \\cdot \\textup{TimeInVivoPrep} + \\textup{NumExVivo} \\cdot \\textup{TimeExVivoPrep} \\leq \\textup{MaxTimePrep}",
            "related_variables": [
                "NumInVivo",
                "NumExVivo"
            ],
            "related_parameters": [
                "TimeInVivoPrep",
                "TimeExVivoPrep",
                "MaxTimePrep"
            ],
            "code": "# Add total preparation time constraint\nmodel.addConstr(NumInVivo * TimeInVivoPrep + NumExVivo * TimeExVivoPrep <= MaxTimePrep, name=\"total_prep_time_constraint\")"
        },
        {
            "description": "The total execution time for all experiments must not exceed the maximum execution time allowed (MaxTimeExec).",
            "status": "coded",
            "formulation": "\\textup{NumInVivo} \\cdot \\textup{TimeInVivoExec} + \\textup{NumExVivo} \\cdot \\textup{TimeExVivoExec} \\leq \\textup{MaxTimeExec}",
            "related_variables": [
                "NumInVivo",
                "NumExVivo"
            ],
            "related_parameters": [
                "TimeInVivoExec",
                "TimeExVivoExec",
                "MaxTimeExec"
            ],
            "code": "# Add execution time constraint\nmodel.addConstr(\n    NumInVivo * TimeInVivoExec + NumExVivo * TimeExVivoExec <= MaxTimeExec,\n    name=\"execution_time_constraint\"\n)"
        },
        {
            "description": "The total preparation time for all experiments must not exceed the maximum allowable preparation time.",
            "status": "coded",
            "formulation": "\\textup{TimeInVivoPrep} \\cdot \\textup{NumInVivo} + \\textup{TimeExVivoPrep} \\cdot \\textup{NumExVivo} \\leq \\textup{MaxTimePrep}",
            "related_variables": [
                "NumInVivo",
                "NumExVivo"
            ],
            "related_parameters": [
                "TimeInVivoPrep",
                "TimeExVivoPrep",
                "MaxTimePrep"
            ],
            "code": "# Add preparation time constraint\nmodel.addConstr(NumInVivo * TimeInVivoPrep + NumExVivo * TimeExVivoPrep <= MaxTimePrep, name=\"preparation_time_constraint\")"
        },
        {
            "description": "The total execution time for all experiments must not exceed the maximum allowable execution time.",
            "status": "coded",
            "formulation": "\\textup{TimeInVivoExec} \\cdot \\textup{NumInVivo} + \\textup{TimeExVivoExec} \\cdot \\textup{NumExVivo} \\leq \\textup{MaxTimeExec}",
            "related_variables": [
                "NumInVivo",
                "NumExVivo"
            ],
            "related_parameters": [
                "TimeInVivoExec",
                "TimeExVivoExec",
                "MaxTimeExec"
            ],
            "code": "# Add constraint for total execution time\nmodel.addConstr(\n    TimeInVivoExec * NumInVivo + TimeExVivoExec * NumExVivo <= MaxTimeExec,\n    name=\"total_execution_time_constraint\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "The number of in-vivo experiments.",
            "symbol": "NumInVivo",
            "shape": [],
            "status": "coded",
            "code": "NumInVivo = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumInVivo\")"
        },
        {
            "definition": "The number of ex-vivo experiments.",
            "symbol": "NumExVivo",
            "shape": [],
            "status": "coded",
            "code": "NumExVivo = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumExVivo\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total radiation received by the researcher from both in-vivo and ex-vivo experiments.",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{RadiationInVivo} \\cdot \\textup{NumInVivo} + \\textup{RadiationExVivo} \\cdot \\textup{NumExVivo}",
            "related_variables": [
                "NumInVivo",
                "NumExVivo"
            ],
            "related_parameters": [
                "RadiationInVivo",
                "RadiationExVivo"
            ],
            "code": "# Set objective\nmodel.setObjective(RadiationInVivo * NumInVivo + RadiationExVivo * NumExVivo, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 0.0,
    "log_path": "logs/log_20250414054509_nl4opt_prob_268/",
    "problem_path": "data/nl4opt/prob_268/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_268/data.json\", \"r\") as f:\n    data = json.load(f)\n\nTimeInVivoPrep = data[\"TimeInVivoPrep\"] # scalar parameter\nTimeInVivoExec = data[\"TimeInVivoExec\"] # scalar parameter\nTimeExVivoPrep = data[\"TimeExVivoPrep\"] # scalar parameter\nTimeExVivoExec = data[\"TimeExVivoExec\"] # scalar parameter\nRadiationInVivo = data[\"RadiationInVivo\"] # scalar parameter\nRadiationExVivo = data[\"RadiationExVivo\"] # scalar parameter\nMaxTimePrep = data[\"MaxTimePrep\"] # scalar parameter\nMaxTimeExec = data[\"MaxTimeExec\"] # scalar parameter\nNumInVivo = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumInVivo\")\nNumExVivo = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumExVivo\")\n\n# Add constraint for non-negativity of NumInVivo\nmodel.addConstr(NumInVivo >= 0, name=\"non_negativity_NumInVivo\")\n\n# No additional code needed since the variable \"NumExVivo\" is defined with non-negativity by default through Gurobi's constraints for continuous variables (lower bound is 0).\n\n# Add total preparation time constraint\nmodel.addConstr(NumInVivo * TimeInVivoPrep + NumExVivo * TimeExVivoPrep <= MaxTimePrep, name=\"total_prep_time_constraint\")\n\n# Add execution time constraint\nmodel.addConstr(\n    NumInVivo * TimeInVivoExec + NumExVivo * TimeExVivoExec <= MaxTimeExec,\n    name=\"execution_time_constraint\"\n)\n\n# Add preparation time constraint\nmodel.addConstr(NumInVivo * TimeInVivoPrep + NumExVivo * TimeExVivoPrep <= MaxTimePrep, name=\"preparation_time_constraint\")\n\n# Add constraint for total execution time\nmodel.addConstr(\n    TimeInVivoExec * NumInVivo + TimeExVivoExec * NumExVivo <= MaxTimeExec,\n    name=\"total_execution_time_constraint\"\n)\n\n# Set objective\nmodel.setObjective(RadiationInVivo * NumInVivo + RadiationExVivo * NumExVivo, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}