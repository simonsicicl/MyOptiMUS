{
    "background": "A dog school is training labradors and golden retrievers to deliver newspapers, with differing capacities and treat requirements for each breed, and certain limitations on treats availability and dog breed proportions.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of newspapers a labrador can deliver at a time",
            "symbol": "LabradorNewspaperCount",
            "value": 7,
            "shape": [],
            "code": "LabradorNewspaperCount = data[\"LabradorNewspaperCount\"] # scalar parameter"
        },
        {
            "definition": "Number of bone treats required for a labrador service",
            "symbol": "LabradorBoneTreatCount",
            "value": 5,
            "shape": [],
            "code": "LabradorBoneTreatCount = data[\"LabradorBoneTreatCount\"] # scalar parameter"
        },
        {
            "definition": "Number of newspapers a golden retriever can deliver at a time",
            "symbol": "GoldenRetrieverNewspaperCount",
            "value": 10,
            "shape": [],
            "code": "GoldenRetrieverNewspaperCount = data[\"GoldenRetrieverNewspaperCount\"] # scalar parameter"
        },
        {
            "definition": "Number of bone treats required for a golden retriever service",
            "symbol": "GoldenRetrieverBoneTreatCount",
            "value": 6,
            "shape": [],
            "code": "GoldenRetrieverBoneTreatCount = data[\"GoldenRetrieverBoneTreatCount\"] # scalar parameter"
        },
        {
            "definition": "Total number of small bone treats available",
            "symbol": "TotalBoneTreatsAvailable",
            "value": 1500,
            "shape": [],
            "code": "TotalBoneTreatsAvailable = data[\"TotalBoneTreatsAvailable\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of golden retrievers that must be used",
            "symbol": "MinGoldenRetrievers",
            "value": 50,
            "shape": [],
            "code": "MinGoldenRetrievers = data[\"MinGoldenRetrievers\"] # scalar parameter"
        },
        {
            "definition": "Maximum proportion of dogs that can be labradors",
            "symbol": "MaxLabradorProportion",
            "value": 0.6,
            "shape": [],
            "code": "MaxLabradorProportion = data[\"MaxLabradorProportion\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of labradors must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberLabradors} \\geq 0",
            "related_variables": [
                "NumberLabradors"
            ],
            "related_parameters": [],
            "code": "# Add constraint for non-negativity of the number of labradors\nmodel.addConstr(NumberLabradors >= 0, name=\"non_negative_labradors\")"
        },
        {
            "description": "The number of golden retrievers cannot be negative.",
            "status": "coded",
            "formulation": "\\\\textup{NumberGoldenRetrievers} \\\\geq 0",
            "related_variables": [
                "NumberGoldenRetrievers"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of golden retrievers is non-negative\nmodel.addConstr(NumberGoldenRetrievers >= 0, name=\"non_negative_golden_retrievers\")"
        },
        {
            "description": "The total number of bone treats used by labradors and golden retrievers cannot exceed the number of treats available.",
            "status": "coded",
            "formulation": "\\\\textup{LabradorBoneTreatCount} \\\\cdot \\\\textup{NumberLabradors} + \\\\textup{GoldenRetrieverBoneTreatCount} \\\\cdot \\\\textup{NumberGoldenRetrievers} \\\\leq \\\\textup{TotalBoneTreatsAvailable}",
            "related_variables": [
                "NumberLabradors",
                "NumberGoldenRetrievers"
            ],
            "related_parameters": [
                "LabradorBoneTreatCount",
                "GoldenRetrieverBoneTreatCount",
                "TotalBoneTreatsAvailable"
            ],
            "code": "# Add constraint for the total number of bone treats used\nmodel.addConstr(\n    LabradorBoneTreatCount * NumberLabradors + GoldenRetrieverBoneTreatCount * NumberGoldenRetrievers <= TotalBoneTreatsAvailable,\n    name=\"bone_treats_constraint\"\n)"
        },
        {
            "description": "At least MinGoldenRetrievers golden retrievers must be used.",
            "status": "coded",
            "formulation": "\\textup{NumberGoldenRetrievers} \\geq \\textup{MinGoldenRetrievers}",
            "related_variables": [
                "NumberGoldenRetrievers"
            ],
            "related_parameters": [
                "MinGoldenRetrievers"
            ],
            "code": "# Add constraint to ensure at least MinGoldenRetrievers golden retrievers are used\nmodel.addConstr(NumberGoldenRetrievers >= MinGoldenRetrievers, name=\"min_golden_retrievers\")"
        },
        {
            "description": "At most MaxLabradorProportion of the total number of dogs can be labradors",
            "status": "coded",
            "formulation": "(1 - \\textup{MaxLabradorProportion}) \\cdot \\textup{NumberLabradors} \\leq \\textup{MaxLabradorProportion} \\cdot \\textup{NumberGoldenRetrievers}",
            "related_variables": [
                "NumberLabradors",
                "NumberGoldenRetrievers"
            ],
            "related_parameters": [
                "MaxLabradorProportion"
            ],
            "code": "# Add constraint ensuring at most MaxLabradorProportion of dogs are labradors\nmodel.addConstr((1 - MaxLabradorProportion) * NumberLabradors <= MaxLabradorProportion * NumberGoldenRetrievers, name=\"max_labrador_proportion\")"
        },
        {
            "description": "The total number of bone treats used by all dogs cannot exceed the total available bone treats",
            "status": "coded",
            "formulation": "\\textup{LabradorBoneTreatCount} \\\\cdot \\textup{NumberLabradors} + \\textup{GoldenRetrieverBoneTreatCount} \\\\cdot \\textup{NumberGoldenRetrievers} \\\\leq \\textup{TotalBoneTreatsAvailable}",
            "related_variables": [
                "NumberLabradors",
                "NumberGoldenRetrievers"
            ],
            "related_parameters": [
                "LabradorBoneTreatCount",
                "GoldenRetrieverBoneTreatCount",
                "TotalBoneTreatsAvailable"
            ],
            "code": "# Add constraint for total bone treat usage\nmodel.addConstr(\n    LabradorBoneTreatCount * NumberLabradors + GoldenRetrieverBoneTreatCount * NumberGoldenRetrievers <= TotalBoneTreatsAvailable,\n    name=\"bone_treats_constraint\"\n)"
        },
        {
            "description": "The number of golden retrievers must be at least the minimum required",
            "status": "coded",
            "formulation": "\\textup{NumberGoldenRetrievers} \\\\geq \\textup{MinGoldenRetrievers}",
            "related_variables": [
                "NumberGoldenRetrievers"
            ],
            "related_parameters": [
                "MinGoldenRetrievers"
            ],
            "code": "# Add constraint to ensure the number of golden retrievers meets the minimum requirement  \nmodel.addConstr(NumberGoldenRetrievers >= MinGoldenRetrievers, name=\"min_golden_retrievers\")"
        },
        {
            "description": "The proportion of labradors must not exceed the maximum allowable proportion",
            "status": "coded",
            "formulation": "\\textup{NumberLabradors} \\\\leq \\textup{MaxLabradorProportion} \\\\cdot \\textup{TotalDogs}",
            "related_variables": [
                "NumberLabradors",
                "TotalDogs"
            ],
            "related_parameters": [
                "MaxLabradorProportion"
            ],
            "code": "# Add constraint to ensure the proportion of labradors does not exceed the maximum allowable proportion\nmodel.addConstr(NumberLabradors <= MaxLabradorProportion * TotalDogs, name=\"MaxLabradorProportionConstraint\")"
        },
        {
            "description": "Define TotalDogs as the sum of labradors and golden retrievers",
            "status": "coded",
            "formulation": "\\textup{TotalDogs} = \\textup{NumberLabradors} + \\textup{NumberGoldenRetrievers}",
            "related_variables": [
                "TotalDogs",
                "NumberLabradors",
                "NumberGoldenRetrievers"
            ],
            "related_parameters": [],
            "code": "# Add constraint defining TotalDogs as the sum of NumberLabradors and NumberGoldenRetrievers\nmodel.addConstr(TotalDogs == NumberLabradors + NumberGoldenRetrievers, name=\"total_dogs_sum\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of labradors being trained.",
            "symbol": "NumberLabradors",
            "shape": [],
            "status": "coded",
            "code": "NumberLabradors = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberLabradors\")"
        },
        {
            "definition": "The number of golden retrievers being trained.",
            "symbol": "NumberGoldenRetrievers",
            "shape": [],
            "status": "coded",
            "code": "NumberGoldenRetrievers = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberGoldenRetrievers\")"
        },
        {
            "definition": "The total number of dogs (sum of labradors and golden retrievers)",
            "symbol": "TotalDogs",
            "shape": [],
            "status": "coded",
            "code": "TotalDogs = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalDogs\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total number of newspapers delivered by labradors and golden retrievers",
            "status": "coded",
            "formulation": "\\textup{Maximize} \\quad \\textup{LabradorNewspaperCount} \\\\cdot \\textup{NumberLabradors} + \\textup{GoldenRetrieverNewspaperCount} \\\\cdot \\textup{NumberGoldenRetrievers}",
            "related_variables": [
                "NumberLabradors",
                "NumberGoldenRetrievers"
            ],
            "related_parameters": [
                "LabradorNewspaperCount",
                "GoldenRetrieverNewspaperCount"
            ],
            "code": "# Set objective\nmodel.setObjective(LabradorNewspaperCount * NumberLabradors + GoldenRetrieverNewspaperCount * NumberGoldenRetrievers, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 2500.0,
    "log_path": "logs/log_20250413164425_nl4opt_prob_185/",
    "problem_path": "data/nl4opt/prob_185/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_185/data.json\", \"r\") as f:\n    data = json.load(f)\n\nLabradorNewspaperCount = data[\"LabradorNewspaperCount\"] # scalar parameter\nLabradorBoneTreatCount = data[\"LabradorBoneTreatCount\"] # scalar parameter\nGoldenRetrieverNewspaperCount = data[\"GoldenRetrieverNewspaperCount\"] # scalar parameter\nGoldenRetrieverBoneTreatCount = data[\"GoldenRetrieverBoneTreatCount\"] # scalar parameter\nTotalBoneTreatsAvailable = data[\"TotalBoneTreatsAvailable\"] # scalar parameter\nMinGoldenRetrievers = data[\"MinGoldenRetrievers\"] # scalar parameter\nMaxLabradorProportion = data[\"MaxLabradorProportion\"] # scalar parameter\nNumberLabradors = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberLabradors\")\nNumberGoldenRetrievers = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberGoldenRetrievers\")\nTotalDogs = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalDogs\")\n\n# Add constraint for non-negativity of the number of labradors\nmodel.addConstr(NumberLabradors >= 0, name=\"non_negative_labradors\")\n\n# Add constraint to ensure the number of golden retrievers is non-negative\nmodel.addConstr(NumberGoldenRetrievers >= 0, name=\"non_negative_golden_retrievers\")\n\n# Add constraint for the total number of bone treats used\nmodel.addConstr(\n    LabradorBoneTreatCount * NumberLabradors + GoldenRetrieverBoneTreatCount * NumberGoldenRetrievers <= TotalBoneTreatsAvailable,\n    name=\"bone_treats_constraint\"\n)\n\n# Add constraint to ensure at least MinGoldenRetrievers golden retrievers are used\nmodel.addConstr(NumberGoldenRetrievers >= MinGoldenRetrievers, name=\"min_golden_retrievers\")\n\n# Add constraint ensuring at most MaxLabradorProportion of dogs are labradors\nmodel.addConstr((1 - MaxLabradorProportion) * NumberLabradors <= MaxLabradorProportion * NumberGoldenRetrievers, name=\"max_labrador_proportion\")\n\n# Add constraint for total bone treat usage\nmodel.addConstr(\n    LabradorBoneTreatCount * NumberLabradors + GoldenRetrieverBoneTreatCount * NumberGoldenRetrievers <= TotalBoneTreatsAvailable,\n    name=\"bone_treats_constraint\"\n)\n\n# Add constraint to ensure the number of golden retrievers meets the minimum requirement  \nmodel.addConstr(NumberGoldenRetrievers >= MinGoldenRetrievers, name=\"min_golden_retrievers\")\n\n# Add constraint to ensure the proportion of labradors does not exceed the maximum allowable proportion\nmodel.addConstr(NumberLabradors <= MaxLabradorProportion * TotalDogs, name=\"MaxLabradorProportionConstraint\")\n\n# Add constraint defining TotalDogs as the sum of NumberLabradors and NumberGoldenRetrievers\nmodel.addConstr(TotalDogs == NumberLabradors + NumberGoldenRetrievers, name=\"total_dogs_sum\")\n\n# Set objective\nmodel.setObjective(LabradorNewspaperCount * NumberLabradors + GoldenRetrieverNewspaperCount * NumberGoldenRetrievers, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}