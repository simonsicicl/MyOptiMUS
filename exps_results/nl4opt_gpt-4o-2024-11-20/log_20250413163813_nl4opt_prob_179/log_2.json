{
    "background": "An industrial tire company needs to deliver large tires to remote engineering sites with a minimum delivery requirement, a budget, and constraints on transport modes.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Tires transported per trip by cargo plane",
            "symbol": "TiresPlane",
            "value": 10,
            "shape": [],
            "code": "TiresPlane = data[\"TiresPlane\"] # scalar parameter"
        },
        {
            "definition": "Cost per trip of a cargo plane",
            "symbol": "CostPlane",
            "value": 1000,
            "shape": [],
            "code": "CostPlane = data[\"CostPlane\"] # scalar parameter"
        },
        {
            "definition": "Tires transported per trip by ultrawide truck",
            "symbol": "TiresTruck",
            "value": 6,
            "shape": [],
            "code": "TiresTruck = data[\"TiresTruck\"] # scalar parameter"
        },
        {
            "definition": "Cost per trip of an ultrawide truck",
            "symbol": "CostTruck",
            "value": 700,
            "shape": [],
            "code": "CostTruck = data[\"CostTruck\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of tires required to transport",
            "symbol": "MinTires",
            "value": 200,
            "shape": [],
            "code": "MinTires = data[\"MinTires\"] # scalar parameter"
        },
        {
            "definition": "Available budget for transport",
            "symbol": "Budget",
            "value": 22000,
            "shape": [],
            "code": "Budget = data[\"Budget\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of plane trips must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{PlaneTrips} \\\\geq 0",
            "related_variables": [
                "PlaneTrips"
            ],
            "related_parameters": [],
            "code": "# The non-negativity constraint for \"PlaneTrips\" is already satisfied as it is defined as a continuous variable with default lower bound of 0 in Gurobi."
        },
        {
            "description": "The number of truck trips should be non-negative.",
            "status": "coded",
            "formulation": "\\textup{TruckTrips} \\geq 0",
            "related_variables": [
                "TruckTrips"
            ],
            "related_parameters": [],
            "code": "# No code is needed: Gurobi variables by default have non-negativity constraints unless explicitly set otherwise."
        },
        {
            "description": "Constraint ensuring that the total tires transported by cargo planes and ultrawide trucks is at least MinTires.",
            "status": "coded",
            "formulation": "\\\\textup{TiresPlane} \\\\cdot \\\\textup{PlaneTrips} + \\\\textup{TiresTruck} \\\\cdot \\\\textup{TruckTrips} \\\\geq \\\\textup{MinTires}",
            "related_variables": [
                "PlaneTrips",
                "TruckTrips"
            ],
            "related_parameters": [
                "TiresPlane",
                "TiresTruck",
                "MinTires"
            ],
            "code": "# Add constraint to ensure total tires transported is at least MinTires\nmodel.addConstr(\n    PlaneTrips * TiresPlane + TruckTrips * TiresTruck >= MinTires, \n    name=\"min_tires_constraint\"\n)"
        },
        {
            "description": "The total cost of transporting tires using cargo planes and ultrawide trucks must not exceed the available budget.",
            "status": "coded",
            "formulation": "\\\\textup{CostPlane} \\\\times \\\\textup{PlaneTrips} + \\\\textup{CostTruck} \\\\times \\\\textup{TruckTrips} \\\\leq \\\\textup{Budget}",
            "related_variables": [
                "PlaneTrips",
                "TruckTrips"
            ],
            "related_parameters": [
                "CostPlane",
                "CostTruck",
                "Budget"
            ],
            "code": "# Add budget constraint for transportation costs\nmodel.addConstr(CostPlane * PlaneTrips + CostTruck * TruckTrips <= Budget, name=\"transport_budget\")"
        },
        {
            "description": "The number of plane trips cannot exceed the number of truck trips.",
            "status": "coded",
            "formulation": "\\textup{PlaneTrips} \\leq \\textup{TruckTrips}",
            "related_variables": [
                "PlaneTrips",
                "TruckTrips"
            ],
            "related_parameters": [],
            "code": "# Add constraint ensuring the number of plane trips does not exceed the number of truck trips\nmodel.addConstr(PlaneTrips <= TruckTrips, name=\"plane_trips_limit\")"
        },
        {
            "description": "Ensure the total number of tires delivered by planes and trucks meets or exceeds the minimum requirement.",
            "status": "coded",
            "formulation": "\\textup{TiresPlane} \\cdot \\textup{PlaneTrips} + \\textup{TiresTruck} \\cdot \\textup{TruckTrips} \\geq \\textup{MinTires}",
            "related_variables": [
                "PlaneTrips",
                "TruckTrips"
            ],
            "related_parameters": [
                "TiresPlane",
                "TiresTruck",
                "MinTires"
            ],
            "code": "# Add constraint to ensure total tires delivered meets the minimum requirement\nmodel.addConstr(TiresPlane * PlaneTrips + TiresTruck * TruckTrips >= MinTires, name=\"min_tires_requirement\")"
        },
        {
            "description": "Ensure the total transportation cost is within the available budget.",
            "status": "coded",
            "formulation": "\\textup{CostPlane} \\cdot \\textup{PlaneTrips} + \\textup{CostTruck} \\cdot \\textup{TruckTrips} \\leq \\textup{Budget}",
            "related_variables": [
                "PlaneTrips",
                "TruckTrips"
            ],
            "related_parameters": [
                "CostPlane",
                "CostTruck",
                "Budget"
            ],
            "code": "# Add transportation cost budget constraint\nmodel.addConstr(\n    CostPlane * PlaneTrips + CostTruck * TruckTrips <= Budget, \n    name=\"transportation_budget_constraint\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "The number of trips made by cargo planes.",
            "symbol": "PlaneTrips",
            "shape": [],
            "status": "coded",
            "code": "PlaneTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PlaneTrips\")"
        },
        {
            "definition": "The number of trips made by ultrawide trucks.",
            "symbol": "TruckTrips",
            "shape": [],
            "status": "coded",
            "code": "TruckTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TruckTrips\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of trips made by planes and trucks.",
            "status": "coded",
            "formulation": "\\textup{Minimize:} \\quad \\textup{PlaneTrips} + \\textup{TruckTrips}",
            "related_variables": [
                "PlaneTrips",
                "TruckTrips"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(PlaneTrips + TruckTrips, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 25.0,
    "log_path": "logs/log_20250413163813_nl4opt_prob_179/",
    "problem_path": "data/nl4opt/prob_179/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_179/data.json\", \"r\") as f:\n    data = json.load(f)\n\nTiresPlane = data[\"TiresPlane\"] # scalar parameter\nCostPlane = data[\"CostPlane\"] # scalar parameter\nTiresTruck = data[\"TiresTruck\"] # scalar parameter\nCostTruck = data[\"CostTruck\"] # scalar parameter\nMinTires = data[\"MinTires\"] # scalar parameter\nBudget = data[\"Budget\"] # scalar parameter\nPlaneTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PlaneTrips\")\nTruckTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TruckTrips\")\n\n# The non-negativity constraint for \"PlaneTrips\" is already satisfied as it is defined as a continuous variable with default lower bound of 0 in Gurobi.\n\n# No code is needed: Gurobi variables by default have non-negativity constraints unless explicitly set otherwise.\n\n# Add constraint to ensure total tires transported is at least MinTires\nmodel.addConstr(\n    PlaneTrips * TiresPlane + TruckTrips * TiresTruck >= MinTires, \n    name=\"min_tires_constraint\"\n)\n\n# Add budget constraint for transportation costs\nmodel.addConstr(CostPlane * PlaneTrips + CostTruck * TruckTrips <= Budget, name=\"transport_budget\")\n\n# Add constraint ensuring the number of plane trips does not exceed the number of truck trips\nmodel.addConstr(PlaneTrips <= TruckTrips, name=\"plane_trips_limit\")\n\n# Add constraint to ensure total tires delivered meets the minimum requirement\nmodel.addConstr(TiresPlane * PlaneTrips + TiresTruck * TruckTrips >= MinTires, name=\"min_tires_requirement\")\n\n# Add transportation cost budget constraint\nmodel.addConstr(\n    CostPlane * PlaneTrips + CostTruck * TruckTrips <= Budget, \n    name=\"transportation_budget_constraint\"\n)\n\n# Set objective\nmodel.setObjective(PlaneTrips + TruckTrips, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}