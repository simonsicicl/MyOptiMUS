{
    "background": "A popup clinic is administering spit tests and swabs for virus testing with constrained resources and time.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Time to administer a spit test",
            "symbol": "SpitTestTime",
            "value": 10,
            "shape": [],
            "code": "SpitTestTime = data[\"SpitTestTime\"] # scalar parameter"
        },
        {
            "definition": "Time to administer a swab test",
            "symbol": "SwabTestTime",
            "value": 15,
            "shape": [],
            "code": "SwabTestTime = data[\"SwabTestTime\"] # scalar parameter"
        },
        {
            "definition": "Minimum ratio of spit tests to swabs",
            "symbol": "SpitSwabRatio",
            "value": 2.0,
            "shape": [],
            "code": "SpitSwabRatio = data[\"SpitSwabRatio\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of swabs",
            "symbol": "MinSwabs",
            "value": 20,
            "shape": [],
            "code": "MinSwabs = data[\"MinSwabs\"] # scalar parameter"
        },
        {
            "definition": "Total operation time of the popup clinic",
            "symbol": "TotalTime",
            "value": 8000,
            "shape": [],
            "code": "TotalTime = data[\"TotalTime\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The total time spent on spit tests and swabs cannot exceed the available TotalTime.",
            "status": "coded",
            "formulation": "\\\\textup{NumberOfSpitTests} \\\\times \\\\textup{SpitTestTime} + \\\\textup{NumberOfSwabTests} \\\\times \\\\textup{SwabTestTime} \\\\leq \\\\textup{TotalTime}",
            "related_variables": [
                "NumberOfSpitTests",
                "NumberOfSwabTests"
            ],
            "related_parameters": [
                "SpitTestTime",
                "SwabTestTime",
                "TotalTime"
            ],
            "code": "# Add constraint to ensure total time spent on spit and swab tests does not exceed the available TotalTime\nmodel.addConstr(NumberOfSpitTests * SpitTestTime + NumberOfSwabTests * SwabTestTime <= TotalTime, name=\"time_limit_constraint\")"
        },
        {
            "description": "The number of spit tests must be at least SpitSwabRatio times the number of swab tests.",
            "status": "coded",
            "formulation": "\\\\textup{NumberOfSpitTests} \\\\geq \\\\textup{SpitSwabRatio} \\\\cdot \\\\textup{NumberOfSwabTests}",
            "related_variables": [
                "NumberOfSpitTests",
                "NumberOfSwabTests"
            ],
            "related_parameters": [
                "SpitSwabRatio"
            ],
            "code": "# Add constraint for minimum ratio of spit tests to swab tests\nmodel.addConstr(NumberOfSpitTests >= SpitSwabRatio * NumberOfSwabTests, name=\"min_spit_to_swab_ratio\")"
        },
        {
            "description": "Ensure the number of spit tests administered is non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfSpitTests} \\geq 0",
            "related_variables": [
                "NumberOfSpitTests"
            ],
            "related_parameters": [],
            "code": "# No code needed, as non-negativity is inherent to the variable type (GRB.CONTINUOUS); this constraint is automatically satisfied."
        },
        {
            "description": "The number of swab tests conducted by the clinic must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfSwabTests} \\geq 0",
            "related_variables": [
                "NumberOfSwabTests"
            ],
            "related_parameters": [],
            "code": "# The constraint is already defined inherently by the non-negative domain of the variable `NumberOfSwabTests`. No additional code is needed."
        },
        {
            "description": "Ensure that at least the minimum number of swab tests (MinSwabs) is conducted.",
            "status": "coded",
            "formulation": "\\textup{NumberOfSwabTests} \\geq \\textup{MinSwabs}",
            "related_variables": [
                "NumberOfSwabTests"
            ],
            "related_parameters": [
                "MinSwabs"
            ],
            "code": "# Add constraint to ensure at least the minimum number of swab tests is conducted  \nmodel.addConstr(NumberOfSwabTests >= MinSwabs, name=\"min_swab_tests_constraint\")"
        },
        {
            "description": "The combined time for all spit tests and swab tests cannot exceed the clinic's total operational time.",
            "status": "coded",
            "formulation": "\\textup{SpitTestTime} \\\\times \\textup{NumberOfSpitTests} + \\textup{SwabTestTime} \\\\times \\textup{NumberOfSwabTests} \\\\leq \\textup{TotalTime}",
            "related_variables": [
                "NumberOfSpitTests",
                "NumberOfSwabTests"
            ],
            "related_parameters": [
                "SpitTestTime",
                "SwabTestTime",
                "TotalTime"
            ],
            "code": "# Add operational time constraint\nmodel.addConstr(\n    SpitTestTime * NumberOfSpitTests + SwabTestTime * NumberOfSwabTests <= TotalTime, \n    name=\"clinic_operational_time\"\n)"
        },
        {
            "description": "The number of spit tests conducted must be at least SpitSwabRatio times the number of swab tests conducted.",
            "status": "coded",
            "formulation": "\\textup{NumberOfSpitTests} \\\\geq \\textup{SpitSwabRatio} \\\\times \\textup{NumberOfSwabTests}",
            "related_variables": [
                "NumberOfSpitTests",
                "NumberOfSwabTests"
            ],
            "related_parameters": [
                "SpitSwabRatio"
            ],
            "code": "# Add constraint ensuring the number of spit tests is at least SpitSwabRatio times the number of swab tests\nmodel.addConstr(NumberOfSpitTests >= SpitSwabRatio * NumberOfSwabTests, name=\"spit_swab_ratio\")"
        },
        {
            "description": "The number of swabs conducted must be at least the minimum required number of swabs.",
            "status": "coded",
            "formulation": "\\textup{NumberOfSwabTests} \\\\geq \\textup{MinSwabs}",
            "related_variables": [
                "NumberOfSwabTests"
            ],
            "related_parameters": [
                "MinSwabs"
            ],
            "code": "# Add constraint to ensure the number of swab tests meets the minimum requirement\nmodel.addConstr(NumberOfSwabTests >= MinSwabs, name=\"min_swab_tests\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of spit tests conducted at the clinic.",
            "symbol": "NumberOfSpitTests",
            "shape": [],
            "status": "coded",
            "code": "NumberOfSpitTests = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfSpitTests\")"
        },
        {
            "definition": "The number of swab tests conducted at the clinic.",
            "symbol": "NumberOfSwabTests",
            "shape": [],
            "status": "coded",
            "code": "NumberOfSwabTests = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfSwabTests\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total number of spit tests and swabs administered.",
            "status": "coded",
            "formulation": "\\textup{maximize } \\quad \\textup{NumberOfSpitTests} + \\textup{NumberOfSwabTests}",
            "related_variables": [
                "NumberOfSpitTests",
                "NumberOfSwabTests"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(NumberOfSpitTests + NumberOfSwabTests, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 790.0,
    "log_path": "logs/log_20250413155946_nl4opt_prob_139/",
    "problem_path": "data/nl4opt/prob_139/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_139/data.json\", \"r\") as f:\n    data = json.load(f)\n\nSpitTestTime = data[\"SpitTestTime\"] # scalar parameter\nSwabTestTime = data[\"SwabTestTime\"] # scalar parameter\nSpitSwabRatio = data[\"SpitSwabRatio\"] # scalar parameter\nMinSwabs = data[\"MinSwabs\"] # scalar parameter\nTotalTime = data[\"TotalTime\"] # scalar parameter\nNumberOfSpitTests = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfSpitTests\")\nNumberOfSwabTests = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfSwabTests\")\n\n# Add constraint to ensure total time spent on spit and swab tests does not exceed the available TotalTime\nmodel.addConstr(NumberOfSpitTests * SpitTestTime + NumberOfSwabTests * SwabTestTime <= TotalTime, name=\"time_limit_constraint\")\n\n# Add constraint for minimum ratio of spit tests to swab tests\nmodel.addConstr(NumberOfSpitTests >= SpitSwabRatio * NumberOfSwabTests, name=\"min_spit_to_swab_ratio\")\n\n# No code needed, as non-negativity is inherent to the variable type (GRB.CONTINUOUS); this constraint is automatically satisfied.\n\n# The constraint is already defined inherently by the non-negative domain of the variable `NumberOfSwabTests`. No additional code is needed.\n\n# Add constraint to ensure at least the minimum number of swab tests is conducted  \nmodel.addConstr(NumberOfSwabTests >= MinSwabs, name=\"min_swab_tests_constraint\")\n\n# Add operational time constraint\nmodel.addConstr(\n    SpitTestTime * NumberOfSpitTests + SwabTestTime * NumberOfSwabTests <= TotalTime, \n    name=\"clinic_operational_time\"\n)\n\n# Add constraint ensuring the number of spit tests is at least SpitSwabRatio times the number of swab tests\nmodel.addConstr(NumberOfSpitTests >= SpitSwabRatio * NumberOfSwabTests, name=\"spit_swab_ratio\")\n\n# Add constraint to ensure the number of swab tests meets the minimum requirement\nmodel.addConstr(NumberOfSwabTests >= MinSwabs, name=\"min_swab_tests\")\n\n# Set objective\nmodel.setObjective(NumberOfSpitTests + NumberOfSwabTests, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}