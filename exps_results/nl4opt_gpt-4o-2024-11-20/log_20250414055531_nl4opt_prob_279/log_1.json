{
    "background": "A dessert shop needs to determine the number of matcha ice cream and orange sorbet desserts to make in order to minimize the total amount of flavouring needed, while complying with supply and proportion constraints.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of flavouring required for one order of matcha ice cream",
            "symbol": "FlavouringMatcha",
            "value": 2,
            "shape": [],
            "code": "FlavouringMatcha = data[\"FlavouringMatcha\"] # scalar parameter"
        },
        {
            "definition": "Units of ice cream required for one order of matcha ice cream",
            "symbol": "IceCreamMatcha",
            "value": 4,
            "shape": [],
            "code": "IceCreamMatcha = data[\"IceCreamMatcha\"] # scalar parameter"
        },
        {
            "definition": "Units of flavouring required for one order of orange sorbet",
            "symbol": "FlavouringOrange",
            "value": 4,
            "shape": [],
            "code": "FlavouringOrange = data[\"FlavouringOrange\"] # scalar parameter"
        },
        {
            "definition": "Units of water required for one order of orange sorbet",
            "symbol": "WaterOrange",
            "value": 3,
            "shape": [],
            "code": "WaterOrange = data[\"WaterOrange\"] # scalar parameter"
        },
        {
            "definition": "Minimum proportion of desserts that must be matcha ice cream",
            "symbol": "MinProportionMatcha",
            "value": 0.15,
            "shape": [],
            "code": "MinProportionMatcha = data[\"MinProportionMatcha\"] # scalar parameter"
        },
        {
            "definition": "Total units of ice cream available",
            "symbol": "TotalIceCream",
            "value": 600,
            "shape": [],
            "code": "TotalIceCream = data[\"TotalIceCream\"] # scalar parameter"
        },
        {
            "definition": "Total units of water available",
            "symbol": "TotalWater",
            "value": 550,
            "shape": [],
            "code": "TotalWater = data[\"TotalWater\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of matcha ice cream orders must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{MatchaIceCreamOrders} \\\\geq 0",
            "related_variables": [
                "MatchaIceCreamOrders"
            ],
            "related_parameters": [],
            "code": "# The variable MatchaIceCreamOrders is already constrained to non-negative domain by default as it is declared as continuous (vtype=gp.GRB.CONTINUOUS)."
        },
        {
            "description": "The number of orange sorbet orders must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{OrangeSorbetOrders} \\geq 0",
            "related_variables": [
                "OrangeSorbetOrders"
            ],
            "related_parameters": [],
            "code": "# Non-negativity of OrangeSorbetOrders is implicitly ensured by the default lower bound of 0 in gurobipy variables."
        },
        {
            "description": "At least MinProportionMatcha of desserts made must be matcha ice cream.",
            "status": "coded",
            "formulation": "(1 - \\textup{MinProportionMatcha}) \\cdot \\textup{MatchaIceCreamOrders} \\geq \\textup{MinProportionMatcha} \\cdot \\textup{OrangeSorbetOrders}",
            "related_variables": [
                "MatchaIceCreamOrders",
                "OrangeSorbetOrders"
            ],
            "related_parameters": [
                "MinProportionMatcha"
            ],
            "code": "# Add constraint ensuring at least MinProportionMatcha of desserts made must be matcha ice cream\nmodel.addConstr((1 - MinProportionMatcha) * MatchaIceCreamOrders >= MinProportionMatcha * OrangeSorbetOrders, name=\"min_proportion_matcha\")"
        },
        {
            "description": "Constraint ensuring total ice cream used does not exceed available ice cream",
            "status": "coded",
            "formulation": "\\textup{IceCreamMatcha} \\times \\textup{MatchaIceCreamOrders} \\leq \\textup{TotalIceCream}",
            "related_variables": [
                "MatchaIceCreamOrders"
            ],
            "related_parameters": [
                "IceCreamMatcha",
                "TotalIceCream"
            ],
            "code": "# Adding constraint to ensure total ice cream used does not exceed available ice cream\nmodel.addConstr(MatchaIceCreamOrders * IceCreamMatcha <= TotalIceCream, name=\"ice_cream_constraint\")"
        },
        {
            "description": "Constraint ensuring total water used does not exceed available water",
            "status": "coded",
            "formulation": "\\textup{WaterOrange} \\times \\textup{OrangeSorbetOrders} \\leq \\textup{TotalWater}",
            "related_variables": [
                "OrangeSorbetOrders"
            ],
            "related_parameters": [
                "WaterOrange",
                "TotalWater"
            ],
            "code": "# Add constraint to ensure total water used does not exceed available water\nmodel.addConstr(OrangeSorbetOrders * WaterOrange <= TotalWater, name=\"water_usage_constraint\")"
        },
        {
            "description": "Constraint enforcing the minimum proportion of matcha ice cream orders",
            "status": "coded",
            "formulation": "(1 - \\textup{MinProportionMatcha}) \\times \\textup{MatchaIceCreamOrders} \\geq \\textup{MinProportionMatcha} \\times \\textup{OrangeSorbetOrders}",
            "related_variables": [
                "MatchaIceCreamOrders",
                "OrangeSorbetOrders"
            ],
            "related_parameters": [
                "MinProportionMatcha"
            ],
            "code": "# Add constraint to enforce the minimum proportion of matcha ice cream orders\nmodel.addConstr((1 - MinProportionMatcha) * MatchaIceCreamOrders >= MinProportionMatcha * OrangeSorbetOrders, name=\"min_proportion_matcha\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of matcha ice cream orders.",
            "symbol": "MatchaIceCreamOrders",
            "shape": [],
            "status": "coded",
            "code": "MatchaIceCreamOrders = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"MatchaIceCreamOrders\")"
        },
        {
            "definition": "Number of orange sorbet orders.",
            "symbol": "OrangeSorbetOrders",
            "shape": [],
            "status": "coded",
            "code": "OrangeSorbetOrders = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"OrangeSorbetOrders\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total amount of flavouring needed for making the desserts",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{FlavouringMatcha} \\times \\textup{MatchaIceCreamOrders} + \\textup{FlavouringOrange} \\times \\textup{OrangeSorbetOrders}",
            "related_variables": [
                "MatchaIceCreamOrders",
                "OrangeSorbetOrders"
            ],
            "related_parameters": [
                "FlavouringMatcha",
                "FlavouringOrange"
            ],
            "code": "# Set objective\nmodel.setObjective(FlavouringMatcha * MatchaIceCreamOrders + FlavouringOrange * OrangeSorbetOrders, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250414055531_nl4opt_prob_279/",
    "problem_path": "data/nl4opt/prob_279/"
}