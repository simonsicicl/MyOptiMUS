{
    "background": "A science show has two different demonstrations that use mint and active ingredients to produce minty foam and black tar. There are limited resources of mint, active ingredients, and a maximum amount of black tar that can be tolerated.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of mint used in demonstration 1",
            "symbol": "MintD1",
            "value": 10,
            "shape": [],
            "code": "MintD1 = data[\"MintD1\"] # scalar parameter"
        },
        {
            "definition": "Units of mint used in demonstration 2",
            "symbol": "MintD2",
            "value": 12,
            "shape": [],
            "code": "MintD2 = data[\"MintD2\"] # scalar parameter"
        },
        {
            "definition": "Units of active ingredient used in demonstration 1",
            "symbol": "ActiveD1",
            "value": 20,
            "shape": [],
            "code": "ActiveD1 = data[\"ActiveD1\"] # scalar parameter"
        },
        {
            "definition": "Units of active ingredient used in demonstration 2",
            "symbol": "ActiveD2",
            "value": 15,
            "shape": [],
            "code": "ActiveD2 = data[\"ActiveD2\"] # scalar parameter"
        },
        {
            "definition": "Units of minty foam produced in demonstration 1",
            "symbol": "FoamD1",
            "value": 25,
            "shape": [],
            "code": "FoamD1 = data[\"FoamD1\"] # scalar parameter"
        },
        {
            "definition": "Units of minty foam produced in demonstration 2",
            "symbol": "FoamD2",
            "value": 18,
            "shape": [],
            "code": "FoamD2 = data[\"FoamD2\"] # scalar parameter"
        },
        {
            "definition": "Units of black tar produced in demonstration 1",
            "symbol": "TarD1",
            "value": 5,
            "shape": [],
            "code": "TarD1 = data[\"TarD1\"] # scalar parameter"
        },
        {
            "definition": "Units of black tar produced in demonstration 2",
            "symbol": "TarD2",
            "value": 3,
            "shape": [],
            "code": "TarD2 = data[\"TarD2\"] # scalar parameter"
        },
        {
            "definition": "Total available units of mint",
            "symbol": "TotalMint",
            "value": 120,
            "shape": [],
            "code": "TotalMint = data[\"TotalMint\"] # scalar parameter"
        },
        {
            "definition": "Total available units of active ingredient",
            "symbol": "TotalActive",
            "value": 100,
            "shape": [],
            "code": "TotalActive = data[\"TotalActive\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowable units of black tar to be produced",
            "symbol": "MaxTar",
            "value": 50,
            "shape": [],
            "code": "MaxTar = data[\"MaxTar\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of Demonstration 1 must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{NumDemo1} \\\\geq 0",
            "related_variables": [
                "NumDemo1"
            ],
            "related_parameters": [],
            "code": "# The variable NumDemo1 is already non-negative due to its default properties (continuous variables in Gurobi are non-negative unless stated otherwise); no additional constraint is needed."
        },
        {
            "description": "The number of Demonstration 2 is non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumDemo2} \\geq 0",
            "related_variables": [
                "NumDemo2"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for NumDemo2\nmodel.addConstr(NumDemo2 >= 0, name=\"non_negativity_NumDemo2\")"
        },
        {
            "description": "The total used units of mint for Demonstration 1 and Demonstration 2 cannot exceed the TotalMint available.",
            "status": "coded",
            "formulation": "\\\\textup{MintD1} \\\\cdot \\\\textup{NumDemo1} + \\\\textup{MintD2} \\\\cdot \\\\textup{NumDemo2} \\\\leq \\\\textup{TotalMint}",
            "related_variables": [
                "NumDemo1",
                "NumDemo2"
            ],
            "related_parameters": [
                "MintD1",
                "MintD2",
                "TotalMint"
            ],
            "code": "# Add constraint to ensure total mint usage for Demonstrations 1 and 2 does not exceed TotalMint\nmodel.addConstr(MintD1 * NumDemo1 + MintD2 * NumDemo2 <= TotalMint, name=\"mint_usage_limit\")"
        },
        {
            "description": "The total units of active ingredient used for Demonstration 1 and 2 should not exceed the total available active ingredient (TotalActive).",
            "status": "coded",
            "formulation": "\\\\textup{ActiveD1} \\\\cdot \\\\textup{NumDemo1} + \\\\textup{ActiveD2} \\\\cdot \\\\textup{NumDemo2} \\\\leq \\\\textup{TotalActive}",
            "related_variables": [
                "NumDemo1",
                "NumDemo2"
            ],
            "related_parameters": [
                "ActiveD1",
                "ActiveD2",
                "TotalActive"
            ],
            "code": "# Add constraint to ensure active ingredient usage does not exceed total available  \nmodel.addConstr(ActiveD1 * NumDemo1 + ActiveD2 * NumDemo2 <= TotalActive, name=\"active_ingredient_limit\")"
        },
        {
            "description": "The total produced units of black tar from Demonstration 1 and Demonstration 2 cannot exceed MaxTar.",
            "status": "coded",
            "formulation": "\\\\textup{TarD1} * \\\\textup{NumDemo1} + \\\\textup{TarD2} * \\\\textup{NumDemo2} \\\\leq \\\\textup{MaxTar}",
            "related_variables": [
                "NumDemo1",
                "NumDemo2"
            ],
            "related_parameters": [
                "TarD1",
                "TarD2",
                "MaxTar"
            ],
            "code": "# Add constraint for maximum allowable black tar production\nmodel.addConstr(\n    TarD1 * NumDemo1 + TarD2 * NumDemo2 <= MaxTar,\n    name=\"max_black_tar_production\"\n)"
        },
        {
            "description": "The total amount of mint used in both demonstrations cannot exceed the available supply of mint.",
            "status": "coded",
            "formulation": "\\textup{MintD1} \\cdot \\textup{NumDemo1} + \\textup{MintD2} \\cdot \\textup{NumDemo2} \\leq \\textup{TotalMint}",
            "related_variables": [
                "NumDemo1",
                "NumDemo2"
            ],
            "related_parameters": [
                "MintD1",
                "MintD2",
                "TotalMint"
            ],
            "code": "# Add constraint to restrict total mint usage\nmodel.addConstr(NumDemo1 * MintD1 + NumDemo2 * MintD2 <= TotalMint, name=\"mint_usage_limit\")"
        },
        {
            "description": "The total usage of active ingredients cannot exceed the available supply of active ingredients.",
            "status": "coded",
            "formulation": "\\textup{ActiveD1} \\cdot \\textup{NumDemo1} + \\textup{ActiveD2} \\cdot \\textup{NumDemo2} \\leq \\textup{TotalActive}",
            "related_variables": [
                "NumDemo1",
                "NumDemo2"
            ],
            "related_parameters": [
                "ActiveD1",
                "ActiveD2",
                "TotalActive"
            ],
            "code": "# Add constraint to ensure active ingredient usage does not exceed the total available supply\nmodel.addConstr(NumDemo1 * ActiveD1 + NumDemo2 * ActiveD2 <= TotalActive, name=\"active_ingredient_usage\")"
        },
        {
            "description": "The total amount of black tar produced cannot exceed the maximum allowable limit.",
            "status": "coded",
            "formulation": "\\textup{TarD1} \\cdot \\textup{NumDemo1} + \\textup{TarD2} \\cdot \\textup{NumDemo2} \\leq \\textup{MaxTar}",
            "related_variables": [
                "NumDemo1",
                "NumDemo2"
            ],
            "related_parameters": [
                "TarD1",
                "TarD2",
                "MaxTar"
            ],
            "code": "# Add constraint for the total amount of black tar produced\nmodel.addConstr(NumDemo1 * TarD1 + NumDemo2 * TarD2 <= MaxTar, name=\"max_black_tar\")"
        },
        {
            "description": "The number of Demonstrations 1 and 2 must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumDemo1} \\geq 0 \\quad \\text{and} \\quad \\textup{NumDemo2} \\geq 0",
            "related_variables": [
                "NumDemo1",
                "NumDemo2"
            ],
            "related_parameters": [],
            "code": "# No need for additional code to set non-negativity as it is already implicit in the variable definitions with Gurobi's default lower bound (0)."
        }
    ],
    "variables": [
        {
            "definition": "Number of Demonstration 1",
            "symbol": "NumDemo1",
            "shape": [],
            "status": "coded",
            "code": "NumDemo1 = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumDemo1\")"
        },
        {
            "definition": "The number of Demonstration 2 to be performed.",
            "symbol": "NumDemo2",
            "shape": [],
            "status": "coded",
            "code": "NumDemo2 = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumDemo2\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total amount of minty foam produced from both demonstrations.",
            "status": "coded",
            "formulation": "\\textup{FoamD1} \\cdot \\textup{NumDemo1} + \\textup{FoamD2} \\cdot \\textup{NumDemo2}",
            "related_variables": [
                "NumDemo1",
                "NumDemo2"
            ],
            "related_parameters": [
                "FoamD1",
                "FoamD2"
            ],
            "code": "# Set objective\nmodel.setObjective(FoamD1 * NumDemo1 + FoamD2 * NumDemo2, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 125.0,
    "log_path": "logs/log_20250413153338_nl4opt_prob_112/",
    "problem_path": "data/nl4opt/prob_112/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_112/data.json\", \"r\") as f:\n    data = json.load(f)\n\nMintD1 = data[\"MintD1\"] # scalar parameter\nMintD2 = data[\"MintD2\"] # scalar parameter\nActiveD1 = data[\"ActiveD1\"] # scalar parameter\nActiveD2 = data[\"ActiveD2\"] # scalar parameter\nFoamD1 = data[\"FoamD1\"] # scalar parameter\nFoamD2 = data[\"FoamD2\"] # scalar parameter\nTarD1 = data[\"TarD1\"] # scalar parameter\nTarD2 = data[\"TarD2\"] # scalar parameter\nTotalMint = data[\"TotalMint\"] # scalar parameter\nTotalActive = data[\"TotalActive\"] # scalar parameter\nMaxTar = data[\"MaxTar\"] # scalar parameter\nNumDemo1 = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumDemo1\")\nNumDemo2 = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumDemo2\")\n\n# The variable NumDemo1 is already non-negative due to its default properties (continuous variables in Gurobi are non-negative unless stated otherwise); no additional constraint is needed.\n\n# Add non-negativity constraint for NumDemo2\nmodel.addConstr(NumDemo2 >= 0, name=\"non_negativity_NumDemo2\")\n\n# Add constraint to ensure total mint usage for Demonstrations 1 and 2 does not exceed TotalMint\nmodel.addConstr(MintD1 * NumDemo1 + MintD2 * NumDemo2 <= TotalMint, name=\"mint_usage_limit\")\n\n# Add constraint to ensure active ingredient usage does not exceed total available  \nmodel.addConstr(ActiveD1 * NumDemo1 + ActiveD2 * NumDemo2 <= TotalActive, name=\"active_ingredient_limit\")\n\n# Add constraint for maximum allowable black tar production\nmodel.addConstr(\n    TarD1 * NumDemo1 + TarD2 * NumDemo2 <= MaxTar,\n    name=\"max_black_tar_production\"\n)\n\n# Add constraint to restrict total mint usage\nmodel.addConstr(NumDemo1 * MintD1 + NumDemo2 * MintD2 <= TotalMint, name=\"mint_usage_limit\")\n\n# Add constraint to ensure active ingredient usage does not exceed the total available supply\nmodel.addConstr(NumDemo1 * ActiveD1 + NumDemo2 * ActiveD2 <= TotalActive, name=\"active_ingredient_usage\")\n\n# Add constraint for the total amount of black tar produced\nmodel.addConstr(NumDemo1 * TarD1 + NumDemo2 * TarD2 <= MaxTar, name=\"max_black_tar\")\n\n# No need for additional code to set non-negativity as it is already implicit in the variable definitions with Gurobi's default lower bound (0).\n\n# Set objective\nmodel.setObjective(FoamD1 * NumDemo1 + FoamD2 * NumDemo2, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}