{
    "background": "A traveling salesman consumes a diet consisting exclusively of ramen and fries, and he has nutritional targets as well as a maximum fraction of meals that can be ramen.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Calories contained in each pack of ramen",
            "symbol": "CaloriesRamen",
            "value": 400,
            "shape": [],
            "code": "CaloriesRamen = data[\"CaloriesRamen\"] # scalar parameter"
        },
        {
            "definition": "Protein contained in each pack of ramen",
            "symbol": "ProteinRamen",
            "value": 20,
            "shape": [],
            "code": "ProteinRamen = data[\"ProteinRamen\"] # scalar parameter"
        },
        {
            "definition": "Sodium contained in each pack of ramen",
            "symbol": "SodiumRamen",
            "value": 100,
            "shape": [],
            "code": "SodiumRamen = data[\"SodiumRamen\"] # scalar parameter"
        },
        {
            "definition": "Calories contained in each pack of fries",
            "symbol": "CaloriesFries",
            "value": 300,
            "shape": [],
            "code": "CaloriesFries = data[\"CaloriesFries\"] # scalar parameter"
        },
        {
            "definition": "Protein contained in each pack of fries",
            "symbol": "ProteinFries",
            "value": 10,
            "shape": [],
            "code": "ProteinFries = data[\"ProteinFries\"] # scalar parameter"
        },
        {
            "definition": "Sodium contained in each pack of fries",
            "symbol": "SodiumFries",
            "value": 75,
            "shape": [],
            "code": "SodiumFries = data[\"SodiumFries\"] # scalar parameter"
        },
        {
            "definition": "Maximum fraction of meals that can be ramen",
            "symbol": "MaxRamenFraction",
            "value": 0.3,
            "shape": [],
            "code": "MaxRamenFraction = data[\"MaxRamenFraction\"] # scalar parameter"
        },
        {
            "definition": "Minimum total caloric intake",
            "symbol": "MinCalories",
            "value": 3000,
            "shape": [],
            "code": "MinCalories = data[\"MinCalories\"] # scalar parameter"
        },
        {
            "definition": "Minimum total protein intake",
            "symbol": "MinProtein",
            "value": 80,
            "shape": [],
            "code": "MinProtein = data[\"MinProtein\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of ramen packs consumed must be non-negative.",
            "status": "formulated",
            "formulation": "\\textup{NumberOfRamenPacks} \\geq 0",
            "related_variables": [
                "NumberOfRamenPacks"
            ],
            "related_parameters": []
        },
        {
            "description": "The number of fries packs consumed by the salesman must be non-negative.",
            "status": "formulated",
            "formulation": "\\textup{NumberOfFriesPacks} \\geq 0",
            "related_variables": [
                "NumberOfFriesPacks"
            ],
            "related_parameters": []
        },
        {
            "description": "At most MaxRamenFraction of the total meals consumed by the salesman can be ramen.",
            "status": "formulated",
            "formulation": "\\textup{NumberOfRamenPacks} (1 - \\textup{MaxRamenFraction}) \\leq \\textup{MaxRamenFraction} \\cdot \\textup{NumberOfFriesPacks}",
            "related_variables": [
                "NumberOfRamenPacks",
                "NumberOfFriesPacks"
            ],
            "related_parameters": [
                "MaxRamenFraction"
            ]
        },
        {
            "description": "Ensure the salesman consumes at least the minimum required calories from ramen and fries.",
            "status": "formulated",
            "formulation": "(\\textup{CaloriesRamen} \\cdot \\textup{NumberOfRamenPacks}) + (\\textup{CaloriesFries} \\cdot \\textup{NumberOfFriesPacks}) \\geq \\textup{MinCalories}",
            "related_variables": [
                "NumberOfRamenPacks",
                "NumberOfFriesPacks"
            ],
            "related_parameters": [
                "CaloriesRamen",
                "CaloriesFries",
                "MinCalories"
            ]
        },
        {
            "description": "The salesman must consume at least MinProtein grams of protein.",
            "status": "formulated",
            "formulation": "\\textup{ProteinRamen} \\\\cdot \\textup{NumberOfRamenPacks} + \\textup{ProteinFries} \\\\cdot \\textup{NumberOfFriesPacks} \\\\geq \\textup{MinProtein}",
            "related_variables": [
                "NumberOfRamenPacks",
                "NumberOfFriesPacks"
            ],
            "related_parameters": [
                "ProteinRamen",
                "ProteinFries",
                "MinProtein"
            ]
        },
        {
            "description": "Ensure the total caloric intake meets the minimum required calories",
            "status": "formulated",
            "formulation": "\\textup{CaloriesRamen} \\times \\textup{NumberOfRamenPacks} + \\textup{CaloriesFries} \\times \\textup{NumberOfFriesPacks} \\geq \\textup{MinCalories}",
            "related_variables": [
                "NumberOfRamenPacks",
                "NumberOfFriesPacks"
            ],
            "related_parameters": [
                "CaloriesRamen",
                "CaloriesFries",
                "MinCalories"
            ]
        },
        {
            "description": "Ensure the total protein intake meets the minimum required protein",
            "status": "formulated",
            "formulation": "\\textup{ProteinRamen} \\times \\textup{NumberOfRamenPacks} + \\textup{ProteinFries} \\times \\textup{NumberOfFriesPacks} \\geq \\textup{MinProtein}",
            "related_variables": [
                "NumberOfRamenPacks",
                "NumberOfFriesPacks"
            ],
            "related_parameters": [
                "ProteinRamen",
                "ProteinFries",
                "MinProtein"
            ]
        },
        {
            "description": "Ensure the fraction of meals from ramen does not exceed \\textup{MaxRamenFraction}",
            "status": "formulated",
            "formulation": "\\textup{NumberOfRamenPacks} \\leq \\textup{MaxRamenFraction} \\times \\textup{TotalMeals}",
            "related_variables": [
                "NumberOfRamenPacks",
                "TotalMeals"
            ],
            "related_parameters": [
                "MaxRamenFraction"
            ]
        },
        {
            "description": "Define the total number of meals as the sum of ramen and fries packs",
            "status": "formulated",
            "formulation": "\\textup{TotalMeals} = \\textup{NumberOfRamenPacks} + \\textup{NumberOfFriesPacks}",
            "related_variables": [
                "NumberOfRamenPacks",
                "NumberOfFriesPacks",
                "TotalMeals"
            ],
            "related_parameters": []
        }
    ],
    "variables": [
        {
            "definition": "The number of ramen packs consumed by the salesman.",
            "symbol": "NumberOfRamenPacks",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The number of fries packs consumed by the salesman.",
            "symbol": "NumberOfFriesPacks",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The total number of meals consumed, defined as the sum of ramen packs and fries packs",
            "symbol": "TotalMeals",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total sodium intake from the consumption of ramen and fries",
            "status": "formulated",
            "formulation": "\\textup{Minimize} \\quad \\textup{SodiumRamen} \\times \\textup{NumberOfRamenPacks} + \\textup{SodiumFries} \\times \\textup{NumberOfFriesPacks}",
            "related_variables": [
                "NumberOfRamenPacks",
                "NumberOfFriesPacks"
            ],
            "related_parameters": [
                "SodiumRamen",
                "SodiumFries"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413154227_nl4opt_prob_121/",
    "problem_path": "data/nl4opt/prob_121/"
}