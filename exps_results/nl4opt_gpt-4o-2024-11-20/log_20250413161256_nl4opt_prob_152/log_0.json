{
    "background": "The problem involves the optimization of duck transportation to shore after an oil spill, considering different capacities and time requirements for boats and canoes, along with limits on boat trips and a minimum percentage requirement for canoe trips.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of ducks per boat trip",
            "symbol": "DucksPerBoat",
            "value": 10,
            "shape": [],
            "code": "DucksPerBoat = data[\"DucksPerBoat\"] # scalar parameter"
        },
        {
            "definition": "Number of ducks per canoe trip",
            "symbol": "DucksPerCanoe",
            "value": 8,
            "shape": [],
            "code": "DucksPerCanoe = data[\"DucksPerCanoe\"] # scalar parameter"
        },
        {
            "definition": "Duration of a boat trip",
            "symbol": "TimePerBoat",
            "value": 20.0,
            "shape": [],
            "code": "TimePerBoat = data[\"TimePerBoat\"] # scalar parameter"
        },
        {
            "definition": "Duration of a canoe trip",
            "symbol": "TimePerCanoe",
            "value": 40.0,
            "shape": [],
            "code": "TimePerCanoe = data[\"TimePerCanoe\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of boat trips",
            "symbol": "MaxBoatTrips",
            "value": 12,
            "shape": [],
            "code": "MaxBoatTrips = data[\"MaxBoatTrips\"] # scalar parameter"
        },
        {
            "definition": "Minimum percentage of trips that should be by canoe",
            "symbol": "MinCanoeTripsPercentage",
            "value": 0.6,
            "shape": [],
            "code": "MinCanoeTripsPercentage = data[\"MinCanoeTripsPercentage\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of ducks to be taken to shore",
            "symbol": "MinDucks",
            "value": 300,
            "shape": [],
            "code": "MinDucks = data[\"MinDucks\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of boat trips must be non-negative.",
            "status": "formulated",
            "formulation": "\\textup{NumBoatTrips} \\geq 0",
            "related_variables": [
                "NumBoatTrips"
            ],
            "related_parameters": []
        },
        {
            "description": "The number of canoe trips must be non-negative.",
            "status": "formulated",
            "formulation": "\\textup{NumCanoeTrips} \\geq 0",
            "related_variables": [
                "NumCanoeTrips"
            ],
            "related_parameters": []
        },
        {
            "description": "The total number of ducks transported by boats must equal the product of the DucksPerBoat parameter and the number of boat trips.",
            "status": "formulated",
            "formulation": "\\textup{TotalDucksByBoat} = \\textup{DucksPerBoat} \\times \\textup{NumBoatTrips}",
            "related_variables": [
                "TotalDucksByBoat",
                "NumBoatTrips"
            ],
            "related_parameters": [
                "DucksPerBoat"
            ]
        },
        {
            "description": "The total number of ducks transported by canoes cannot exceed the product of the number of canoe trips taken and the limit of ducks per canoe trip (DucksPerCanoe).",
            "status": "formulated",
            "formulation": "\\\\textup{TotalDucksByCanoe} \\\\leq \\\\textup{NumCanoeTrips} \\\\times \\\\textup{DucksPerCanoe}",
            "related_variables": [
                "NumCanoeTrips",
                "TotalDucksByCanoe"
            ],
            "related_parameters": [
                "DucksPerCanoe"
            ]
        },
        {
            "description": "The total number of boat trips, \\textup{NumBoatTrips}, is limited to a maximum of \\textup{MaxBoatTrips} trips.",
            "status": "formulated",
            "formulation": "\\textup{NumBoatTrips} \\\\leq \\textup{MaxBoatTrips}",
            "related_variables": [
                "NumBoatTrips"
            ],
            "related_parameters": [
                "MaxBoatTrips"
            ]
        },
        {
            "description": "At least the minimum required percentage of trips must be by canoe.",
            "status": "formulated",
            "formulation": "\\textup{NumCanoeTrips} \\geq \\frac{\\textup{MinCanoeTripsPercentage}}{1 - \\textup{MinCanoeTripsPercentage}} \\cdot \\textup{NumBoatTrips}",
            "related_variables": [
                "NumBoatTrips",
                "NumCanoeTrips"
            ],
            "related_parameters": [
                "MinCanoeTripsPercentage"
            ]
        },
        {
            "description": "At least \\textup{MinDucks} ducks must be transported to shore.",
            "status": "formulated",
            "formulation": "\\\\textup{TotalDucksByBoat} + \\\\textup{TotalDucksByCanoe} \\\\geq \\\\textup{MinDucks}",
            "related_variables": [
                "TotalDucksByBoat",
                "TotalDucksByCanoe"
            ],
            "related_parameters": [
                "MinDucks"
            ]
        },
        {
            "description": "The total number of ducks transported by canoes must equal the product of the DucksPerCanoe parameter and the number of canoe trips.",
            "status": "formulated",
            "formulation": "\\textup{TotalDucksByCanoe} = \\textup{DucksPerCanoe} \\times \\textup{NumCanoeTrips}",
            "related_variables": [
                "TotalDucksByCanoe",
                "NumCanoeTrips"
            ],
            "related_parameters": [
                "DucksPerCanoe"
            ]
        },
        {
            "description": "Ensure all ducks are transported",
            "status": "formulated",
            "formulation": "\\textup{TotalDucksByBoat} + \\textup{TotalDucksByCanoe} \\geq \\textup{MinDucks}",
            "related_variables": [
                "TotalDucksByBoat",
                "TotalDucksByCanoe"
            ],
            "related_parameters": [
                "MinDucks"
            ]
        },
        {
            "description": "Define total ducks transported by boats",
            "status": "formulated",
            "formulation": "\\textup{TotalDucksByBoat} = \\textup{DucksPerBoat} \\cdot \\textup{NumBoatTrips}",
            "related_variables": [
                "TotalDucksByBoat",
                "NumBoatTrips"
            ],
            "related_parameters": [
                "DucksPerBoat"
            ]
        },
        {
            "description": "Define total ducks transported by canoes",
            "status": "formulated",
            "formulation": "\\textup{TotalDucksByCanoe} = \\textup{DucksPerCanoe} \\cdot \\textup{NumCanoeTrips}",
            "related_variables": [
                "TotalDucksByCanoe",
                "NumCanoeTrips"
            ],
            "related_parameters": [
                "DucksPerCanoe"
            ]
        },
        {
            "description": "Limit the number of boat trips to the maximum allowed",
            "status": "formulated",
            "formulation": "\\textup{NumBoatTrips} \\leq \\textup{MaxBoatTrips}",
            "related_variables": [
                "NumBoatTrips"
            ],
            "related_parameters": [
                "MaxBoatTrips"
            ]
        },
        {
            "description": "Canoe trips must meet the minimum percentage of total trips",
            "status": "formulated",
            "formulation": "\\textup{NumCanoeTrips} \\geq \\textup{MinCanoeTripsPercentage} \\cdot (\\textup{NumBoatTrips} + \\textup{NumCanoeTrips})",
            "related_variables": [
                "NumCanoeTrips",
                "NumBoatTrips"
            ],
            "related_parameters": [
                "MinCanoeTripsPercentage"
            ]
        },
        {
            "description": "Link TotalTime to the weighted sum of boat and canoe times",
            "status": "formulated",
            "formulation": "\\textup{TotalTime} = \\textup{TimePerBoat} \\cdot \\textup{NumBoatTrips} + \\textup{TimePerCanoe} \\cdot \\textup{NumCanoeTrips}",
            "related_variables": [
                "TotalTime",
                "NumBoatTrips",
                "NumCanoeTrips"
            ],
            "related_parameters": [
                "TimePerBoat",
                "TimePerCanoe"
            ]
        }
    ],
    "variables": [
        {
            "definition": "The total number of boat trips taken.",
            "symbol": "NumBoatTrips",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The total number of canoe trips taken.",
            "symbol": "NumCanoeTrips",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The total number of ducks transported by boats.",
            "symbol": "TotalDucksByBoat",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The total number of ducks transported by canoes.",
            "symbol": "TotalDucksByCanoe",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The total time required for all transportation trips",
            "symbol": "TotalTime",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total time needed to transport all ducks to shore",
            "status": "formulated",
            "formulation": "\\textup{Minimize: TotalTime}",
            "related_variables": [
                "TotalTime",
                "NumBoatTrips",
                "NumCanoeTrips"
            ],
            "related_parameters": [
                "TimePerBoat",
                "TimePerCanoe"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413161256_nl4opt_prob_152/",
    "problem_path": "data/nl4opt/prob_152/"
}