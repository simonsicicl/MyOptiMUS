{
    "background": "A small bakery uses batter and milk to make crepe cakes, sponge cakes, and birthday cakes, each needing different amounts of ingredients for their preparation.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total amount of batter available",
            "symbol": "TotalBatter",
            "value": 20000,
            "shape": [],
            "code": "TotalBatter = data[\"TotalBatter\"] # scalar parameter"
        },
        {
            "definition": "Total amount of milk available",
            "symbol": "TotalMilk",
            "value": 14000,
            "shape": [],
            "code": "TotalMilk = data[\"TotalMilk\"] # scalar parameter"
        },
        {
            "definition": "Amount of batter required for a crepe cake",
            "symbol": "BatterCrepe",
            "value": 400,
            "shape": [],
            "code": "BatterCrepe = data[\"BatterCrepe\"] # scalar parameter"
        },
        {
            "definition": "Amount of milk required for a crepe cake",
            "symbol": "MilkCrepe",
            "value": 200,
            "shape": [],
            "code": "MilkCrepe = data[\"MilkCrepe\"] # scalar parameter"
        },
        {
            "definition": "Amount of batter required for a sponge cake",
            "symbol": "BatterSponge",
            "value": 500,
            "shape": [],
            "code": "BatterSponge = data[\"BatterSponge\"] # scalar parameter"
        },
        {
            "definition": "Amount of milk required for a sponge cake",
            "symbol": "MilkSponge",
            "value": 300,
            "shape": [],
            "code": "MilkSponge = data[\"MilkSponge\"] # scalar parameter"
        },
        {
            "definition": "Amount of batter required for a birthday cake",
            "symbol": "BatterBirthday",
            "value": 450,
            "shape": [],
            "code": "BatterBirthday = data[\"BatterBirthday\"] # scalar parameter"
        },
        {
            "definition": "Amount of milk required for a birthday cake",
            "symbol": "MilkBirthday",
            "value": 350,
            "shape": [],
            "code": "MilkBirthday = data[\"MilkBirthday\"] # scalar parameter"
        },
        {
            "definition": "Profit per crepe cake",
            "symbol": "ProfitCrepe",
            "value": 12,
            "shape": [],
            "code": "ProfitCrepe = data[\"ProfitCrepe\"] # scalar parameter"
        },
        {
            "definition": "Profit per sponge cake",
            "symbol": "ProfitSponge",
            "value": 10,
            "shape": [],
            "code": "ProfitSponge = data[\"ProfitSponge\"] # scalar parameter"
        },
        {
            "definition": "Profit per birthday cake",
            "symbol": "ProfitBirthday",
            "value": 15,
            "shape": [],
            "code": "ProfitBirthday = data[\"ProfitBirthday\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of crepe cakes produced must be non-negative",
            "status": "coded",
            "formulation": "\\textup{CrepeCakes} \\geq 0",
            "related_variables": [
                "CrepeCakes"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for CrepeCakes\nmodel.addConstr(CrepeCakes >= 0, name=\"non_negativity_CrepeCakes\")"
        },
        {
            "description": "The number of sponge cakes produced must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{SpongeCakes} \\\\geq 0",
            "related_variables": [
                "SpongeCakes"
            ],
            "related_parameters": [],
            "code": "# The variable \"SpongeCakes\" is non-negative by default since it is a continuous variable."
        },
        {
            "description": "Number of birthday cakes must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{BirthdayCakes} \\geq 0",
            "related_variables": [
                "BirthdayCakes"
            ],
            "related_parameters": [],
            "code": "# The variable \"BirthdayCakes\" already has the specified constraint (non-negativity) because variables in Gurobi are non-negative by default."
        },
        {
            "description": "The total grams of batter used cannot exceed the available TotalBatter.",
            "status": "coded",
            "formulation": "\\textup{BatterCrepe} \\cdot \\textup{CrepeCakes} + \\textup{BatterSponge} \\cdot \\textup{SpongeCakes} + \\textup{BatterBirthday} \\cdot \\textup{BirthdayCakes} \\leq \\textup{TotalBatter}",
            "related_variables": [
                "CrepeCakes",
                "SpongeCakes",
                "BirthdayCakes"
            ],
            "related_parameters": [
                "BatterCrepe",
                "BatterSponge",
                "BatterBirthday",
                "TotalBatter"
            ],
            "code": "# Add constraint for the total batter usage\nmodel.addConstr(\n    CrepeCakes * BatterCrepe + SpongeCakes * BatterSponge + BirthdayCakes * BatterBirthday <= TotalBatter,\n    name=\"total_batter_usage\"\n)"
        },
        {
            "description": "The total grams of milk used cannot exceed the available TotalMilk.",
            "status": "coded",
            "formulation": "\\\\textup{MilkCrepe} \\\\times \\\\textup{CrepeCakes} + \\\\textup{MilkSponge} \\\\times \\\\textup{SpongeCakes} + \\\\textup{MilkBirthday} \\\\times \\\\textup{BirthdayCakes} \\\\leq \\\\textup{TotalMilk}",
            "related_variables": [
                "CrepeCakes",
                "SpongeCakes",
                "BirthdayCakes"
            ],
            "related_parameters": [
                "MilkCrepe",
                "MilkSponge",
                "MilkBirthday",
                "TotalMilk"
            ],
            "code": "# Add constraint to ensure total milk usage does not exceed TotalMilk\nmodel.addConstr(\n    MilkCrepe * CrepeCakes + MilkSponge * SpongeCakes + MilkBirthday * BirthdayCakes <= TotalMilk,\n    name=\"milk_usage_constraint\"\n)"
        },
        {
            "description": "The total batter used for all cakes cannot exceed the available batter.",
            "status": "coded",
            "formulation": "\\textup{BatterCrepe} \\cdot \\textup{CrepeCakes} + \\textup{BatterSponge} \\cdot \\textup{SpongeCakes} + \\textup{BatterBirthday} \\cdot \\textup{BirthdayCakes} \\\\ \\leq \\textup{TotalBatter}",
            "related_variables": [
                "CrepeCakes",
                "SpongeCakes",
                "BirthdayCakes"
            ],
            "related_parameters": [
                "BatterCrepe",
                "BatterSponge",
                "BatterBirthday",
                "TotalBatter"
            ],
            "code": "# Add constraint for total batter used not exceeding the available batter  \nmodel.addConstr(  \n    CrepeCakes * BatterCrepe + SpongeCakes * BatterSponge + BirthdayCakes * BatterBirthday <= TotalBatter,  \n    name=\"batter_limit\"  \n)"
        },
        {
            "description": "The total milk used for all cakes cannot exceed the available milk.",
            "status": "coded",
            "formulation": "\\textup{MilkCrepe} \\cdot \\textup{CrepeCakes} + \\textup{MilkSponge} \\cdot \\textup{SpongeCakes} + \\textup{MilkBirthday} \\cdot \\textup{BirthdayCakes} \\\\ \\leq \\textup{TotalMilk}",
            "related_variables": [
                "CrepeCakes",
                "SpongeCakes",
                "BirthdayCakes"
            ],
            "related_parameters": [
                "MilkCrepe",
                "MilkSponge",
                "MilkBirthday",
                "TotalMilk"
            ],
            "code": "# Add milk constraint to ensure total usage doesn't exceed available milk\nmodel.addConstr(\n    MilkCrepe * CrepeCakes + MilkSponge * SpongeCakes + MilkBirthday * BirthdayCakes <= TotalMilk,\n    name=\"milk_constraint\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "The number of crepe cakes produced",
            "symbol": "CrepeCakes",
            "shape": [],
            "status": "coded",
            "code": "CrepeCakes = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"CrepeCakes\")"
        },
        {
            "definition": "The number of sponge cakes produced",
            "symbol": "SpongeCakes",
            "shape": [],
            "status": "coded",
            "code": "SpongeCakes = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SpongeCakes\")"
        },
        {
            "definition": "The number of birthday cakes produced",
            "symbol": "BirthdayCakes",
            "shape": [],
            "status": "coded",
            "code": "BirthdayCakes = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"BirthdayCakes\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the bakery's profit from making crepe cakes, sponge cakes, and birthday cakes.",
            "status": "coded",
            "formulation": "\\textup{Maximize:} \\quad \\textup{ProfitCrepe} \\cdot \\textup{CrepeCakes} + \\textup{ProfitSponge} \\cdot \\textup{SpongeCakes} + \\textup{ProfitBirthday} \\cdot \\textup{BirthdayCakes}",
            "related_variables": [
                "CrepeCakes",
                "SpongeCakes",
                "BirthdayCakes"
            ],
            "related_parameters": [
                "ProfitCrepe",
                "ProfitSponge",
                "ProfitBirthday"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitCrepe * CrepeCakes + ProfitSponge * SpongeCakes + ProfitBirthday * BirthdayCakes, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 648.0,
    "log_path": "logs/log_20250413173306_nl4opt_prob_216/",
    "problem_path": "data/nl4opt/prob_216/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_216/data.json\", \"r\") as f:\n    data = json.load(f)\n\nTotalBatter = data[\"TotalBatter\"] # scalar parameter\nTotalMilk = data[\"TotalMilk\"] # scalar parameter\nBatterCrepe = data[\"BatterCrepe\"] # scalar parameter\nMilkCrepe = data[\"MilkCrepe\"] # scalar parameter\nBatterSponge = data[\"BatterSponge\"] # scalar parameter\nMilkSponge = data[\"MilkSponge\"] # scalar parameter\nBatterBirthday = data[\"BatterBirthday\"] # scalar parameter\nMilkBirthday = data[\"MilkBirthday\"] # scalar parameter\nProfitCrepe = data[\"ProfitCrepe\"] # scalar parameter\nProfitSponge = data[\"ProfitSponge\"] # scalar parameter\nProfitBirthday = data[\"ProfitBirthday\"] # scalar parameter\nCrepeCakes = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"CrepeCakes\")\nSpongeCakes = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SpongeCakes\")\nBirthdayCakes = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"BirthdayCakes\")\n\n# Non-negativity constraint for CrepeCakes\nmodel.addConstr(CrepeCakes >= 0, name=\"non_negativity_CrepeCakes\")\n\n# The variable \"SpongeCakes\" is non-negative by default since it is a continuous variable.\n\n# The variable \"BirthdayCakes\" already has the specified constraint (non-negativity) because variables in Gurobi are non-negative by default.\n\n# Add constraint for the total batter usage\nmodel.addConstr(\n    CrepeCakes * BatterCrepe + SpongeCakes * BatterSponge + BirthdayCakes * BatterBirthday <= TotalBatter,\n    name=\"total_batter_usage\"\n)\n\n# Add constraint to ensure total milk usage does not exceed TotalMilk\nmodel.addConstr(\n    MilkCrepe * CrepeCakes + MilkSponge * SpongeCakes + MilkBirthday * BirthdayCakes <= TotalMilk,\n    name=\"milk_usage_constraint\"\n)\n\n# Add constraint for total batter used not exceeding the available batter  \nmodel.addConstr(  \n    CrepeCakes * BatterCrepe + SpongeCakes * BatterSponge + BirthdayCakes * BatterBirthday <= TotalBatter,  \n    name=\"batter_limit\"  \n)\n\n# Add milk constraint to ensure total usage doesn't exceed available milk\nmodel.addConstr(\n    MilkCrepe * CrepeCakes + MilkSponge * SpongeCakes + MilkBirthday * BirthdayCakes <= TotalMilk,\n    name=\"milk_constraint\"\n)\n\n# Set objective\nmodel.setObjective(ProfitCrepe * CrepeCakes + ProfitSponge * SpongeCakes + ProfitBirthday * BirthdayCakes, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}