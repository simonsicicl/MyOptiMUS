{
    "background": "A man on a strict diet wants to optimize his meal replacement drink consumption between two brands, alpha and omega, to meet certain dietary requirements while minimizing sugar intake.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Protein content per bottle of alpha brand",
            "symbol": "ProteinAlpha",
            "value": 30,
            "shape": [],
            "code": "ProteinAlpha = data[\"ProteinAlpha\"] # scalar parameter"
        },
        {
            "definition": "Sugar content per bottle of alpha brand",
            "symbol": "SugarAlpha",
            "value": 20,
            "shape": [],
            "code": "SugarAlpha = data[\"SugarAlpha\"] # scalar parameter"
        },
        {
            "definition": "Calories per bottle of alpha brand",
            "symbol": "CaloriesAlpha",
            "value": 350,
            "shape": [],
            "code": "CaloriesAlpha = data[\"CaloriesAlpha\"] # scalar parameter"
        },
        {
            "definition": "Protein content per bottle of omega brand",
            "symbol": "ProteinOmega",
            "value": 20,
            "shape": [],
            "code": "ProteinOmega = data[\"ProteinOmega\"] # scalar parameter"
        },
        {
            "definition": "Sugar content per bottle of omega brand",
            "symbol": "SugarOmega",
            "value": 15,
            "shape": [],
            "code": "SugarOmega = data[\"SugarOmega\"] # scalar parameter"
        },
        {
            "definition": "Calories per bottle of omega brand",
            "symbol": "CaloriesOmega",
            "value": 300,
            "shape": [],
            "code": "CaloriesOmega = data[\"CaloriesOmega\"] # scalar parameter"
        },
        {
            "definition": "Minimum protein requirement",
            "symbol": "MinProtein",
            "value": 100,
            "shape": [],
            "code": "MinProtein = data[\"MinProtein\"] # scalar parameter"
        },
        {
            "definition": "Minimum calorie requirement",
            "symbol": "MinCalories",
            "value": 2000,
            "shape": [],
            "code": "MinCalories = data[\"MinCalories\"] # scalar parameter"
        },
        {
            "definition": "Maximum proportion of the drink that can be omega brand",
            "symbol": "MaxPropOmega",
            "value": 0.35,
            "shape": [],
            "code": "MaxPropOmega = data[\"MaxPropOmega\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of alpha brand drinks is non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{NumberAlphaDrinks} \\\\geq 0",
            "related_variables": [
                "NumberAlphaDrinks"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since the variable \"NumberAlphaDrinks\" is defined with non-negativity by default through Gurobi's constraints for continuous variables (min. bound is 0)."
        },
        {
            "description": "Number of omega brand drinks must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOmegaDrinks} \\geq 0",
            "related_variables": [
                "NumberOmegaDrinks"
            ],
            "related_parameters": [],
            "code": "# NumberOmegaDrinks is already defined as a non-negative continuous variable, no additional constraint is needed as it is implicitly satisfied."
        },
        {
            "description": "The drinks must provide at least MinProtein grams of protein",
            "status": "coded",
            "formulation": "\\textup{ProteinAlpha} \\cdot \\textup{NumberAlphaDrinks} + \\textup{ProteinOmega} \\cdot \\textup{NumberOmegaDrinks} \\geq \\textup{MinProtein}",
            "related_variables": [
                "NumberAlphaDrinks",
                "NumberOmegaDrinks"
            ],
            "related_parameters": [
                "ProteinAlpha",
                "ProteinOmega",
                "MinProtein"
            ],
            "code": "# Add constraint to ensure drinks provide at least MinProtein grams of protein\nmodel.addConstr(\n    ProteinAlpha * NumberAlphaDrinks + ProteinOmega * NumberOmegaDrinks >= MinProtein,\n    name=\"protein_requirement\"\n)"
        },
        {
            "description": "The drinks must provide at least MinCalories calories",
            "status": "coded",
            "formulation": "\\textup{CaloriesAlpha} \\cdot \\textup{NumberAlphaDrinks} + \\textup{CaloriesOmega} \\cdot \\textup{NumberOmegaDrinks} \\geq \\textup{MinCalories}",
            "related_variables": [
                "NumberAlphaDrinks",
                "NumberOmegaDrinks"
            ],
            "related_parameters": [
                "CaloriesAlpha",
                "CaloriesOmega",
                "MinCalories"
            ],
            "code": "# Add minimum calorie constraint\nmodel.addConstr(\n    CaloriesAlpha * NumberAlphaDrinks + CaloriesOmega * NumberOmegaDrinks >= MinCalories,\n    name=\"min_calorie_requirement\"\n)"
        },
        {
            "description": "At most MaxPropOmega of the drink should be omega brand",
            "status": "coded",
            "formulation": "\\textup{NumberOmegaDrinks} \\leq \\frac{\\textup{MaxPropOmega}}{1 - \\textup{MaxPropOmega}} \\cdot \\textup{NumberAlphaDrinks}",
            "related_variables": [
                "NumberAlphaDrinks",
                "NumberOmegaDrinks"
            ],
            "related_parameters": [
                "MaxPropOmega"
            ],
            "code": "# Add constraint to ensure the number of omega brand drinks is limited to the permissible proportion relative to alpha brand drinks\nmodel.addConstr(\n    NumberOmegaDrinks <= (MaxPropOmega / (1 - MaxPropOmega)) * NumberAlphaDrinks,\n    name=\"limit_omega_proportion\"\n)"
        },
        {
            "description": "Ensure the minimum protein intake requirement is met.",
            "status": "coded",
            "formulation": "\\textup{ProteinAlpha} \\cdot \\textup{NumberAlphaDrinks} + \\textup{ProteinOmega} \\cdot \\textup{NumberOmegaDrinks} \\geq \\textup{MinProtein}",
            "related_variables": [
                "NumberAlphaDrinks",
                "NumberOmegaDrinks"
            ],
            "related_parameters": [
                "ProteinAlpha",
                "ProteinOmega",
                "MinProtein"
            ],
            "code": "# Add minimum protein intake constraint\nmodel.addConstr(ProteinAlpha * NumberAlphaDrinks + ProteinOmega * NumberOmegaDrinks >= MinProtein, name=\"min_protein_intake\")"
        },
        {
            "description": "Ensure the minimum calorie intake requirement is met.",
            "status": "coded",
            "formulation": "\\textup{CaloriesAlpha} \\cdot \\textup{NumberAlphaDrinks} + \\textup{CaloriesOmega} \\cdot \\textup{NumberOmegaDrinks} \\geq \\textup{MinCalories}",
            "related_variables": [
                "NumberAlphaDrinks",
                "NumberOmegaDrinks"
            ],
            "related_parameters": [
                "CaloriesAlpha",
                "CaloriesOmega",
                "MinCalories"
            ],
            "code": "# Add calorie intake constraint\nmodel.addConstr(\n    CaloriesAlpha * NumberAlphaDrinks + CaloriesOmega * NumberOmegaDrinks >= MinCalories,\n    name=\"min_calorie_requirement\"\n)"
        },
        {
            "description": "Ensure Omega drinks do not exceed the maximum proportion of all drinks consumed.",
            "status": "coded",
            "formulation": "\\textup{NumberOmegaDrinks} \\leq \\frac{\\textup{MaxPropOmega}}{1 - \\textup{MaxPropOmega}} \\cdot \\textup{NumberAlphaDrinks}",
            "related_variables": [
                "NumberAlphaDrinks",
                "NumberOmegaDrinks"
            ],
            "related_parameters": [
                "MaxPropOmega"
            ],
            "code": "# Add constraint to ensure Omega drinks do not exceed the maximum proportion of all drinks consumed\nmodel.addConstr(NumberOmegaDrinks <= (MaxPropOmega / (1 - MaxPropOmega)) * NumberAlphaDrinks, name=\"omega_drinks_proportion\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of alpha brand drinks consumed.",
            "symbol": "NumberAlphaDrinks",
            "shape": [],
            "status": "coded",
            "code": "NumberAlphaDrinks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberAlphaDrinks\")"
        },
        {
            "definition": "The number of omega brand drinks consumed.",
            "symbol": "NumberOmegaDrinks",
            "shape": [],
            "status": "coded",
            "code": "NumberOmegaDrinks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOmegaDrinks\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total sugar intake from both the Alpha and Omega brand drinks.",
            "status": "coded",
            "formulation": "\\textup{Minimize:} \\quad \\textup{SugarAlpha} \\cdot \\textup{NumberAlphaDrinks} + \\textup{SugarOmega} \\cdot \\textup{NumberOmegaDrinks}",
            "related_variables": [
                "NumberAlphaDrinks",
                "NumberOmegaDrinks"
            ],
            "related_parameters": [
                "SugarAlpha",
                "SugarOmega"
            ],
            "code": "# Set objective\nmodel.setObjective(SugarAlpha * NumberAlphaDrinks + SugarOmega * NumberOmegaDrinks, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 109.77443609022556,
    "log_path": "logs/log_20250413152316_nl4opt_prob_101/",
    "problem_path": "data/nl4opt/prob_101/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_101/data.json\", \"r\") as f:\n    data = json.load(f)\n\nProteinAlpha = data[\"ProteinAlpha\"] # scalar parameter\nSugarAlpha = data[\"SugarAlpha\"] # scalar parameter\nCaloriesAlpha = data[\"CaloriesAlpha\"] # scalar parameter\nProteinOmega = data[\"ProteinOmega\"] # scalar parameter\nSugarOmega = data[\"SugarOmega\"] # scalar parameter\nCaloriesOmega = data[\"CaloriesOmega\"] # scalar parameter\nMinProtein = data[\"MinProtein\"] # scalar parameter\nMinCalories = data[\"MinCalories\"] # scalar parameter\nMaxPropOmega = data[\"MaxPropOmega\"] # scalar parameter\nNumberAlphaDrinks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberAlphaDrinks\")\nNumberOmegaDrinks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOmegaDrinks\")\n\n# No additional code needed since the variable \"NumberAlphaDrinks\" is defined with non-negativity by default through Gurobi's constraints for continuous variables (min. bound is 0).\n\n# NumberOmegaDrinks is already defined as a non-negative continuous variable, no additional constraint is needed as it is implicitly satisfied.\n\n# Add constraint to ensure drinks provide at least MinProtein grams of protein\nmodel.addConstr(\n    ProteinAlpha * NumberAlphaDrinks + ProteinOmega * NumberOmegaDrinks >= MinProtein,\n    name=\"protein_requirement\"\n)\n\n# Add minimum calorie constraint\nmodel.addConstr(\n    CaloriesAlpha * NumberAlphaDrinks + CaloriesOmega * NumberOmegaDrinks >= MinCalories,\n    name=\"min_calorie_requirement\"\n)\n\n# Add constraint to ensure the number of omega brand drinks is limited to the permissible proportion relative to alpha brand drinks\nmodel.addConstr(\n    NumberOmegaDrinks <= (MaxPropOmega / (1 - MaxPropOmega)) * NumberAlphaDrinks,\n    name=\"limit_omega_proportion\"\n)\n\n# Add minimum protein intake constraint\nmodel.addConstr(ProteinAlpha * NumberAlphaDrinks + ProteinOmega * NumberOmegaDrinks >= MinProtein, name=\"min_protein_intake\")\n\n# Add calorie intake constraint\nmodel.addConstr(\n    CaloriesAlpha * NumberAlphaDrinks + CaloriesOmega * NumberOmegaDrinks >= MinCalories,\n    name=\"min_calorie_requirement\"\n)\n\n# Add constraint to ensure Omega drinks do not exceed the maximum proportion of all drinks consumed\nmodel.addConstr(NumberOmegaDrinks <= (MaxPropOmega / (1 - MaxPropOmega)) * NumberAlphaDrinks, name=\"omega_drinks_proportion\")\n\n# Set objective\nmodel.setObjective(SugarAlpha * NumberAlphaDrinks + SugarOmega * NumberOmegaDrinks, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}