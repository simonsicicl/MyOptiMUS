{
    "background": "The science fair has two types of tables, circular and rectangular, for displaying children's science experiments. These tables accommodate poster boards, participants, and guests differently and occupy distinct amounts of space.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of poster boards that fit around a circular table",
            "symbol": "PosterBoardsCircular",
            "value": 4,
            "shape": [],
            "code": "PosterBoardsCircular = data[\"PosterBoardsCircular\"] # scalar parameter"
        },
        {
            "definition": "Number of participants that fit around a circular table",
            "symbol": "ParticipantsCircular",
            "value": 5,
            "shape": [],
            "code": "ParticipantsCircular = data[\"ParticipantsCircular\"] # scalar parameter"
        },
        {
            "definition": "Number of guests catered to by a circular table",
            "symbol": "GuestsCircular",
            "value": 8,
            "shape": [],
            "code": "GuestsCircular = data[\"GuestsCircular\"] # scalar parameter"
        },
        {
            "definition": "Number of poster boards that fit around a rectangular table",
            "symbol": "PosterBoardsRectangular",
            "value": 4,
            "shape": [],
            "code": "PosterBoardsRectangular = data[\"PosterBoardsRectangular\"] # scalar parameter"
        },
        {
            "definition": "Number of participants that fit around a rectangular table",
            "symbol": "ParticipantsRectangular",
            "value": 4,
            "shape": [],
            "code": "ParticipantsRectangular = data[\"ParticipantsRectangular\"] # scalar parameter"
        },
        {
            "definition": "Number of guests catered to by a rectangular table",
            "symbol": "GuestsRectangular",
            "value": 12,
            "shape": [],
            "code": "GuestsRectangular = data[\"GuestsRectangular\"] # scalar parameter"
        },
        {
            "definition": "Space taken up by a circular table",
            "symbol": "SpaceCircular",
            "value": 15,
            "shape": [],
            "code": "SpaceCircular = data[\"SpaceCircular\"] # scalar parameter"
        },
        {
            "definition": "Space taken up by a rectangular table",
            "symbol": "SpaceRectangular",
            "value": 20,
            "shape": [],
            "code": "SpaceRectangular = data[\"SpaceRectangular\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of participants to accommodate",
            "symbol": "MinParticipants",
            "value": 500,
            "shape": [],
            "code": "MinParticipants = data[\"MinParticipants\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of poster boards to accommodate",
            "symbol": "MinPosterBoards",
            "value": 300,
            "shape": [],
            "code": "MinPosterBoards = data[\"MinPosterBoards\"] # scalar parameter"
        },
        {
            "definition": "Total available space for the science fair",
            "symbol": "TotalSpace",
            "value": 1900,
            "shape": [],
            "code": "TotalSpace = data[\"TotalSpace\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of circular tables must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberCircularTables} \\geq 0",
            "related_variables": [
                "NumberCircularTables"
            ],
            "related_parameters": [],
            "code": "# No code is needed: Gurobi variables by default have non-negativity constraints unless explicitly set otherwise."
        },
        {
            "description": "Number of rectangular tables is non-negative",
            "status": "coded",
            "formulation": "\\\\textup{NumberRectangularTables} \\\\geq 0",
            "related_variables": [
                "NumberRectangularTables"
            ],
            "related_parameters": [],
            "code": "# Number of rectangular tables is non-negative\nmodel.addConstr(NumberRectangularTables >= 0, name=\"non_negative_constraint\")"
        },
        {
            "description": "The total number of participants at circular tables plus participants at rectangular tables must be at least MinParticipants.",
            "status": "coded",
            "formulation": "\\textup{ParticipantsCircular} \\cdot \\textup{NumberCircularTables} + \\textup{ParticipantsRectangular} \\cdot \\textup{NumberRectangularTables} \\geq \\textup{MinParticipants}",
            "related_variables": [
                "NumberCircularTables",
                "NumberRectangularTables"
            ],
            "related_parameters": [
                "ParticipantsCircular",
                "ParticipantsRectangular",
                "MinParticipants"
            ],
            "code": "# Adding the constraint for total participants\nmodel.addConstr(\n    ParticipantsCircular * NumberCircularTables + ParticipantsRectangular * NumberRectangularTables >= MinParticipants,\n    name=\"total_participants_constraint\"\n)"
        },
        {
            "description": "The total poster boards at circular and rectangular tables must be at least MinPosterBoards.",
            "status": "coded",
            "formulation": "\\textup{PosterBoardsCircular} \\\\cdot \\textup{NumberCircularTables} \\\\ + \\\\ \\textup{PosterBoardsRectangular} \\\\cdot \\textup{NumberRectangularTables} \\\\geq \\\\ \\textup{MinPosterBoards}",
            "related_variables": [
                "NumberCircularTables",
                "NumberRectangularTables"
            ],
            "related_parameters": [
                "PosterBoardsCircular",
                "PosterBoardsRectangular",
                "MinPosterBoards"
            ],
            "code": "# Add constraint for minimum poster board requirements\nmodel.addConstr(\n    NumberCircularTables * PosterBoardsCircular + NumberRectangularTables * PosterBoardsRectangular >= MinPosterBoards,\n    name=\"min_poster_boards\"\n)"
        },
        {
            "description": "The space used by circular tables and rectangular tables does not exceed the total available space.",
            "status": "coded",
            "formulation": "\\textup{NumberCircularTables} \\cdot \\textup{SpaceCircular} + \\textup{NumberRectangularTables} \\cdot \\textup{SpaceRectangular} \\leq \\textup{TotalSpace}",
            "related_variables": [
                "NumberCircularTables",
                "NumberRectangularTables"
            ],
            "related_parameters": [
                "SpaceCircular",
                "SpaceRectangular",
                "TotalSpace"
            ],
            "code": "# Add constraint for total space used by tables\nmodel.addConstr(\n    NumberCircularTables * SpaceCircular + NumberRectangularTables * SpaceRectangular <= TotalSpace,\n    name=\"space_constraint\"\n)"
        },
        {
            "description": "The total space occupied by both circular and rectangular tables must not exceed the available area.",
            "status": "coded",
            "formulation": "\\textup{SpaceCircular} \\cdot \\textup{NumberCircularTables} + \\textup{SpaceRectangular} \\cdot \\textup{NumberRectangularTables} \\leq \\textup{TotalSpace}",
            "related_variables": [
                "NumberCircularTables",
                "NumberRectangularTables"
            ],
            "related_parameters": [
                "SpaceCircular",
                "SpaceRectangular",
                "TotalSpace"
            ],
            "code": "# Add constraint for total space occupied by tables\nmodel.addConstr(SpaceCircular * NumberCircularTables + SpaceRectangular * NumberRectangularTables <= TotalSpace, \n                name=\"space_constraint\")"
        },
        {
            "description": "The tables must accommodate at least a minimum number of participants.",
            "status": "coded",
            "formulation": "\\textup{ParticipantsCircular} \\cdot \\textup{NumberCircularTables} + \\textup{ParticipantsRectangular} \\cdot \\textup{NumberRectangularTables} \\geq \\textup{MinParticipants}",
            "related_variables": [
                "NumberCircularTables",
                "NumberRectangularTables"
            ],
            "related_parameters": [
                "ParticipantsCircular",
                "ParticipantsRectangular",
                "MinParticipants"
            ],
            "code": "# Add constraint to ensure the tables can accommodate at least the minimum number of participants\nmodel.addConstr(\n    NumberCircularTables * ParticipantsCircular + NumberRectangularTables * ParticipantsRectangular >= MinParticipants,\n    name=\"min_participants_constraint\"\n)"
        },
        {
            "description": "The tables must accommodate at least a minimum number of poster boards.",
            "status": "coded",
            "formulation": "\\textup{PosterBoardsCircular} \\cdot \\textup{NumberCircularTables} + \\textup{PosterBoardsRectangular} \\cdot \\textup{NumberRectangularTables} \\geq \\textup{MinPosterBoards}",
            "related_variables": [
                "NumberCircularTables",
                "NumberRectangularTables"
            ],
            "related_parameters": [
                "PosterBoardsCircular",
                "PosterBoardsRectangular",
                "MinPosterBoards"
            ],
            "code": "# Add constraint to ensure a minimum number of poster boards are accommodated\nmodel.addConstr(\n    PosterBoardsCircular * NumberCircularTables + \n    PosterBoardsRectangular * NumberRectangularTables >= MinPosterBoards,\n    name=\"min_poster_boards\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "The number of circular tables used.",
            "symbol": "NumberCircularTables",
            "shape": [],
            "status": "coded",
            "code": "NumberCircularTables = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberCircularTables\")"
        },
        {
            "definition": "The number of rectangular tables used.",
            "symbol": "NumberRectangularTables",
            "shape": [],
            "status": "coded",
            "code": "NumberRectangularTables = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberRectangularTables\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total number of guests catered by circular and rectangular tables.",
            "status": "coded",
            "formulation": "\\max \\quad \\textup{GuestsCircular} \\cdot \\textup{NumberCircularTables} + \\textup{GuestsRectangular} \\cdot \\textup{NumberRectangularTables}",
            "related_variables": [
                "NumberCircularTables",
                "NumberRectangularTables"
            ],
            "related_parameters": [
                "GuestsCircular",
                "GuestsRectangular"
            ],
            "code": "# Set objective\nmodel.setObjective(GuestsCircular * NumberCircularTables + GuestsRectangular * NumberRectangularTables, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413175035_nl4opt_prob_232/",
    "problem_path": "data/nl4opt/prob_232/"
}