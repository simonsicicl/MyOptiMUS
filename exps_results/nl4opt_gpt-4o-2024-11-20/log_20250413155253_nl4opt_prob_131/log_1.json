{
    "background": "A zookeeper needs to optimize the diet of a gorilla to meet nutritional requirements while minimizing sugar intake and respecting the gorilla's preference for bananas.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Calories in one banana",
            "symbol": "BananaCalories",
            "value": 80,
            "shape": [],
            "code": "BananaCalories = data[\"BananaCalories\"] # scalar parameter"
        },
        {
            "definition": "Grams of potassium in one banana",
            "symbol": "BananaPotassium",
            "value": 20,
            "shape": [],
            "code": "BananaPotassium = data[\"BananaPotassium\"] # scalar parameter"
        },
        {
            "definition": "Grams of sugar in one banana",
            "symbol": "BananaSugar",
            "value": 10,
            "shape": [],
            "code": "BananaSugar = data[\"BananaSugar\"] # scalar parameter"
        },
        {
            "definition": "Calories in one mango",
            "symbol": "MangoCalories",
            "value": 100,
            "shape": [],
            "code": "MangoCalories = data[\"MangoCalories\"] # scalar parameter"
        },
        {
            "definition": "Grams of potassium in one mango",
            "symbol": "MangoPotassium",
            "value": 15,
            "shape": [],
            "code": "MangoPotassium = data[\"MangoPotassium\"] # scalar parameter"
        },
        {
            "definition": "Grams of sugar in one mango",
            "symbol": "MangoSugar",
            "value": 8,
            "shape": [],
            "code": "MangoSugar = data[\"MangoSugar\"] # scalar parameter"
        },
        {
            "definition": "Minimum total calories the gorilla must consume",
            "symbol": "MinCalories",
            "value": 4000,
            "shape": [],
            "code": "MinCalories = data[\"MinCalories\"] # scalar parameter"
        },
        {
            "definition": "Minimum total grams of potassium the gorilla must consume",
            "symbol": "MinPotassium",
            "value": 150,
            "shape": [],
            "code": "MinPotassium = data[\"MinPotassium\"] # scalar parameter"
        },
        {
            "definition": "Maximum percentage of mangoes in the gorilla's diet",
            "symbol": "MaxMangoPercentage",
            "value": 0.33,
            "shape": [],
            "code": "MaxMangoPercentage = data[\"MaxMangoPercentage\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of bananas in the gorilla's diet must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{NumberOfBananas} \\\\geq 0",
            "related_variables": [
                "NumberOfBananas"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for NumberOfBananas\nmodel.addConstr(NumberOfBananas >= 0, name=\"nonnegativity_constraint_NumberOfBananas\")"
        },
        {
            "description": "The number of mangoes included in the gorilla's diet must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfMangoes} \\geq 0",
            "related_variables": [
                "NumberOfMangoes"
            ],
            "related_parameters": [],
            "code": "# Constraint to ensure the number of mangoes in the gorilla's diet is non-negative\nmodel.addConstr(NumberOfMangoes >= 0, name=\"non_negative_mangoes\")"
        },
        {
            "description": "The gorilla must consume at least the minimum required calories.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBananas} \\times \\textup{BananaCalories} + \\textup{NumberOfMangoes} \\times \\textup{MangoCalories} \\geq \\textup{MinCalories}",
            "related_variables": [
                "NumberOfBananas",
                "NumberOfMangoes"
            ],
            "related_parameters": [
                "BananaCalories",
                "MangoCalories",
                "MinCalories"
            ],
            "code": "# Add calorie intake constraint for the gorilla\nmodel.addConstr(NumberOfBananas * BananaCalories + NumberOfMangoes * MangoCalories >= MinCalories, name=\"calorie_intake_constraint\")"
        },
        {
            "description": "The gorilla must consume at least MinPotassium grams of potassium from bananas and mangoes combined.",
            "status": "coded",
            "formulation": "\\\\textup{NumberOfBananas} \\\\times \\\\textup{BananaPotassium} + \\\\textup{NumberOfMangoes} \\\\times \\\\textup{MangoPotassium} \\\\geq \\\\textup{MinPotassium}",
            "related_variables": [
                "NumberOfBananas",
                "NumberOfMangoes"
            ],
            "related_parameters": [
                "BananaPotassium",
                "MangoPotassium",
                "MinPotassium"
            ],
            "code": "# Add potassium intake constraint\nmodel.addConstr(NumberOfBananas * BananaPotassium + NumberOfMangoes * MangoPotassium >= MinPotassium, name=\"potassium_intake\")"
        },
        {
            "description": "At most MaxMangoPercentage of the fruit can be mangoes.",
            "status": "coded",
            "formulation": "(1 - \\textup{MaxMangoPercentage}) \\times \\textup{NumberOfMangoes} \\leq \\textup{MaxMangoPercentage} \\times \\textup{NumberOfBananas}",
            "related_variables": [
                "NumberOfBananas",
                "NumberOfMangoes"
            ],
            "related_parameters": [
                "MaxMangoPercentage"
            ],
            "code": "# Add constraint to enforce that at most MaxMangoPercentage of the fruit can be mangoes\nmodel.addConstr((1 - MaxMangoPercentage) * NumberOfMangoes <= MaxMangoPercentage * NumberOfBananas, name=\"mango_percentage_limit\")"
        },
        {
            "description": "Ensure the diet meets the minimum calorie requirement.",
            "status": "coded",
            "formulation": "\\textup{BananaCalories} \\cdot \\textup{NumberOfBananas} + \\textup{MangoCalories} \\cdot \\textup{NumberOfMangoes} \\geq \\textup{MinCalories}",
            "related_variables": [
                "NumberOfBananas",
                "NumberOfMangoes"
            ],
            "related_parameters": [
                "BananaCalories",
                "MangoCalories",
                "MinCalories"
            ],
            "code": "# Add calorie requirement constraint\nmodel.addConstr(\n    BananaCalories * NumberOfBananas + MangoCalories * NumberOfMangoes >= MinCalories,\n    name=\"min_calorie_requirement\"\n)"
        },
        {
            "description": "Ensure the diet meets the minimum potassium requirement.",
            "status": "coded",
            "formulation": "\\textup{BananaPotassium} \\cdot \\textup{NumberOfBananas} + \\textup{MangoPotassium} \\cdot \\textup{NumberOfMangoes} \\geq \\textup{MinPotassium}",
            "related_variables": [
                "NumberOfBananas",
                "NumberOfMangoes"
            ],
            "related_parameters": [
                "BananaPotassium",
                "MangoPotassium",
                "MinPotassium"
            ],
            "code": "# Add potassium requirement constraint\nmodel.addConstr(\n    BananaPotassium * NumberOfBananas + MangoPotassium * NumberOfMangoes >= MinPotassium,\n    name=\"min_potassium_requirement\"\n)"
        },
        {
            "description": "Ensure the mangoes do not exceed the maximum percentage of the gorilla's diet.",
            "status": "coded",
            "formulation": "\\textup{NumberOfMangoes} \\leq \\textup{MaxMangoPercentage} \\cdot \\textup{TotalFruits}",
            "related_variables": [
                "NumberOfMangoes",
                "TotalFruits"
            ],
            "related_parameters": [
                "MaxMangoPercentage"
            ],
            "code": "# Add constraint to ensure mangoes do not exceed the maximum percentage of the gorilla's diet\nmodel.addConstr(NumberOfMangoes <= MaxMangoPercentage * TotalFruits, name=\"max_mango_percentage\")"
        },
        {
            "description": "Total fruits must equal the sum of bananas and mangoes.",
            "status": "coded",
            "formulation": "\\textup{TotalFruits} = \\textup{NumberOfBananas} + \\textup{NumberOfMangoes}",
            "related_variables": [
                "TotalFruits",
                "NumberOfBananas",
                "NumberOfMangoes"
            ],
            "related_parameters": [],
            "code": "# Add constraint for total fruits equality\nmodel.addConstr(TotalFruits == NumberOfBananas + NumberOfMangoes, name=\"total_fruits_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The total number of bananas included in the gorilla's diet.",
            "symbol": "NumberOfBananas",
            "shape": [],
            "status": "coded",
            "code": "NumberOfBananas = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfBananas\")"
        },
        {
            "definition": "The total number of mangoes included in the gorilla's diet.",
            "symbol": "NumberOfMangoes",
            "shape": [],
            "status": "coded",
            "code": "NumberOfMangoes = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfMangoes\")"
        },
        {
            "definition": "The total number of fruits included in the gorilla's diet.",
            "symbol": "TotalFruits",
            "shape": [],
            "status": "coded",
            "code": "TotalFruits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalFruits\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the gorilla's total sugar intake from bananas and mangoes.",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{BananaSugar} \\cdot \\textup{NumberOfBananas} + \\textup{MangoSugar} \\cdot \\textup{NumberOfMangoes}",
            "related_variables": [
                "NumberOfBananas",
                "NumberOfMangoes"
            ],
            "related_parameters": [
                "BananaSugar",
                "MangoSugar"
            ],
            "code": "# Set objective\nmodel.setObjective(BananaSugar * NumberOfBananas + MangoSugar * NumberOfMangoes, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413155253_nl4opt_prob_131/",
    "problem_path": "data/nl4opt/prob_131/"
}