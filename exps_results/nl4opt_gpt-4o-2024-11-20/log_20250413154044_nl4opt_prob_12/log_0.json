{
    "background": "A breakfast joint makes two different sandwiches: a regular and a special. Both need eggs and bacon.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of eggs required for a regular sandwich",
            "symbol": "EggsReg",
            "value": 2,
            "shape": [],
            "code": "EggsReg = data[\"EggsReg\"] # scalar parameter"
        },
        {
            "definition": "Number of eggs required for a special sandwich",
            "symbol": "EggsSpec",
            "value": 3,
            "shape": [],
            "code": "EggsSpec = data[\"EggsSpec\"] # scalar parameter"
        },
        {
            "definition": "Number of slices of bacon required for a regular sandwich",
            "symbol": "BaconReg",
            "value": 3,
            "shape": [],
            "code": "BaconReg = data[\"BaconReg\"] # scalar parameter"
        },
        {
            "definition": "Number of slices of bacon required for a special sandwich",
            "symbol": "BaconSpec",
            "value": 5,
            "shape": [],
            "code": "BaconSpec = data[\"BaconSpec\"] # scalar parameter"
        },
        {
            "definition": "Total number of eggs available",
            "symbol": "TotalEggs",
            "value": 40,
            "shape": [],
            "code": "TotalEggs = data[\"TotalEggs\"] # scalar parameter"
        },
        {
            "definition": "Total number of slices of bacon available",
            "symbol": "TotalBacon",
            "value": 70,
            "shape": [],
            "code": "TotalBacon = data[\"TotalBacon\"] # scalar parameter"
        },
        {
            "definition": "Profit from selling a regular sandwich",
            "symbol": "ProfitReg",
            "value": 3,
            "shape": [],
            "code": "ProfitReg = data[\"ProfitReg\"] # scalar parameter"
        },
        {
            "definition": "Profit from selling a special sandwich",
            "symbol": "ProfitSpec",
            "value": 4,
            "shape": [],
            "code": "ProfitSpec = data[\"ProfitSpec\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of regular sandwiches must be an integer.",
            "status": "formulated",
            "formulation": "\\textup{RegularSandwiches} \\in \\mathbb{Z}",
            "related_variables": [
                "RegularSandwiches"
            ],
            "related_parameters": []
        },
        {
            "description": "The number of special sandwiches is an integer variable.",
            "status": "formulated",
            "formulation": "\\textup{SpecialSandwiches} \\in \\mathbb{Z}",
            "related_variables": [
                "SpecialSandwiches"
            ],
            "related_parameters": []
        },
        {
            "description": "The number of regular sandwiches produced must be non-negative.",
            "status": "formulated",
            "formulation": "\\\\textup{RegularSandwiches} \\\\geq 0",
            "related_variables": [
                "RegularSandwiches"
            ],
            "related_parameters": []
        },
        {
            "description": "The number of special sandwiches must be non-negative",
            "status": "formulated",
            "formulation": "\\textup{SpecialSandwiches} \\geq 0",
            "related_variables": [
                "SpecialSandwiches"
            ],
            "related_parameters": []
        },
        {
            "description": "The total eggs used for making regular sandwiches and special sandwiches cannot exceed the total number of available eggs.",
            "status": "formulated",
            "formulation": "\\\\textup{EggsReg} \\\\cdot \\\\textup{RegularSandwiches} + \\\\textup{EggsSpec} \\\\cdot \\\\textup{SpecialSandwiches} \\\\leq \\\\textup{TotalEggs}",
            "related_variables": [
                "RegularSandwiches",
                "SpecialSandwiches"
            ],
            "related_parameters": [
                "EggsReg",
                "EggsSpec",
                "TotalEggs"
            ]
        },
        {
            "description": "The total bacon used for regular and special sandwiches cannot exceed the available TotalBacon.",
            "status": "formulated",
            "formulation": "\\\\textup{BaconReg} \\\\cdot \\\\textup{RegularSandwiches} + \\\\textup{BaconSpec} \\\\cdot \\\\textup{SpecialSandwiches} \\\\leq \\\\textup{TotalBacon}",
            "related_variables": [
                "RegularSandwiches",
                "SpecialSandwiches"
            ],
            "related_parameters": [
                "BaconReg",
                "BaconSpec",
                "TotalBacon"
            ]
        },
        {
            "description": "Eggs availability constraint",
            "status": "formulated",
            "formulation": "\\textup{EggsReg} \\cdot \\textup{RegularSandwiches} + \\textup{EggsSpec} \\cdot \\textup{SpecialSandwiches} \\leq \\textup{TotalEggs}",
            "related_variables": [
                "RegularSandwiches",
                "SpecialSandwiches"
            ],
            "related_parameters": [
                "EggsReg",
                "EggsSpec",
                "TotalEggs"
            ]
        },
        {
            "description": "Bacon availability constraint",
            "status": "formulated",
            "formulation": "\\textup{BaconReg} \\cdot \\textup{RegularSandwiches} + \\textup{BaconSpec} \\cdot \\textup{SpecialSandwiches} \\leq \\textup{TotalBacon}",
            "related_variables": [
                "RegularSandwiches",
                "SpecialSandwiches"
            ],
            "related_parameters": [
                "BaconReg",
                "BaconSpec",
                "TotalBacon"
            ]
        },
        {
            "description": "Non-negativity constraint for RegularSandwiches",
            "status": "formulated",
            "formulation": "\\textup{RegularSandwiches} \\geq 0",
            "related_variables": [
                "RegularSandwiches"
            ],
            "related_parameters": []
        },
        {
            "description": "Non-negativity constraint for SpecialSandwiches",
            "status": "formulated",
            "formulation": "\\textup{SpecialSandwiches} \\geq 0",
            "related_variables": [
                "SpecialSandwiches"
            ],
            "related_parameters": []
        }
    ],
    "variables": [
        {
            "definition": "The number of regular sandwiches produced",
            "symbol": "RegularSandwiches",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The number of special sandwiches produced",
            "symbol": "SpecialSandwiches",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Maximize the profit from selling regular and special sandwiches",
            "status": "formulated",
            "formulation": "\\textup{Maximize} \\quad \\textup{ProfitReg} \\cdot \\textup{RegularSandwiches} + \\textup{ProfitSpec} \\cdot \\textup{SpecialSandwiches}",
            "related_variables": [
                "RegularSandwiches",
                "SpecialSandwiches"
            ],
            "related_parameters": [
                "ProfitReg",
                "ProfitSpec"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413154044_nl4opt_prob_12/",
    "problem_path": "data/nl4opt/prob_12/"
}