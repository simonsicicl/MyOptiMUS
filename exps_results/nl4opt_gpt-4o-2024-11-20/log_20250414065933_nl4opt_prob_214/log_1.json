{
    "background": "A woman has a budget for gambling on three different sports events and seeks to maximize her average payout while limiting her average chance of losing to a certain threshold.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total budget available to gamble",
            "symbol": "B",
            "value": 100000,
            "shape": [],
            "code": "B = data[\"B\"] # scalar parameter"
        },
        {
            "definition": "Probability of losing money on the basketball bet",
            "symbol": "Pbasketball",
            "value": 0.5,
            "shape": [],
            "code": "Pbasketball = data[\"Pbasketball\"] # scalar parameter"
        },
        {
            "definition": "Probability of losing money on the horse race bet",
            "symbol": "Phorse",
            "value": 0.25,
            "shape": [],
            "code": "Phorse = data[\"Phorse\"] # scalar parameter"
        },
        {
            "definition": "Probability of losing money on the soccer bet",
            "symbol": "Psoccer",
            "value": 0.1,
            "shape": [],
            "code": "Psoccer = data[\"Psoccer\"] # scalar parameter"
        },
        {
            "definition": "Payout for each dollar bet on the basketball tournament",
            "symbol": "Rbasketball",
            "value": 1.2,
            "shape": [],
            "code": "Rbasketball = data[\"Rbasketball\"] # scalar parameter"
        },
        {
            "definition": "Payout for each dollar bet on the horse race",
            "symbol": "Rhorse",
            "value": 0.5,
            "shape": [],
            "code": "Rhorse = data[\"Rhorse\"] # scalar parameter"
        },
        {
            "definition": "Payout for each dollar bet on the soccer game",
            "symbol": "Rsoccer",
            "value": 0.1,
            "shape": [],
            "code": "Rsoccer = data[\"Rsoccer\"] # scalar parameter"
        },
        {
            "definition": "Maximum average probability of losing money",
            "symbol": "Pmax",
            "value": 0.3,
            "shape": [],
            "code": "Pmax = data[\"Pmax\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The total amount of money spent on basketball, horse racing, and soccer bets should not exceed the total available budget (B).",
            "status": "coded",
            "formulation": "\\\\textup{MoneyBasketball} + \\\\textup{MoneyHorse} + \\\\textup{MoneySoccer} \\\\leq \\\\textup{B}",
            "related_variables": [
                "MoneyBasketball",
                "MoneyHorse",
                "MoneySoccer"
            ],
            "related_parameters": [
                "B"
            ],
            "code": "# Add budget constraint\nmodel.addConstr(MoneyBasketball + MoneyHorse + MoneySoccer <= B, name=\"budget_constraint\")"
        },
        {
            "description": "Money spent on basketball bet must be non-negative",
            "status": "coded",
            "formulation": "\\textup{MoneyBasketball} \\geq 0",
            "related_variables": [
                "MoneyBasketball"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for MoneyBasketball\nmodel.addConstr(MoneyBasketball >= 0, name=\"non_negative_MoneyBasketball\")"
        },
        {
            "description": "The amount of money spent on horse racing bets must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{MoneyHorse} \\geq 0",
            "related_variables": [
                "MoneyHorse"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for MoneyHorse\nmodel.addConstr(MoneyHorse >= 0, name=\"non_negativity_MoneyHorse\")"
        },
        {
            "description": "The amount of money spent on soccer bets must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{MoneySoccer} \\geq 0",
            "related_variables": [
                "MoneySoccer"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for MoneySoccer\nmodel.addConstr(MoneySoccer >= 0, name=\"non_negativity_MoneySoccer\")"
        },
        {
            "description": "The average probability of losing money across all bets should not exceed \\textup{Pmax}.",
            "status": "coded",
            "formulation": "P_{\\textup{basketball}} \\cdot \\frac{\\textup{MoneyBasketball}}{\\textup{B}} + P_{\\textup{horse}} \\cdot \\frac{\\textup{MoneyHorse}}{\\textup{B}} + P_{\\textup{soccer}} \\cdot \\frac{\\textup{MoneySoccer}}{\\textup{B}} \\leq \\textup{Pmax}",
            "related_variables": [
                "MoneyBasketball",
                "MoneyHorse",
                "MoneySoccer"
            ],
            "related_parameters": [
                "Pbasketball",
                "Phorse",
                "Psoccer",
                "Pmax",
                "B"
            ],
            "code": "# Add constraint for maximum average probability of losing money\nmodel.addConstr(\n    (Pbasketball * MoneyBasketball / B) + \n    (Phorse * MoneyHorse / B) + \n    (Psoccer * MoneySoccer / B) <= Pmax, \n    name=\"max_avg_losing_probability\"\n)"
        },
        {
            "description": "Spending across all sports should not exceed the given budget",
            "status": "coded",
            "formulation": "\\textup{MoneyBasketball} + \\textup{MoneyHorse} + \\textup{MoneySoccer} \\leq \\textup{B}",
            "related_variables": [
                "MoneyBasketball",
                "MoneyHorse",
                "MoneySoccer"
            ],
            "related_parameters": [
                "B"
            ],
            "code": "# Add budget constraint\nmodel.addConstr(MoneyBasketball + MoneyHorse + MoneySoccer <= B, name=\"budget_constraint\")"
        },
        {
            "description": "Weighted average probability of losing should not exceed the maximum allowable probability",
            "status": "coded",
            "formulation": "\\textup{Pbasketball} \\cdot \\textup{MoneyBasketball} + \\textup{Phorse} \\cdot \\textup{MoneyHorse} + \\textup{Psoccer} \\cdot \\textup{MoneySoccer} \\leq \\textup{TotalMoneySpent} \\cdot \\textup{Pmax}",
            "related_variables": [
                "MoneyBasketball",
                "MoneyHorse",
                "MoneySoccer",
                "TotalMoneySpent"
            ],
            "related_parameters": [
                "Pbasketball",
                "Phorse",
                "Psoccer",
                "Pmax"
            ],
            "code": "# Add weighted average probability of losing constraint\nmodel.addConstr(\n    Pbasketball * MoneyBasketball + Phorse * MoneyHorse + Psoccer * MoneySoccer <= TotalMoneySpent * Pmax,\n    name=\"weighted_average_probability\"\n)"
        },
        {
            "description": "Total money spent is the sum of money spent on basketball, horse racing, and soccer",
            "status": "coded",
            "formulation": "\\textup{TotalMoneySpent} = \\textup{MoneyBasketball} + \\textup{MoneyHorse} + \\textup{MoneySoccer}",
            "related_variables": [
                "MoneyBasketball",
                "MoneyHorse",
                "MoneySoccer",
                "TotalMoneySpent"
            ],
            "related_parameters": [],
            "code": "# Add constraint ensuring total money spent is the sum of money spent on basketball, horse racing, and soccer\nmodel.addConstr(TotalMoneySpent == MoneyBasketball + MoneyHorse + MoneySoccer, name=\"total_money_spent\")"
        }
    ],
    "variables": [
        {
            "definition": "Amount of money spent on basketball bets",
            "symbol": "MoneyBasketball",
            "shape": [],
            "status": "coded",
            "code": "MoneyBasketball = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"MoneyBasketball\")"
        },
        {
            "definition": "Amount of money spent on horse racing bets",
            "symbol": "MoneyHorse",
            "shape": [],
            "status": "coded",
            "code": "MoneyHorse = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"MoneyHorse\")"
        },
        {
            "definition": "Amount of money spent on soccer bets",
            "symbol": "MoneySoccer",
            "shape": [],
            "status": "coded",
            "code": "MoneySoccer = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"MoneySoccer\")"
        },
        {
            "definition": "The total amount of money allocated across all sports",
            "symbol": "TotalMoneySpent",
            "shape": [],
            "status": "coded",
            "code": "TotalMoneySpent = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalMoneySpent\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the woman's average payout from betting on basketball, horse racing, and soccer",
            "status": "coded",
            "formulation": "\\textup{Maximize Average Payout} = \\frac{\\textup{MoneyBasketball} \\cdot \\textup{Rbasketball} + \\textup{MoneyHorse} \\cdot \\textup{Rhorse} + \\textup{MoneySoccer} \\cdot \\textup{Rsoccer}}{3}",
            "related_variables": [
                "MoneyBasketball",
                "MoneyHorse",
                "MoneySoccer"
            ],
            "related_parameters": [
                "Rbasketball",
                "Rhorse",
                "Rsoccer"
            ],
            "code": "# Set objective\nmodel.setObjective((MoneyBasketball * Rbasketball + MoneyHorse * Rhorse + MoneySoccer * Rsoccer) / 3, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250414065933_nl4opt_prob_214/",
    "problem_path": "data/nl4opt/prob_214/"
}