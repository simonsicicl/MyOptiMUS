{
    "background": "A farmer needs to transport boxes of corn to the mainland using two transportation methods: ferry and light rail. Each method has a different capacity and there is a requirement for the minimum ratio of rail trips to ferry trips.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Maximum number of boxes of corn per ferry trip",
            "symbol": "FerryCapacity",
            "value": 20,
            "shape": [],
            "code": "FerryCapacity = data[\"FerryCapacity\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of boxes of corn per light rail trip",
            "symbol": "RailCapacity",
            "value": 15,
            "shape": [],
            "code": "RailCapacity = data[\"RailCapacity\"] # scalar parameter"
        },
        {
            "definition": "Minimum ratio of light rail trips to ferry trips",
            "symbol": "MinRailToFerryRatio",
            "value": 4,
            "shape": [],
            "code": "MinRailToFerryRatio = data[\"MinRailToFerryRatio\"] # scalar parameter"
        },
        {
            "definition": "Minimum total number of boxes of corn to send",
            "symbol": "MinCornBoxes",
            "value": 500,
            "shape": [],
            "code": "MinCornBoxes = data[\"MinCornBoxes\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The farmer decides the number of ferry and rail trips. The trips must satisfy the non-negative condition, maintain the minimum ratio of 4 rail trips per ferry trip, and transport at least 500 boxes of corn.",
            "status": "coded",
            "formulation": "\\textup{FerryTrips} \\geq 0 \\\\ \\textup{RailTrips} \\geq 0 \\\\ \\textup{RailTrips} \\geq \\textup{MinRailToFerryRatio} \\cdot \\textup{FerryTrips} \\\\ \\textup{FerryTrips} \\cdot \\textup{FerryCapacity} + \\textup{RailTrips} \\cdot \\textup{RailCapacity} \\geq \\textup{MinCornBoxes}",
            "related_variables": [
                "FerryTrips",
                "RailTrips"
            ],
            "related_parameters": [
                "FerryCapacity",
                "RailCapacity",
                "MinRailToFerryRatio",
                "MinCornBoxes"
            ],
            "code": "# Add constraints related to ferry and rail trips\n\n# Non-negativity constraints\nmodel.addConstr(FerryTrips >= 0, name=\"NonNegativity_FerryTrips\")\nmodel.addConstr(RailTrips >= 0, name=\"NonNegativity_RailTrips\")\n\n# Minimum ratio of rail trips to ferry trips\nmodel.addConstr(RailTrips >= MinRailToFerryRatio * FerryTrips, name=\"RailToFerryRatio\")\n\n# Minimum boxes of corn to transport\nmodel.addConstr(FerryTrips * FerryCapacity + RailTrips * RailCapacity >= MinCornBoxes, name=\"MinCornBoxes\")"
        },
        {
            "description": "The number of light rail trips is non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{RailTrips} \\geq 0",
            "related_variables": [
                "RailTrips"
            ],
            "related_parameters": [],
            "code": "# The variable RailTrips is already coded as a continuous variable. No additional code is needed for non-negativity since Gurobi variables are non-negative by default unless specified otherwise."
        },
        {
            "description": "The total number of boxes transported by ferry trips is bounded by the ferry capacity multiplied by the number of ferry trips.",
            "status": "coded",
            "formulation": "\\\\textup{CornBoxesFerry} \\\\leq \\\\textup{FerryTrips} \\\\times \\\\textup{FerryCapacity}",
            "related_variables": [
                "CornBoxesFerry",
                "FerryTrips"
            ],
            "related_parameters": [
                "FerryCapacity"
            ],
            "code": "# Add constraint to ensure total number of boxes transported by ferry is bounded by ferry capacity multiplied by trips\nmodel.addConstr(CornBoxesFerry <= FerryTrips * FerryCapacity, name=\"ferry_capacity_constraint\")"
        },
        {
            "description": "Number of boxes per light rail trip is bounded by RailCapacity",
            "status": "coded",
            "formulation": "\\\\textup{CornBoxesRail} \\\\leq \\\\textup{RailTrips} \\\\times \\\\textup{RailCapacity}",
            "related_variables": [
                "CornBoxesRail",
                "RailTrips"
            ],
            "related_parameters": [
                "RailCapacity"
            ],
            "code": "# Add constraint to ensure the number of boxes transported by rail is bounded by the total rail capacity\nmodel.addConstr(CornBoxesRail <= RailTrips * RailCapacity, name=\"rail_capacity_constraint\")"
        },
        {
            "description": "The number of light rail trips must be at least MinRailToFerryRatio times the number of ferry trips.",
            "status": "coded",
            "formulation": "\\textup{RailTrips} \\geq \\textup{MinRailToFerryRatio} \\cdot \\textup{FerryTrips}",
            "related_variables": [
                "RailTrips",
                "FerryTrips"
            ],
            "related_parameters": [
                "MinRailToFerryRatio"
            ],
            "code": "# Add constraint to ensure the number of rail trips is at least the ratio times the ferry trips\nmodel.addConstr(RailTrips >= MinRailToFerryRatio * FerryTrips, name=\"rail_to_ferry_ratio\")"
        },
        {
            "description": "At least MinCornBoxes boxes of corn must be sent using ferry and rail.",
            "status": "coded",
            "formulation": "(\\textup{FerryTrips} \\times \\textup{FerryCapacity}) + (\\textup{RailTrips} \\times \\textup{RailCapacity}) \\geq \\textup{MinCornBoxes}",
            "related_variables": [
                "FerryTrips",
                "RailTrips"
            ],
            "related_parameters": [
                "FerryCapacity",
                "RailCapacity",
                "MinCornBoxes"
            ],
            "code": "# Adding the constraint for minimum total boxes of corn being delivered\nmodel.addConstr(\n    (FerryTrips * FerryCapacity) + (RailTrips * RailCapacity) >= MinCornBoxes, \n    name=\"min_corn_boxes_constraint\"\n)"
        },
        {
            "description": "The minimum ratio of light rail trips to ferry trips is maintained.",
            "status": "coded",
            "formulation": "\\\\textup{RailTrips} \\geq \\\\textup{MinRailToFerryRatio} \\times \\\\textup{FerryTrips}",
            "related_variables": [
                "RailTrips",
                "FerryTrips"
            ],
            "related_parameters": [
                "MinRailToFerryRatio"
            ],
            "code": "# Add constraint to enforce the minimum ratio of rail trips to ferry trips\nmodel.addConstr(RailTrips >= MinRailToFerryRatio * FerryTrips, name=\"min_ratio_rail_to_ferry\")"
        },
        {
            "description": "The minimum total number of boxes of corn is transported.",
            "status": "coded",
            "formulation": "\\\\textup{FerryCapacity} \\times \\\\textup{FerryTrips} + \\\\textup{RailCapacity} \\times \\\\textup{RailTrips} \\geq \\\\textup{MinCornBoxes}",
            "related_variables": [
                "FerryTrips",
                "RailTrips"
            ],
            "related_parameters": [
                "FerryCapacity",
                "RailCapacity",
                "MinCornBoxes"
            ],
            "code": "# Add the constraint for minimum total number of boxes of corn transported\nmodel.addConstr(FerryCapacity * FerryTrips + RailCapacity * RailTrips >= MinCornBoxes, name=\"min_corn_boxes_constraint\")"
        },
        {
            "description": "The number of ferry trips is non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{FerryTrips} \\geq 0",
            "related_variables": [
                "FerryTrips"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for FerryTrips\nmodel.addConstr(FerryTrips >= 0, name=\"non_negativity_FerryTrips\")"
        },
        {
            "description": "Relating the new variable CornBoxesFerry with the number of boxes transported by ferry trips.",
            "status": "coded",
            "formulation": "\\\\textup{CornBoxesFerry} = \\\\textup{FerryTrips} \\\\times \\\\textup{FerryCapacity}",
            "related_variables": [
                "CornBoxesFerry",
                "FerryTrips"
            ],
            "related_parameters": [
                "FerryCapacity"
            ],
            "code": "# Add constraint relating CornBoxesFerry with FerryTrips and FerryCapacity\nmodel.addConstr(CornBoxesFerry == FerryTrips * FerryCapacity, name=\"corn_boxes_ferry_constraint\")"
        },
        {
            "description": "Ensures that the rail trips are at least the minimum ratio of ferry trips specified by MinRailToFerryRatio.",
            "status": "coded",
            "formulation": "\\textup{RailTrips} \\geq \\textup{MinRailToFerryRatio} \\times \\textup{FerryTrips}",
            "related_variables": [
                "FerryTrips",
                "RailTrips"
            ],
            "related_parameters": [
                "MinRailToFerryRatio"
            ],
            "code": "# Add constraint to ensure rail trips are at least the minimum ratio of ferry trips\nmodel.addConstr(RailTrips >= MinRailToFerryRatio * FerryTrips, name=\"min_rail_to_ferry_ratio\")"
        },
        {
            "description": "Ensure the total number of boxes of corn transported meets or exceeds the requirement.",
            "status": "coded",
            "formulation": "\\textup{FerryTrips} \\cdot \\textup{FerryCapacity} + \\textup{RailTrips} \\cdot \\textup{RailCapacity} \\geq \\textup{MinCornBoxes}",
            "related_variables": [
                "FerryTrips",
                "RailTrips"
            ],
            "related_parameters": [
                "FerryCapacity",
                "RailCapacity",
                "MinCornBoxes"
            ],
            "code": "# Add constraint to ensure the total number of boxes of corn transported meets or exceeds the requirement\nmodel.addConstr(FerryTrips * FerryCapacity + RailTrips * RailCapacity >= MinCornBoxes, name=\"corn_transport_requirement\")"
        },
        {
            "description": "Enforce the minimum ratio of light rail trips to ferry trips.",
            "status": "coded",
            "formulation": "\\textup{RailTrips} \\geq \\textup{MinRailToFerryRatio} \\cdot \\textup{FerryTrips}",
            "related_variables": [
                "FerryTrips",
                "RailTrips"
            ],
            "related_parameters": [
                "MinRailToFerryRatio"
            ],
            "code": "# Enforce the minimum ratio of light rail trips to ferry trips\nmodel.addConstr(RailTrips >= MinRailToFerryRatio * FerryTrips, name=\"min_rail_to_ferry_ratio\")"
        },
        {
            "description": "Ensure non-negativity of ferry and rail trip variables.",
            "status": "coded",
            "formulation": "\\textup{FerryTrips} \\geq 0, \\quad \\textup{RailTrips} \\geq 0",
            "related_variables": [
                "FerryTrips",
                "RailTrips"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraints for FerryTrips and RailTrips\nmodel.addConstr(FerryTrips >= 0, name=\"non_negativity_FerryTrips\")\nmodel.addConstr(RailTrips >= 0, name=\"non_negativity_RailTrips\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of ferry trips required by the farmer",
            "symbol": "FerryTrips",
            "shape": [],
            "status": "coded",
            "code": "FerryTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"FerryTrips\")"
        },
        {
            "definition": "Number of rail trips required by the farmer",
            "symbol": "RailTrips",
            "shape": [],
            "status": "coded",
            "code": "RailTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"RailTrips\")"
        },
        {
            "definition": "The total number of corn boxes transported using ferry trips.",
            "symbol": "CornBoxesFerry",
            "shape": [],
            "status": "coded",
            "code": "CornBoxesFerry = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"CornBoxesFerry\")"
        },
        {
            "definition": "The total number of corn boxes transported using light rail trips.",
            "symbol": "CornBoxesRail",
            "shape": [],
            "status": "coded",
            "code": "CornBoxesRail = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"CornBoxesRail\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of ferry and light rail trips required to transport the corn.",
            "status": "coded",
            "formulation": "\\min \\quad \\textup{FerryTrips} + \\textup{RailTrips}",
            "related_variables": [
                "FerryTrips",
                "RailTrips"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(FerryTrips + RailTrips, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 31.25,
    "log_path": "logs/log_20250413170346_nl4opt_prob_187/",
    "problem_path": "data/nl4opt/prob_187/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_187/data.json\", \"r\") as f:\n    data = json.load(f)\n\nFerryCapacity = data[\"FerryCapacity\"] # scalar parameter\nRailCapacity = data[\"RailCapacity\"] # scalar parameter\nMinRailToFerryRatio = data[\"MinRailToFerryRatio\"] # scalar parameter\nMinCornBoxes = data[\"MinCornBoxes\"] # scalar parameter\nFerryTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"FerryTrips\")\nRailTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"RailTrips\")\nCornBoxesFerry = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"CornBoxesFerry\")\nCornBoxesRail = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"CornBoxesRail\")\n\n# Add constraints related to ferry and rail trips\n\n# Non-negativity constraints\nmodel.addConstr(FerryTrips >= 0, name=\"NonNegativity_FerryTrips\")\nmodel.addConstr(RailTrips >= 0, name=\"NonNegativity_RailTrips\")\n\n# Minimum ratio of rail trips to ferry trips\nmodel.addConstr(RailTrips >= MinRailToFerryRatio * FerryTrips, name=\"RailToFerryRatio\")\n\n# Minimum boxes of corn to transport\nmodel.addConstr(FerryTrips * FerryCapacity + RailTrips * RailCapacity >= MinCornBoxes, name=\"MinCornBoxes\")\n\n# The variable RailTrips is already coded as a continuous variable. No additional code is needed for non-negativity since Gurobi variables are non-negative by default unless specified otherwise.\n\n# Add constraint to ensure total number of boxes transported by ferry is bounded by ferry capacity multiplied by trips\nmodel.addConstr(CornBoxesFerry <= FerryTrips * FerryCapacity, name=\"ferry_capacity_constraint\")\n\n# Add constraint to ensure the number of boxes transported by rail is bounded by the total rail capacity\nmodel.addConstr(CornBoxesRail <= RailTrips * RailCapacity, name=\"rail_capacity_constraint\")\n\n# Add constraint to ensure the number of rail trips is at least the ratio times the ferry trips\nmodel.addConstr(RailTrips >= MinRailToFerryRatio * FerryTrips, name=\"rail_to_ferry_ratio\")\n\n# Adding the constraint for minimum total boxes of corn being delivered\nmodel.addConstr(\n    (FerryTrips * FerryCapacity) + (RailTrips * RailCapacity) >= MinCornBoxes, \n    name=\"min_corn_boxes_constraint\"\n)\n\n# Add constraint to enforce the minimum ratio of rail trips to ferry trips\nmodel.addConstr(RailTrips >= MinRailToFerryRatio * FerryTrips, name=\"min_ratio_rail_to_ferry\")\n\n# Add the constraint for minimum total number of boxes of corn transported\nmodel.addConstr(FerryCapacity * FerryTrips + RailCapacity * RailTrips >= MinCornBoxes, name=\"min_corn_boxes_constraint\")\n\n# Non-negativity constraint for FerryTrips\nmodel.addConstr(FerryTrips >= 0, name=\"non_negativity_FerryTrips\")\n\n# Add constraint relating CornBoxesFerry with FerryTrips and FerryCapacity\nmodel.addConstr(CornBoxesFerry == FerryTrips * FerryCapacity, name=\"corn_boxes_ferry_constraint\")\n\n# Add constraint to ensure rail trips are at least the minimum ratio of ferry trips\nmodel.addConstr(RailTrips >= MinRailToFerryRatio * FerryTrips, name=\"min_rail_to_ferry_ratio\")\n\n# Add constraint to ensure the total number of boxes of corn transported meets or exceeds the requirement\nmodel.addConstr(FerryTrips * FerryCapacity + RailTrips * RailCapacity >= MinCornBoxes, name=\"corn_transport_requirement\")\n\n# Enforce the minimum ratio of light rail trips to ferry trips\nmodel.addConstr(RailTrips >= MinRailToFerryRatio * FerryTrips, name=\"min_rail_to_ferry_ratio\")\n\n# Non-negativity constraints for FerryTrips and RailTrips\nmodel.addConstr(FerryTrips >= 0, name=\"non_negativity_FerryTrips\")\nmodel.addConstr(RailTrips >= 0, name=\"non_negativity_RailTrips\")\n\n# Set objective\nmodel.setObjective(FerryTrips + RailTrips, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}