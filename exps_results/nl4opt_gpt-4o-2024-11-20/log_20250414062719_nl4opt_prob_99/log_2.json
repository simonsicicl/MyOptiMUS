{
    "background": "A candy company is producing peach and cherry flavored candies that require different amounts of flavoring and special syrup. There is a limited amount of peach and cherry flavoring available.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of peach flavoring required to produce one pack of peach flavored candy",
            "symbol": "PeachRequirement",
            "value": 3,
            "shape": [],
            "code": "PeachRequirement = data[\"PeachRequirement\"] # scalar parameter"
        },
        {
            "definition": "Units of special syrup required to produce one pack of peach flavored candy",
            "symbol": "PeachSyrup",
            "value": 5,
            "shape": [],
            "code": "PeachSyrup = data[\"PeachSyrup\"] # scalar parameter"
        },
        {
            "definition": "Units of cherry flavoring required to produce one pack of cherry flavored candy",
            "symbol": "CherryRequirement",
            "value": 5,
            "shape": [],
            "code": "CherryRequirement = data[\"CherryRequirement\"] # scalar parameter"
        },
        {
            "definition": "Units of special syrup required to produce one pack of cherry flavored candy",
            "symbol": "CherrySyrup",
            "value": 4,
            "shape": [],
            "code": "CherrySyrup = data[\"CherrySyrup\"] # scalar parameter"
        },
        {
            "definition": "Total available units of peach flavoring",
            "symbol": "TotalPeach",
            "value": 3000,
            "shape": [],
            "code": "TotalPeach = data[\"TotalPeach\"] # scalar parameter"
        },
        {
            "definition": "Total available units of cherry flavoring",
            "symbol": "TotalCherry",
            "value": 4000,
            "shape": [],
            "code": "TotalCherry = data[\"TotalCherry\"] # scalar parameter"
        },
        {
            "definition": "Minimum percentage of the total packs that must be cherry flavored",
            "symbol": "MinimumCherryPercentage",
            "value": 0.33,
            "shape": [],
            "code": "MinimumCherryPercentage = data[\"MinimumCherryPercentage\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of peach-flavored candy packs produced must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{PeachPacks} \\geq 0",
            "related_variables": [
                "PeachPacks"
            ],
            "related_parameters": [],
            "code": "# The non-negativity of PeachPacks is automatically ensured due to its default non-negative domain in Gurobi,\n# so no constraint code is needed."
        },
        {
            "description": "Ensure that the number of cherry-flavored candy packs is non-negative.",
            "status": "coded",
            "formulation": "\\textup{CherryPacks} \\geq 0",
            "related_variables": [
                "CherryPacks"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since the variable \"CherryPacks\" is already defined with non-negativity (default domain for continuous variables in Gurobi)."
        },
        {
            "description": "Total peach flavoring used cannot exceed the available total units of peach flavoring.",
            "status": "coded",
            "formulation": "\\textup{PeachPacks} \\\\times \\textup{PeachRequirement} \\\\leq \\textup{TotalPeach}",
            "related_variables": [
                "PeachPacks"
            ],
            "related_parameters": [
                "PeachRequirement",
                "TotalPeach"
            ],
            "code": "# Add constraint ensuring total peach flavoring used does not exceed available total units\nmodel.addConstr(PeachPacks * PeachRequirement <= TotalPeach, name=\"peach_flavoring_limit\")"
        },
        {
            "description": "The total cherry flavoring used in production cannot exceed the available TotalCherry units.",
            "status": "coded",
            "formulation": "\\textup{CherryRequirement} \\cdot \\textup{CherryPacks} \\leq \\textup{TotalCherry}",
            "related_variables": [
                "CherryPacks"
            ],
            "related_parameters": [
                "CherryRequirement",
                "TotalCherry"
            ],
            "code": "# Add constraint to ensure total cherry flavoring used does not exceed available TotalCherry\nmodel.addConstr(CherryRequirement * CherryPacks <= TotalCherry, name=\"cherry_flavoring_limit\")"
        },
        {
            "description": "The number of peach candy packs must be greater than the number of cherry candy packs.",
            "status": "coded",
            "formulation": "\\textup{PeachPacks} \\geq \\textup{CherryPacks} + 1",
            "related_variables": [
                "PeachPacks",
                "CherryPacks"
            ],
            "related_parameters": [],
            "code": "# Add constraint: The number of peach candy packs must be greater than the number of cherry candy packs\nmodel.addConstr(PeachPacks >= CherryPacks + 1, name=\"PeachVsCherry\")"
        },
        {
            "description": "The number of cherry-flavored packs must be at least MinimumCherryPercentage of the total packs produced.",
            "status": "coded",
            "formulation": "\\textup{CherryPacks} - \\textup{MinimumCherryPercentage} \\cdot \\textup{PeachPacks} \\geq 0",
            "related_variables": [
                "CherryPacks",
                "PeachPacks"
            ],
            "related_parameters": [
                "MinimumCherryPercentage"
            ],
            "code": "# Add constraint ensuring minimum cherry percentage\nmodel.addConstr(CherryPacks - MinimumCherryPercentage * (CherryPacks + PeachPacks) >= 0, name=\"min_cherry_percentage\")"
        },
        {
            "description": "Total peach flavoring used should not exceed the available amount of peach flavoring.",
            "status": "coded",
            "formulation": "\\textup{PeachRequirement} \\cdot \\textup{PeachPacks} \\leq \\textup{TotalPeach}",
            "related_variables": [
                "PeachPacks"
            ],
            "related_parameters": [
                "PeachRequirement",
                "TotalPeach"
            ],
            "code": "# Add constraint for peach flavoring usage\nmodel.addConstr(PeachRequirement * PeachPacks <= TotalPeach, name=\"peach_flavoring_limit\")"
        },
        {
            "description": "Total cherry flavoring used should not exceed the available amount of cherry flavoring.",
            "status": "coded",
            "formulation": "\\textup{CherryRequirement} \\cdot \\textup{CherryPacks} \\leq \\textup{TotalCherry}",
            "related_variables": [
                "CherryPacks"
            ],
            "related_parameters": [
                "CherryRequirement",
                "TotalCherry"
            ],
            "code": "# Add constraint to ensure total cherry flavoring used does not exceed available amount\nmodel.addConstr(CherryPacks * CherryRequirement <= TotalCherry, name=\"cherry_flavoring_limit\")"
        },
        {
            "description": "Cherry packs must be at least a certain percentage of the total packs produced.",
            "status": "coded",
            "formulation": "\\textup{CherryPacks} \\geq \\textup{MinimumCherryPercentage} \\cdot (\\textup{PeachPacks} + \\textup{CherryPacks})",
            "related_variables": [
                "PeachPacks",
                "CherryPacks"
            ],
            "related_parameters": [
                "MinimumCherryPercentage"
            ],
            "code": "# Add minimum cherry percentage constraint\nmodel.addConstr(CherryPacks >= MinimumCherryPercentage * (PeachPacks + CherryPacks), name=\"min_cherry_percentage\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of peach-flavored candy packs produced.",
            "symbol": "PeachPacks",
            "shape": [],
            "status": "coded",
            "code": "PeachPacks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PeachPacks\")"
        },
        {
            "definition": "The number of cherry-flavored candy packs produced.",
            "symbol": "CherryPacks",
            "shape": [],
            "status": "coded",
            "code": "CherryPacks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"CherryPacks\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total amount of special syrup used in producing peach and cherry flavored candy packs.",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{PeachSyrup} \\cdot \\textup{PeachPacks} + \\textup{CherrySyrup} \\cdot \\textup{CherryPacks}",
            "related_variables": [
                "PeachPacks",
                "CherryPacks"
            ],
            "related_parameters": [
                "PeachSyrup",
                "CherrySyrup"
            ],
            "code": "# Set objective\nmodel.setObjective(PeachSyrup * PeachPacks + CherrySyrup * CherryPacks, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 13.735294117647062,
    "log_path": "logs/log_20250414062719_nl4opt_prob_99/",
    "problem_path": "data/nl4opt/prob_99/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_99/data.json\", \"r\") as f:\n    data = json.load(f)\n\nPeachRequirement = data[\"PeachRequirement\"] # scalar parameter\nPeachSyrup = data[\"PeachSyrup\"] # scalar parameter\nCherryRequirement = data[\"CherryRequirement\"] # scalar parameter\nCherrySyrup = data[\"CherrySyrup\"] # scalar parameter\nTotalPeach = data[\"TotalPeach\"] # scalar parameter\nTotalCherry = data[\"TotalCherry\"] # scalar parameter\nMinimumCherryPercentage = data[\"MinimumCherryPercentage\"] # scalar parameter\nPeachPacks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PeachPacks\")\nCherryPacks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"CherryPacks\")\n\n# The non-negativity of PeachPacks is automatically ensured due to its default non-negative domain in Gurobi,\n# so no constraint code is needed.\n\n# No additional code needed since the variable \"CherryPacks\" is already defined with non-negativity (default domain for continuous variables in Gurobi).\n\n# Add constraint ensuring total peach flavoring used does not exceed available total units\nmodel.addConstr(PeachPacks * PeachRequirement <= TotalPeach, name=\"peach_flavoring_limit\")\n\n# Add constraint to ensure total cherry flavoring used does not exceed available TotalCherry\nmodel.addConstr(CherryRequirement * CherryPacks <= TotalCherry, name=\"cherry_flavoring_limit\")\n\n# Add constraint: The number of peach candy packs must be greater than the number of cherry candy packs\nmodel.addConstr(PeachPacks >= CherryPacks + 1, name=\"PeachVsCherry\")\n\n# Add constraint ensuring minimum cherry percentage\nmodel.addConstr(CherryPacks - MinimumCherryPercentage * (CherryPacks + PeachPacks) >= 0, name=\"min_cherry_percentage\")\n\n# Add constraint for peach flavoring usage\nmodel.addConstr(PeachRequirement * PeachPacks <= TotalPeach, name=\"peach_flavoring_limit\")\n\n# Add constraint to ensure total cherry flavoring used does not exceed available amount\nmodel.addConstr(CherryPacks * CherryRequirement <= TotalCherry, name=\"cherry_flavoring_limit\")\n\n# Add minimum cherry percentage constraint\nmodel.addConstr(CherryPacks >= MinimumCherryPercentage * (PeachPacks + CherryPacks), name=\"min_cherry_percentage\")\n\n# Set objective\nmodel.setObjective(PeachSyrup * PeachPacks + CherrySyrup * CherryPacks, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}