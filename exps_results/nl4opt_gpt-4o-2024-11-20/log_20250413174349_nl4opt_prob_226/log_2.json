{
    "background": "A concert organizer needs to transport equipment with a certain delivery rate using two types of transport methods: carts and trolleys, each requiring different numbers of workers.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Rate of equipment transportation by a cart",
            "symbol": "CartRate",
            "value": 5,
            "shape": [],
            "code": "CartRate = data[\"CartRate\"] # scalar parameter"
        },
        {
            "definition": "Number of workers required by a cart",
            "symbol": "CartWorkers",
            "value": 2,
            "shape": [],
            "code": "CartWorkers = data[\"CartWorkers\"] # scalar parameter"
        },
        {
            "definition": "Rate of equipment transportation by a trolley",
            "symbol": "TrolleyRate",
            "value": 7,
            "shape": [],
            "code": "TrolleyRate = data[\"TrolleyRate\"] # scalar parameter"
        },
        {
            "definition": "Number of workers required by a trolley",
            "symbol": "TrolleyWorkers",
            "value": 4,
            "shape": [],
            "code": "TrolleyWorkers = data[\"TrolleyWorkers\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of trolleys to be used",
            "symbol": "MinTrolleys",
            "value": 12,
            "shape": [],
            "code": "MinTrolleys = data[\"MinTrolleys\"] # scalar parameter"
        },
        {
            "definition": "Maximum percentage of the transportation that can be using trolleys",
            "symbol": "MaxTrolleyPercentage",
            "value": 0.4,
            "shape": [],
            "code": "MaxTrolleyPercentage = data[\"MaxTrolleyPercentage\"] # scalar parameter"
        },
        {
            "definition": "Required rate of equipment delivery",
            "symbol": "DeliveryRate",
            "value": 100,
            "shape": [],
            "code": "DeliveryRate = data[\"DeliveryRate\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Non-negativity constraint ensuring the number of carts is not negative.",
            "status": "coded",
            "formulation": "\\textup{NumCarts} \\geq 0",
            "related_variables": [
                "NumCarts"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since NumCarts is already defined as a non-negative continuous variable"
        },
        {
            "description": "The number of trolleys is non-negative",
            "status": "coded",
            "formulation": "\\textup{NumTrolleys} \\geq 0",
            "related_variables": [
                "NumTrolleys"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since the variable \"NumTrolleys\" is defined with non-negativity by default in Gurobi (continuous variables are automatically non-negative unless specified otherwise)."
        },
        {
            "description": "At least MinTrolleys trolleys must be used.",
            "status": "coded",
            "formulation": "\\textup{NumTrolleys} \\geq \\textup{MinTrolleys}",
            "related_variables": [
                "NumTrolleys"
            ],
            "related_parameters": [
                "MinTrolleys"
            ],
            "code": "# Add constraint to ensure at least MinTrolleys trolleys are used\nmodel.addConstr(NumTrolleys >= MinTrolleys, name=\"min_trolleys_constraint\")"
        },
        {
            "description": "No more than MaxTrolleyPercentage of the transportation can be performed by trolleys.",
            "status": "coded",
            "formulation": "(1 - \\textup{MaxTrolleyPercentage}) \\times \\textup{NumTrolleys} \\times \\textup{TrolleyRate} \\leq \\textup{MaxTrolleyPercentage} \\times \\textup{NumCarts} \\times \\textup{CartRate}",
            "related_variables": [
                "NumCarts",
                "NumTrolleys"
            ],
            "related_parameters": [
                "CartRate",
                "TrolleyRate",
                "MaxTrolleyPercentage"
            ],
            "code": "# Add constraint to limit transportation by trolleys to MaxTrolleyPercentage  \nmodel.addConstr((1 - MaxTrolleyPercentage) * NumTrolleys * TrolleyRate <= MaxTrolleyPercentage * NumCarts * CartRate, name=\"trolley_transport_limit\")"
        },
        {
            "description": "Constraint to ensure the combined transportation rate from carts and trolleys meets or exceeds the required delivery rate.",
            "status": "coded",
            "formulation": "\\\\textup{CartRate} \\\\times \\\\textup{NumCarts} + \\\\textup{TrolleyRate} \\\\times \\\\textup{NumTrolleys} \\\\geq \\\\textup{DeliveryRate}",
            "related_variables": [
                "NumCarts",
                "NumTrolleys"
            ],
            "related_parameters": [
                "CartRate",
                "TrolleyRate",
                "DeliveryRate"
            ],
            "code": "# Add constraint to ensure combined transportation rate meets or exceeds delivery rate\nmodel.addConstr(CartRate * NumCarts + TrolleyRate * NumTrolleys >= DeliveryRate, name=\"transportation_rate\")"
        },
        {
            "description": "The total transportation rate must meet or exceed the required delivery rate",
            "status": "coded",
            "formulation": "\\textup{CartRate} \\cdot \\textup{NumCarts} + \\textup{TrolleyRate} \\cdot \\textup{NumTrolleys} \\geq \\textup{DeliveryRate}",
            "related_variables": [
                "NumCarts",
                "NumTrolleys"
            ],
            "related_parameters": [
                "CartRate",
                "TrolleyRate",
                "DeliveryRate"
            ],
            "code": "# Add constraint to ensure total transportation rate meets or exceeds required delivery rate\nmodel.addConstr(CartRate * NumCarts + TrolleyRate * NumTrolleys >= DeliveryRate, name=\"transportation_rate_constraint\")"
        },
        {
            "description": "At least the minimum required number of trolleys must be used",
            "status": "coded",
            "formulation": "\\textup{NumTrolleys} \\geq \\textup{MinTrolleys}",
            "related_variables": [
                "NumTrolleys"
            ],
            "related_parameters": [
                "MinTrolleys"
            ],
            "code": "# Add constraint for minimum number of trolleys\nmodel.addConstr(NumTrolleys >= MinTrolleys, name=\"min_trolleys_constraint\")"
        },
        {
            "description": "The maximum percentage of transportation using trolleys must not exceed the defined threshold",
            "status": "coded",
            "formulation": "\\textup{TrolleyRate} \\cdot \\textup{NumTrolleys} \\leq \\textup{MaxTrolleyPercentage} \\cdot (\\textup{CartRate} \\cdot \\textup{NumCarts} + \\textup{TrolleyRate} \\cdot \\textup{NumTrolleys})",
            "related_variables": [
                "NumCarts",
                "NumTrolleys"
            ],
            "related_parameters": [
                "TrolleyRate",
                "MaxTrolleyPercentage",
                "CartRate"
            ],
            "code": "# Add constraint: The maximum percentage of transportation using trolleys must not exceed the defined threshold\nmodel.addConstr(\n    TrolleyRate * NumTrolleys <= MaxTrolleyPercentage * (CartRate * NumCarts + TrolleyRate * NumTrolleys), \n    name=\"max_trolley_percentage\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "The number of carts used in transportation",
            "symbol": "NumCarts",
            "shape": [],
            "status": "coded",
            "code": "NumCarts = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumCarts\")"
        },
        {
            "definition": "The number of trolleys used in transportation",
            "symbol": "NumTrolleys",
            "shape": [],
            "status": "coded",
            "code": "NumTrolleys = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumTrolleys\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of workers required for transportation",
            "status": "coded",
            "formulation": "\\min \\quad \\textup{CartWorkers} \\cdot \\textup{NumCarts} + \\textup{TrolleyWorkers} \\cdot \\textup{NumTrolleys}",
            "related_variables": [
                "NumCarts",
                "NumTrolleys"
            ],
            "related_parameters": [
                "CartWorkers",
                "TrolleyWorkers"
            ],
            "code": "# Set objective\nmodel.setObjective(CartWorkers * NumCarts + TrolleyWorkers * NumTrolleys, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 98.4,
    "log_path": "logs/log_20250413174349_nl4opt_prob_226/",
    "problem_path": "data/nl4opt/prob_226/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_226/data.json\", \"r\") as f:\n    data = json.load(f)\n\nCartRate = data[\"CartRate\"] # scalar parameter\nCartWorkers = data[\"CartWorkers\"] # scalar parameter\nTrolleyRate = data[\"TrolleyRate\"] # scalar parameter\nTrolleyWorkers = data[\"TrolleyWorkers\"] # scalar parameter\nMinTrolleys = data[\"MinTrolleys\"] # scalar parameter\nMaxTrolleyPercentage = data[\"MaxTrolleyPercentage\"] # scalar parameter\nDeliveryRate = data[\"DeliveryRate\"] # scalar parameter\nNumCarts = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumCarts\")\nNumTrolleys = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumTrolleys\")\n\n# No additional code needed since NumCarts is already defined as a non-negative continuous variable\n\n# No additional code needed since the variable \"NumTrolleys\" is defined with non-negativity by default in Gurobi (continuous variables are automatically non-negative unless specified otherwise).\n\n# Add constraint to ensure at least MinTrolleys trolleys are used\nmodel.addConstr(NumTrolleys >= MinTrolleys, name=\"min_trolleys_constraint\")\n\n# Add constraint to limit transportation by trolleys to MaxTrolleyPercentage  \nmodel.addConstr((1 - MaxTrolleyPercentage) * NumTrolleys * TrolleyRate <= MaxTrolleyPercentage * NumCarts * CartRate, name=\"trolley_transport_limit\")\n\n# Add constraint to ensure combined transportation rate meets or exceeds delivery rate\nmodel.addConstr(CartRate * NumCarts + TrolleyRate * NumTrolleys >= DeliveryRate, name=\"transportation_rate\")\n\n# Add constraint to ensure total transportation rate meets or exceeds required delivery rate\nmodel.addConstr(CartRate * NumCarts + TrolleyRate * NumTrolleys >= DeliveryRate, name=\"transportation_rate_constraint\")\n\n# Add constraint for minimum number of trolleys\nmodel.addConstr(NumTrolleys >= MinTrolleys, name=\"min_trolleys_constraint\")\n\n# Add constraint: The maximum percentage of transportation using trolleys must not exceed the defined threshold\nmodel.addConstr(\n    TrolleyRate * NumTrolleys <= MaxTrolleyPercentage * (CartRate * NumCarts + TrolleyRate * NumTrolleys), \n    name=\"max_trolley_percentage\"\n)\n\n# Set objective\nmodel.setObjective(CartWorkers * NumCarts + TrolleyWorkers * NumTrolleys, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}