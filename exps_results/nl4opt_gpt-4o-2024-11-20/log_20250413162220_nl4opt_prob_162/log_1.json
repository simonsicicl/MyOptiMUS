{
    "background": "A zoo needs to transport monkeys to the vet and has the option to use buses or cars, with specific capacities and trip durations for each. A limit is set on bus trips and a minimum proportion for car trips.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of monkeys that can be transported per bus trip",
            "symbol": "BusCapacity",
            "value": 20,
            "shape": [],
            "code": "BusCapacity = data[\"BusCapacity\"] # scalar parameter"
        },
        {
            "definition": "Duration of one bus trip",
            "symbol": "BusDuration",
            "value": 30,
            "shape": [],
            "code": "BusDuration = data[\"BusDuration\"] # scalar parameter"
        },
        {
            "definition": "Number of monkeys that can be transported per car trip",
            "symbol": "CarCapacity",
            "value": 6,
            "shape": [],
            "code": "CarCapacity = data[\"CarCapacity\"] # scalar parameter"
        },
        {
            "definition": "Duration of one car trip",
            "symbol": "CarDuration",
            "value": 15,
            "shape": [],
            "code": "CarDuration = data[\"CarDuration\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of bus trips allowed",
            "symbol": "MaxBusTrips",
            "value": 10,
            "shape": [],
            "code": "MaxBusTrips = data[\"MaxBusTrips\"] # scalar parameter"
        },
        {
            "definition": "Minimum proportion of trips that must be by car",
            "symbol": "MinCarTripProportion",
            "value": 0.6,
            "shape": [],
            "code": "MinCarTripProportion = data[\"MinCarTripProportion\"] # scalar parameter"
        },
        {
            "definition": "Total number of monkeys to be transported",
            "symbol": "TotalMonkeys",
            "value": 300,
            "shape": [],
            "code": "TotalMonkeys = data[\"TotalMonkeys\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of bus trips is non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBusTrips} \\geq 0",
            "related_variables": [
                "NumberOfBusTrips"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for the number of bus trips\nmodel.addConstr(NumberOfBusTrips >= 0, name=\"non_negativity_bus_trips\")"
        },
        {
            "description": "The number of car trips must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfCarTrips} \\geq 0",
            "related_variables": [
                "NumberOfCarTrips"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since the variable \"NumberOfCarTrips\" is defined with non-negativity by default through Gurobi's `gp.GRB.CONTINUOUS`."
        },
        {
            "description": "The number of bus trips cannot exceed the maximum allowed bus trips.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBusTrips} \\leq \\textup{MaxBusTrips}",
            "related_variables": [
                "NumberOfBusTrips"
            ],
            "related_parameters": [
                "MaxBusTrips"
            ],
            "code": "# Add constraint to ensure the number of bus trips does not exceed the maximum allowed\nmodel.addConstr(NumberOfBusTrips <= MaxBusTrips, name=\"max_bus_trips\")"
        },
        {
            "description": "At least the minimum required proportion of trips must be completed by car.",
            "status": "coded",
            "formulation": "\\textup{NumberOfCarTrips} \\geq \\textup{MinCarTripProportion} \\cdot \\textup{TotalTrips}",
            "related_variables": [
                "NumberOfCarTrips",
                "TotalTrips"
            ],
            "related_parameters": [
                "MinCarTripProportion"
            ],
            "code": "# Add constraint ensuring minimum proportion of trips are by car\nmodel.addConstr(NumberOfCarTrips >= MinCarTripProportion * TotalTrips, name=\"min_car_trip_proportion\")"
        },
        {
            "description": "The total number of monkeys transported by bus and car trips must be at least \\textup{TotalMonkeys}.",
            "status": "coded",
            "formulation": "\\textup{BusCapacity} \\cdot \\textup{NumberOfBusTrips} + \\textup{CarCapacity} \\cdot \\textup{NumberOfCarTrips} \\geq \\textup{TotalMonkeys}",
            "related_variables": [
                "NumberOfBusTrips",
                "NumberOfCarTrips"
            ],
            "related_parameters": [
                "BusCapacity",
                "CarCapacity",
                "TotalMonkeys"
            ],
            "code": "# Add constraint to ensure the total monkeys transported by bus and car trips is at least TotalMonkeys\nmodel.addConstr(BusCapacity * NumberOfBusTrips + CarCapacity * NumberOfCarTrips >= TotalMonkeys, name=\"transport_monkeys_constraint\")"
        },
        {
            "description": "Transportation capacity from both buses and cars must meet or exceed the number of monkeys to be transported.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBusTrips} \\\\cdot \\\\textup{BusCapacity} + \\textup{NumberOfCarTrips} \\\\cdot \\\\textup{CarCapacity} \\geq \\textup{TotalMonkeys}",
            "related_variables": [
                "NumberOfBusTrips",
                "NumberOfCarTrips"
            ],
            "related_parameters": [
                "BusCapacity",
                "CarCapacity",
                "TotalMonkeys"
            ],
            "code": "# Add transportation capacity constraint\nmodel.addConstr(\n    NumberOfBusTrips * BusCapacity + NumberOfCarTrips * CarCapacity >= TotalMonkeys,\n    name=\"transportation_capacity\"\n)"
        },
        {
            "description": "The number of car trips must be at least the specified proportion of total trips.",
            "status": "coded",
            "formulation": "\\textup{NumberOfCarTrips} \\geq \\textup{MinCarTripProportion} \\\\cdot (\\textup{NumberOfBusTrips} + \\textup{NumberOfCarTrips})",
            "related_variables": [
                "NumberOfBusTrips",
                "NumberOfCarTrips"
            ],
            "related_parameters": [
                "MinCarTripProportion"
            ],
            "code": "# Add a constraint to ensure the number of car trips meets the minimum proportion of total trips\nmodel.addConstr(\n    NumberOfCarTrips >= MinCarTripProportion * (NumberOfBusTrips + NumberOfCarTrips),\n    name=\"min_car_trip_proportion\"\n)"
        },
        {
            "description": "TotalTrips represents the sum of trips made by buses and cars.",
            "status": "coded",
            "formulation": "\\textup{TotalTrips} = \\textup{NumberOfBusTrips} + \\textup{NumberOfCarTrips}",
            "related_variables": [
                "TotalTrips",
                "NumberOfBusTrips",
                "NumberOfCarTrips"
            ],
            "related_parameters": [],
            "code": "# Add constraint for TotalTrips representing the sum of NumberOfBusTrips and NumberOfCarTrips\nmodel.addConstr(TotalTrips == NumberOfBusTrips + NumberOfCarTrips, name=\"total_trips_constraint\")"
        },
        {
            "description": "Ensure all monkeys are transported using buses and cars.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBusTrips} \\times \\textup{BusCapacity} + \\textup{NumberOfCarTrips} \\times \\textup{CarCapacity} \\geq \\textup{TotalMonkeys}",
            "related_variables": [
                "NumberOfBusTrips",
                "NumberOfCarTrips"
            ],
            "related_parameters": [
                "BusCapacity",
                "CarCapacity",
                "TotalMonkeys"
            ],
            "code": "# Add constraint to ensure all monkeys are transported using buses and cars\nmodel.addConstr(NumberOfBusTrips * BusCapacity + NumberOfCarTrips * CarCapacity >= TotalMonkeys, name=\"transport_monkeys\")"
        },
        {
            "description": "Restrict the number of bus trips to be within the maximum allowed.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBusTrips} \\leq \\textup{MaxBusTrips}",
            "related_variables": [
                "NumberOfBusTrips"
            ],
            "related_parameters": [
                "MaxBusTrips"
            ],
            "code": "# Add constraint to restrict the number of bus trips within the maximum allowed\nmodel.addConstr(NumberOfBusTrips <= MaxBusTrips, name=\"max_bus_trips_constraint\")"
        },
        {
            "description": "Ensure that car trips represent at least a given proportion of total trips.",
            "status": "coded",
            "formulation": "\\textup{NumberOfCarTrips} \\geq \\textup{MinCarTripProportion} \\times (\\textup{NumberOfBusTrips} + \\textup{NumberOfCarTrips})",
            "related_variables": [
                "NumberOfCarTrips",
                "NumberOfBusTrips"
            ],
            "related_parameters": [
                "MinCarTripProportion"
            ],
            "code": "# Add constraint to ensure the number of car trips is at least a given proportion of total trips\nmodel.addConstr(\n    NumberOfCarTrips >= MinCarTripProportion * (NumberOfBusTrips + NumberOfCarTrips),\n    name=\"car_trip_proportion\"\n)"
        },
        {
            "description": "Define the total trips as the sum of bus and car trips.",
            "status": "coded",
            "formulation": "\\textup{TotalTrips} = \\textup{NumberOfBusTrips} + \\textup{NumberOfCarTrips}",
            "related_variables": [
                "TotalTrips",
                "NumberOfBusTrips",
                "NumberOfCarTrips"
            ],
            "related_parameters": [],
            "code": "# Add constraint to define TotalTrips as the sum of NumberOfBusTrips and NumberOfCarTrips\nmodel.addConstr(TotalTrips == NumberOfBusTrips + NumberOfCarTrips, name=\"total_trips_definition\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of bus trips to transport the monkeys.",
            "symbol": "NumberOfBusTrips",
            "shape": [],
            "status": "coded",
            "code": "NumberOfBusTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfBusTrips\")"
        },
        {
            "definition": "The number of car trips to transport the monkeys.",
            "symbol": "NumberOfCarTrips",
            "shape": [],
            "status": "coded",
            "code": "NumberOfCarTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfCarTrips\")"
        },
        {
            "definition": "The total number of trips made, which is the sum of trips by buses and cars.",
            "symbol": "TotalTrips",
            "shape": [],
            "status": "coded",
            "code": "TotalTrips = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalTrips\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total time required to transport all the monkeys to the vet.",
            "status": "coded",
            "formulation": "\\textup{Minimize:} \\quad \\textup{TotalTime} = \\textup{NumberOfBusTrips} \\times \\textup{BusDuration} + \\textup{NumberOfCarTrips} \\times \\textup{CarDuration}",
            "related_variables": [
                "NumberOfBusTrips",
                "NumberOfCarTrips"
            ],
            "related_parameters": [
                "BusDuration",
                "CarDuration"
            ],
            "code": "# Set objective\nmodel.setObjective(\n    NumberOfBusTrips * BusDuration + NumberOfCarTrips * CarDuration,\n    gp.GRB.MINIMIZE\n)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413162220_nl4opt_prob_162/",
    "problem_path": "data/nl4opt/prob_162/"
}