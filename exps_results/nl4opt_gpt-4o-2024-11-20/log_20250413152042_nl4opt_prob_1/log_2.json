{
    "background": "An office supply company makes two types of printers: color printers and black and white printers.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Maximum number of color printers that can be produced per day",
            "symbol": "MaxColor",
            "value": 20,
            "shape": [],
            "code": "MaxColor = data[\"MaxColor\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of black and white printers that can be produced per day",
            "symbol": "MaxBW",
            "value": 30,
            "shape": [],
            "code": "MaxBW = data[\"MaxBW\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of printers that the paper tray installing machine can equip per day",
            "symbol": "MaxTotal",
            "value": 35,
            "shape": [],
            "code": "MaxTotal = data[\"MaxTotal\"] # scalar parameter"
        },
        {
            "definition": "Profit generated per color printer",
            "symbol": "ProfitColor",
            "value": 200,
            "shape": [],
            "code": "ProfitColor = data[\"ProfitColor\"] # scalar parameter"
        },
        {
            "definition": "Profit generated per black and white printer",
            "symbol": "ProfitBW",
            "value": 70,
            "shape": [],
            "code": "ProfitBW = data[\"ProfitBW\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of color printers produced daily must be an integer.",
            "status": "coded",
            "formulation": "\\textup{ColorPrinters} \\in \\mathbb{Z}",
            "related_variables": [
                "ColorPrinters"
            ],
            "related_parameters": [],
            "code": "# Changing the integrality of the variable to ensure it is an integer\nColorPrinters.vtype = gp.GRB.INTEGER"
        },
        {
            "description": "Integer constraint and production capacity constraints for the number of black and white printers and total printer limits.",
            "status": "coded",
            "formulation": "\\textup{BWPrinters} \\in \\mathbb{Z}, \\quad \\textup{BWPrinters} \\geq 0 \\\\ \\textup{ColorPrinters} + \\textup{BWPrinters} \\leq \\textup{MaxTotal} \\\\ \\textup{ColorPrinters} \\leq \\textup{MaxColor} \\\\ \\textup{BWPrinters} \\leq \\textup{MaxBW}",
            "related_variables": [
                "ColorPrinters",
                "BWPrinters"
            ],
            "related_parameters": [
                "MaxColor",
                "MaxBW",
                "MaxTotal"
            ],
            "code": "# Update BWPrinters variable integrality and add production capacity constraints\nBWPrinters.vtype = gp.GRB.INTEGER  # Ensuring BWPrinters is an integer\nmodel.addConstr(ColorPrinters + BWPrinters <= MaxTotal, name=\"total_printer_limit\")\nmodel.addConstr(ColorPrinters <= MaxColor, name=\"max_color_limit\")\nmodel.addConstr(BWPrinters <= MaxBW, name=\"max_bw_limit\")"
        },
        {
            "description": "The number of color printers produced per day must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{ColorPrinters} \\\\geq 0",
            "related_variables": [
                "ColorPrinters"
            ],
            "related_parameters": [],
            "code": "# The variable \"ColorPrinters\" already has non-negativity enforced internally due to its default non-negative domain in Gurobi,\n# so no additional constraint code is required."
        },
        {
            "description": "The number of black and white printers produced per day cannot be negative.",
            "status": "coded",
            "formulation": "\\\\textup{BWPrinters} \\\\geq 0",
            "related_variables": [
                "BWPrinters"
            ],
            "related_parameters": [],
            "code": "# The non-negativity of BWPrinters is already defined through its default lower bound of 0 in gurobipy"
        },
        {
            "description": "At most MaxColor color printers can be produced per day",
            "status": "coded",
            "formulation": "\\textup{ColorPrinters} \\leq \\textup{MaxColor}",
            "related_variables": [
                "ColorPrinters"
            ],
            "related_parameters": [
                "MaxColor"
            ],
            "code": "# Add constraint to limit the number of color printers produced per day\nmodel.addConstr(ColorPrinters <= MaxColor, name=\"max_color_printers\")"
        },
        {
            "description": "The company can make at most MaxBW black and white printers per day.",
            "status": "coded",
            "formulation": "\\textup{BWPrinters} \\leq \\textup{MaxBW}",
            "related_variables": [
                "BWPrinters"
            ],
            "related_parameters": [
                "MaxBW"
            ],
            "code": "# Add constraint for the maximum number of black and white printers produced per day\nmodel.addConstr(BWPrinters <= MaxBW, name=\"max_BW_printers\")"
        },
        {
            "description": "The total number of printers produced per day (sum of color and black and white printers) must not exceed the capacity of the paper tray installing machine, MaxTotal.",
            "status": "coded",
            "formulation": "\\textup{ColorPrinters} + \\textup{BWPrinters} \\leq \\textup{MaxTotal}",
            "related_variables": [
                "ColorPrinters",
                "BWPrinters"
            ],
            "related_parameters": [
                "MaxTotal"
            ],
            "code": "# Add printer production capacity constraint\nmodel.addConstr(ColorPrinters + BWPrinters <= MaxTotal, name=\"printer_capacity\")"
        },
        {
            "description": "The number of color printers produced per day cannot exceed the maximum number of color printers that can be produced per day.",
            "status": "coded",
            "formulation": "\\\\textup{ColorPrinters} \\\\leq \\\\textup{MaxColor}",
            "related_variables": [
                "ColorPrinters"
            ],
            "related_parameters": [
                "MaxColor"
            ],
            "code": "# Add constraint to limit ColorPrinters to the maximum allowable production\nmodel.addConstr(ColorPrinters <= MaxColor, name=\"max_color_printers\")"
        },
        {
            "description": "The number of black and white printers produced per day cannot exceed the maximum number of black and white printers that can be produced per day.",
            "status": "coded",
            "formulation": "\\\\textup{BWPrinters} \\\\leq \\\\textup{MaxBW}",
            "related_variables": [
                "BWPrinters"
            ],
            "related_parameters": [
                "MaxBW"
            ],
            "code": "# Add a constraint to ensure the number of black and white printers produced per day does not exceed MaxBW\nmodel.addConstr(BWPrinters <= MaxBW, name=\"max_bw_printers\")"
        },
        {
            "description": "The total number of printers (color and black and white combined) produced per day cannot exceed the capacity of the paper tray installing machine.",
            "status": "coded",
            "formulation": "\\\\textup{ColorPrinters} + \\\\textup{BWPrinters} \\\\leq \\\\textup{MaxTotal}",
            "related_variables": [
                "ColorPrinters",
                "BWPrinters"
            ],
            "related_parameters": [
                "MaxTotal"
            ],
            "code": "# Add constraint to ensure total printers do not exceed machine capacity\nmodel.addConstr(ColorPrinters + BWPrinters <= MaxTotal, name=\"total_printer_capacity\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of color printers produced per day",
            "symbol": "ColorPrinters",
            "shape": [],
            "status": "coded",
            "code": "ColorPrinters = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ColorPrinters\")"
        },
        {
            "definition": "The number of black and white printers produced per day",
            "symbol": "BWPrinters",
            "shape": [],
            "status": "coded",
            "code": "BWPrinters = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"BWPrinters\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the profit, which is calculated as ProfitColor per color printer plus ProfitBW per black and white printer.",
            "status": "coded",
            "formulation": "\\\\textup{Maximize: } Profit = (\\\\textup{ProfitColor} * \\\\textup{ColorPrinters}) + (\\\\textup{ProfitBW} * \\\\textup{BWPrinters})",
            "related_variables": [
                "ColorPrinters",
                "BWPrinters"
            ],
            "related_parameters": [
                "ProfitColor",
                "ProfitBW"
            ],
            "code": "# Set objective\nmodel.setObjective(\n    ProfitColor * ColorPrinters + ProfitBW * BWPrinters,\n    gp.GRB.MAXIMIZE\n)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 5050.0,
    "log_path": "logs/log_20250413152042_nl4opt_prob_1/",
    "problem_path": "data/nl4opt/prob_1/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_1/data.json\", \"r\") as f:\n    data = json.load(f)\n\nMaxColor = data[\"MaxColor\"] # scalar parameter\nMaxBW = data[\"MaxBW\"] # scalar parameter\nMaxTotal = data[\"MaxTotal\"] # scalar parameter\nProfitColor = data[\"ProfitColor\"] # scalar parameter\nProfitBW = data[\"ProfitBW\"] # scalar parameter\nColorPrinters = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ColorPrinters\")\nBWPrinters = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"BWPrinters\")\n\n# Changing the integrality of the variable to ensure it is an integer\nColorPrinters.vtype = gp.GRB.INTEGER\n\n# Update BWPrinters variable integrality and add production capacity constraints\nBWPrinters.vtype = gp.GRB.INTEGER  # Ensuring BWPrinters is an integer\nmodel.addConstr(ColorPrinters + BWPrinters <= MaxTotal, name=\"total_printer_limit\")\nmodel.addConstr(ColorPrinters <= MaxColor, name=\"max_color_limit\")\nmodel.addConstr(BWPrinters <= MaxBW, name=\"max_bw_limit\")\n\n# The variable \"ColorPrinters\" already has non-negativity enforced internally due to its default non-negative domain in Gurobi,\n# so no additional constraint code is required.\n\n# The non-negativity of BWPrinters is already defined through its default lower bound of 0 in gurobipy\n\n# Add constraint to limit the number of color printers produced per day\nmodel.addConstr(ColorPrinters <= MaxColor, name=\"max_color_printers\")\n\n# Add constraint for the maximum number of black and white printers produced per day\nmodel.addConstr(BWPrinters <= MaxBW, name=\"max_BW_printers\")\n\n# Add printer production capacity constraint\nmodel.addConstr(ColorPrinters + BWPrinters <= MaxTotal, name=\"printer_capacity\")\n\n# Add constraint to limit ColorPrinters to the maximum allowable production\nmodel.addConstr(ColorPrinters <= MaxColor, name=\"max_color_printers\")\n\n# Add a constraint to ensure the number of black and white printers produced per day does not exceed MaxBW\nmodel.addConstr(BWPrinters <= MaxBW, name=\"max_bw_printers\")\n\n# Add constraint to ensure total printers do not exceed machine capacity\nmodel.addConstr(ColorPrinters + BWPrinters <= MaxTotal, name=\"total_printer_capacity\")\n\n# Set objective\nmodel.setObjective(\n    ProfitColor * ColorPrinters + ProfitBW * BWPrinters,\n    gp.GRB.MAXIMIZE\n)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}