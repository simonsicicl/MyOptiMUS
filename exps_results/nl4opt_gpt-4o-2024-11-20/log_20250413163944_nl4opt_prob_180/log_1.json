{
    "background": "A water salesman should decide how many small and large kegs to use for transporting water from a glacier, abiding by the constraints on keg capacities, keg counts, and transportation limits.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Amount of water a small keg can hold",
            "symbol": "SmallKegCapacity",
            "value": 40,
            "shape": [],
            "code": "SmallKegCapacity = data[\"SmallKegCapacity\"] # scalar parameter"
        },
        {
            "definition": "Amount of water a large keg can hold",
            "symbol": "LargeKegCapacity",
            "value": 100,
            "shape": [],
            "code": "LargeKegCapacity = data[\"LargeKegCapacity\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of small kegs available",
            "symbol": "MaxSmallKegs",
            "value": 30,
            "shape": [],
            "code": "MaxSmallKegs = data[\"MaxSmallKegs\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of large kegs available",
            "symbol": "MaxLargeKegs",
            "value": 10,
            "shape": [],
            "code": "MaxLargeKegs = data[\"MaxLargeKegs\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of kegs that can be transported",
            "symbol": "MaxKegsTransport",
            "value": 25,
            "shape": [],
            "code": "MaxKegsTransport = data[\"MaxKegsTransport\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of large kegs required",
            "symbol": "MinLargeKegs",
            "value": 5,
            "shape": [],
            "code": "MinLargeKegs = data[\"MinLargeKegs\"] # scalar parameter"
        },
        {
            "definition": "Minimum ratio of the number of small kegs to the number of large kegs",
            "symbol": "MinSmallLargeRatio",
            "value": 2,
            "shape": [],
            "code": "MinSmallLargeRatio = data[\"MinSmallLargeRatio\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of small kegs used must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{SmallKegsUsed} \\\\geq 0",
            "related_variables": [
                "SmallKegsUsed"
            ],
            "related_parameters": [],
            "code": "# The variable \"SmallKegsUsed\" is defined with non-negativity by default because it is continuous.\n# No additional code is needed for this constraint."
        },
        {
            "description": "The number of large kegs used for transportation is non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{LargeKegsUsed} \\\\geq 0",
            "related_variables": [
                "LargeKegsUsed"
            ],
            "related_parameters": [],
            "code": "# Since the variable \"LargeKegsUsed\" is already defined as non-negative (default property of Gurobi continuous variable), no constraint code is needed."
        },
        {
            "description": "Number of small kegs used is at most MaxSmallKegs",
            "status": "coded",
            "formulation": "\\textup{SmallKegsUsed} \\leq \\textup{MaxSmallKegs}",
            "related_variables": [
                "SmallKegsUsed"
            ],
            "related_parameters": [
                "MaxSmallKegs"
            ],
            "code": "# Add constraint to ensure the number of small kegs used does not exceed the maximum allowable\nmodel.addConstr(SmallKegsUsed <= MaxSmallKegs, name=\"limit_small_kegs\")"
        },
        {
            "description": "The number of large kegs used is at most the maximum allowable large kegs (\\textup{MaxLargeKegs}).",
            "status": "coded",
            "formulation": "\\textup{LargeKegsUsed} \\leq \\textup{MaxLargeKegs}",
            "related_variables": [
                "LargeKegsUsed"
            ],
            "related_parameters": [
                "MaxLargeKegs"
            ],
            "code": "# Add a constraint to ensure the number of large kegs used does not exceed the maximum allowable large kegs\nmodel.addConstr(LargeKegsUsed <= MaxLargeKegs, name=\"max_large_kegs_constraint\")"
        },
        {
            "description": "At least MinSmallLargeRatio times as many small kegs are used as large kegs.",
            "status": "coded",
            "formulation": "\\textup{SmallKegsUsed} \\geq \\textup{MinSmallLargeRatio} \\cdot \\textup{LargeKegsUsed}",
            "related_variables": [
                "SmallKegsUsed",
                "LargeKegsUsed"
            ],
            "related_parameters": [
                "MinSmallLargeRatio"
            ],
            "code": "model.addConstr(SmallKegsUsed >= MinSmallLargeRatio * LargeKegsUsed, name=\"min_small_large_ratio_constraint\")"
        },
        {
            "description": "The total number of small and large kegs transported should be at most MaxKegsTransport.",
            "status": "coded",
            "formulation": "\\textup{SmallKegsUsed} + \\textup{LargeKegsUsed} \\leq \\textup{MaxKegsTransport}",
            "related_variables": [
                "SmallKegsUsed",
                "LargeKegsUsed"
            ],
            "related_parameters": [
                "MaxKegsTransport"
            ],
            "code": "# Add constraint to ensure the total number of small and large kegs transported does not exceed MaxKegsTransport\nmodel.addConstr(SmallKegsUsed + LargeKegsUsed <= MaxKegsTransport, name=\"total_kegs_transport_constraint\")"
        },
        {
            "description": "The number of large kegs used must be at least the minimum required.",
            "status": "coded",
            "formulation": "\\\\textup{LargeKegsUsed} \\\\geq \\\\textup{MinLargeKegs}",
            "related_variables": [
                "LargeKegsUsed"
            ],
            "related_parameters": [
                "MinLargeKegs"
            ],
            "code": "# Add constraint ensuring the number of large kegs used meets the minimum required\nmodel.addConstr(LargeKegsUsed >= MinLargeKegs, name=\"min_large_kegs_constraint\")"
        },
        {
            "description": "The number of small kegs used cannot exceed the maximum number of small kegs available",
            "status": "coded",
            "formulation": "\\textup{SmallKegsUsed} \\leq \\textup{MaxSmallKegs}",
            "related_variables": [
                "SmallKegsUsed"
            ],
            "related_parameters": [
                "MaxSmallKegs"
            ],
            "code": "# Add constraint to ensure the number of small kegs used does not exceed the maximum available  \nmodel.addConstr(SmallKegsUsed <= MaxSmallKegs, name=\"small_kegs_limit\")"
        },
        {
            "description": "The number of large kegs used cannot exceed the maximum number of large kegs available",
            "status": "coded",
            "formulation": "\\textup{LargeKegsUsed} \\leq \\textup{MaxLargeKegs}",
            "related_variables": [
                "LargeKegsUsed"
            ],
            "related_parameters": [
                "MaxLargeKegs"
            ],
            "code": "# Add constraint to ensure the number of large kegs used does not exceed the maximum available  \nmodel.addConstr(LargeKegsUsed <= MaxLargeKegs, name=\"large_kegs_limit\")"
        },
        {
            "description": "The total number of kegs transported cannot exceed the maximum transportation capacity",
            "status": "coded",
            "formulation": "\\textup{SmallKegsUsed} + \\textup{LargeKegsUsed} \\leq \\textup{MaxKegsTransport}",
            "related_variables": [
                "SmallKegsUsed",
                "LargeKegsUsed"
            ],
            "related_parameters": [
                "MaxKegsTransport"
            ],
            "code": "# Add constraint for maximum transportation capacity\nmodel.addConstr(SmallKegsUsed + LargeKegsUsed <= MaxKegsTransport, name=\"max_transport_capacity\")"
        },
        {
            "description": "The number of large kegs used must be at least the minimum required",
            "status": "coded",
            "formulation": "\\textup{LargeKegsUsed} \\geq \\textup{MinLargeKegs}",
            "related_variables": [
                "LargeKegsUsed"
            ],
            "related_parameters": [
                "MinLargeKegs"
            ],
            "code": "# Add constraint to ensure the number of large kegs used is at least the minimum required\nmodel.addConstr(LargeKegsUsed >= MinLargeKegs, name=\"min_large_kegs\")"
        },
        {
            "description": "The number of small kegs used must be at least the minimum ratio times the number of large kegs used",
            "status": "coded",
            "formulation": "\\textup{SmallKegsUsed} \\geq \\textup{MinSmallLargeRatio} \\cdot \\textup{LargeKegsUsed}",
            "related_variables": [
                "SmallKegsUsed",
                "LargeKegsUsed"
            ],
            "related_parameters": [
                "MinSmallLargeRatio"
            ],
            "code": "# Add constraint to ensure the number of small kegs used is at least the minimum ratio times the number of large kegs used\nmodel.addConstr(SmallKegsUsed >= MinSmallLargeRatio * LargeKegsUsed, name=\"min_small_large_ratio\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of small kegs used for transportation",
            "symbol": "SmallKegsUsed",
            "shape": [],
            "status": "coded",
            "code": "SmallKegsUsed = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SmallKegsUsed\")"
        },
        {
            "definition": "The number of large kegs used for transportation",
            "symbol": "LargeKegsUsed",
            "shape": [],
            "status": "coded",
            "code": "LargeKegsUsed = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"LargeKegsUsed\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total volume of glacial water transported",
            "status": "coded",
            "formulation": "\\textup{Maximize:} \\quad \\textup{SmallKegsUsed} \\cdot \\textup{SmallKegCapacity} + \\textup{LargeKegsUsed} \\cdot \\textup{LargeKegCapacity}",
            "related_variables": [
                "SmallKegsUsed",
                "LargeKegsUsed"
            ],
            "related_parameters": [
                "SmallKegCapacity",
                "LargeKegCapacity"
            ],
            "code": "# Set objective\nmodel.setObjective(SmallKegsUsed * SmallKegCapacity + LargeKegsUsed * LargeKegCapacity, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413163944_nl4opt_prob_180/",
    "problem_path": "data/nl4opt/prob_180/"
}