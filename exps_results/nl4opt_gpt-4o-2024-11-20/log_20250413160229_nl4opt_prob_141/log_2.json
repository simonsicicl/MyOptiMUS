{
    "background": "A bodybuilder is planning to buy turkey dinners and tuna salad sandwiches for his meals, which contain different amounts of protein, carbs, and fat. He has minimum protein and carbs intake goals to meet, and he also has a limit on the proportion of turkey dinners he can buy to minimize costs.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Amount of protein in a turkey dinner",
            "symbol": "ProteinTurkeyDinner",
            "value": 20,
            "shape": [],
            "code": "ProteinTurkeyDinner = data[\"ProteinTurkeyDinner\"] # scalar parameter"
        },
        {
            "definition": "Amount of carbs in a turkey dinner",
            "symbol": "CarbsTurkeyDinner",
            "value": 30,
            "shape": [],
            "code": "CarbsTurkeyDinner = data[\"CarbsTurkeyDinner\"] # scalar parameter"
        },
        {
            "definition": "Amount of fat in a turkey dinner",
            "symbol": "FatTurkeyDinner",
            "value": 12,
            "shape": [],
            "code": "FatTurkeyDinner = data[\"FatTurkeyDinner\"] # scalar parameter"
        },
        {
            "definition": "Amount of protein in a tuna salad sandwich",
            "symbol": "ProteinTunaSalad",
            "value": 18,
            "shape": [],
            "code": "ProteinTunaSalad = data[\"ProteinTunaSalad\"] # scalar parameter"
        },
        {
            "definition": "Amount of carbs in a tuna salad sandwich",
            "symbol": "CarbsTunaSalad",
            "value": 25,
            "shape": [],
            "code": "CarbsTunaSalad = data[\"CarbsTunaSalad\"] # scalar parameter"
        },
        {
            "definition": "Amount of fat in a tuna salad sandwich",
            "symbol": "FatTunaSalad",
            "value": 8,
            "shape": [],
            "code": "FatTunaSalad = data[\"FatTunaSalad\"] # scalar parameter"
        },
        {
            "definition": "Minimum required grams of protein",
            "symbol": "MinProtein",
            "value": 150,
            "shape": [],
            "code": "MinProtein = data[\"MinProtein\"] # scalar parameter"
        },
        {
            "definition": "Minimum required grams of carbs",
            "symbol": "MinCarbs",
            "value": 200,
            "shape": [],
            "code": "MinCarbs = data[\"MinCarbs\"] # scalar parameter"
        },
        {
            "definition": "Maximum proportion of total meals that can be turkey dinners",
            "symbol": "MaxTurkeyDinnerProportion",
            "value": 0.4,
            "shape": [],
            "code": "MaxTurkeyDinnerProportion = data[\"MaxTurkeyDinnerProportion\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of turkey dinners is non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumTurkeyDinners} \\geq 0",
            "related_variables": [
                "NumTurkeyDinners"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for NumTurkeyDinners\nmodel.addConstr(NumTurkeyDinners >= 0, name=\"non_negativity_NumTurkeyDinners\")"
        },
        {
            "description": "The number of tuna salad sandwiches is non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumTunaSalad} \\geq 0",
            "related_variables": [
                "NumTunaSalad"
            ],
            "related_parameters": [],
            "code": "# Ensure the number of tuna salad sandwiches is non-negative\nmodel.addConstr(NumTunaSalad >= 0, name=\"tuna_salad_non_negative\")"
        },
        {
            "description": "The total grams of protein from meals must be at least MinProtein",
            "status": "coded",
            "formulation": "\\\\textup{ProteinTurkeyDinner} \\\\cdot \\\\textup{NumTurkeyDinners} + \\\\textup{ProteinTunaSalad} \\\\cdot \\\\textup{NumTunaSalad} \\\\geq \\\\textup{MinProtein}",
            "related_variables": [
                "NumTurkeyDinners",
                "NumTunaSalad"
            ],
            "related_parameters": [
                "ProteinTurkeyDinner",
                "ProteinTunaSalad",
                "MinProtein"
            ],
            "code": "# Add protein intake constraint\nmodel.addConstr(\n    ProteinTurkeyDinner * NumTurkeyDinners + ProteinTunaSalad * NumTunaSalad >= MinProtein,\n    name=\"min_protein_constraint\"\n)"
        },
        {
            "description": "The total grams of carbs from turkey dinners and tuna salad sandwiches must be at least MinCarbs.",
            "status": "coded",
            "formulation": "\\\\textup{CarbsTurkeyDinner} \\\\cdot \\\\textup{NumTurkeyDinners} + \\\\textup{CarbsTunaSalad} \\\\cdot \\\\textup{NumTunaSalad} \\\\geq \\\\textup{MinCarbs}",
            "related_variables": [
                "NumTurkeyDinners",
                "NumTunaSalad"
            ],
            "related_parameters": [
                "CarbsTurkeyDinner",
                "CarbsTunaSalad",
                "MinCarbs"
            ],
            "code": "# Add constraint for minimum required carbs from Turkey Dinners and Tuna Salad Sandwiches\nmodel.addConstr(\n    NumTurkeyDinners * CarbsTurkeyDinner + NumTunaSalad * CarbsTunaSalad >= MinCarbs,\n    name=\"min_carbs_requirement\"\n)"
        },
        {
            "description": "At most MaxTurkeyDinnerProportion of the meals should be turkey dinners.",
            "status": "coded",
            "formulation": "\\textup{NumTurkeyDinners} \\leq \\textup{MaxTurkeyDinnerProportion} \\cdot \\textup{TotalMeals}",
            "related_variables": [
                "NumTurkeyDinners",
                "TotalMeals"
            ],
            "related_parameters": [
                "MaxTurkeyDinnerProportion"
            ],
            "code": "# Add constraint to ensure at most MaxTurkeyDinnerProportion of meals are turkey dinners\nmodel.addConstr(NumTurkeyDinners <= MaxTurkeyDinnerProportion * TotalMeals, name=\"turkey_dinner_proportion\")"
        },
        {
            "description": "The total number of meals is the sum of turkey dinners and tuna salad sandwiches.",
            "status": "coded",
            "formulation": "\\textup{TotalMeals} = \\textup{NumTurkeyDinners} + \\textup{NumTunaSalad}",
            "related_variables": [
                "TotalMeals",
                "NumTurkeyDinners",
                "NumTunaSalad"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure TotalMeals is the sum of NumTurkeyDinners and NumTunaSalad\nmodel.addConstr(TotalMeals == NumTurkeyDinners + NumTunaSalad, name=\"total_meals_constraint\")"
        },
        {
            "description": "Ensure the meals meet the minimum required protein intake.",
            "status": "coded",
            "formulation": "\\textup{ProteinTurkeyDinner} \\cdot \\textup{NumTurkeyDinners} + \\textup{ProteinTunaSalad} \\cdot \\textup{NumTunaSalad} \\geq \\textup{MinProtein}",
            "related_variables": [
                "NumTurkeyDinners",
                "NumTunaSalad"
            ],
            "related_parameters": [
                "ProteinTurkeyDinner",
                "ProteinTunaSalad",
                "MinProtein"
            ],
            "code": "# Add protein intake constraint\nmodel.addConstr(ProteinTurkeyDinner * NumTurkeyDinners + ProteinTunaSalad * NumTunaSalad >= MinProtein, name=\"protein_requirement\")"
        },
        {
            "description": "Ensure the meals meet the minimum required carbs intake.",
            "status": "coded",
            "formulation": "\\textup{CarbsTurkeyDinner} \\cdot \\textup{NumTurkeyDinners} + \\textup{CarbsTunaSalad} \\cdot \\textup{NumTunaSalad} \\geq \\textup{MinCarbs}",
            "related_variables": [
                "NumTurkeyDinners",
                "NumTunaSalad"
            ],
            "related_parameters": [
                "CarbsTurkeyDinner",
                "CarbsTunaSalad",
                "MinCarbs"
            ],
            "code": "# Add constraint to ensure minimum required carbs intake\nmodel.addConstr(NumTurkeyDinners * CarbsTurkeyDinner + NumTunaSalad * CarbsTunaSalad >= MinCarbs, name=\"min_carbs_constraint\")"
        },
        {
            "description": "Ensure the number of turkey dinners does not exceed the maximum proportion of total meals.",
            "status": "coded",
            "formulation": "\\textup{NumTurkeyDinners} \\leq \\textup{MaxTurkeyDinnerProportion} \\cdot \\textup{TotalMeals}",
            "related_variables": [
                "NumTurkeyDinners",
                "TotalMeals"
            ],
            "related_parameters": [
                "MaxTurkeyDinnerProportion"
            ],
            "code": "# Add constraint to enforce the limit on turkey dinner proportions\nmodel.addConstr(NumTurkeyDinners <= MaxTurkeyDinnerProportion * TotalMeals, name=\"turkey_dinner_limit\")"
        },
        {
            "description": "Define the total number of meals as the sum of turkey dinners and tuna salads.",
            "status": "coded",
            "formulation": "\\textup{TotalMeals} = \\textup{NumTurkeyDinners} + \\textup{NumTunaSalad}",
            "related_variables": [
                "NumTurkeyDinners",
                "NumTunaSalad",
                "TotalMeals"
            ],
            "related_parameters": [],
            "code": "# Add constraint to define TotalMeals as the sum of NumTurkeyDinners and NumTunaSalad\nmodel.addConstr(TotalMeals == NumTurkeyDinners + NumTunaSalad, name=\"total_meals_definition\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of turkey dinners to be purchased.",
            "symbol": "NumTurkeyDinners",
            "shape": [],
            "status": "coded",
            "code": "NumTurkeyDinners = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumTurkeyDinners\")"
        },
        {
            "definition": "Number of tuna salad sandwiches to be purchased.",
            "symbol": "NumTunaSalad",
            "shape": [],
            "status": "coded",
            "code": "NumTunaSalad = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumTunaSalad\")"
        },
        {
            "definition": "The total number of meals, which is the sum of turkey dinners and tuna salad sandwiches.",
            "symbol": "TotalMeals",
            "shape": [],
            "status": "coded",
            "code": "TotalMeals = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalMeals\")"
        },
        {
            "definition": "The total number of meals, which is the sum of turkey dinners and tuna salad sandwiches.",
            "symbol": "TotalMeals",
            "shape": [],
            "status": "coded",
            "code": "TotalMeals = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalMeals\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total fat intake from the meals.",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{FatTurkeyDinner} \\cdot \\textup{NumTurkeyDinners} + \\textup{FatTunaSalad} \\cdot \\textup{NumTunaSalad}",
            "related_variables": [
                "NumTurkeyDinners",
                "NumTunaSalad"
            ],
            "related_parameters": [
                "FatTurkeyDinner",
                "FatTunaSalad"
            ],
            "code": "# Set objective\nmodel.setObjective(FatTurkeyDinner * NumTurkeyDinners + FatTunaSalad * NumTunaSalad, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 66.66666666666667,
    "log_path": "logs/log_20250413160229_nl4opt_prob_141/",
    "problem_path": "data/nl4opt/prob_141/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_141/data.json\", \"r\") as f:\n    data = json.load(f)\n\nProteinTurkeyDinner = data[\"ProteinTurkeyDinner\"] # scalar parameter\nCarbsTurkeyDinner = data[\"CarbsTurkeyDinner\"] # scalar parameter\nFatTurkeyDinner = data[\"FatTurkeyDinner\"] # scalar parameter\nProteinTunaSalad = data[\"ProteinTunaSalad\"] # scalar parameter\nCarbsTunaSalad = data[\"CarbsTunaSalad\"] # scalar parameter\nFatTunaSalad = data[\"FatTunaSalad\"] # scalar parameter\nMinProtein = data[\"MinProtein\"] # scalar parameter\nMinCarbs = data[\"MinCarbs\"] # scalar parameter\nMaxTurkeyDinnerProportion = data[\"MaxTurkeyDinnerProportion\"] # scalar parameter\nNumTurkeyDinners = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumTurkeyDinners\")\nNumTunaSalad = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumTunaSalad\")\nTotalMeals = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalMeals\")\nTotalMeals = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TotalMeals\")\n\n# Add non-negativity constraint for NumTurkeyDinners\nmodel.addConstr(NumTurkeyDinners >= 0, name=\"non_negativity_NumTurkeyDinners\")\n\n# Ensure the number of tuna salad sandwiches is non-negative\nmodel.addConstr(NumTunaSalad >= 0, name=\"tuna_salad_non_negative\")\n\n# Add protein intake constraint\nmodel.addConstr(\n    ProteinTurkeyDinner * NumTurkeyDinners + ProteinTunaSalad * NumTunaSalad >= MinProtein,\n    name=\"min_protein_constraint\"\n)\n\n# Add constraint for minimum required carbs from Turkey Dinners and Tuna Salad Sandwiches\nmodel.addConstr(\n    NumTurkeyDinners * CarbsTurkeyDinner + NumTunaSalad * CarbsTunaSalad >= MinCarbs,\n    name=\"min_carbs_requirement\"\n)\n\n# Add constraint to ensure at most MaxTurkeyDinnerProportion of meals are turkey dinners\nmodel.addConstr(NumTurkeyDinners <= MaxTurkeyDinnerProportion * TotalMeals, name=\"turkey_dinner_proportion\")\n\n# Add constraint to ensure TotalMeals is the sum of NumTurkeyDinners and NumTunaSalad\nmodel.addConstr(TotalMeals == NumTurkeyDinners + NumTunaSalad, name=\"total_meals_constraint\")\n\n# Add protein intake constraint\nmodel.addConstr(ProteinTurkeyDinner * NumTurkeyDinners + ProteinTunaSalad * NumTunaSalad >= MinProtein, name=\"protein_requirement\")\n\n# Add constraint to ensure minimum required carbs intake\nmodel.addConstr(NumTurkeyDinners * CarbsTurkeyDinner + NumTunaSalad * CarbsTunaSalad >= MinCarbs, name=\"min_carbs_constraint\")\n\n# Add constraint to enforce the limit on turkey dinner proportions\nmodel.addConstr(NumTurkeyDinners <= MaxTurkeyDinnerProportion * TotalMeals, name=\"turkey_dinner_limit\")\n\n# Add constraint to define TotalMeals as the sum of NumTurkeyDinners and NumTunaSalad\nmodel.addConstr(TotalMeals == NumTurkeyDinners + NumTunaSalad, name=\"total_meals_definition\")\n\n# Set objective\nmodel.setObjective(FatTurkeyDinner * NumTurkeyDinners + FatTunaSalad * NumTunaSalad, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}