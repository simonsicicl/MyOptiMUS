{
    "background": "A man is recommended to eat burgers and pizza to gain weight and needs to meet certain dietary minimums while minimizing cholesterol intake.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Fat content per burger",
            "symbol": "FatPerBurger",
            "value": 10,
            "shape": [],
            "code": "FatPerBurger = data[\"FatPerBurger\"] # scalar parameter"
        },
        {
            "definition": "Calories per burger",
            "symbol": "CaloriesPerBurger",
            "value": 300,
            "shape": [],
            "code": "CaloriesPerBurger = data[\"CaloriesPerBurger\"] # scalar parameter"
        },
        {
            "definition": "Fat content per slice of pizza",
            "symbol": "FatPerPizzaSlice",
            "value": 8,
            "shape": [],
            "code": "FatPerPizzaSlice = data[\"FatPerPizzaSlice\"] # scalar parameter"
        },
        {
            "definition": "Calories per slice of pizza",
            "symbol": "CaloriesPerPizzaSlice",
            "value": 250,
            "shape": [],
            "code": "CaloriesPerPizzaSlice = data[\"CaloriesPerPizzaSlice\"] # scalar parameter"
        },
        {
            "definition": "Minimum required fat",
            "symbol": "MinFat",
            "value": 130,
            "shape": [],
            "code": "MinFat = data[\"MinFat\"] # scalar parameter"
        },
        {
            "definition": "Minimum required calories",
            "symbol": "MinCalories",
            "value": 3000,
            "shape": [],
            "code": "MinCalories = data[\"MinCalories\"] # scalar parameter"
        },
        {
            "definition": "Cholesterol per burger",
            "symbol": "CholesterolPerBurger",
            "value": 12,
            "shape": [],
            "code": "CholesterolPerBurger = data[\"CholesterolPerBurger\"] # scalar parameter"
        },
        {
            "definition": "Cholesterol per slice of pizza",
            "symbol": "CholesterolPerPizzaSlice",
            "value": 10,
            "shape": [],
            "code": "CholesterolPerPizzaSlice = data[\"CholesterolPerPizzaSlice\"] # scalar parameter"
        },
        {
            "definition": "Ratio of the number of pizza slices to the number of burgers",
            "symbol": "PizzaBurgerRatio",
            "value": 0.33,
            "shape": [],
            "code": "PizzaBurgerRatio = data[\"PizzaBurgerRatio\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The total fat from burgers (\textup{NumberOfBurgers}) and pizza slices (\textup{NumberOfPizzaSlices}) must be at least the minimum fat requirement (\textup{MinFat}).",
            "status": "coded",
            "formulation": "\\textup{FatPerBurger} \\cdot \\textup{NumberOfBurgers} + \\textup{FatPerPizzaSlice} \\cdot \\textup{NumberOfPizzaSlices} \\geq \\textup{MinFat}",
            "related_variables": [
                "NumberOfBurgers",
                "NumberOfPizzaSlices"
            ],
            "related_parameters": [
                "FatPerBurger",
                "FatPerPizzaSlice",
                "MinFat"
            ],
            "code": "# Add fat requirement constraint\nmodel.addConstr(\n    FatPerBurger * NumberOfBurgers + FatPerPizzaSlice * NumberOfPizzaSlices >= MinFat, \n    name=\"min_fat_requirement\"\n)"
        },
        {
            "description": "The total calories consumed from burgers and pizza slices must be at least MinCalories.",
            "status": "coded",
            "formulation": "\\\\textup{CaloriesPerBurger} \\\\cdot \\\\textup{NumberOfBurgers} + \\\\textup{CaloriesPerPizzaSlice} \\\\cdot \\\\textup{NumberOfPizzaSlices} \\\\geq \\\\textup{MinCalories}",
            "related_variables": [
                "NumberOfBurgers",
                "NumberOfPizzaSlices"
            ],
            "related_parameters": [
                "CaloriesPerBurger",
                "CaloriesPerPizzaSlice",
                "MinCalories"
            ],
            "code": "# Add calorie intake constraint\nmodel.addConstr(\n    CaloriesPerBurger * NumberOfBurgers + CaloriesPerPizzaSlice * NumberOfPizzaSlices >= MinCalories, \n    name=\"calorie_intake_constraint\"\n)"
        },
        {
            "description": "The quantity of pizza slices eaten must be at least PizzaBurgerRatio times the quantity of burgers eaten.",
            "status": "coded",
            "formulation": "\\textup{NumberOfPizzaSlices} \\geq \\textup{PizzaBurgerRatio} \\cdot \\textup{NumberOfBurgers}",
            "related_variables": [
                "NumberOfBurgers",
                "NumberOfPizzaSlices"
            ],
            "related_parameters": [
                "PizzaBurgerRatio"
            ],
            "code": "# Add constraint ensuring the number of pizza slices eaten is at least PizzaBurgerRatio times the number of burgers eaten\nmodel.addConstr(NumberOfPizzaSlices >= PizzaBurgerRatio * NumberOfBurgers, name=\"pizza_burger_ratio_constraint\")"
        },
        {
            "description": "The number of burgers eaten is non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBurgers} \\geq 0",
            "related_variables": [
                "NumberOfBurgers"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for the number of burgers\nmodel.addConstr(NumberOfBurgers >= 0, name=\"non_negativity_burgers\")"
        },
        {
            "description": "The number of pizza slices consumed must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{NumberOfPizzaSlices} \\\\geq 0",
            "related_variables": [
                "NumberOfPizzaSlices"
            ],
            "related_parameters": [],
            "code": "# The variable \"NumberOfPizzaSlices\" is non-negative by default (lower bound set to 0), so no additional code is needed to enforce this constraint."
        },
        {
            "description": "Ensure the minimum required fat is met by the burgers and pizza slices.",
            "status": "coded",
            "formulation": "\\textup{FatPerBurger} \\cdot \\textup{NumberOfBurgers} + \\textup{FatPerPizzaSlice} \\cdot \\textup{NumberOfPizzaSlices} \\geq \\textup{MinFat}",
            "related_variables": [
                "NumberOfBurgers",
                "NumberOfPizzaSlices"
            ],
            "related_parameters": [
                "FatPerBurger",
                "FatPerPizzaSlice",
                "MinFat"
            ],
            "code": "# Add fat requirement constraint\nmodel.addConstr(FatPerBurger * NumberOfBurgers + FatPerPizzaSlice * NumberOfPizzaSlices >= MinFat, name=\"min_fat_requirement\")"
        },
        {
            "description": "Ensure the minimum required calories are met by the burgers and pizza slices.",
            "status": "coded",
            "formulation": "\\textup{CaloriesPerBurger} \\cdot \\textup{NumberOfBurgers} + \\textup{CaloriesPerPizzaSlice} \\cdot \\textup{NumberOfPizzaSlices} \\geq \\textup{MinCalories}",
            "related_variables": [
                "NumberOfBurgers",
                "NumberOfPizzaSlices"
            ],
            "related_parameters": [
                "CaloriesPerBurger",
                "CaloriesPerPizzaSlice",
                "MinCalories"
            ],
            "code": "# Add calorie requirement constraint\nmodel.addConstr(\n    CaloriesPerBurger * NumberOfBurgers + CaloriesPerPizzaSlice * NumberOfPizzaSlices >= MinCalories,\n    name=\"calorie_requirement\"\n)"
        },
        {
            "description": "Ensure the ratio of the number of pizza slices to the number of burgers is maintained.",
            "status": "coded",
            "formulation": "\\textup{NumberOfPizzaSlices} = \\textup{PizzaBurgerRatio} \\cdot \\textup{NumberOfBurgers}",
            "related_variables": [
                "NumberOfBurgers",
                "NumberOfPizzaSlices"
            ],
            "related_parameters": [
                "PizzaBurgerRatio"
            ],
            "code": "# Add a constraint to ensure the ratio of the number of pizza slices to the number of burgers\nmodel.addConstr(NumberOfPizzaSlices == PizzaBurgerRatio * NumberOfBurgers, name=\"pizza_burger_ratio\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of burgers consumed.",
            "symbol": "NumberOfBurgers",
            "shape": [],
            "status": "coded",
            "code": "NumberOfBurgers = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfBurgers\")"
        },
        {
            "definition": "The number of pizza slices consumed.",
            "symbol": "NumberOfPizzaSlices",
            "shape": [],
            "status": "coded",
            "code": "NumberOfPizzaSlices = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfPizzaSlices\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cholesterol intake from burgers and pizzas.",
            "status": "coded",
            "formulation": "\\textup{Minimize:} \\quad \\textup{CholesterolPerBurger} \\cdot \\textup{NumberOfBurgers} + \\textup{CholesterolPerPizzaSlice} \\cdot \\textup{NumberOfPizzaSlices}",
            "related_variables": [
                "NumberOfBurgers",
                "NumberOfPizzaSlices"
            ],
            "related_parameters": [
                "CholesterolPerBurger",
                "CholesterolPerPizzaSlice"
            ],
            "code": "# Set objective\nmodel.setObjective(CholesterolPerBurger * NumberOfBurgers + CholesterolPerPizzaSlice * NumberOfPizzaSlices, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 157.35759493670884,
    "log_path": "logs/log_20250413153806_nl4opt_prob_117/",
    "problem_path": "data/nl4opt/prob_117/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_117/data.json\", \"r\") as f:\n    data = json.load(f)\n\nFatPerBurger = data[\"FatPerBurger\"] # scalar parameter\nCaloriesPerBurger = data[\"CaloriesPerBurger\"] # scalar parameter\nFatPerPizzaSlice = data[\"FatPerPizzaSlice\"] # scalar parameter\nCaloriesPerPizzaSlice = data[\"CaloriesPerPizzaSlice\"] # scalar parameter\nMinFat = data[\"MinFat\"] # scalar parameter\nMinCalories = data[\"MinCalories\"] # scalar parameter\nCholesterolPerBurger = data[\"CholesterolPerBurger\"] # scalar parameter\nCholesterolPerPizzaSlice = data[\"CholesterolPerPizzaSlice\"] # scalar parameter\nPizzaBurgerRatio = data[\"PizzaBurgerRatio\"] # scalar parameter\nNumberOfBurgers = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfBurgers\")\nNumberOfPizzaSlices = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfPizzaSlices\")\n\n# Add fat requirement constraint\nmodel.addConstr(\n    FatPerBurger * NumberOfBurgers + FatPerPizzaSlice * NumberOfPizzaSlices >= MinFat, \n    name=\"min_fat_requirement\"\n)\n\n# Add calorie intake constraint\nmodel.addConstr(\n    CaloriesPerBurger * NumberOfBurgers + CaloriesPerPizzaSlice * NumberOfPizzaSlices >= MinCalories, \n    name=\"calorie_intake_constraint\"\n)\n\n# Add constraint ensuring the number of pizza slices eaten is at least PizzaBurgerRatio times the number of burgers eaten\nmodel.addConstr(NumberOfPizzaSlices >= PizzaBurgerRatio * NumberOfBurgers, name=\"pizza_burger_ratio_constraint\")\n\n# Non-negativity constraint for the number of burgers\nmodel.addConstr(NumberOfBurgers >= 0, name=\"non_negativity_burgers\")\n\n# The variable \"NumberOfPizzaSlices\" is non-negative by default (lower bound set to 0), so no additional code is needed to enforce this constraint.\n\n# Add fat requirement constraint\nmodel.addConstr(FatPerBurger * NumberOfBurgers + FatPerPizzaSlice * NumberOfPizzaSlices >= MinFat, name=\"min_fat_requirement\")\n\n# Add calorie requirement constraint\nmodel.addConstr(\n    CaloriesPerBurger * NumberOfBurgers + CaloriesPerPizzaSlice * NumberOfPizzaSlices >= MinCalories,\n    name=\"calorie_requirement\"\n)\n\n# Add a constraint to ensure the ratio of the number of pizza slices to the number of burgers\nmodel.addConstr(NumberOfPizzaSlices == PizzaBurgerRatio * NumberOfBurgers, name=\"pizza_burger_ratio\")\n\n# Set objective\nmodel.setObjective(CholesterolPerBurger * NumberOfBurgers + CholesterolPerPizzaSlice * NumberOfPizzaSlices, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}