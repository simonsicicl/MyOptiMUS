{
    "background": "A daycare center needs to schedule buses and personal cars to pick up children, with capacity constraints on each vehicle type and certain requirements for the minimum number of children picked up, and the minimum number of personal cars due to children's special attention needs.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Capacity of a bus",
            "symbol": "BusCapacity",
            "value": 9,
            "shape": [],
            "code": "BusCapacity = data[\"BusCapacity\"] # scalar parameter"
        },
        {
            "definition": "Capacity of a personal car",
            "symbol": "CarCapacity",
            "value": 4,
            "shape": [],
            "code": "CarCapacity = data[\"CarCapacity\"] # scalar parameter"
        },
        {
            "definition": "Minimum total number of children to pick up",
            "symbol": "MinChildren",
            "value": 100,
            "shape": [],
            "code": "MinChildren = data[\"MinChildren\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of personal cars due to children needing extra attention",
            "symbol": "MinCars",
            "value": 5,
            "shape": [],
            "code": "MinCars = data[\"MinCars\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of buses must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBuses} \\geq 0",
            "related_variables": [
                "NumberOfBuses"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since the integrality and non-negativity of NumberOfBuses is inherently ensured by its variable definition as an INTEGER type in gurobipy."
        },
        {
            "description": "The number of personal cars used for picking up children must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{NumberOfCars} \\geq 0",
            "related_variables": [
                "NumberOfCars"
            ],
            "related_parameters": [],
            "code": "# No code is needed because the non-negativity constraint is automatically enforced due to the default non-negative domain of continuous variables in Gurobi."
        },
        {
            "description": "The total capacity of buses and cars must accommodate at least MinChildren children.",
            "status": "coded",
            "formulation": "\\\\textup{NumberOfBuses} \\\\cdot \\\\textup{BusCapacity} + \\\\textup{NumberOfCars} \\\\cdot \\\\textup{CarCapacity} \\\\geq \\\\textup{MinChildren}",
            "related_variables": [
                "NumberOfBuses",
                "NumberOfCars"
            ],
            "related_parameters": [
                "BusCapacity",
                "CarCapacity",
                "MinChildren"
            ],
            "code": "# Add total capacity constraint for buses and cars\nmodel.addConstr(NumberOfBuses * BusCapacity + NumberOfCars * CarCapacity >= MinChildren, \n                name=\"total_capacity_constraint\")"
        },
        {
            "description": "The number of buses used must always be greater than the number of personal cars used.",
            "status": "coded",
            "formulation": "\\\\textup{NumberOfBuses} \\\\geq \\\\textup{NumberOfCars} + 1",
            "related_variables": [
                "NumberOfBuses",
                "NumberOfCars"
            ],
            "related_parameters": [],
            "code": "# Add constraint: The number of buses used must always be greater than the number of personal cars used.\nmodel.addConstr(NumberOfBuses >= NumberOfCars + 1, name=\"buses_greater_than_cars\")"
        },
        {
            "description": "Constraint enforcing a minimum number of personal cars due to children needing special attention.",
            "status": "coded",
            "formulation": "\\textup{NumberOfCars} \\geq \\textup{MinCars}",
            "related_variables": [
                "NumberOfCars"
            ],
            "related_parameters": [
                "MinCars"
            ],
            "code": "# Add constraint to enforce a minimum number of personal cars\nmodel.addConstr(NumberOfCars >= MinCars, name=\"min_personal_cars\")"
        },
        {
            "description": "Ensure the total capacity of buses and cars meets or exceeds the minimum children pickup requirement.",
            "status": "coded",
            "formulation": "\\textup{BusCapacity} \\cdot \\textup{NumberOfBuses} + \\textup{CarCapacity} \\cdot \\textup{NumberOfCars} \\geq \\textup{MinChildren}",
            "related_variables": [
                "NumberOfBuses",
                "NumberOfCars"
            ],
            "related_parameters": [
                "BusCapacity",
                "CarCapacity",
                "MinChildren"
            ],
            "code": "# Add bus and car capacity constraint\nmodel.addConstr(BusCapacity * NumberOfBuses + CarCapacity * NumberOfCars >= MinChildren, name=\"capacity_constraint\")"
        },
        {
            "description": "Ensure the number of personal cars scheduled meets or exceeds the minimum requirement.",
            "status": "coded",
            "formulation": "\\textup{NumberOfCars} \\geq \\textup{MinCars}",
            "related_variables": [
                "NumberOfCars"
            ],
            "related_parameters": [
                "MinCars"
            ],
            "code": "# Add the constraint to ensure the number of personal cars meets or exceeds the minimum requirement\nmodel.addConstr(NumberOfCars >= MinCars, name=\"minimum_cars_requirement\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of buses used for picking up children.",
            "symbol": "NumberOfBuses",
            "shape": [],
            "status": "coded",
            "code": "NumberOfBuses = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBuses\")"
        },
        {
            "definition": "The number of personal cars used for picking up children.",
            "symbol": "NumberOfCars",
            "shape": [],
            "status": "coded",
            "code": "NumberOfCars = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfCars\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of buses and personal cars scheduled.",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{NumberOfBuses} + \\textup{NumberOfCars}",
            "related_variables": [
                "NumberOfBuses",
                "NumberOfCars"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(NumberOfBuses + NumberOfCars, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 14.0,
    "log_path": "logs/log_20250414055611_nl4opt_prob_280/",
    "problem_path": "data/nl4opt/prob_280/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_280/data.json\", \"r\") as f:\n    data = json.load(f)\n\nBusCapacity = data[\"BusCapacity\"] # scalar parameter\nCarCapacity = data[\"CarCapacity\"] # scalar parameter\nMinChildren = data[\"MinChildren\"] # scalar parameter\nMinCars = data[\"MinCars\"] # scalar parameter\nNumberOfBuses = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBuses\")\nNumberOfCars = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NumberOfCars\")\n\n# No additional code needed since the integrality and non-negativity of NumberOfBuses is inherently ensured by its variable definition as an INTEGER type in gurobipy.\n\n# No code is needed because the non-negativity constraint is automatically enforced due to the default non-negative domain of continuous variables in Gurobi.\n\n# Add total capacity constraint for buses and cars\nmodel.addConstr(NumberOfBuses * BusCapacity + NumberOfCars * CarCapacity >= MinChildren, \n                name=\"total_capacity_constraint\")\n\n# Add constraint: The number of buses used must always be greater than the number of personal cars used.\nmodel.addConstr(NumberOfBuses >= NumberOfCars + 1, name=\"buses_greater_than_cars\")\n\n# Add constraint to enforce a minimum number of personal cars\nmodel.addConstr(NumberOfCars >= MinCars, name=\"min_personal_cars\")\n\n# Add bus and car capacity constraint\nmodel.addConstr(BusCapacity * NumberOfBuses + CarCapacity * NumberOfCars >= MinChildren, name=\"capacity_constraint\")\n\n# Add the constraint to ensure the number of personal cars meets or exceeds the minimum requirement\nmodel.addConstr(NumberOfCars >= MinCars, name=\"minimum_cars_requirement\")\n\n# Set objective\nmodel.setObjective(NumberOfBuses + NumberOfCars, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}