{
    "background": "A patient needs to increase her protein and iron intake. She has the option of eating fish or chicken meals, each containing certain amounts of protein, iron, and fat.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of protein in each fish meal",
            "symbol": "ProteinFish",
            "value": 10,
            "shape": [],
            "code": "ProteinFish = data[\"ProteinFish\"] # scalar parameter"
        },
        {
            "definition": "Units of iron in each fish meal",
            "symbol": "IronFish",
            "value": 12,
            "shape": [],
            "code": "IronFish = data[\"IronFish\"] # scalar parameter"
        },
        {
            "definition": "Units of protein in each chicken meal",
            "symbol": "ProteinChicken",
            "value": 15,
            "shape": [],
            "code": "ProteinChicken = data[\"ProteinChicken\"] # scalar parameter"
        },
        {
            "definition": "Units of iron in each chicken meal",
            "symbol": "IronChicken",
            "value": 8,
            "shape": [],
            "code": "IronChicken = data[\"IronChicken\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of protein",
            "symbol": "MinProtein",
            "value": 130,
            "shape": [],
            "code": "MinProtein = data[\"MinProtein\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of iron",
            "symbol": "MinIron",
            "value": 120,
            "shape": [],
            "code": "MinIron = data[\"MinIron\"] # scalar parameter"
        },
        {
            "definition": "Minimum ratio of chicken meals to fish meals",
            "symbol": "MinChickenFishRatio",
            "value": 2,
            "shape": [],
            "code": "MinChickenFishRatio = data[\"MinChickenFishRatio\"] # scalar parameter"
        },
        {
            "definition": "Units of fat in each fish meal",
            "symbol": "FatFish",
            "value": 7,
            "shape": [],
            "code": "FatFish = data[\"FatFish\"] # scalar parameter"
        },
        {
            "definition": "Units of fat in each chicken meal",
            "symbol": "FatChicken",
            "value": 10,
            "shape": [],
            "code": "FatChicken = data[\"FatChicken\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Constraint to ensure the patient consumes at least the minimum required units of protein.",
            "status": "coded",
            "formulation": "\\textup{ProteinFish} \\cdot \\textup{FishMeals} + \\textup{ProteinChicken} \\cdot \\textup{ChickenMeals} \\geq \\textup{MinProtein}",
            "related_variables": [
                "FishMeals",
                "ChickenMeals"
            ],
            "related_parameters": [
                "ProteinFish",
                "ProteinChicken",
                "MinProtein"
            ],
            "code": "# Add constraint to ensure at least the minimum required protein is consumed\nmodel.addConstr(FishMeals * ProteinFish + ChickenMeals * ProteinChicken >= MinProtein, name=\"min_protein_requirement\")"
        },
        {
            "description": "Ensure the patient consumes at least the minimum required units of iron.",
            "status": "coded",
            "formulation": "\\\\textup{IronFish} \\\\cdot \\\\textup{FishMeals} + \\\\textup{IronChicken} \\\\cdot \\\\textup{ChickenMeals} \\\\geq \\\\textup{MinIron}",
            "related_variables": [
                "FishMeals",
                "ChickenMeals"
            ],
            "related_parameters": [
                "IronFish",
                "IronChicken",
                "MinIron"
            ],
            "code": "# Add the constraint to ensure the patient consumes at least the minimum required units of iron\nmodel.addConstr(\n    FishMeals * IronFish + ChickenMeals * IronChicken >= MinIron,\n    name=\"min_iron_requirement\"\n)"
        },
        {
            "description": "The number of fish meals is non-negative",
            "status": "coded",
            "formulation": "\\\\textup{FishMeals} \\geq 0",
            "related_variables": [
                "FishMeals"
            ],
            "related_parameters": [],
            "code": "# The non-negativity constraint for FishMeals is implicitly satisfied by its definition as a continuous variable which is non-negative by default."
        },
        {
            "description": "The number of chicken meals is non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{ChickenMeals} \\\\geq 0",
            "related_variables": [
                "ChickenMeals"
            ],
            "related_parameters": [],
            "code": "# No code needed as the non-negativity constraint is inherently satisfied by the variable type (continuous by default is >= 0 in Gurobi)."
        },
        {
            "description": "Ensure the total protein intake meets the minimum requirement",
            "status": "coded",
            "formulation": "\\\\textup{ProteinFish} \\\\times \\\\textup{FishMeals} + \\\\textup{ProteinChicken} \\\\times \\\\textup{ChickenMeals} \\\\geq \\\\textup{MinProtein}",
            "related_variables": [
                "FishMeals",
                "ChickenMeals"
            ],
            "related_parameters": [
                "ProteinFish",
                "ProteinChicken",
                "MinProtein"
            ],
            "code": "# Add protein intake constraint\nmodel.addConstr(FishMeals * ProteinFish + ChickenMeals * ProteinChicken >= MinProtein, name=\"protein_requirement\")"
        },
        {
            "description": "Ensure the total iron intake meets the minimum requirement",
            "status": "coded",
            "formulation": "\\\\textup{IronFish} \\\\times \\\\textup{FishMeals} + \\\\textup{IronChicken} \\\\times \\\\textup{ChickenMeals} \\\\geq \\\\textup{MinIron}",
            "related_variables": [
                "FishMeals",
                "ChickenMeals"
            ],
            "related_parameters": [
                "IronFish",
                "IronChicken",
                "MinIron"
            ],
            "code": "# Add constraint to ensure the total iron intake meets the minimum requirement\nmodel.addConstr(FishMeals * IronFish + ChickenMeals * IronChicken >= MinIron, name=\"min_iron_intake\")"
        },
        {
            "description": "Ensure the minimum ratio of chicken meals to fish meals is maintained",
            "status": "coded",
            "formulation": "\\\\textup{ChickenMeals} \\\\geq \\\\textup{MinChickenFishRatio} \\\\times \\\\textup{FishMeals}",
            "related_variables": [
                "FishMeals",
                "ChickenMeals"
            ],
            "related_parameters": [
                "MinChickenFishRatio"
            ],
            "code": "# Add constraint to ensure the minimum ratio of chicken meals to fish meals is maintained\nmodel.addConstr(ChickenMeals >= MinChickenFishRatio * FishMeals, name=\"min_chicken_fish_ratio_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of fish meals consumed by the patient",
            "symbol": "FishMeals",
            "shape": [],
            "status": "coded",
            "code": "FishMeals = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"FishMeals\")"
        },
        {
            "definition": "Number of chicken meals consumed by the patient",
            "symbol": "ChickenMeals",
            "shape": [],
            "status": "coded",
            "code": "ChickenMeals = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ChickenMeals\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total fat intake from consuming fish and chicken meals",
            "status": "coded",
            "formulation": "\\\\textup{FatFish} \\\\times \\\\textup{FishMeals} + \\\\textup{FatChicken} \\\\times \\\\textup{ChickenMeals}",
            "related_variables": [
                "FishMeals",
                "ChickenMeals"
            ],
            "related_parameters": [
                "FatFish",
                "FatChicken"
            ],
            "code": "# Set objective\nmodel.setObjective(FatFish * FishMeals + FatChicken * ChickenMeals, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 115.71428571428571,
    "log_path": "logs/log_20250413152836_nl4opt_prob_107/",
    "problem_path": "data/nl4opt/prob_107/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_107/data.json\", \"r\") as f:\n    data = json.load(f)\n\nProteinFish = data[\"ProteinFish\"] # scalar parameter\nIronFish = data[\"IronFish\"] # scalar parameter\nProteinChicken = data[\"ProteinChicken\"] # scalar parameter\nIronChicken = data[\"IronChicken\"] # scalar parameter\nMinProtein = data[\"MinProtein\"] # scalar parameter\nMinIron = data[\"MinIron\"] # scalar parameter\nMinChickenFishRatio = data[\"MinChickenFishRatio\"] # scalar parameter\nFatFish = data[\"FatFish\"] # scalar parameter\nFatChicken = data[\"FatChicken\"] # scalar parameter\nFishMeals = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"FishMeals\")\nChickenMeals = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ChickenMeals\")\n\n# Add constraint to ensure at least the minimum required protein is consumed\nmodel.addConstr(FishMeals * ProteinFish + ChickenMeals * ProteinChicken >= MinProtein, name=\"min_protein_requirement\")\n\n# Add the constraint to ensure the patient consumes at least the minimum required units of iron\nmodel.addConstr(\n    FishMeals * IronFish + ChickenMeals * IronChicken >= MinIron,\n    name=\"min_iron_requirement\"\n)\n\n# The non-negativity constraint for FishMeals is implicitly satisfied by its definition as a continuous variable which is non-negative by default.\n\n# No code needed as the non-negativity constraint is inherently satisfied by the variable type (continuous by default is >= 0 in Gurobi).\n\n# Add protein intake constraint\nmodel.addConstr(FishMeals * ProteinFish + ChickenMeals * ProteinChicken >= MinProtein, name=\"protein_requirement\")\n\n# Add constraint to ensure the total iron intake meets the minimum requirement\nmodel.addConstr(FishMeals * IronFish + ChickenMeals * IronChicken >= MinIron, name=\"min_iron_intake\")\n\n# Add constraint to ensure the minimum ratio of chicken meals to fish meals is maintained\nmodel.addConstr(ChickenMeals >= MinChickenFishRatio * FishMeals, name=\"min_chicken_fish_ratio_constraint\")\n\n# Set objective\nmodel.setObjective(FatFish * FishMeals + FatChicken * ChickenMeals, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}