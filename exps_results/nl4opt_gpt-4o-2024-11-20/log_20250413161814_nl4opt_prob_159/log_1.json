{
    "background": "A meat shop needs to ship burger patties using refrigerated trucks and vans with specific capacities and costs, following certain restrictions regarding movement in the city and budget.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Maximum capacity of a truck",
            "symbol": "TruckCapacity",
            "value": 1000,
            "shape": [],
            "code": "TruckCapacity = data[\"TruckCapacity\"] # scalar parameter"
        },
        {
            "definition": "Cost per truck trip",
            "symbol": "TruckCost",
            "value": 300,
            "shape": [],
            "code": "TruckCost = data[\"TruckCost\"] # scalar parameter"
        },
        {
            "definition": "Maximum capacity of a van",
            "symbol": "VanCapacity",
            "value": 500,
            "shape": [],
            "code": "VanCapacity = data[\"VanCapacity\"] # scalar parameter"
        },
        {
            "definition": "Cost per van trip",
            "symbol": "VanCost",
            "value": 100,
            "shape": [],
            "code": "VanCost = data[\"VanCost\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of patties to ship",
            "symbol": "MinPatties",
            "value": 50000,
            "shape": [],
            "code": "MinPatties = data[\"MinPatties\"] # scalar parameter"
        },
        {
            "definition": "Budget for shipments",
            "symbol": "Budget",
            "value": 12500,
            "shape": [],
            "code": "Budget = data[\"Budget\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of trucks used in shipment should be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{TrucksUsed} \\\\geq 0",
            "related_variables": [
                "TrucksUsed"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since non-negativity for TrucksUsed is automatically handled by Gurobi's non-negative domain for integer variables."
        },
        {
            "description": "The constraint ensures that the number of vans used is non-negative.",
            "status": "coded",
            "formulation": "\\textup{VansUsed} \\geq 0",
            "related_variables": [
                "VansUsed"
            ],
            "related_parameters": [],
            "code": "# No code needed since the integrality and non-negativity of variables are automatically handled internally by Gurobi when defining the variable using `gp.GRB.INTEGER`."
        },
        {
            "description": "The number of trucks must not exceed the number of vans.",
            "status": "coded",
            "formulation": "\\\\textup{TrucksUsed} \\\\leq \\\\textup{VansUsed}",
            "related_variables": [
                "TrucksUsed",
                "VansUsed"
            ],
            "related_parameters": [],
            "code": "# Add constraint: The number of trucks must not exceed the number of vans\nmodel.addConstr(TrucksUsed <= VansUsed, name=\"trucks_vans_constraint\")"
        },
        {
            "description": "At least \\textup{MinPatties} patties need to be shipped.",
            "status": "coded",
            "formulation": "\\textup{TruckCapacity} \\cdot \\textup{TrucksUsed} + \\textup{VanCapacity} \\cdot \\textup{VansUsed} \\geq \\textup{MinPatties}",
            "related_variables": [
                "TrucksUsed",
                "VansUsed"
            ],
            "related_parameters": [
                "TruckCapacity",
                "VanCapacity",
                "MinPatties"
            ],
            "code": "# Add constraint to ensure at least MinPatties are shipped\nmodel.addConstr(TruckCapacity * TrucksUsed + VanCapacity * VansUsed >= MinPatties, name=\"min_patties_shipped\")"
        },
        {
            "description": "The total cost of using trucks and vans must not exceed the given Budget.",
            "status": "coded",
            "formulation": "\\textup{TruckCost} \\cdot \\textup{TrucksUsed} + \\textup{VanCost} \\cdot \\textup{VansUsed} \\leq \\textup{Budget}",
            "related_variables": [
                "TrucksUsed",
                "VansUsed"
            ],
            "related_parameters": [
                "TruckCost",
                "VanCost",
                "Budget"
            ],
            "code": "# Add budget constraint for truck and van usage\nmodel.addConstr(TruckCost * TrucksUsed + VanCost * VansUsed <= Budget, name=\"budget_constraint\")"
        },
        {
            "description": "The total shipping capacity must meet or exceed the minimum patties required",
            "status": "coded",
            "formulation": "\\textup{TruckCapacity} \\cdot \\textup{TrucksUsed} + \\textup{VanCapacity} \\cdot \\textup{VansUsed} \\geq \\textup{MinPatties}",
            "related_variables": [
                "TrucksUsed",
                "VansUsed"
            ],
            "related_parameters": [
                "TruckCapacity",
                "VanCapacity",
                "MinPatties"
            ],
            "code": "# Add shipping capacity constraint\nmodel.addConstr(TruckCapacity * TrucksUsed + VanCapacity * VansUsed >= MinPatties, name=\"shipping_capacity\")"
        },
        {
            "description": "The total cost of trips must not exceed the budget",
            "status": "coded",
            "formulation": "\\textup{TruckCost} \\cdot \\textup{TrucksUsed} + \\textup{VanCost} \\cdot \\textup{VansUsed} \\leq \\textup{Budget}",
            "related_variables": [
                "TrucksUsed",
                "VansUsed"
            ],
            "related_parameters": [
                "TruckCost",
                "VanCost",
                "Budget"
            ],
            "code": "# Add budget constraint for total cost of trips\nmodel.addConstr(TruckCost * TrucksUsed + VanCost * VansUsed <= Budget, name=\"budget_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of trucks used to ship burger patties.",
            "symbol": "TrucksUsed",
            "shape": [],
            "status": "coded",
            "code": "TrucksUsed = model.addVar(vtype=gp.GRB.INTEGER, name=\"TrucksUsed\")"
        },
        {
            "definition": "The number of vans used to ship burger patties.",
            "symbol": "VansUsed",
            "shape": [],
            "status": "coded",
            "code": "VansUsed = model.addVar(vtype=gp.GRB.INTEGER, name=\"VansUsed\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of trips for shipping the patties",
            "status": "coded",
            "formulation": "\\textup{Minimize:} \\quad \\textup{TrucksUsed} + \\textup{VansUsed}",
            "related_variables": [
                "TrucksUsed",
                "VansUsed"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(TrucksUsed + VansUsed, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413161814_nl4opt_prob_159/",
    "problem_path": "data/nl4opt/prob_159/"
}