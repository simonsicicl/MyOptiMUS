{
    "background": "A milk tea shop owner sells two types of milk teas that require milk and honey. Each type has a specific milk and honey requirement and contributes a specific profit.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Amount of milk in a bottle of black milk tea",
            "symbol": "BlackMilk",
            "value": 600,
            "shape": [],
            "code": "BlackMilk = data[\"BlackMilk\"] # scalar parameter"
        },
        {
            "definition": "Amount of honey in a bottle of black milk tea",
            "symbol": "BlackHoney",
            "value": 10,
            "shape": [],
            "code": "BlackHoney = data[\"BlackHoney\"] # scalar parameter"
        },
        {
            "definition": "Amount of milk in a bottle of matcha milk tea",
            "symbol": "MatchaMilk",
            "value": 525,
            "shape": [],
            "code": "MatchaMilk = data[\"MatchaMilk\"] # scalar parameter"
        },
        {
            "definition": "Amount of honey in a bottle of matcha milk tea",
            "symbol": "MatchaHoney",
            "value": 5,
            "shape": [],
            "code": "MatchaHoney = data[\"MatchaHoney\"] # scalar parameter"
        },
        {
            "definition": "Profit from selling one bottle of black milk tea",
            "symbol": "ProfitBlack",
            "value": 7.5,
            "shape": [],
            "code": "ProfitBlack = data[\"ProfitBlack\"] # scalar parameter"
        },
        {
            "definition": "Profit from selling one bottle of matcha milk tea",
            "symbol": "ProfitMatcha",
            "value": 5.0,
            "shape": [],
            "code": "ProfitMatcha = data[\"ProfitMatcha\"] # scalar parameter"
        },
        {
            "definition": "Total available amount of milk",
            "symbol": "TotalMilk",
            "value": 30000,
            "shape": [],
            "code": "TotalMilk = data[\"TotalMilk\"] # scalar parameter"
        },
        {
            "definition": "Total available amount of honey",
            "symbol": "TotalHoney",
            "value": 500,
            "shape": [],
            "code": "TotalHoney = data[\"TotalHoney\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of black milk tea bottles produced must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{BlackTeaBottles} \\\\geq 0",
            "related_variables": [
                "BlackTeaBottles"
            ],
            "related_parameters": [],
            "code": "# The variable BlackTeaBottles is inherently constrained to non-negative domain as it's defined as a continuous variable in Gurobi."
        },
        {
            "description": "The number of matcha milk tea bottles is non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{MatchaTeaBottles} \\\\geq 0",
            "related_variables": [
                "MatchaTeaBottles"
            ],
            "related_parameters": [],
            "code": "# The variable MatchaTeaBottles is already defined as non-negative (default for continuous variables in Gurobi)"
        },
        {
            "description": "Total milk used for black and matcha milk teas does not exceed TotalMilk grams.",
            "status": "coded",
            "formulation": "\\textup{BlackMilk} * \\textup{BlackTeaBottles} + \\textup{MatchaMilk} * \\textup{MatchaTeaBottles} \\leq \\textup{TotalMilk}",
            "related_variables": [
                "BlackTeaBottles",
                "MatchaTeaBottles"
            ],
            "related_parameters": [
                "BlackMilk",
                "MatchaMilk",
                "TotalMilk"
            ],
            "code": "# Add milk usage constraint for black and matcha milk teas\nmodel.addConstr(\n    BlackMilk * BlackTeaBottles + MatchaMilk * MatchaTeaBottles <= TotalMilk, \n    name=\"milk_usage_constraint\"\n)"
        },
        {
            "description": "The total honey used in producing black and matcha milk tea bottles does not exceed the available TotalHoney.",
            "status": "coded",
            "formulation": "\\\\textup{BlackHoney} \\\\cdot \\\\textup{BlackTeaBottles} + \\\\textup{MatchaHoney} \\\\cdot \\\\textup{MatchaTeaBottles} \\\\leq \\\\textup{TotalHoney}",
            "related_variables": [
                "BlackTeaBottles",
                "MatchaTeaBottles"
            ],
            "related_parameters": [
                "BlackHoney",
                "MatchaHoney",
                "TotalHoney"
            ],
            "code": "# Add honey usage constraint for black and matcha milk tea production\nmodel.addConstr(\n    BlackHoney * BlackTeaBottles + MatchaHoney * MatchaTeaBottles <= TotalHoney,\n    name=\"honey_usage_constraint\"\n)"
        },
        {
            "description": "The total milk required for production cannot exceed the total available milk.",
            "status": "coded",
            "formulation": "\\textup{BlackMilk} \\cdot \\textup{BlackTeaBottles} + \\textup{MatchaMilk} \\cdot \\textup{MatchaTeaBottles} \\leq \\textup{TotalMilk}",
            "related_variables": [
                "BlackTeaBottles",
                "MatchaTeaBottles"
            ],
            "related_parameters": [
                "BlackMilk",
                "MatchaMilk",
                "TotalMilk"
            ],
            "code": "# Add milk usage constraint\nmodel.addConstr(BlackMilk * BlackTeaBottles + MatchaMilk * MatchaTeaBottles <= TotalMilk, name=\"milk_usage_constraint\")"
        },
        {
            "description": "The total honey required for production cannot exceed the total available honey.",
            "status": "coded",
            "formulation": "\\textup{BlackHoney} \\cdot \\textup{BlackTeaBottles} + \\textup{MatchaHoney} \\cdot \\textup{MatchaTeaBottles} \\leq \\textup{TotalHoney}",
            "related_variables": [
                "BlackTeaBottles",
                "MatchaTeaBottles"
            ],
            "related_parameters": [
                "BlackHoney",
                "MatchaHoney",
                "TotalHoney"
            ],
            "code": "# Add constraint to ensure total honey required does not exceed total available honey\nmodel.addConstr(BlackHoney * BlackTeaBottles + MatchaHoney * MatchaTeaBottles <= TotalHoney, name=\"honey_availability\")"
        },
        {
            "description": "Non-negativity constraint for the number of black tea bottles.",
            "status": "coded",
            "formulation": "\\textup{BlackTeaBottles} \\geq 0",
            "related_variables": [
                "BlackTeaBottles"
            ],
            "related_parameters": [],
            "code": "# Non-negativity is inherently ensured by the default lower bound of 0 in gurobipy variables."
        },
        {
            "description": "Non-negativity constraint for the number of matcha tea bottles.",
            "status": "coded",
            "formulation": "\\textup{MatchaTeaBottles} \\geq 0",
            "related_variables": [
                "MatchaTeaBottles"
            ],
            "related_parameters": [],
            "code": "# Non-negativity is inherent in the variable definition of MatchaTeaBottles,\n# so no additional constraint code is required."
        }
    ],
    "variables": [
        {
            "definition": "Number of black milk tea bottles produced.",
            "symbol": "BlackTeaBottles",
            "shape": [],
            "status": "coded",
            "code": "BlackTeaBottles = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"BlackTeaBottles\")"
        },
        {
            "definition": "Number of matcha milk tea bottles produced.",
            "symbol": "MatchaTeaBottles",
            "shape": [],
            "status": "coded",
            "code": "MatchaTeaBottles = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"MatchaTeaBottles\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total profit from selling black and matcha milk tea bottles.",
            "status": "coded",
            "formulation": "\\textup{Maximize:} \\quad \\textup{ProfitBlack} \\cdot \\textup{BlackTeaBottles} + \\textup{ProfitMatcha} \\cdot \\textup{MatchaTeaBottles}",
            "related_variables": [
                "BlackTeaBottles",
                "MatchaTeaBottles"
            ],
            "related_parameters": [
                "ProfitBlack",
                "ProfitMatcha"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitBlack * BlackTeaBottles + ProfitMatcha * MatchaTeaBottles, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 375.0,
    "log_path": "logs/log_20250413172145_nl4opt_prob_203/",
    "problem_path": "data/nl4opt/prob_203/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_203/data.json\", \"r\") as f:\n    data = json.load(f)\n\nBlackMilk = data[\"BlackMilk\"] # scalar parameter\nBlackHoney = data[\"BlackHoney\"] # scalar parameter\nMatchaMilk = data[\"MatchaMilk\"] # scalar parameter\nMatchaHoney = data[\"MatchaHoney\"] # scalar parameter\nProfitBlack = data[\"ProfitBlack\"] # scalar parameter\nProfitMatcha = data[\"ProfitMatcha\"] # scalar parameter\nTotalMilk = data[\"TotalMilk\"] # scalar parameter\nTotalHoney = data[\"TotalHoney\"] # scalar parameter\nBlackTeaBottles = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"BlackTeaBottles\")\nMatchaTeaBottles = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"MatchaTeaBottles\")\n\n# The variable BlackTeaBottles is inherently constrained to non-negative domain as it's defined as a continuous variable in Gurobi.\n\n# The variable MatchaTeaBottles is already defined as non-negative (default for continuous variables in Gurobi)\n\n# Add milk usage constraint for black and matcha milk teas\nmodel.addConstr(\n    BlackMilk * BlackTeaBottles + MatchaMilk * MatchaTeaBottles <= TotalMilk, \n    name=\"milk_usage_constraint\"\n)\n\n# Add honey usage constraint for black and matcha milk tea production\nmodel.addConstr(\n    BlackHoney * BlackTeaBottles + MatchaHoney * MatchaTeaBottles <= TotalHoney,\n    name=\"honey_usage_constraint\"\n)\n\n# Add milk usage constraint\nmodel.addConstr(BlackMilk * BlackTeaBottles + MatchaMilk * MatchaTeaBottles <= TotalMilk, name=\"milk_usage_constraint\")\n\n# Add constraint to ensure total honey required does not exceed total available honey\nmodel.addConstr(BlackHoney * BlackTeaBottles + MatchaHoney * MatchaTeaBottles <= TotalHoney, name=\"honey_availability\")\n\n# Non-negativity is inherently ensured by the default lower bound of 0 in gurobipy variables.\n\n# Non-negativity is inherent in the variable definition of MatchaTeaBottles,\n# so no additional constraint code is required.\n\n# Set objective\nmodel.setObjective(ProfitBlack * BlackTeaBottles + ProfitMatcha * MatchaTeaBottles, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}