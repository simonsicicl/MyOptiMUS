{
    "background": "A sand company needs to optimize the number of small and large containers to deliver sand for playgrounds given labor and container constraints.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of units of sand a small container can hold",
            "symbol": "SmallCapacity",
            "value": 20,
            "shape": [],
            "code": "SmallCapacity = data[\"SmallCapacity\"] # scalar parameter"
        },
        {
            "definition": "Number of units of sand a large container can hold",
            "symbol": "LargeCapacity",
            "value": 50,
            "shape": [],
            "code": "LargeCapacity = data[\"LargeCapacity\"] # scalar parameter"
        },
        {
            "definition": "Number of people required to unload a small container",
            "symbol": "SmallUnload",
            "value": 1,
            "shape": [],
            "code": "SmallUnload = data[\"SmallUnload\"] # scalar parameter"
        },
        {
            "definition": "Number of people required to unload a large container",
            "symbol": "LargeUnload",
            "value": 3,
            "shape": [],
            "code": "LargeUnload = data[\"LargeUnload\"] # scalar parameter"
        },
        {
            "definition": "Ratio of the number of small containers to the number of large containers",
            "symbol": "ContainerRatio",
            "value": 3,
            "shape": [],
            "code": "ContainerRatio = data[\"ContainerRatio\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of small containers used",
            "symbol": "MinSmallContainers",
            "value": 5,
            "shape": [],
            "code": "MinSmallContainers = data[\"MinSmallContainers\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of large containers used",
            "symbol": "MinLargeContainers",
            "value": 3,
            "shape": [],
            "code": "MinLargeContainers = data[\"MinLargeContainers\"] # scalar parameter"
        },
        {
            "definition": "Total number of people available for unloading",
            "symbol": "PeopleAvailable",
            "value": 100,
            "shape": [],
            "code": "PeopleAvailable = data[\"PeopleAvailable\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Small and large containers must be non-negative integers.",
            "status": "formulated",
            "formulation": "\\textup{SmallContainers} \\geq 0, \\quad \\textup{LargeContainers} \\geq 0",
            "related_variables": [
                "SmallContainers",
                "LargeContainers"
            ],
            "related_parameters": []
        },
        {
            "description": "The total number of people required to unload small and large containers must not exceed the total available people.",
            "status": "formulated",
            "formulation": "(\\\\textup{SmallUnload} \\\\times \\\\textup{SmallContainers}) + (\\\\textup{LargeUnload} \\\\times \\\\textup{LargeContainers}) \\\\leq \\\\textup{PeopleAvailable}",
            "related_variables": [
                "SmallContainers",
                "LargeContainers"
            ],
            "related_parameters": [
                "SmallUnload",
                "LargeUnload",
                "PeopleAvailable"
            ]
        },
        {
            "description": "Small containers used must be ContainerRatio times the number of large containers used.",
            "status": "formulated",
            "formulation": "\\textup{SmallContainers} = \\textup{ContainerRatio} \\cdot \\textup{LargeContainers}",
            "related_variables": [
                "SmallContainers",
                "LargeContainers"
            ],
            "related_parameters": [
                "ContainerRatio"
            ]
        },
        {
            "description": "At least MinSmallContainers small containers must be used.",
            "status": "formulated",
            "formulation": "\\textup{SmallContainers} \\geq \\textup{MinSmallContainers}",
            "related_variables": [
                "SmallContainers"
            ],
            "related_parameters": [
                "MinSmallContainers"
            ]
        },
        {
            "description": "The minimum number of large containers required is MinLargeContainers.",
            "status": "formulated",
            "formulation": "\\textup{LargeContainers} \\geq \\textup{MinLargeContainers}",
            "related_variables": [
                "LargeContainers"
            ],
            "related_parameters": [
                "MinLargeContainers"
            ]
        },
        {
            "description": "Labor availability constraint ensuring total unloading labor does not exceed the available people.",
            "status": "formulated",
            "formulation": "(\\textup{SmallUnload} \\cdot \\textup{SmallContainers}) + (\\textup{LargeUnload} \\cdot \\textup{LargeContainers}) \\leq \\textup{PeopleAvailable}",
            "related_variables": [
                "SmallContainers",
                "LargeContainers"
            ],
            "related_parameters": [
                "SmallUnload",
                "LargeUnload",
                "PeopleAvailable"
            ]
        },
        {
            "description": "Minimum number of small containers constraint.",
            "status": "formulated",
            "formulation": "\\textup{SmallContainers} \\geq \\textup{MinSmallContainers}",
            "related_variables": [
                "SmallContainers"
            ],
            "related_parameters": [
                "MinSmallContainers"
            ]
        },
        {
            "description": "Minimum number of large containers constraint.",
            "status": "formulated",
            "formulation": "\\textup{LargeContainers} \\geq \\textup{MinLargeContainers}",
            "related_variables": [
                "LargeContainers"
            ],
            "related_parameters": [
                "MinLargeContainers"
            ]
        },
        {
            "description": "Container ratio constraint ensuring the number of small containers is at least a multiple of the number of large containers.",
            "status": "formulated",
            "formulation": "\\textup{SmallContainers} \\geq \\textup{ContainerRatio} \\cdot \\textup{LargeContainers}",
            "related_variables": [
                "SmallContainers",
                "LargeContainers"
            ],
            "related_parameters": [
                "ContainerRatio"
            ]
        }
    ],
    "variables": [
        {
            "definition": "Number of small containers used.",
            "symbol": "SmallContainers",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of large containers used.",
            "symbol": "LargeContainers",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total number of sand units delivered using small and large containers.",
            "status": "formulated",
            "formulation": "\\textup{Maximize}: \\quad (\\textup{SmallCapacity} \\cdot \\textup{SmallContainers}) + (\\textup{LargeCapacity} \\cdot \\textup{LargeContainers})",
            "related_variables": [
                "SmallContainers",
                "LargeContainers"
            ],
            "related_parameters": [
                "SmallCapacity",
                "LargeCapacity"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413162406_nl4opt_prob_164/",
    "problem_path": "data/nl4opt/prob_164/"
}