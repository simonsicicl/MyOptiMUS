{
    "background": "A patient requires a specific medication plan involving two types of pills. Each pill has different levels of pain and anxiety medication, as well as different discharge effects.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Pain medication per Pill 1",
            "symbol": "PainPillOne",
            "value": 0.2,
            "shape": [],
            "code": "PainPillOne = data[\"PainPillOne\"] # scalar parameter"
        },
        {
            "definition": "Anxiety medication per Pill 1",
            "symbol": "AnxietyPillOne",
            "value": 0.3,
            "shape": [],
            "code": "AnxietyPillOne = data[\"AnxietyPillOne\"] # scalar parameter"
        },
        {
            "definition": "Discharge caused by Pill 1",
            "symbol": "DischargePillOne",
            "value": 0.3,
            "shape": [],
            "code": "DischargePillOne = data[\"DischargePillOne\"] # scalar parameter"
        },
        {
            "definition": "Pain medication per Pill 2",
            "symbol": "PainPillTwo",
            "value": 0.6,
            "shape": [],
            "code": "PainPillTwo = data[\"PainPillTwo\"] # scalar parameter"
        },
        {
            "definition": "Anxiety medication per Pill 2",
            "symbol": "AnxietyPillTwo",
            "value": 0.2,
            "shape": [],
            "code": "AnxietyPillTwo = data[\"AnxietyPillTwo\"] # scalar parameter"
        },
        {
            "definition": "Discharge caused by Pill 2",
            "symbol": "DischargePillTwo",
            "value": 0.1,
            "shape": [],
            "code": "DischargePillTwo = data[\"DischargePillTwo\"] # scalar parameter"
        },
        {
            "definition": "Maximum units of pain medication allowed",
            "symbol": "MaxPainMedication",
            "value": 6,
            "shape": [],
            "code": "MaxPainMedication = data[\"MaxPainMedication\"] # scalar parameter"
        },
        {
            "definition": "Minimum units of anxiety medication required",
            "symbol": "MinAnxietyMedication",
            "value": 3,
            "shape": [],
            "code": "MinAnxietyMedication = data[\"MinAnxietyMedication\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of Pill 1 administered to the patient must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{PillOneUnits} \\geq 0",
            "related_variables": [
                "PillOneUnits"
            ],
            "related_parameters": [],
            "code": "# Since the variable PillOneUnits is already defined with non-negativity (vtype=gp.GRB.CONTINUOUS), no additional constraint is required."
        },
        {
            "description": "The number of Pill 2 administered to the patient must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{PillTwoUnits} \\geq 0",
            "related_variables": [
                "PillTwoUnits"
            ],
            "related_parameters": [],
            "code": "# No additional code is needed since the variable 'PillTwoUnits' is already defined as non-negative,\n# which is the default for continuous variables in Gurobi."
        },
        {
            "description": "The total pain medication provided by Pill 1 and Pill 2 must not exceed the maximum allowed units (MaxPainMedication).",
            "status": "coded",
            "formulation": "(\\textup{PainPillOne} \\cdot \\textup{PillOneUnits}) + (\\textup{PainPillTwo} \\cdot \\textup{PillTwoUnits}) \\leq \\textup{MaxPainMedication}",
            "related_variables": [
                "PillOneUnits",
                "PillTwoUnits"
            ],
            "related_parameters": [
                "PainPillOne",
                "PainPillTwo",
                "MaxPainMedication"
            ],
            "code": "# Add constraint: total pain medication provided by Pill 1 and Pill 2 must not exceed MaxPainMedication\nmodel.addConstr((PainPillOne * PillOneUnits) + (PainPillTwo * PillTwoUnits) <= MaxPainMedication, name=\"pain_medication_limit\")"
        },
        {
            "description": "The combined anxiety medication provided by Pill 1 and Pill 2 must be at least the minimum required anxiety medication.",
            "status": "coded",
            "formulation": "\\\\textup{AnxietyPillOne} \\\\cdot \\\\textup{PillOneUnits} + \\\\textup{AnxietyPillTwo} \\\\cdot \\\\textup{PillTwoUnits} \\\\geq \\\\textup{MinAnxietyMedication}",
            "related_variables": [
                "PillOneUnits",
                "PillTwoUnits"
            ],
            "related_parameters": [
                "AnxietyPillOne",
                "AnxietyPillTwo",
                "MinAnxietyMedication"
            ],
            "code": "# Add constraint to ensure combined anxiety medication is at least the minimum required \nmodel.addConstr(PillOneUnits * AnxietyPillOne + PillTwoUnits * AnxietyPillTwo >= MinAnxietyMedication, name=\"min_anxiety_medication\")"
        },
        {
            "description": "The total amount of pain medication provided by both pills should not exceed the maximum allowed.",
            "status": "coded",
            "formulation": "\\textup{PainPillOne} \\cdot \\textup{PillOneUnits} + \\textup{PainPillTwo} \\cdot \\textup{PillTwoUnits} \\leq \\textup{MaxPainMedication}",
            "related_variables": [
                "PillOneUnits",
                "PillTwoUnits"
            ],
            "related_parameters": [
                "PainPillOne",
                "PainPillTwo",
                "MaxPainMedication"
            ],
            "code": "# Add constraint to limit total pain medication provided by both pills\nmodel.addConstr(\n    PillOneUnits * PainPillOne + PillTwoUnits * PainPillTwo <= MaxPainMedication,\n    name=\"pain_medication_limit\"\n)"
        },
        {
            "description": "The total amount of anxiety medication provided by both pills should meet the minimum required.",
            "status": "coded",
            "formulation": "\\textup{AnxietyPillOne} \\cdot \\textup{PillOneUnits} + \\textup{AnxietyPillTwo} \\cdot \\textup{PillTwoUnits} \\geq \\textup{MinAnxietyMedication}",
            "related_variables": [
                "PillOneUnits",
                "PillTwoUnits"
            ],
            "related_parameters": [
                "AnxietyPillOne",
                "AnxietyPillTwo",
                "MinAnxietyMedication"
            ],
            "code": "# Add constraint to ensure the total amount of anxiety medication meets the minimum required\nmodel.addConstr(\n    AnxietyPillOne * PillOneUnits + AnxietyPillTwo * PillTwoUnits >= MinAnxietyMedication, \n    name=\"minimum_anxiety_medication\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "The number of Pill 1 administered to the patient",
            "symbol": "PillOneUnits",
            "shape": [],
            "status": "coded",
            "code": "PillOneUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PillOneUnits\")"
        },
        {
            "definition": "The number of Pill 2 administered to the patient",
            "symbol": "PillTwoUnits",
            "shape": [],
            "status": "coded",
            "code": "PillTwoUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PillTwoUnits\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total discharge resulting from the medication plan.",
            "status": "coded",
            "formulation": "\\textup{Minimize:} \\quad \\textup{DischargePillOne} \\cdot \\textup{PillOneUnits} + \\textup{DischargePillTwo} \\cdot \\textup{PillTwoUnits}",
            "related_variables": [
                "PillOneUnits",
                "PillTwoUnits"
            ],
            "related_parameters": [
                "DischargePillOne",
                "DischargePillTwo"
            ],
            "code": "# Set objective\nmodel.setObjective(DischargePillOne * PillOneUnits + DischargePillTwo * PillTwoUnits, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 2.1428571428571432,
    "log_path": "logs/log_20250413152231_nl4opt_prob_100/",
    "problem_path": "data/nl4opt/prob_100/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_100/data.json\", \"r\") as f:\n    data = json.load(f)\n\nPainPillOne = data[\"PainPillOne\"] # scalar parameter\nAnxietyPillOne = data[\"AnxietyPillOne\"] # scalar parameter\nDischargePillOne = data[\"DischargePillOne\"] # scalar parameter\nPainPillTwo = data[\"PainPillTwo\"] # scalar parameter\nAnxietyPillTwo = data[\"AnxietyPillTwo\"] # scalar parameter\nDischargePillTwo = data[\"DischargePillTwo\"] # scalar parameter\nMaxPainMedication = data[\"MaxPainMedication\"] # scalar parameter\nMinAnxietyMedication = data[\"MinAnxietyMedication\"] # scalar parameter\nPillOneUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PillOneUnits\")\nPillTwoUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PillTwoUnits\")\n\n# Since the variable PillOneUnits is already defined with non-negativity (vtype=gp.GRB.CONTINUOUS), no additional constraint is required.\n\n# No additional code is needed since the variable 'PillTwoUnits' is already defined as non-negative,\n# which is the default for continuous variables in Gurobi.\n\n# Add constraint: total pain medication provided by Pill 1 and Pill 2 must not exceed MaxPainMedication\nmodel.addConstr((PainPillOne * PillOneUnits) + (PainPillTwo * PillTwoUnits) <= MaxPainMedication, name=\"pain_medication_limit\")\n\n# Add constraint to ensure combined anxiety medication is at least the minimum required \nmodel.addConstr(PillOneUnits * AnxietyPillOne + PillTwoUnits * AnxietyPillTwo >= MinAnxietyMedication, name=\"min_anxiety_medication\")\n\n# Add constraint to limit total pain medication provided by both pills\nmodel.addConstr(\n    PillOneUnits * PainPillOne + PillTwoUnits * PainPillTwo <= MaxPainMedication,\n    name=\"pain_medication_limit\"\n)\n\n# Add constraint to ensure the total amount of anxiety medication meets the minimum required\nmodel.addConstr(\n    AnxietyPillOne * PillOneUnits + AnxietyPillTwo * PillTwoUnits >= MinAnxietyMedication, \n    name=\"minimum_anxiety_medication\"\n)\n\n# Set objective\nmodel.setObjective(DischargePillOne * PillOneUnits + DischargePillTwo * PillTwoUnits, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}