{
    "background": "Zeta Bakery sells strawberry and sugar cookies, with known profits for each type, and faces limitations on daily production capacity and demand.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Profit per strawberry cookie",
            "symbol": "StrawberryProfit",
            "value": 5.5,
            "shape": [],
            "code": "StrawberryProfit = data[\"StrawberryProfit\"] # scalar parameter"
        },
        {
            "definition": "Profit per sugar cookie",
            "symbol": "SugarProfit",
            "value": 12,
            "shape": [],
            "code": "SugarProfit = data[\"SugarProfit\"] # scalar parameter"
        },
        {
            "definition": "Maximum demand for strawberry cookies",
            "symbol": "MaxStrawberryDemand",
            "value": 100,
            "shape": [],
            "code": "MaxStrawberryDemand = data[\"MaxStrawberryDemand\"] # scalar parameter"
        },
        {
            "definition": "Maximum demand for sugar cookies",
            "symbol": "MaxSugarDemand",
            "value": 80,
            "shape": [],
            "code": "MaxSugarDemand = data[\"MaxSugarDemand\"] # scalar parameter"
        },
        {
            "definition": "Maximum production capacity of the bakery",
            "symbol": "MaxProductionCapacity",
            "value": 100,
            "shape": [],
            "code": "MaxProductionCapacity = data[\"MaxProductionCapacity\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Non-negativity constraint for the number of strawberry cookies produced.",
            "status": "coded",
            "formulation": "\\\\textup{StrawberryCookiesProduced} \\\\geq 0",
            "related_variables": [
                "StrawberryCookiesProduced"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for the number of strawberry cookies produced\nmodel.addConstr(StrawberryCookiesProduced >= 0, name=\"non_negativity_StrawberryCookiesProduced\")"
        },
        {
            "description": "The number of sugar cookies produced daily must be non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{SugarCookiesProduced} \\\\geq 0",
            "related_variables": [
                "SugarCookiesProduced"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for the SugarCookiesProduced variable\nmodel.addConstr(SugarCookiesProduced >= 0, name=\"non_negativity_sugar_cookies\")"
        },
        {
            "description": "The number of strawberry cookies produced daily cannot exceed the maximum demand for strawberry cookies.",
            "status": "coded",
            "formulation": "\\textup{StrawberryCookiesProduced} \\leq \\textup{MaxStrawberryDemand}",
            "related_variables": [
                "StrawberryCookiesProduced"
            ],
            "related_parameters": [
                "MaxStrawberryDemand"
            ],
            "code": "# Add constraint for strawberry cookie production not exceeding maximum demand\nmodel.addConstr(StrawberryCookiesProduced <= MaxStrawberryDemand, name=\"MaxStrawberryCookiesConstraint\")"
        },
        {
            "description": "The number of sugar cookies produced daily cannot exceed the daily demand for sugar cookies (MaxSugarDemand).",
            "status": "coded",
            "formulation": "\\\\textup{SugarCookiesProduced} \\\\leq \\\\textup{MaxSugarDemand}",
            "related_variables": [
                "SugarCookiesProduced"
            ],
            "related_parameters": [
                "MaxSugarDemand"
            ],
            "code": "# Add constraint to ensure sugar cookies produced do not exceed maximum demand\nmodel.addConstr(SugarCookiesProduced <= MaxSugarDemand, name=\"max_sugar_demand\")"
        },
        {
            "description": "The total production of strawberry and sugar cookies cannot exceed the maximum production capacity of the bakery.",
            "status": "coded",
            "formulation": "\\\\textup{StrawberryCookiesProduced} + \\\\textup{SugarCookiesProduced} \\\\leq \\\\textup{MaxProductionCapacity}",
            "related_variables": [
                "StrawberryCookiesProduced",
                "SugarCookiesProduced"
            ],
            "related_parameters": [
                "MaxProductionCapacity"
            ],
            "code": "# Add constraint for maximum production capacity\nmodel.addConstr(StrawberryCookiesProduced + SugarCookiesProduced <= MaxProductionCapacity, \n                name=\"max_production_capacity\")"
        },
        {
            "description": "The demand constraint for strawberry cookies.",
            "status": "coded",
            "formulation": "\\textup{StrawberryCookiesProduced} \\\\leq \\textup{MaxStrawberryDemand}",
            "related_variables": [
                "StrawberryCookiesProduced"
            ],
            "related_parameters": [
                "MaxStrawberryDemand"
            ],
            "code": "# Add demand constraint for strawberry cookies\nmodel.addConstr(StrawberryCookiesProduced <= MaxStrawberryDemand, name=\"strawberry_demand_constraint\")"
        },
        {
            "description": "The demand constraint for sugar cookies.",
            "status": "coded",
            "formulation": "\\textup{SugarCookiesProduced} \\\\leq \\textup{MaxSugarDemand}",
            "related_variables": [
                "SugarCookiesProduced"
            ],
            "related_parameters": [
                "MaxSugarDemand"
            ],
            "code": "# Add demand constraint for sugar cookies\nmodel.addConstr(SugarCookiesProduced <= MaxSugarDemand, name=\"sugar_cookie_demand\")"
        },
        {
            "description": "The production capacity constraint for the bakery.",
            "status": "coded",
            "formulation": "\\textup{StrawberryCookiesProduced} + \\textup{SugarCookiesProduced} \\\\leq \\textup{MaxProductionCapacity}",
            "related_variables": [
                "StrawberryCookiesProduced",
                "SugarCookiesProduced"
            ],
            "related_parameters": [
                "MaxProductionCapacity"
            ],
            "code": "# Add production capacity constraint\nmodel.addConstr(StrawberryCookiesProduced + SugarCookiesProduced <= MaxProductionCapacity, name=\"production_capacity\")"
        },
        {
            "description": "Non-negativity constraint for strawberry cookies.",
            "status": "coded",
            "formulation": "\\textup{StrawberryCookiesProduced} \\\\geq 0",
            "related_variables": [
                "StrawberryCookiesProduced"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for strawberry cookies\nmodel.addConstr(StrawberryCookiesProduced >= 0, name=\"non_negativity_StrawberryCookies\")"
        },
        {
            "description": "Non-negativity constraint for sugar cookies.",
            "status": "coded",
            "formulation": "\\textup{SugarCookiesProduced} \\\\geq 0",
            "related_variables": [
                "SugarCookiesProduced"
            ],
            "related_parameters": [],
            "code": "# The non-negativity constraint for SugarCookiesProduced is already enforced by the variable's non-negative domain in Gurobi (default for continuous variables)."
        }
    ],
    "variables": [
        {
            "definition": "The number of strawberry cookies produced daily",
            "symbol": "StrawberryCookiesProduced",
            "shape": [],
            "status": "coded",
            "code": "StrawberryCookiesProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"StrawberryCookiesProduced\")"
        },
        {
            "definition": "The number of sugar cookies produced daily",
            "symbol": "SugarCookiesProduced",
            "shape": [],
            "status": "coded",
            "code": "SugarCookiesProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SugarCookiesProduced\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the bakery's profit from producing strawberry and sugar cookies.",
            "status": "coded",
            "formulation": "\\max \\quad \\textup{StrawberryProfit} \\\\cdot \\textup{StrawberryCookiesProduced} + \\textup{SugarProfit} \\\\cdot \\textup{SugarCookiesProduced}",
            "related_variables": [
                "StrawberryCookiesProduced",
                "SugarCookiesProduced"
            ],
            "related_parameters": [
                "StrawberryProfit",
                "SugarProfit"
            ],
            "code": "# Set objective\nmodel.setObjective(StrawberryProfit * StrawberryCookiesProduced + SugarProfit * SugarCookiesProduced, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413174022_nl4opt_prob_222/",
    "problem_path": "data/nl4opt/prob_222/"
}