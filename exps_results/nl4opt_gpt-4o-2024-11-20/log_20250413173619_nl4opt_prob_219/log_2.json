{
    "background": "A printing company is involved in producing math and English workbooks, with specific minimum and maximum production requirements. There is also a minimum total production requirement to fulfill a contract with a school.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Minimum number of math workbooks to be made",
            "symbol": "MinMath",
            "value": 40,
            "shape": [],
            "code": "MinMath = data[\"MinMath\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of English workbooks to be made",
            "symbol": "MinEnglish",
            "value": 60,
            "shape": [],
            "code": "MinEnglish = data[\"MinEnglish\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of math workbooks to be made",
            "symbol": "MaxMath",
            "value": 140,
            "shape": [],
            "code": "MaxMath = data[\"MaxMath\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of English workbooks to be made",
            "symbol": "MaxEnglish",
            "value": 170,
            "shape": [],
            "code": "MaxEnglish = data[\"MaxEnglish\"] # scalar parameter"
        },
        {
            "definition": "Minimum total number of workbooks to be sent under the contract",
            "symbol": "MinTotalWorkbooks",
            "value": 200,
            "shape": [],
            "code": "MinTotalWorkbooks = data[\"MinTotalWorkbooks\"] # scalar parameter"
        },
        {
            "definition": "Profit per math workbook",
            "symbol": "ProfitMath",
            "value": 15,
            "shape": [],
            "code": "ProfitMath = data[\"ProfitMath\"] # scalar parameter"
        },
        {
            "definition": "Profit per English workbook",
            "symbol": "ProfitEnglish",
            "value": 17,
            "shape": [],
            "code": "ProfitEnglish = data[\"ProfitEnglish\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of math workbooks produced must be at least the minimum number specified (MinMath).",
            "status": "coded",
            "formulation": "\\\\textup{MathWorkbooks} \\\\geq \\\\textup{MinMath}",
            "related_variables": [
                "MathWorkbooks"
            ],
            "related_parameters": [
                "MinMath"
            ],
            "code": "# Add constraint to ensure the number of math workbooks produced is at least MinMath\nmodel.addConstr(MathWorkbooks >= MinMath, name=\"min_math_workbooks\")"
        },
        {
            "description": "The number of math workbooks produced is at most MaxMath.",
            "status": "coded",
            "formulation": "\\\\textup{MathWorkbooks} \\\\leq \\\\textup{MaxMath}",
            "related_variables": [
                "MathWorkbooks"
            ],
            "related_parameters": [
                "MaxMath"
            ],
            "code": "# Add constraint ensuring the number of math workbooks produced does not exceed MaxMath\nmodel.addConstr(MathWorkbooks <= MaxMath, name=\"math_workbooks_constraint\")"
        },
        {
            "description": "The number of English workbooks produced must be at least the minimum number of English workbooks specified by the parameter MinEnglish.",
            "status": "coded",
            "formulation": "\\\\textup{EnglishWorkbooks} \\\\geq \\\\textup{MinEnglish}",
            "related_variables": [
                "EnglishWorkbooks"
            ],
            "related_parameters": [
                "MinEnglish"
            ],
            "code": "# Add constraint to ensure the production of English workbooks meets the minimum required\nmodel.addConstr(EnglishWorkbooks >= MinEnglish, name=\"min_english_workbooks\")"
        },
        {
            "description": "The number of English workbooks produced must not exceed the maximum allowed (MaxEnglish).",
            "status": "coded",
            "formulation": "\\\\textup{EnglishWorkbooks} \\\\leq \\\\textup{MaxEnglish}",
            "related_variables": [
                "EnglishWorkbooks"
            ],
            "related_parameters": [
                "MaxEnglish"
            ],
            "code": "# Add constraint to limit English workbooks production to maximum allowed\nmodel.addConstr(EnglishWorkbooks <= MaxEnglish, name=\"max_english_workbooks\")"
        },
        {
            "description": "The total number of workbooks produced is at least the minimum required for the contract.",
            "status": "coded",
            "formulation": "\\\\textup{MathWorkbooks} + \\\\textup{EnglishWorkbooks} \\\\geq \\\\textup{MinTotalWorkbooks}",
            "related_variables": [
                "MathWorkbooks",
                "EnglishWorkbooks"
            ],
            "related_parameters": [
                "MinTotalWorkbooks"
            ],
            "code": "# Add constraint to ensure the total number of workbooks produced meets the minimum requirement\nmodel.addConstr(MathWorkbooks + EnglishWorkbooks >= MinTotalWorkbooks, name=\"min_workbook_requirement\")"
        },
        {
            "description": "Ensure math workbook production is within the minimum and maximum bounds.",
            "status": "coded",
            "formulation": "\\textup{MinMath} \\leq \\textup{MathWorkbooks} \\leq \\textup{MaxMath}",
            "related_variables": [
                "MathWorkbooks"
            ],
            "related_parameters": [
                "MinMath",
                "MaxMath"
            ],
            "code": "# Add constraints to ensure MathWorkbooks production is within MinMath and MaxMath bounds\nmodel.addConstr(MathWorkbooks >= MinMath, name=\"min_math_workbooks\")\nmodel.addConstr(MathWorkbooks <= MaxMath, name=\"max_math_workbooks\")"
        },
        {
            "description": "Ensure English workbook production is within the minimum and maximum bounds.",
            "status": "coded",
            "formulation": "\\textup{MinEnglish} \\leq \\textup{EnglishWorkbooks} \\leq \\textup{MaxEnglish}",
            "related_variables": [
                "EnglishWorkbooks"
            ],
            "related_parameters": [
                "MinEnglish",
                "MaxEnglish"
            ],
            "code": "# Add constraints to ensure English workbook production is within the minimum and maximum bounds\nmodel.addConstr(MinEnglish <= EnglishWorkbooks, name=\"min_english_workbooks\")\nmodel.addConstr(EnglishWorkbooks <= MaxEnglish, name=\"max_english_workbooks\")"
        },
        {
            "description": "Ensure the total production meets the minimum contract requirement.",
            "status": "coded",
            "formulation": "\\textup{MathWorkbooks} + \\textup{EnglishWorkbooks} \\geq \\textup{MinTotalWorkbooks}",
            "related_variables": [
                "MathWorkbooks",
                "EnglishWorkbooks"
            ],
            "related_parameters": [
                "MinTotalWorkbooks"
            ],
            "code": "# Add constraint to ensure total production meets the minimum contract requirement\nmodel.addConstr(MathWorkbooks + EnglishWorkbooks >= MinTotalWorkbooks, name=\"min_total_workbooks_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of math workbooks produced by the printing company.",
            "symbol": "MathWorkbooks",
            "shape": [],
            "status": "coded",
            "code": "MathWorkbooks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"MathWorkbooks\")"
        },
        {
            "definition": "The number of English workbooks produced by the printing company.",
            "symbol": "EnglishWorkbooks",
            "shape": [],
            "status": "coded",
            "code": "EnglishWorkbooks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"EnglishWorkbooks\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the company's profit from workbook production.",
            "status": "coded",
            "formulation": "\\max \\quad \\left( \\textup{ProfitMath} \\times \\textup{MathWorkbooks} + \\textup{ProfitEnglish} \\times \\textup{EnglishWorkbooks} \\right)",
            "related_variables": [
                "MathWorkbooks",
                "EnglishWorkbooks"
            ],
            "related_parameters": [
                "ProfitMath",
                "ProfitEnglish"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitMath * MathWorkbooks + ProfitEnglish * EnglishWorkbooks, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 4990.0,
    "log_path": "logs/log_20250413173619_nl4opt_prob_219/",
    "problem_path": "data/nl4opt/prob_219/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_219/data.json\", \"r\") as f:\n    data = json.load(f)\n\nMinMath = data[\"MinMath\"] # scalar parameter\nMinEnglish = data[\"MinEnglish\"] # scalar parameter\nMaxMath = data[\"MaxMath\"] # scalar parameter\nMaxEnglish = data[\"MaxEnglish\"] # scalar parameter\nMinTotalWorkbooks = data[\"MinTotalWorkbooks\"] # scalar parameter\nProfitMath = data[\"ProfitMath\"] # scalar parameter\nProfitEnglish = data[\"ProfitEnglish\"] # scalar parameter\nMathWorkbooks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"MathWorkbooks\")\nEnglishWorkbooks = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"EnglishWorkbooks\")\n\n# Add constraint to ensure the number of math workbooks produced is at least MinMath\nmodel.addConstr(MathWorkbooks >= MinMath, name=\"min_math_workbooks\")\n\n# Add constraint ensuring the number of math workbooks produced does not exceed MaxMath\nmodel.addConstr(MathWorkbooks <= MaxMath, name=\"math_workbooks_constraint\")\n\n# Add constraint to ensure the production of English workbooks meets the minimum required\nmodel.addConstr(EnglishWorkbooks >= MinEnglish, name=\"min_english_workbooks\")\n\n# Add constraint to limit English workbooks production to maximum allowed\nmodel.addConstr(EnglishWorkbooks <= MaxEnglish, name=\"max_english_workbooks\")\n\n# Add constraint to ensure the total number of workbooks produced meets the minimum requirement\nmodel.addConstr(MathWorkbooks + EnglishWorkbooks >= MinTotalWorkbooks, name=\"min_workbook_requirement\")\n\n# Add constraints to ensure MathWorkbooks production is within MinMath and MaxMath bounds\nmodel.addConstr(MathWorkbooks >= MinMath, name=\"min_math_workbooks\")\nmodel.addConstr(MathWorkbooks <= MaxMath, name=\"max_math_workbooks\")\n\n# Add constraints to ensure English workbook production is within the minimum and maximum bounds\nmodel.addConstr(MinEnglish <= EnglishWorkbooks, name=\"min_english_workbooks\")\nmodel.addConstr(EnglishWorkbooks <= MaxEnglish, name=\"max_english_workbooks\")\n\n# Add constraint to ensure total production meets the minimum contract requirement\nmodel.addConstr(MathWorkbooks + EnglishWorkbooks >= MinTotalWorkbooks, name=\"min_total_workbooks_constraint\")\n\n# Set objective\nmodel.setObjective(ProfitMath * MathWorkbooks + ProfitEnglish * EnglishWorkbooks, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}