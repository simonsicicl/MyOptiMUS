{
    "background": "A park is deciding on the number and type of trails to construct, with a focus on managing visitor capacity and minimizing environmental impact in terms of garbage production.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Visitor capacity per day for the wide trail",
            "symbol": "WideCapacity",
            "value": 50,
            "shape": [],
            "code": "WideCapacity = data[\"WideCapacity\"] # scalar parameter"
        },
        {
            "definition": "Visitor capacity per day for the narrow trail",
            "symbol": "NarrowCapacity",
            "value": 20,
            "shape": [],
            "code": "NarrowCapacity = data[\"NarrowCapacity\"] # scalar parameter"
        },
        {
            "definition": "Units of garbage introduced by one wide trail",
            "symbol": "WideGarbage",
            "value": 6,
            "shape": [],
            "code": "WideGarbage = data[\"WideGarbage\"] # scalar parameter"
        },
        {
            "definition": "Units of garbage introduced by one narrow trail",
            "symbol": "NarrowGarbage",
            "value": 3,
            "shape": [],
            "code": "NarrowGarbage = data[\"NarrowGarbage\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of wide trails allowed",
            "symbol": "MaxWideTrails",
            "value": 3,
            "shape": [],
            "code": "MaxWideTrails = data[\"MaxWideTrails\"] # scalar parameter"
        },
        {
            "definition": "Maximum total visitor capacity per day",
            "symbol": "MaxCapacity",
            "value": 225,
            "shape": [],
            "code": "MaxCapacity = data[\"MaxCapacity\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of wide trails must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{WideTrails} \\geq 0",
            "related_variables": [
                "WideTrails"
            ],
            "related_parameters": [],
            "code": "# Adding constraint: The number of wide trails must be non-negative\nmodel.addConstr(WideTrails >= 0, name=\"non_negative_constraint_WideTrails\")"
        },
        {
            "description": "The number of narrow trails is non-negative.",
            "status": "coded",
            "formulation": "\\\\textup{NarrowTrails} \\\\geq 0",
            "related_variables": [
                "NarrowTrails"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for NarrowTrails\nmodel.addConstr(NarrowTrails >= 0, name=\"non_negativity_NarrowTrails\")"
        },
        {
            "description": "The total visitors from wide trails does not exceed WideCapacity multiplied by the number of wide trails.",
            "status": "coded",
            "formulation": "\\textup{VisitorsWide} \\leq \\textup{WideCapacity} \\times \\textup{WideTrails}",
            "related_variables": [
                "WideTrails",
                "VisitorsWide"
            ],
            "related_parameters": [
                "WideCapacity"
            ],
            "code": "# Add constraint to ensure total visitors from wide trails does not exceed WideCapacity multiplied by WideTrails\nmodel.addConstr(VisitorsWide <= WideCapacity * WideTrails, name=\"wide_trails_capacity\")"
        },
        {
            "description": "The total number of visitors from narrow trails does not exceed the capacity of all narrow trails combined.",
            "status": "coded",
            "formulation": "\\textup{VisitorsNarrow} \\leq \\textup{NarrowCapacity} \\times \\textup{NarrowTrails}",
            "related_variables": [
                "VisitorsNarrow",
                "NarrowTrails"
            ],
            "related_parameters": [
                "NarrowCapacity"
            ],
            "code": "# Add constraint to ensure total number of visitors from narrow trails does not exceed capacity of all narrow trails combined\nmodel.addConstr(VisitorsNarrow <= NarrowCapacity * NarrowTrails, name=\"narrow_trail_capacity\")"
        },
        {
            "description": "The total number of wide trails does not exceed the maximum allowed number of wide trails.",
            "status": "coded",
            "formulation": "\\textup{WideTrails} \\leq \\textup{MaxWideTrails}",
            "related_variables": [
                "WideTrails"
            ],
            "related_parameters": [
                "MaxWideTrails"
            ],
            "code": "# Add constraint for maximum number of wide trails\nmodel.addConstr(WideTrails <= MaxWideTrails, name=\"max_wide_trails_constraint\")"
        },
        {
            "description": "The total visitors every day does not exceed the maximum total capacity.",
            "status": "coded",
            "formulation": "\\textup{VisitorsWide} + \\textup{VisitorsNarrow} \\leq \\textup{MaxCapacity}",
            "related_variables": [
                "VisitorsWide",
                "VisitorsNarrow"
            ],
            "related_parameters": [
                "MaxCapacity"
            ],
            "code": "# Add constraint to ensure total visitors do not exceed maximum capacity\nmodel.addConstr(VisitorsWide + VisitorsNarrow <= MaxCapacity, name=\"visitors_capacity\")"
        },
        {
            "description": "The total number of wide trails is an integer.",
            "status": "coded",
            "formulation": "\\textup{WideTrails} \\in \\mathbb{Z}",
            "related_variables": [
                "WideTrails"
            ],
            "related_parameters": [],
            "code": "# Change the variable WideTrails to integer type\nWideTrails.vtype = gp.GRB.INTEGER"
        },
        {
            "description": "The total number of narrow trails must be an integer.",
            "status": "coded",
            "formulation": "\\textup{NarrowTrails} \\in \\mathbb{Z}",
            "related_variables": [
                "NarrowTrails"
            ],
            "related_parameters": [],
            "code": "# Change the variable NarrowTrails to have integer integrality since it is defined to be an integer\nNarrowTrails.vtype = gp.GRB.INTEGER"
        },
        {
            "description": "Ensure that VisitorsWide is non-negative since it represents the count of visitors.",
            "status": "coded",
            "formulation": "\\textup{VisitorsWide} \\geq 0",
            "related_variables": [
                "VisitorsWide"
            ],
            "related_parameters": [],
            "code": "# Ensure VisitorsWide is non-negative\nmodel.addConstr(VisitorsWide >= 0, name=\"non_negative_visitorswide_constraint\")"
        },
        {
            "description": "The total wide-trail visitors cannot exceed the sum of the wide trail capacities.",
            "status": "coded",
            "formulation": "\\textup{VisitorsWide} \\leq \\textup{WideTrails} \\times \\textup{WideCapacity}",
            "related_variables": [
                "VisitorsWide",
                "WideTrails"
            ],
            "related_parameters": [
                "WideCapacity"
            ],
            "code": "# Add constraint to ensure total wide-trail visitors do not exceed the sum of wide trail capacities\nmodel.addConstr(VisitorsWide <= WideTrails * WideCapacity, name=\"wide_trail_capacity\")"
        },
        {
            "description": "The total narrow-trail visitors cannot exceed the sum of the narrow trail capacities.",
            "status": "coded",
            "formulation": "\\textup{VisitorsNarrow} \\leq \\textup{NarrowTrails} \\times \\textup{NarrowCapacity}",
            "related_variables": [
                "VisitorsNarrow",
                "NarrowTrails"
            ],
            "related_parameters": [
                "NarrowCapacity"
            ],
            "code": "# Add constraint to ensure total narrow-trail visitors do not exceed total capacities\nmodel.addConstr(VisitorsNarrow <= NarrowTrails * NarrowCapacity, name=\"narrow_trail_capacity_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of wide trails constructed.",
            "symbol": "WideTrails",
            "shape": [],
            "status": "coded",
            "code": "WideTrails = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"WideTrails\")"
        },
        {
            "definition": "The number of narrow trails constructed.",
            "symbol": "NarrowTrails",
            "shape": [],
            "status": "coded",
            "code": "NarrowTrails = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NarrowTrails\")"
        },
        {
            "definition": "The total number of visitors utilizing the wide trails.",
            "symbol": "VisitorsWide",
            "shape": [],
            "status": "coded",
            "code": "VisitorsWide = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"VisitorsWide\")"
        },
        {
            "definition": "The total number of visitors utilizing narrow trails.",
            "symbol": "VisitorsNarrow",
            "shape": [],
            "status": "coded",
            "code": "VisitorsNarrow = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"VisitorsNarrow\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total amount of garbage produced by the trails.",
            "status": "coded",
            "formulation": "\\textup{Minimize } \\quad \\textup{TotalGarbage} = \\textup{WideGarbage} \\times \\textup{WideTrails} + \\textup{NarrowGarbage} \\times \\textup{NarrowTrails}",
            "related_variables": [
                "WideTrails",
                "NarrowTrails"
            ],
            "related_parameters": [
                "WideGarbage",
                "NarrowGarbage"
            ],
            "code": "# Set objective\nmodel.setObjective(WideGarbage * WideTrails + NarrowGarbage * NarrowTrails, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 0.0,
    "log_path": "logs/log_20250414060023_nl4opt_prob_285/",
    "problem_path": "data/nl4opt/prob_285/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_285/data.json\", \"r\") as f:\n    data = json.load(f)\n\nWideCapacity = data[\"WideCapacity\"] # scalar parameter\nNarrowCapacity = data[\"NarrowCapacity\"] # scalar parameter\nWideGarbage = data[\"WideGarbage\"] # scalar parameter\nNarrowGarbage = data[\"NarrowGarbage\"] # scalar parameter\nMaxWideTrails = data[\"MaxWideTrails\"] # scalar parameter\nMaxCapacity = data[\"MaxCapacity\"] # scalar parameter\nWideTrails = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"WideTrails\")\nNarrowTrails = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"NarrowTrails\")\nVisitorsWide = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"VisitorsWide\")\nVisitorsNarrow = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"VisitorsNarrow\")\n\n# Adding constraint: The number of wide trails must be non-negative\nmodel.addConstr(WideTrails >= 0, name=\"non_negative_constraint_WideTrails\")\n\n# Non-negativity constraint for NarrowTrails\nmodel.addConstr(NarrowTrails >= 0, name=\"non_negativity_NarrowTrails\")\n\n# Add constraint to ensure total visitors from wide trails does not exceed WideCapacity multiplied by WideTrails\nmodel.addConstr(VisitorsWide <= WideCapacity * WideTrails, name=\"wide_trails_capacity\")\n\n# Add constraint to ensure total number of visitors from narrow trails does not exceed capacity of all narrow trails combined\nmodel.addConstr(VisitorsNarrow <= NarrowCapacity * NarrowTrails, name=\"narrow_trail_capacity\")\n\n# Add constraint for maximum number of wide trails\nmodel.addConstr(WideTrails <= MaxWideTrails, name=\"max_wide_trails_constraint\")\n\n# Add constraint to ensure total visitors do not exceed maximum capacity\nmodel.addConstr(VisitorsWide + VisitorsNarrow <= MaxCapacity, name=\"visitors_capacity\")\n\n# Change the variable WideTrails to integer type\nWideTrails.vtype = gp.GRB.INTEGER\n\n# Change the variable NarrowTrails to have integer integrality since it is defined to be an integer\nNarrowTrails.vtype = gp.GRB.INTEGER\n\n# Ensure VisitorsWide is non-negative\nmodel.addConstr(VisitorsWide >= 0, name=\"non_negative_visitorswide_constraint\")\n\n# Add constraint to ensure total wide-trail visitors do not exceed the sum of wide trail capacities\nmodel.addConstr(VisitorsWide <= WideTrails * WideCapacity, name=\"wide_trail_capacity\")\n\n# Add constraint to ensure total narrow-trail visitors do not exceed total capacities\nmodel.addConstr(VisitorsNarrow <= NarrowTrails * NarrowCapacity, name=\"narrow_trail_capacity_constraint\")\n\n# Set objective\nmodel.setObjective(WideGarbage * WideTrails + NarrowGarbage * NarrowTrails, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}