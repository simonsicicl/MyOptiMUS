{
    "background": "A cleaning company in Edmonton is planning to advertise their new dishwashing detergent using a limited budget on radio and social media ads to get the best possible exposure.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total advertising budget",
            "symbol": "B",
            "value": 250000,
            "shape": [],
            "code": "B = data[\"B\"] # scalar parameter"
        },
        {
            "definition": "Cost of one radio ad",
            "symbol": "Cr",
            "value": 5000,
            "shape": [],
            "code": "Cr = data[\"Cr\"] # scalar parameter"
        },
        {
            "definition": "Cost of one social media ad",
            "symbol": "Cs",
            "value": 9150,
            "shape": [],
            "code": "Cs = data[\"Cs\"] # scalar parameter"
        },
        {
            "definition": "Expected exposure per radio ad",
            "symbol": "Er",
            "value": 60500,
            "shape": [],
            "code": "Er = data[\"Er\"] # scalar parameter"
        },
        {
            "definition": "Expected exposure per social media ad",
            "symbol": "Es",
            "value": 50000,
            "shape": [],
            "code": "Es = data[\"Es\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of radio ads",
            "symbol": "MinR",
            "value": 15,
            "shape": [],
            "code": "MinR = data[\"MinR\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of radio ads",
            "symbol": "MaxR",
            "value": 40,
            "shape": [],
            "code": "MaxR = data[\"MaxR\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of social media ads",
            "symbol": "MinS",
            "value": 35,
            "shape": [],
            "code": "MinS = data[\"MinS\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Total cost of ads must not exceed budget B",
            "status": "coded",
            "formulation": "Cr \\cdot R + Cs \\cdot S \\leq B",
            "related_variables": [
                "NumberOfRadioAds",
                "NumberOfSocialMediaAds"
            ],
            "related_parameters": [
                "Cr",
                "Cs",
                "B"
            ],
            "code": "# Add constraint for the total cost of ads not exceeding the budget B\nmodel.addConstr((Cr * NumberOfRadioAds) + (Cs * NumberOfSocialMediaAds) <= B, \"budget_constraint\")"
        },
        {
            "description": "At least MinR radio ads should be ordered",
            "status": "coded",
            "formulation": "\\textup{NumberOfRadioAds} \\geq \\textup{MinR}",
            "related_variables": [
                "NumberOfRadioAds"
            ],
            "related_parameters": [
                "MinR"
            ],
            "code": "# Add constraint to ensure the minimum number of radio ads is ordered\nmodel.addConstr(NumberOfRadioAds >= MinR, name=\"min_radio_ads\")"
        },
        {
            "description": "No more than MaxR radio ads should be ordered",
            "status": "coded",
            "formulation": "\\textup{NumberOfRadioAds} \\leq \\textup{MaxR}",
            "related_variables": [
                "NumberOfRadioAds"
            ],
            "related_parameters": [
                "MaxR"
            ],
            "code": "# Constraint: No more than MaxR radio ads should be ordered\nmodel.addConstr(NumberOfRadioAds <= MaxR, name=\"max_radio_ads\")"
        },
        {
            "description": "At least MinS social media ads should be contracted",
            "status": "coded",
            "formulation": "\\textup{NumberOfSocialMediaAds} \\geq \\textup{MinS}",
            "related_variables": [
                "NumberOfSocialMediaAds"
            ],
            "related_parameters": [
                "MinS"
            ],
            "code": "# Ensure at least MinS social media ads are contracted\nmodel.addConstr(NumberOfSocialMediaAds >= MinS, name=\"min_social_media_ads\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of radio ads to purchase",
            "symbol": "NumberOfRadioAds",
            "shape": [],
            "status": "coded",
            "code": "NumberOfRadioAds = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfRadioAds\")"
        },
        {
            "definition": "The number of social media ads to purchase",
            "symbol": "NumberOfSocialMediaAds",
            "shape": [],
            "status": "coded",
            "code": "NumberOfSocialMediaAds = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfSocialMediaAds\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total viewership from both radio and social media ads",
            "status": "coded",
            "formulation": "\\max (\\textup{NumberOfRadioAds} \\times \\textup{Er} + \\textup{NumberOfSocialMediaAds} \\times \\textup{Es})",
            "related_variables": [
                "NumberOfRadioAds",
                "NumberOfSocialMediaAds"
            ],
            "related_parameters": [
                "Er",
                "Es"
            ],
            "code": "# Define the objective function\nmodel.setObjective(NumberOfRadioAds * Er + NumberOfSocialMediaAds * Es, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 4,
    "error_message": null,
    "obj_val": "infeasible or unbounded",
    "log_path": "logs/log_20250413130546_nl4opt_prob_13/",
    "problem_path": "data/nl4opt/prob_13/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_13/data.json\", \"r\") as f:\n    data = json.load(f)\n\nB = data[\"B\"] # scalar parameter\nCr = data[\"Cr\"] # scalar parameter\nCs = data[\"Cs\"] # scalar parameter\nEr = data[\"Er\"] # scalar parameter\nEs = data[\"Es\"] # scalar parameter\nMinR = data[\"MinR\"] # scalar parameter\nMaxR = data[\"MaxR\"] # scalar parameter\nMinS = data[\"MinS\"] # scalar parameter\nNumberOfRadioAds = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfRadioAds\")\nNumberOfSocialMediaAds = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfSocialMediaAds\")\n\n# Add constraint for the total cost of ads not exceeding the budget B\nmodel.addConstr((Cr * NumberOfRadioAds) + (Cs * NumberOfSocialMediaAds) <= B, \"budget_constraint\")\n\n# Add constraint to ensure the minimum number of radio ads is ordered\nmodel.addConstr(NumberOfRadioAds >= MinR, name=\"min_radio_ads\")\n\n# Constraint: No more than MaxR radio ads should be ordered\nmodel.addConstr(NumberOfRadioAds <= MaxR, name=\"max_radio_ads\")\n\n# Ensure at least MinS social media ads are contracted\nmodel.addConstr(NumberOfSocialMediaAds >= MinS, name=\"min_social_media_ads\")\n\n# Define the objective function\nmodel.setObjective(NumberOfRadioAds * Er + NumberOfSocialMediaAds * Es, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}