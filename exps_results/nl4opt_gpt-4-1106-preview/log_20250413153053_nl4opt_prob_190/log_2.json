{
    "background": "A grape farmer needs to determine the optimal number of small and large crates to use for transporting grapes, based on crate capacities and constraints regarding customer preferences, crate availability, and truck capacity.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Capacity of a small crate",
            "symbol": "SmallCrateCapacity",
            "value": 200,
            "shape": [],
            "code": "SmallCrateCapacity = data[\"SmallCrateCapacity\"] # scalar parameter"
        },
        {
            "definition": "Capacity of a large crate",
            "symbol": "LargeCrateCapacity",
            "value": 500,
            "shape": [],
            "code": "LargeCrateCapacity = data[\"LargeCrateCapacity\"] # scalar parameter"
        },
        {
            "definition": "Minimum ratio of small crates to large crates",
            "symbol": "SmallToLargeRatio",
            "value": 3,
            "shape": [],
            "code": "SmallToLargeRatio = data[\"SmallToLargeRatio\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of small crates available",
            "symbol": "MaxSmallCrates",
            "value": 100,
            "shape": [],
            "code": "MaxSmallCrates = data[\"MaxSmallCrates\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of large crates available",
            "symbol": "MaxLargeCrates",
            "value": 50,
            "shape": [],
            "code": "MaxLargeCrates = data[\"MaxLargeCrates\"] # scalar parameter"
        },
        {
            "definition": "Maximum total number of crates the truck can take",
            "symbol": "MaxTotalCrates",
            "value": 60,
            "shape": [],
            "code": "MaxTotalCrates = data[\"MaxTotalCrates\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of large crates that must be used",
            "symbol": "MinLargeCrates",
            "value": 10,
            "shape": [],
            "code": "MinLargeCrates = data[\"MinLargeCrates\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of small crates must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfSmallCrates} \\geq 0",
            "related_variables": [
                "NumberOfSmallCrates"
            ],
            "related_parameters": [],
            "code": "# Constraint: Number of small crates must be non-negative\nmodel.addConstr(NumberOfSmallCrates >= 0, name=\"non_negative_small_crates\")"
        },
        {
            "description": "The number of large crates used for transporting grapes must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfLargeCrates} \\geq 0",
            "related_variables": [
                "NumberOfLargeCrates"
            ],
            "related_parameters": [],
            "code": "# Constraint: Number of large crates used for transporting grapes must be non-negative\nmodel.addConstr(NumberOfLargeCrates >= 0, name=\"non_negative_large_crates\")"
        },
        {
            "description": "The number of small crates used must be at least SmallToLargeRatio times the number of large crates used",
            "status": "coded",
            "formulation": "\\textup{NumberOfSmallCrates} \\geq \\textup{SmallToLargeRatio} \\times \\textup{NumberOfLargeCrates}",
            "related_variables": [
                "NumberOfSmallCrates",
                "NumberOfLargeCrates"
            ],
            "related_parameters": [
                "SmallToLargeRatio"
            ],
            "code": "# Add constraint for small crates to be at least SmallToLargeRatio times the number of large crates\nmodel.addConstr(NumberOfSmallCrates >= SmallToLargeRatio * NumberOfLargeCrates, name=\"SmallToLargeRatio_Constraint\")"
        },
        {
            "description": "The number of small crates used for transporting grapes cannot exceed the maximum number available",
            "status": "coded",
            "formulation": "\\textup{NumberOfSmallCrates} \\leq \\textup{MaxSmallCrates}",
            "related_variables": [
                "NumberOfSmallCrates"
            ],
            "related_parameters": [
                "MaxSmallCrates"
            ],
            "code": "model.addConstr(NumberOfSmallCrates <= MaxSmallCrates, name=\"max_small_crates\")"
        },
        {
            "description": "The number of large crates used for transporting grapes cannot exceed the maximum number available.",
            "status": "coded",
            "formulation": "\\textup{NumberOfLargeCrates} \\leq \\textup{MaxLargeCrates}",
            "related_variables": [
                "NumberOfLargeCrates"
            ],
            "related_parameters": [
                "MaxLargeCrates"
            ],
            "code": "# Constraint: Number of large crates used cannot exceed the maximum available\nmodel.addConstr(NumberOfLargeCrates <= MaxLargeCrates, name=\"large_crates_limit\")"
        },
        {
            "description": "The total number of both small and large crates used must not exceed the maximum total number of crates the truck can take",
            "status": "coded",
            "formulation": "\\textup{NumberOfSmallCrates} + \\textup{NumberOfLargeCrates} \\leq \\textup{MaxTotalCrates}",
            "related_variables": [
                "NumberOfSmallCrates",
                "NumberOfLargeCrates"
            ],
            "related_parameters": [
                "MaxTotalCrates"
            ],
            "code": "# Constraint for the maximum total number of crates the truck can take\nmodel.addConstr(NumberOfSmallCrates + NumberOfLargeCrates <= MaxTotalCrates, name=\"max_total_crates\")"
        },
        {
            "description": "At least MinLargeCrates large crates must be used",
            "status": "coded",
            "formulation": "\\textup{NumberOfLargeCrates} \\geq \\textup{MinLargeCrates}",
            "related_variables": [
                "NumberOfLargeCrates"
            ],
            "related_parameters": [
                "MinLargeCrates"
            ],
            "code": "# At least MinLargeCrates large crates must be used constraint\nmodel.addConstr(NumberOfLargeCrates >= MinLargeCrates, name=\"min_large_crates\")"
        },
        {
            "description": "The number of small crates should be at least three times the number of large crates",
            "status": "coded",
            "formulation": "\\textup{NumberOfSmallCrates} \\geq 3 \\times \\textup{NumberOfLargeCrates}",
            "related_variables": [
                "NumberOfSmallCrates",
                "NumberOfLargeCrates"
            ],
            "related_parameters": [],
            "code": "# Add constraint: Number of small crates should be at least three times the number of large crates\nmodel.addConstr(NumberOfSmallCrates >= 3 * NumberOfLargeCrates, \"min_small_to_large_crates_ratio\")"
        },
        {
            "description": "The number of small crates cannot exceed the maximum available",
            "status": "coded",
            "formulation": "\\textup{NumberOfSmallCrates} \\leq \\textup{MaxSmallCrates}",
            "related_variables": [
                "NumberOfSmallCrates"
            ],
            "related_parameters": [
                "MaxSmallCrates"
            ],
            "code": "model.addConstr(NumberOfSmallCrates <= MaxSmallCrates, name=\"small_crates_limit\")"
        },
        {
            "description": "The number of large crates cannot exceed the maximum available",
            "status": "coded",
            "formulation": "\\textup{NumberOfLargeCrates} \\leq \\textup{MaxLargeCrates}",
            "related_variables": [
                "NumberOfLargeCrates"
            ],
            "related_parameters": [
                "MaxLargeCrates"
            ],
            "code": "model.addConstr(NumberOfLargeCrates <= MaxLargeCrates, name=\"large_crates_limit\")"
        },
        {
            "description": "The total number of crates on the truck cannot exceed the truck's capacity",
            "status": "coded",
            "formulation": "\\textup{NumberOfSmallCrates} + \\textup{NumberOfLargeCrates} \\leq \\textup{MaxTotalCrates}",
            "related_variables": [
                "NumberOfSmallCrates",
                "NumberOfLargeCrates"
            ],
            "related_parameters": [
                "MaxTotalCrates"
            ],
            "code": "# Constraint: The total number of crates on the truck cannot exceed the truck's capacity\nmodel.addConstr(NumberOfSmallCrates + NumberOfLargeCrates <= MaxTotalCrates, \"truck_capacity_constraint\")"
        },
        {
            "description": "The number of large crates must be at least the minimum required",
            "status": "coded",
            "formulation": "\\textup{NumberOfLargeCrates} \\geq \\textup{MinLargeCrates}",
            "related_variables": [
                "NumberOfLargeCrates"
            ],
            "related_parameters": [
                "MinLargeCrates"
            ],
            "code": "# Add constraint for the minimum number of large crates\nmodel.addConstr(NumberOfLargeCrates >= MinLargeCrates, name=\"min_large_crates\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of small crates used for transporting grapes",
            "symbol": "NumberOfSmallCrates",
            "shape": [],
            "status": "coded",
            "code": "NumberOfSmallCrates = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfSmallCrates\")"
        },
        {
            "definition": "Number of large crates used for transporting grapes",
            "symbol": "NumberOfLargeCrates",
            "shape": [],
            "status": "coded",
            "code": "NumberOfLargeCrates = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfLargeCrates\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total capacity of grapes transported in the small and large crates",
            "status": "coded",
            "formulation": "\\max (\\textup{NumberOfSmallCrates} \\times \\textup{SmallCrateCapacity} + \\textup{NumberOfLargeCrates} \\times \\textup{LargeCrateCapacity})",
            "related_variables": [
                "NumberOfSmallCrates",
                "NumberOfLargeCrates"
            ],
            "related_parameters": [
                "SmallCrateCapacity",
                "LargeCrateCapacity"
            ],
            "code": "# Define the objective function\nmodel.setObjective(NumberOfSmallCrates * SmallCrateCapacity + NumberOfLargeCrates * LargeCrateCapacity, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 16500.0,
    "log_path": "logs/log_20250413153053_nl4opt_prob_190/",
    "problem_path": "data/nl4opt/prob_190/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_190/data.json\", \"r\") as f:\n    data = json.load(f)\n\nSmallCrateCapacity = data[\"SmallCrateCapacity\"] # scalar parameter\nLargeCrateCapacity = data[\"LargeCrateCapacity\"] # scalar parameter\nSmallToLargeRatio = data[\"SmallToLargeRatio\"] # scalar parameter\nMaxSmallCrates = data[\"MaxSmallCrates\"] # scalar parameter\nMaxLargeCrates = data[\"MaxLargeCrates\"] # scalar parameter\nMaxTotalCrates = data[\"MaxTotalCrates\"] # scalar parameter\nMinLargeCrates = data[\"MinLargeCrates\"] # scalar parameter\nNumberOfSmallCrates = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfSmallCrates\")\nNumberOfLargeCrates = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfLargeCrates\")\n\n# Constraint: Number of small crates must be non-negative\nmodel.addConstr(NumberOfSmallCrates >= 0, name=\"non_negative_small_crates\")\n\n# Constraint: Number of large crates used for transporting grapes must be non-negative\nmodel.addConstr(NumberOfLargeCrates >= 0, name=\"non_negative_large_crates\")\n\n# Add constraint for small crates to be at least SmallToLargeRatio times the number of large crates\nmodel.addConstr(NumberOfSmallCrates >= SmallToLargeRatio * NumberOfLargeCrates, name=\"SmallToLargeRatio_Constraint\")\n\nmodel.addConstr(NumberOfSmallCrates <= MaxSmallCrates, name=\"max_small_crates\")\n\n# Constraint: Number of large crates used cannot exceed the maximum available\nmodel.addConstr(NumberOfLargeCrates <= MaxLargeCrates, name=\"large_crates_limit\")\n\n# Constraint for the maximum total number of crates the truck can take\nmodel.addConstr(NumberOfSmallCrates + NumberOfLargeCrates <= MaxTotalCrates, name=\"max_total_crates\")\n\n# At least MinLargeCrates large crates must be used constraint\nmodel.addConstr(NumberOfLargeCrates >= MinLargeCrates, name=\"min_large_crates\")\n\n# Add constraint: Number of small crates should be at least three times the number of large crates\nmodel.addConstr(NumberOfSmallCrates >= 3 * NumberOfLargeCrates, \"min_small_to_large_crates_ratio\")\n\nmodel.addConstr(NumberOfSmallCrates <= MaxSmallCrates, name=\"small_crates_limit\")\n\nmodel.addConstr(NumberOfLargeCrates <= MaxLargeCrates, name=\"large_crates_limit\")\n\n# Constraint: The total number of crates on the truck cannot exceed the truck's capacity\nmodel.addConstr(NumberOfSmallCrates + NumberOfLargeCrates <= MaxTotalCrates, \"truck_capacity_constraint\")\n\n# Add constraint for the minimum number of large crates\nmodel.addConstr(NumberOfLargeCrates >= MinLargeCrates, name=\"min_large_crates\")\n\n# Define the objective function\nmodel.setObjective(NumberOfSmallCrates * SmallCrateCapacity + NumberOfLargeCrates * LargeCrateCapacity, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}