{
    "background": "A keyboard manufacturer makes mechanical and standard keyboards and aims to have a specific ratio between them, while each type requires certain amounts of plastic and solder for production.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Ratio of mechanical keyboards to standard keyboards",
            "symbol": "RatioMechanicalStandard",
            "value": 5,
            "shape": [],
            "code": "RatioMechanicalStandard = data[\"RatioMechanicalStandard\"] # scalar parameter"
        },
        {
            "definition": "Units of plastic required for one mechanical keyboard",
            "symbol": "PlasticPerMechanical",
            "value": 5,
            "shape": [],
            "code": "PlasticPerMechanical = data[\"PlasticPerMechanical\"] # scalar parameter"
        },
        {
            "definition": "Units of solder required for one mechanical keyboard",
            "symbol": "SolderPerMechanical",
            "value": 2,
            "shape": [],
            "code": "SolderPerMechanical = data[\"SolderPerMechanical\"] # scalar parameter"
        },
        {
            "definition": "Units of plastic required for one standard keyboard",
            "symbol": "PlasticPerStandard",
            "value": 2,
            "shape": [],
            "code": "PlasticPerStandard = data[\"PlasticPerStandard\"] # scalar parameter"
        },
        {
            "definition": "Units of solder required for one standard keyboard",
            "symbol": "SolderPerStandard",
            "value": 1,
            "shape": [],
            "code": "SolderPerStandard = data[\"SolderPerStandard\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of standard keyboards to be produced",
            "symbol": "MinStandard",
            "value": 30,
            "shape": [],
            "code": "MinStandard = data[\"MinStandard\"] # scalar parameter"
        },
        {
            "definition": "Total available units of plastic",
            "symbol": "TotalPlastic",
            "value": 1000,
            "shape": [],
            "code": "TotalPlastic = data[\"TotalPlastic\"] # scalar parameter"
        },
        {
            "definition": "Total available units of solder",
            "symbol": "TotalSolder",
            "value": 250,
            "shape": [],
            "code": "TotalSolder = data[\"TotalSolder\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of mechanical keyboards must be non-negative",
            "status": "coded",
            "formulation": "\\textup{MechanicalKeyboards} \\geq 0",
            "related_variables": [
                "MechanicalKeyboards"
            ],
            "related_parameters": [],
            "code": "# Since MechanicalKeyboards is already defined as an integer variable, no code is needed to enforce non-negativity\n# The Gurobi optimizer automatically enforces the non-negative domain for integer variables"
        },
        {
            "description": "The number of standard keyboards produced must be non-negative",
            "status": "coded",
            "formulation": "StandardKeyboards \\geq 0",
            "related_variables": [
                "StandardKeyboards"
            ],
            "related_parameters": [],
            "code": "# The number of standard keyboards produced must be non-negative\nmodel.addConstr(StandardKeyboards >= 0, name=\"non_negative_standard_keyboards\")"
        },
        {
            "description": "Minimum number of standard keyboards to be produced",
            "status": "coded",
            "formulation": "\\textup{StandardKeyboards} \\geq \\textup{MinStandard}",
            "related_variables": [
                "StandardKeyboards"
            ],
            "related_parameters": [
                "MinStandard"
            ],
            "code": "# Add minimum production constraint for standard keyboards\nmodel.addConstr(StandardKeyboards >= MinStandard, name=\"min_standard_keyboards\")"
        },
        {
            "description": "Total plastic use for mechanical and standard keyboards must not exceed the total available units of plastic",
            "status": "coded",
            "formulation": "\\textup{PlasticPerMechanical} \\cdot \\textup{MechanicalKeyboards} + \\textup{PlasticPerStandard} \\cdot \\textup{StandardKeyboards} \\leq \\textup{TotalPlastic}",
            "related_variables": [
                "MechanicalKeyboards",
                "StandardKeyboards"
            ],
            "related_parameters": [
                "PlasticPerMechanical",
                "PlasticPerStandard",
                "TotalPlastic"
            ],
            "code": "# Add constraint for total plastic use for mechanical and standard keyboards\nmodel.addConstr(PlasticPerMechanical * MechanicalKeyboards + PlasticPerStandard * StandardKeyboards <= TotalPlastic, \"TotalPlasticConstraint\")"
        },
        {
            "description": "Total solder used for producing keyboards must not exceed the total available solder",
            "status": "coded",
            "formulation": "\\textup{SolderPerMechanical} \\times \\textup{MechanicalKeyboards} + \\textup{SolderPerStandard} \\times \\textup{StandardKeyboards} \\leq \\textup{TotalSolder}",
            "related_variables": [
                "MechanicalKeyboards",
                "StandardKeyboards"
            ],
            "related_parameters": [
                "SolderPerMechanical",
                "SolderPerStandard",
                "TotalSolder"
            ],
            "code": "# Add constraint for solder usage\nmodel.addConstr(SolderPerMechanical * MechanicalKeyboards + SolderPerStandard * StandardKeyboards <= TotalSolder, name=\"solder_usage\")"
        },
        {
            "description": "Maintain the specified ratio of mechanical keyboards to standard keyboards",
            "status": "coded",
            "formulation": "\\textup{MechanicalKeyboards} = \\textup{RatioMechanicalStandard} \\times \\textup{StandardKeyboards}",
            "related_variables": [
                "MechanicalKeyboards",
                "StandardKeyboards"
            ],
            "related_parameters": [
                "RatioMechanicalStandard"
            ],
            "code": "# Add constraint to maintain the specified ratio of mechanical keyboards to standard keyboards\nmodel.addConstr(MechanicalKeyboards == RatioMechanicalStandard * StandardKeyboards, name=\"ratio_mechanical_standard\")"
        },
        {
            "description": "Ensure the use of plastic does not exceed the total available",
            "status": "coded",
            "formulation": "\\textup{PlasticPerMechanical} \\times \\textup{MechanicalKeyboards} + \\textup{PlasticPerStandard} \\times \\textup{StandardKeyboards} \\leq \\textup{TotalPlastic}",
            "related_variables": [
                "MechanicalKeyboards",
                "StandardKeyboards"
            ],
            "related_parameters": [
                "PlasticPerMechanical",
                "PlasticPerStandard",
                "TotalPlastic"
            ],
            "code": "# Ensure the use of plastic does not exceed the total available\nmodel.addConstr(PlasticPerMechanical * MechanicalKeyboards + PlasticPerStandard * StandardKeyboards <= TotalPlastic, name=\"plastic_limit\")"
        },
        {
            "description": "Ensure the use of solder does not exceed the total available",
            "status": "coded",
            "formulation": "\\textup{SolderPerMechanical} \\times \\textup{MechanicalKeyboards} + \\textup{SolderPerStandard} \\times \\textup{StandardKeyboards} \\leq \\textup{TotalSolder}",
            "related_variables": [
                "MechanicalKeyboards",
                "StandardKeyboards"
            ],
            "related_parameters": [
                "SolderPerMechanical",
                "SolderPerStandard",
                "TotalSolder"
            ],
            "code": "# Ensure the use of solder does not exceed the total available\nmodel.addConstr(SolderPerMechanical * MechanicalKeyboards + SolderPerStandard * StandardKeyboards <= TotalSolder, name=\"solder_usage_constraint\")"
        },
        {
            "description": "Ensure at least a minimum number of standard keyboards are produced",
            "status": "coded",
            "formulation": "\\textup{StandardKeyboards} \\geq \\textup{MinStandard}",
            "related_variables": [
                "StandardKeyboards"
            ],
            "related_parameters": [
                "MinStandard"
            ],
            "code": "# Ensure at least a minimum number of standard keyboards are produced\nmodel.addConstr(StandardKeyboards >= MinStandard, name=\"min_standard_keyboards\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of mechanical keyboards produced",
            "symbol": "MechanicalKeyboards",
            "shape": [],
            "status": "coded",
            "code": "MechanicalKeyboards = model.addVar(vtype=gp.GRB.INTEGER, name=\"MechanicalKeyboards\")"
        },
        {
            "definition": "Number of standard keyboards produced",
            "symbol": "StandardKeyboards",
            "shape": [],
            "status": "coded",
            "code": "StandardKeyboards = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"StandardKeyboards\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total number of keyboards manufactured",
            "status": "coded",
            "formulation": "\\textup{Maximize} \\quad \\textup{MechanicalKeyboards} + \\textup{StandardKeyboards}",
            "related_variables": [
                "MechanicalKeyboards",
                "StandardKeyboards"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(MechanicalKeyboards + StandardKeyboards, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 4,
    "error_message": null,
    "obj_val": "infeasible or unbounded",
    "log_path": "logs/log_20250413175741_nl4opt_prob_277/",
    "problem_path": "data/nl4opt/prob_277/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_277/data.json\", \"r\") as f:\n    data = json.load(f)\n\nRatioMechanicalStandard = data[\"RatioMechanicalStandard\"] # scalar parameter\nPlasticPerMechanical = data[\"PlasticPerMechanical\"] # scalar parameter\nSolderPerMechanical = data[\"SolderPerMechanical\"] # scalar parameter\nPlasticPerStandard = data[\"PlasticPerStandard\"] # scalar parameter\nSolderPerStandard = data[\"SolderPerStandard\"] # scalar parameter\nMinStandard = data[\"MinStandard\"] # scalar parameter\nTotalPlastic = data[\"TotalPlastic\"] # scalar parameter\nTotalSolder = data[\"TotalSolder\"] # scalar parameter\nMechanicalKeyboards = model.addVar(vtype=gp.GRB.INTEGER, name=\"MechanicalKeyboards\")\nStandardKeyboards = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"StandardKeyboards\")\n\n# Since MechanicalKeyboards is already defined as an integer variable, no code is needed to enforce non-negativity\n# The Gurobi optimizer automatically enforces the non-negative domain for integer variables\n\n# The number of standard keyboards produced must be non-negative\nmodel.addConstr(StandardKeyboards >= 0, name=\"non_negative_standard_keyboards\")\n\n# Add minimum production constraint for standard keyboards\nmodel.addConstr(StandardKeyboards >= MinStandard, name=\"min_standard_keyboards\")\n\n# Add constraint for total plastic use for mechanical and standard keyboards\nmodel.addConstr(PlasticPerMechanical * MechanicalKeyboards + PlasticPerStandard * StandardKeyboards <= TotalPlastic, \"TotalPlasticConstraint\")\n\n# Add constraint for solder usage\nmodel.addConstr(SolderPerMechanical * MechanicalKeyboards + SolderPerStandard * StandardKeyboards <= TotalSolder, name=\"solder_usage\")\n\n# Add constraint to maintain the specified ratio of mechanical keyboards to standard keyboards\nmodel.addConstr(MechanicalKeyboards == RatioMechanicalStandard * StandardKeyboards, name=\"ratio_mechanical_standard\")\n\n# Ensure the use of plastic does not exceed the total available\nmodel.addConstr(PlasticPerMechanical * MechanicalKeyboards + PlasticPerStandard * StandardKeyboards <= TotalPlastic, name=\"plastic_limit\")\n\n# Ensure the use of solder does not exceed the total available\nmodel.addConstr(SolderPerMechanical * MechanicalKeyboards + SolderPerStandard * StandardKeyboards <= TotalSolder, name=\"solder_usage_constraint\")\n\n# Ensure at least a minimum number of standard keyboards are produced\nmodel.addConstr(StandardKeyboards >= MinStandard, name=\"min_standard_keyboards\")\n\n# Set objective\nmodel.setObjective(MechanicalKeyboards + StandardKeyboards, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}