{
    "background": "A milk tea shop owner sells two types of milk teas that require milk and honey. Each type has a specific milk and honey requirement and contributes a specific profit.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Amount of milk in a bottle of black milk tea",
            "symbol": "BlackMilk",
            "value": 600,
            "shape": [],
            "code": "BlackMilk = data[\"BlackMilk\"] # scalar parameter"
        },
        {
            "definition": "Amount of honey in a bottle of black milk tea",
            "symbol": "BlackHoney",
            "value": 10,
            "shape": [],
            "code": "BlackHoney = data[\"BlackHoney\"] # scalar parameter"
        },
        {
            "definition": "Amount of milk in a bottle of matcha milk tea",
            "symbol": "MatchaMilk",
            "value": 525,
            "shape": [],
            "code": "MatchaMilk = data[\"MatchaMilk\"] # scalar parameter"
        },
        {
            "definition": "Amount of honey in a bottle of matcha milk tea",
            "symbol": "MatchaHoney",
            "value": 5,
            "shape": [],
            "code": "MatchaHoney = data[\"MatchaHoney\"] # scalar parameter"
        },
        {
            "definition": "Profit from selling one bottle of black milk tea",
            "symbol": "ProfitBlack",
            "value": 7.5,
            "shape": [],
            "code": "ProfitBlack = data[\"ProfitBlack\"] # scalar parameter"
        },
        {
            "definition": "Profit from selling one bottle of matcha milk tea",
            "symbol": "ProfitMatcha",
            "value": 5.0,
            "shape": [],
            "code": "ProfitMatcha = data[\"ProfitMatcha\"] # scalar parameter"
        },
        {
            "definition": "Total available amount of milk",
            "symbol": "TotalMilk",
            "value": 30000,
            "shape": [],
            "code": "TotalMilk = data[\"TotalMilk\"] # scalar parameter"
        },
        {
            "definition": "Total available amount of honey",
            "symbol": "TotalHoney",
            "value": 500,
            "shape": [],
            "code": "TotalHoney = data[\"TotalHoney\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of black milk tea bottles must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfBlackMilkTeaBottles} \\geq 0",
            "related_variables": [
                "NumberOfBlackMilkTeaBottles"
            ],
            "related_parameters": [],
            "code": "# Since NumberOfBlackMilkTeaBottles is already defined as an integer variable, we just need to add the non-negativity constraint\nmodel.addConstr(NumberOfBlackMilkTeaBottles >= 0, \"non_negativity_black_milk_tea_bottles\")"
        },
        {
            "description": "Number of matcha milk tea bottles must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfMatchaMilkTeaBottles} \\geq 0",
            "related_variables": [
                "NumberOfMatchaMilkTeaBottles"
            ],
            "related_parameters": [],
            "code": "# The NumberOfMatchaMilkTeaBottles variable is already non-negative by the nature of its definition as an INTEGER in the code provided.\n# Therefore, no additional constraint is required to ensure its non-negativity."
        },
        {
            "description": "Total milk used for black and matcha milk teas does not exceed TotalMilk grams",
            "status": "coded",
            "formulation": "\\textup{BlackMilk} \\cdot \\textup{NumberOfBlackMilkTeaBottles} + \\textup{MatchaMilk} \\cdot \\textup{NumberOfMatchaMilkTeaBottles} \\leq \\textup{TotalMilk}",
            "related_variables": [
                "NumberOfBlackMilkTeaBottles",
                "NumberOfMatchaMilkTeaBottles"
            ],
            "related_parameters": [
                "BlackMilk",
                "MatchaMilk",
                "TotalMilk"
            ],
            "code": "# Total milk used for black and matcha milk teas does not exceed TotalMilk grams\nmodel.addConstr((BlackMilk * NumberOfBlackMilkTeaBottles) + \n                (MatchaMilk * NumberOfMatchaMilkTeaBottles) <= TotalMilk,\n                name=\"milk_usage_constraint\")"
        },
        {
            "description": "Total honey used for black and matcha milk teas does not exceed TotalHoney grams",
            "status": "coded",
            "formulation": "\\textup{BlackHoney} \\times \\textup{NumberOfBlackMilkTeaBottles} + \\textup{MatchaHoney} \\times \\textup{NumberOfMatchaMilkTeaBottles} \\leq \\textup{TotalHoney}",
            "related_variables": [
                "NumberOfBlackMilkTeaBottles",
                "NumberOfMatchaMilkTeaBottles"
            ],
            "related_parameters": [
                "BlackHoney",
                "MatchaHoney",
                "TotalHoney"
            ],
            "code": "# Total honey used for black and matcha milk teas does not exceed TotalHoney grams\nmodel.addConstr(BlackHoney * NumberOfBlackMilkTeaBottles + MatchaHoney * NumberOfMatchaMilkTeaBottles <= TotalHoney, name=\"honey_usage_constraint\")"
        },
        {
            "description": "The total amount of milk used for both black and matcha milk tea bottles should not exceed the total available amount of milk",
            "status": "coded",
            "formulation": "(\\textup{BlackMilk} \\times \\textup{NumberOfBlackMilkTeaBottles} + \\textup{MatchaMilk} \\times \\textup{NumberOfMatchaMilkTeaBottles}) \\leq \\textup{TotalMilk}",
            "related_variables": [
                "NumberOfBlackMilkTeaBottles",
                "NumberOfMatchaMilkTeaBottles"
            ],
            "related_parameters": [
                "BlackMilk",
                "MatchaMilk",
                "TotalMilk"
            ],
            "code": "# Milk usage constraint for black and matcha milk tea bottles\nmodel.addConstr((BlackMilk * NumberOfBlackMilkTeaBottles + MatchaMilk * NumberOfMatchaMilkTeaBottles) <= TotalMilk, name=\"milk_usage\")"
        },
        {
            "description": "The total amount of honey used for both black and matcha milk tea bottles should not exceed the total available amount of honey",
            "status": "coded",
            "formulation": "(\\textup{BlackHoney} \\times \\textup{NumberOfBlackMilkTeaBottles} + \\textup{MatchaHoney} \\times \\textup{NumberOfMatchaMilkTeaBottles}) \\leq \\textup{TotalHoney}",
            "related_variables": [
                "NumberOfBlackMilkTeaBottles",
                "NumberOfMatchaMilkTeaBottles"
            ],
            "related_parameters": [
                "BlackHoney",
                "MatchaHoney",
                "TotalHoney"
            ],
            "code": "# Constraint: Total honey used for black and matcha milk tea should not exceed the total amount of honey available\nmodel.addConstr((BlackHoney * NumberOfBlackMilkTeaBottles + MatchaHoney * NumberOfMatchaMilkTeaBottles) <= TotalHoney, \"honey_usage_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of black milk tea bottles sold",
            "symbol": "NumberOfBlackMilkTeaBottles",
            "shape": [],
            "status": "coded",
            "code": "NumberOfBlackMilkTeaBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBlackMilkTeaBottles\")"
        },
        {
            "definition": "Number of matcha milk tea bottles sold",
            "symbol": "NumberOfMatchaMilkTeaBottles",
            "shape": [],
            "status": "coded",
            "code": "NumberOfMatchaMilkTeaBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfMatchaMilkTeaBottles\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total profit from selling black and matcha milk tea bottles",
            "status": "coded",
            "formulation": "\\max (\\textup{ProfitBlack} \\times \\textup{NumberOfBlackMilkTeaBottles} + \\textup{ProfitMatcha} \\times \\textup{NumberOfMatchaMilkTeaBottles})",
            "related_variables": [
                "NumberOfBlackMilkTeaBottles",
                "NumberOfMatchaMilkTeaBottles"
            ],
            "related_parameters": [
                "ProfitBlack",
                "ProfitMatcha"
            ],
            "code": "# Define variables\nNumberOfBlackMilkTeaBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBlackMilkTeaBottles\")\nNumberOfMatchaMilkTeaBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfMatchaMilkTeaBottles\")\n\n# Define parameters\nProfitBlack = data[\"ProfitBlack\"]  # 7.5\nProfitMatcha = data[\"ProfitMatcha\"]  # 5.0\n\n# Set objective\nmodel.setObjective(ProfitBlack * NumberOfBlackMilkTeaBottles + ProfitMatcha * NumberOfMatchaMilkTeaBottles, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 5,
    "error_message": null,
    "obj_val": "unbounded",
    "log_path": "logs/log_20250413154749_nl4opt_prob_203/",
    "problem_path": "data/nl4opt/prob_203/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_203/data.json\", \"r\") as f:\n    data = json.load(f)\n\nBlackMilk = data[\"BlackMilk\"] # scalar parameter\nBlackHoney = data[\"BlackHoney\"] # scalar parameter\nMatchaMilk = data[\"MatchaMilk\"] # scalar parameter\nMatchaHoney = data[\"MatchaHoney\"] # scalar parameter\nProfitBlack = data[\"ProfitBlack\"] # scalar parameter\nProfitMatcha = data[\"ProfitMatcha\"] # scalar parameter\nTotalMilk = data[\"TotalMilk\"] # scalar parameter\nTotalHoney = data[\"TotalHoney\"] # scalar parameter\nNumberOfBlackMilkTeaBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBlackMilkTeaBottles\")\nNumberOfMatchaMilkTeaBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfMatchaMilkTeaBottles\")\n\n# Since NumberOfBlackMilkTeaBottles is already defined as an integer variable, we just need to add the non-negativity constraint\nmodel.addConstr(NumberOfBlackMilkTeaBottles >= 0, \"non_negativity_black_milk_tea_bottles\")\n\n# The NumberOfMatchaMilkTeaBottles variable is already non-negative by the nature of its definition as an INTEGER in the code provided.\n# Therefore, no additional constraint is required to ensure its non-negativity.\n\n# Total milk used for black and matcha milk teas does not exceed TotalMilk grams\nmodel.addConstr((BlackMilk * NumberOfBlackMilkTeaBottles) + \n                (MatchaMilk * NumberOfMatchaMilkTeaBottles) <= TotalMilk,\n                name=\"milk_usage_constraint\")\n\n# Total honey used for black and matcha milk teas does not exceed TotalHoney grams\nmodel.addConstr(BlackHoney * NumberOfBlackMilkTeaBottles + MatchaHoney * NumberOfMatchaMilkTeaBottles <= TotalHoney, name=\"honey_usage_constraint\")\n\n# Milk usage constraint for black and matcha milk tea bottles\nmodel.addConstr((BlackMilk * NumberOfBlackMilkTeaBottles + MatchaMilk * NumberOfMatchaMilkTeaBottles) <= TotalMilk, name=\"milk_usage\")\n\n# Constraint: Total honey used for black and matcha milk tea should not exceed the total amount of honey available\nmodel.addConstr((BlackHoney * NumberOfBlackMilkTeaBottles + MatchaHoney * NumberOfMatchaMilkTeaBottles) <= TotalHoney, \"honey_usage_constraint\")\n\n# Define variables\nNumberOfBlackMilkTeaBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBlackMilkTeaBottles\")\nNumberOfMatchaMilkTeaBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfMatchaMilkTeaBottles\")\n\n# Define parameters\nProfitBlack = data[\"ProfitBlack\"]  # 7.5\nProfitMatcha = data[\"ProfitMatcha\"]  # 5.0\n\n# Set objective\nmodel.setObjective(ProfitBlack * NumberOfBlackMilkTeaBottles + ProfitMatcha * NumberOfMatchaMilkTeaBottles, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}