{
    "background": "A volunteer organization is planning to transport voters to the polls using a fleet of vans and cars, aiming to meet minimum voter transport requirements while adhering to vehicle ratio mandates.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of people a van can carry",
            "symbol": "VanCapacity",
            "value": 6,
            "shape": [],
            "code": "VanCapacity = data[\"VanCapacity\"] # scalar parameter"
        },
        {
            "definition": "Number of people a car can carry",
            "symbol": "CarCapacity",
            "value": 3,
            "shape": [],
            "code": "CarCapacity = data[\"CarCapacity\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of voters to transport to the polls",
            "symbol": "MinimumVoters",
            "value": 200,
            "shape": [],
            "code": "MinimumVoters = data[\"MinimumVoters\"] # scalar parameter"
        },
        {
            "definition": "Maximum proportion of the number of vans to the total number of vehicles",
            "symbol": "MaxVansRatio",
            "value": 0.33,
            "shape": [],
            "code": "MaxVansRatio = data[\"MaxVansRatio\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of vans must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfVans} \\geq 0",
            "related_variables": [
                "NumberOfVans"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for the number of vans\nmodel.addConstr(NumberOfVans >= 0, name=\"non_negativity_vans\")"
        },
        {
            "description": "The number of cars used to transport voters to the polls must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfCars} \\geq 0",
            "related_variables": [
                "NumberOfCars"
            ],
            "related_parameters": [],
            "code": "# Add constraint for non-negative number of cars\nmodel.addConstr(NumberOfCars >= 0, name=\"non_negative_cars\")"
        },
        {
            "description": "Total number of voters transported using all available vehicles should meet or exceed the minimum required number of voters",
            "status": "coded",
            "formulation": "\\textup{NumberOfVans} \\times \\textup{VanCapacity} + \\textup{NumberOfCars} \\times \\textup{CarCapacity} \\geq \\textup{MinimumVoters}",
            "related_variables": [
                "NumberOfVans",
                "NumberOfCars"
            ],
            "related_parameters": [
                "VanCapacity",
                "CarCapacity",
                "MinimumVoters"
            ],
            "code": "# Add constraint for minimum number of voters transported\nmodel.addConstr(NumberOfVans * VanCapacity + NumberOfCars * CarCapacity >= MinimumVoters, name=\"min_voters_transport\")"
        },
        {
            "description": "At most MaxVansRatio of the total number of vehicles can be vans",
            "status": "coded",
            "formulation": "\\textup{NumberOfVans} \\leq \\textup{MaxVansRatio} \\cdot (\\textup{NumberOfVans} + \\textup{NumberOfCars})",
            "related_variables": [
                "NumberOfVans",
                "NumberOfCars"
            ],
            "related_parameters": [
                "MaxVansRatio"
            ],
            "code": "# At most MaxVansRatio of the total number of vehicles can be vans constraint\nmodel.addConstr(NumberOfVans <= MaxVansRatio * (NumberOfVans + NumberOfCars), name=\"max_vans_ratio\")"
        },
        {
            "description": "Ensure the total capacity meets the minimum voter requirement",
            "status": "coded",
            "formulation": "\\textup{VanCapacity} \\times \\textup{NumberOfVans} + \\textup{CarCapacity} \\times \\textup{NumberOfCars} \\geq \\textup{MinimumVoters}",
            "related_variables": [
                "NumberOfVans",
                "NumberOfCars"
            ],
            "related_parameters": [
                "VanCapacity",
                "CarCapacity",
                "MinimumVoters"
            ],
            "code": "# Ensure the total capacity meets the minimum voter requirement\nmodel.addConstr(VanCapacity * NumberOfVans + CarCapacity * NumberOfCars >= MinimumVoters, \"min_voters_requirement\")"
        },
        {
            "description": "Ensure the ratio of vans to the total number of vehicles does not exceed the maximum proportion",
            "status": "coded",
            "formulation": "\\textup{NumberOfVans} \\leq \\textup{MaxVansRatio} \\times (\\textup{NumberOfVans} + \\textup{NumberOfCars})",
            "related_variables": [
                "NumberOfVans",
                "NumberOfCars"
            ],
            "related_parameters": [
                "MaxVansRatio"
            ],
            "code": "# Ensure the ratio of vans to the total number of vehicles does not exceed the maximum proportion\nmodel.addConstr(NumberOfVans <= MaxVansRatio * (NumberOfVans + NumberOfCars), name=\"max_vans_ratio_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of vans used to transport voters to the polls",
            "symbol": "NumberOfVans",
            "shape": [],
            "status": "coded",
            "code": "NumberOfVans = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfVans\")"
        },
        {
            "definition": "The number of cars used to transport voters to the polls",
            "symbol": "NumberOfCars",
            "shape": [],
            "status": "coded",
            "code": "NumberOfCars = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfCars\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of cars and vans used",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{NumberOfVans} + \\textup{NumberOfCars}",
            "related_variables": [
                "NumberOfVans",
                "NumberOfCars"
            ],
            "related_parameters": [],
            "code": "# Define variables\nNumberOfVans = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfVans\")\nNumberOfCars = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfCars\")\n\n# Set objective\nmodel.setObjective(NumberOfVans + NumberOfCars, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 0.0,
    "log_path": "logs/log_20250413153908_nl4opt_prob_198/",
    "problem_path": "data/nl4opt/prob_198/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_198/data.json\", \"r\") as f:\n    data = json.load(f)\n\nVanCapacity = data[\"VanCapacity\"] # scalar parameter\nCarCapacity = data[\"CarCapacity\"] # scalar parameter\nMinimumVoters = data[\"MinimumVoters\"] # scalar parameter\nMaxVansRatio = data[\"MaxVansRatio\"] # scalar parameter\nNumberOfVans = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfVans\")\nNumberOfCars = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfCars\")\n\n# Add non-negativity constraint for the number of vans\nmodel.addConstr(NumberOfVans >= 0, name=\"non_negativity_vans\")\n\n# Add constraint for non-negative number of cars\nmodel.addConstr(NumberOfCars >= 0, name=\"non_negative_cars\")\n\n# Add constraint for minimum number of voters transported\nmodel.addConstr(NumberOfVans * VanCapacity + NumberOfCars * CarCapacity >= MinimumVoters, name=\"min_voters_transport\")\n\n# At most MaxVansRatio of the total number of vehicles can be vans constraint\nmodel.addConstr(NumberOfVans <= MaxVansRatio * (NumberOfVans + NumberOfCars), name=\"max_vans_ratio\")\n\n# Ensure the total capacity meets the minimum voter requirement\nmodel.addConstr(VanCapacity * NumberOfVans + CarCapacity * NumberOfCars >= MinimumVoters, \"min_voters_requirement\")\n\n# Ensure the ratio of vans to the total number of vehicles does not exceed the maximum proportion\nmodel.addConstr(NumberOfVans <= MaxVansRatio * (NumberOfVans + NumberOfCars), name=\"max_vans_ratio_constraint\")\n\n# Define variables\nNumberOfVans = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfVans\")\nNumberOfCars = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfCars\")\n\n# Set objective\nmodel.setObjective(NumberOfVans + NumberOfCars, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}