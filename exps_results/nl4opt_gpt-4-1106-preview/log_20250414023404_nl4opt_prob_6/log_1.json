{
    "background": "A farmer has a certain amount of land to allocate to growing tomatoes and potatoes. She has preferences regarding the proportions of each crop and minimum quantities to meet demands, while aiming to maximize profit within the constraints of soil and weather.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total area available for tomatoes and potatoes",
            "symbol": "TotalArea",
            "value": 140,
            "shape": [],
            "code": "TotalArea = data[\"TotalArea\"] # scalar parameter"
        },
        {
            "definition": "Maximum ratio of area of tomatoes to potatoes",
            "symbol": "MaxRatioTomatoes",
            "value": 2,
            "shape": [],
            "code": "MaxRatioTomatoes = data[\"MaxRatioTomatoes\"] # scalar parameter"
        },
        {
            "definition": "Minimum area required for tomatoes",
            "symbol": "MinTomatoes",
            "value": 20,
            "shape": [],
            "code": "MinTomatoes = data[\"MinTomatoes\"] # scalar parameter"
        },
        {
            "definition": "Minimum area required for potatoes",
            "symbol": "MinPotatoes",
            "value": 30,
            "shape": [],
            "code": "MinPotatoes = data[\"MinPotatoes\"] # scalar parameter"
        },
        {
            "definition": "Profit per hectare of tomatoes",
            "symbol": "ProfitTomatoes",
            "value": 350,
            "shape": [],
            "code": "ProfitTomatoes = data[\"ProfitTomatoes\"] # scalar parameter"
        },
        {
            "definition": "Profit per hectare of potatoes",
            "symbol": "ProfitPotatoes",
            "value": 600,
            "shape": [],
            "code": "ProfitPotatoes = data[\"ProfitPotatoes\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The total area allocated for tomatoes and potatoes must not exceed the TotalArea.",
            "status": "coded",
            "formulation": "\\textup{AreaTomatoes} + \\textup{AreaPotatoes} \\leq \\textup{TotalArea}",
            "related_variables": [
                "AreaTomatoes",
                "AreaPotatoes"
            ],
            "related_parameters": [
                "TotalArea"
            ],
            "code": "# Add constraint for area allocation of tomatoes and potatoes not exceeding TotalArea\nmodel.addConstr(AreaTomatoes + AreaPotatoes <= TotalArea, name=\"area_constraint\")"
        },
        {
            "description": "The number of hectares allocated to tomatoes must be at least MinTomatoes",
            "status": "coded",
            "formulation": "\\textup{AreaTomatoes} \\geq \\textup{MinTomatoes}",
            "related_variables": [
                "AreaTomatoes"
            ],
            "related_parameters": [
                "MinTomatoes"
            ],
            "code": "# Constraint for minimum area allocated to tomatoes\nmodel.addConstr(AreaTomatoes >= MinTomatoes, name=\"min_area_tomatoes_constraint\")"
        },
        {
            "description": "The area allocated for potatoes must be at least the minimum required area",
            "status": "coded",
            "formulation": "\\textup{AreaPotatoes} \\geq \\textup{MinPotatoes}",
            "related_variables": [
                "AreaPotatoes"
            ],
            "related_parameters": [
                "MinPotatoes"
            ],
            "code": "# Ensure the area allocated for potatoes is at least the minimum required area\nmodel.addConstr(AreaPotatoes >= MinPotatoes, name=\"min_potatoes_area\")"
        },
        {
            "description": "The number of hectares of tomatoes cannot exceed twice the number of hectares of MaxRatioTomatoes in potatoes",
            "status": "coded",
            "formulation": "\\textup{AreaTomatoes} \\leq 2 \\times \\textup{MaxRatioTomatoes} \\times \\textup{AreaPotatoes}",
            "related_variables": [
                "AreaTomatoes",
                "AreaPotatoes"
            ],
            "related_parameters": [
                "MaxRatioTomatoes"
            ],
            "code": "# Add constraint for the area of tomatoes not to exceed twice the area of MaxRatioTomatoes in potatoes\nmodel.addConstr(AreaTomatoes <= 2 * MaxRatioTomatoes * AreaPotatoes, name=\"tomato_potato_area_ratio\")"
        },
        {
            "description": "The areas allocated for tomatoes and potatoes must be non-negative",
            "status": "coded",
            "formulation": "\\textup{AreaTomatoes} \\geq 0 \\quad \\textup{and} \\quad \\textup{AreaPotatoes} \\geq 0",
            "related_variables": [
                "AreaTomatoes",
                "AreaPotatoes"
            ],
            "related_parameters": [],
            "code": "# Since the variables AreaTomatoes and AreaPotatoes are defined with lower bounds of 0 by default in Gurobi,\n# no additional constraints are needed to ensure their non-negativity."
        },
        {
            "description": "The total area allocated for tomatoes and potatoes must not exceed the total available area, the area for each crop must be within the specified minimum requirements, and the maximum ratio of areas must not be exceeded",
            "status": "coded",
            "formulation": "\\textup{AreaTomatoes} + \\textup{AreaPotatoes} \\leq \\textup{TotalArea} \\quad \\textup{AreaTomatoes} \\geq \\textup{MinTomatoes} \\quad \\textup{AreaPotatoes} \\geq \\textup{MinPotatoes} \\quad \\frac{\\textup{AreaTomatoes}}{\\textup{AreaPotatoes}} \\leq \\textup{MaxRatioTomatoes}",
            "related_variables": [
                "AreaTomatoes",
                "AreaPotatoes"
            ],
            "related_parameters": [
                "TotalArea",
                "MinTomatoes",
                "MinPotatoes",
                "MaxRatioTomatoes"
            ],
            "code": "# Total area allocated for tomatoes and potatoes must not exceed the total available area\nmodel.addConstr(AreaTomatoes + AreaPotatoes <= TotalArea, \"area_total_constraint\")\n\n# Area for tomatoes must be within the specified minimum requirements\nmodel.addConstr(AreaTomatoes >= MinTomatoes, \"area_tomatoes_min_constraint\")\n\n# Area for potatoes must be within the specified minimum requirements\nmodel.addConstr(AreaPotatoes >= MinPotatoes, \"area_potatoes_min_constraint\")\n\n# The maximum ratio of areas for tomatoes to potatoes must not be exceeded\nmodel.addConstr(AreaTomatoes <= MaxRatioTomatoes * AreaPotatoes, \"area_ratio_constraint\")"
        },
        {
            "description": "The area of tomatoes divided by the area of potatoes, considering when the area of potatoes is zero, which would make the division undefined, we imply that the maximum ratio is not bounded",
            "status": "coded",
            "formulation": "\\textup{AreaTomatoes} - \\textup{MaxRatioTomatoes} \\times \\textup{AreaPotatoes} \\leq 0",
            "related_variables": [
                "AreaTomatoes",
                "AreaPotatoes"
            ],
            "related_parameters": [
                "MaxRatioTomatoes"
            ],
            "code": "# Add a constraint for the ratio of the area of tomatoes to the area of potatoes\n# If the area of potatoes is zero, the constraint becomes non-binding\nmodel.addConstr(AreaTomatoes - MaxRatioTomatoes * AreaPotatoes <= 0, name=\"tomatoes_to_potatoes_ratio\")"
        },
        {
            "description": "The sum of areas for tomatoes and potatoes cannot exceed the total available area",
            "status": "coded",
            "formulation": "\\textup{AreaTomatoes} + \\textup{AreaPotatoes} \\leq \\textup{TotalArea}",
            "related_variables": [
                "AreaTomatoes",
                "AreaPotatoes"
            ],
            "related_parameters": [
                "TotalArea"
            ],
            "code": "# Constraint: The sum of areas for tomatoes and potatoes cannot exceed the total available area\nmodel.addConstr(AreaTomatoes + AreaPotatoes <= TotalArea, \"AreaConstraint\")"
        },
        {
            "description": "Area of tomatoes must be at least the specified minimum",
            "status": "coded",
            "formulation": "\\textup{AreaTomatoes} \\geq \\textup{MinTomatoes}",
            "related_variables": [
                "AreaTomatoes"
            ],
            "related_parameters": [
                "MinTomatoes"
            ],
            "code": "# Add constraint to ensure the area for tomatoes is at least the minimum required\nmodel.addConstr(AreaTomatoes >= MinTomatoes, name=\"min_area_tomatoes\")"
        },
        {
            "description": "Area of potatoes must be at least the specified minimum",
            "status": "coded",
            "formulation": "\\textup{AreaPotatoes} \\geq \\textup{MinPotatoes}",
            "related_variables": [
                "AreaPotatoes"
            ],
            "related_parameters": [
                "MinPotatoes"
            ],
            "code": "# Add constraint to ensure the area for potatoes is at least the minimum required\nmodel.addConstr(AreaPotatoes >= MinPotatoes, name=\"min_area_potatoes\")"
        },
        {
            "description": "The maximum ratio of area of tomatoes to potatoes",
            "status": "coded",
            "formulation": "\\textup{AreaTomatoes} \\leq \\textup{MaxRatioTomatoes} \\times \\textup{AreaPotatoes}",
            "related_variables": [
                "AreaTomatoes",
                "AreaPotatoes"
            ],
            "related_parameters": [
                "MaxRatioTomatoes"
            ],
            "code": "# Add maximum ratio constraint for area of tomatoes to potatoes\nmodel.addConstr(AreaTomatoes <= MaxRatioTomatoes * AreaPotatoes, name=\"TomatoesToPotatoesRatio\")"
        }
    ],
    "variables": [
        {
            "definition": "Area allocated for tomatoes",
            "symbol": "AreaTomatoes",
            "shape": [],
            "status": "coded",
            "code": "AreaTomatoes = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"AreaTomatoes\")"
        },
        {
            "definition": "Area allocated for potatoes",
            "symbol": "AreaPotatoes",
            "shape": [],
            "status": "coded",
            "code": "AreaPotatoes = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"AreaPotatoes\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total profit from planting tomatoes and potatoes",
            "status": "coded",
            "formulation": "\\max (\\textup{ProfitTomatoes} \\times \\textup{AreaTomatoes} + \\textup{ProfitPotatoes} \\times \\textup{AreaPotatoes})",
            "related_variables": [
                "AreaTomatoes",
                "AreaPotatoes"
            ],
            "related_parameters": [
                "ProfitTomatoes",
                "ProfitPotatoes"
            ],
            "code": "# Set objective function\nmodel.setObjective(ProfitTomatoes * AreaTomatoes + ProfitPotatoes * AreaPotatoes, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250414023404_nl4opt_prob_6/",
    "problem_path": "data/nl4opt/prob_6/"
}