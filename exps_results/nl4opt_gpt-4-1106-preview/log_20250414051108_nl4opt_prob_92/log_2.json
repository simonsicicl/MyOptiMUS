{
    "background": "A toy company needs to determine the number of medium-sized and small factories to build in order to meet daily toy production minimums with a limited number of operators.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of toys produced per day by a medium-sized factory",
            "symbol": "ToysMedium",
            "value": 50,
            "shape": [],
            "code": "ToysMedium = data[\"ToysMedium\"] # scalar parameter"
        },
        {
            "definition": "Number of operators required for a medium-sized factory",
            "symbol": "OperatorsMedium",
            "value": 3,
            "shape": [],
            "code": "OperatorsMedium = data[\"OperatorsMedium\"] # scalar parameter"
        },
        {
            "definition": "Number of toys produced per day by a small factory",
            "symbol": "ToysSmall",
            "value": 35,
            "shape": [],
            "code": "ToysSmall = data[\"ToysSmall\"] # scalar parameter"
        },
        {
            "definition": "Number of operators required for a small factory",
            "symbol": "OperatorsSmall",
            "value": 2,
            "shape": [],
            "code": "OperatorsSmall = data[\"OperatorsSmall\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of toys to be produced per day",
            "symbol": "ToysMin",
            "value": 250,
            "shape": [],
            "code": "ToysMin = data[\"ToysMin\"] # scalar parameter"
        },
        {
            "definition": "Total number of operators available",
            "symbol": "OperatorsTotal",
            "value": 16,
            "shape": [],
            "code": "OperatorsTotal = data[\"OperatorsTotal\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of medium-sized factories must be non-negative",
            "status": "coded",
            "formulation": "\\textup{MediumFactories} \\geq 0",
            "related_variables": [
                "MediumFactories"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of medium-sized factories is non-negative\nmodel.addConstr(MediumFactories >= 0, name=\"MediumFactories_non_negative\")"
        },
        {
            "description": "The number of small factories must be non-negative",
            "status": "coded",
            "formulation": "\\textup{SmallFactories} \\geq 0",
            "related_variables": [
                "SmallFactories"
            ],
            "related_parameters": [],
            "code": "# Small factories number should be non-negative (Redundant: Gurobi handles this through variable declaration)\n# No additional constraint code needed because non-negativity is ensured by the variable type (INTEGER) in Gurobi."
        },
        {
            "description": "Total production from all medium-sized and small factories must meet or exceed the minimum daily production requirement.",
            "status": "coded",
            "formulation": "\\textup{MediumFactories} \\times \\textup{ToysMedium} + \\textup{SmallFactories} \\times \\textup{ToysSmall} \\geq \\textup{ToysMin}",
            "related_variables": [
                "MediumFactories",
                "SmallFactories"
            ],
            "related_parameters": [
                "ToysMedium",
                "ToysSmall",
                "ToysMin"
            ],
            "code": "# Add constraint for meeting minimum daily production requirement\nmodel.addConstr(MediumFactories * ToysMedium + SmallFactories * ToysSmall >= ToysMin, name=\"min_daily_production\")"
        },
        {
            "description": "The constraint enforces the total number of operators required by medium-sized and small factories does not exceed the total number of operators available.",
            "status": "coded",
            "formulation": "\\textup{OperatorsMedium} \\cdot \\textup{MediumFactories} + \\textup{OperatorsSmall} \\cdot \\textup{SmallFactories} \\leq \\textup{OperatorsTotal}",
            "related_variables": [
                "MediumFactories",
                "SmallFactories"
            ],
            "related_parameters": [
                "OperatorsMedium",
                "OperatorsSmall",
                "OperatorsTotal"
            ],
            "code": "# Ensure total number of operators for medium and small factories does not exceed operators available\nmodel.addConstr(OperatorsMedium * MediumFactories + OperatorsSmall * SmallFactories <= OperatorsTotal, name=\"operator_availability\")"
        },
        {
            "description": "Production constraint to meet the minimum daily toy production requirement",
            "status": "coded",
            "formulation": "\\textup{ToysMedium} \\cdot \\textup{MediumFactories} + \\textup{ToysSmall} \\cdot \\textup{SmallFactories} \\geq \\textup{ToysMin}",
            "related_variables": [
                "MediumFactories",
                "SmallFactories"
            ],
            "related_parameters": [
                "ToysMedium",
                "ToysSmall",
                "ToysMin"
            ],
            "code": "# Add production constraint to meet the minimum daily toy production requirement\nmodel.addConstr(ToysMedium * MediumFactories + ToysSmall * SmallFactories >= ToysMin, name=\"production_constraint\")"
        },
        {
            "description": "Operator constraint not to exceed the total number of operators available",
            "status": "coded",
            "formulation": "\\textup{OperatorsMedium} \\cdot \\textup{MediumFactories} + \\textup{OperatorsSmall} \\cdot \\textup{SmallFactories} \\leq \\textup{OperatorsTotal}",
            "related_variables": [
                "MediumFactories",
                "SmallFactories"
            ],
            "related_parameters": [
                "OperatorsMedium",
                "OperatorsSmall",
                "OperatorsTotal"
            ],
            "code": "model.addConstr(OperatorsMedium * MediumFactories + OperatorsSmall * SmallFactories <= OperatorsTotal, name=\"operator_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of medium-sized factories",
            "symbol": "MediumFactories",
            "shape": [],
            "status": "coded",
            "code": "MediumFactories = model.addVar(vtype=gp.GRB.INTEGER, name=\"MediumFactories\")"
        },
        {
            "definition": "Number of small factories",
            "symbol": "SmallFactories",
            "shape": [],
            "status": "coded",
            "code": "SmallFactories = model.addVar(vtype=gp.GRB.INTEGER, name=\"SmallFactories\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of factories built",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{MediumFactories} + \\textup{SmallFactories}",
            "related_variables": [
                "MediumFactories",
                "SmallFactories"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(MediumFactories + SmallFactories, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 5.0,
    "log_path": "logs/log_20250414051108_nl4opt_prob_92/",
    "problem_path": "data/nl4opt/prob_92/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_92/data.json\", \"r\") as f:\n    data = json.load(f)\n\nToysMedium = data[\"ToysMedium\"] # scalar parameter\nOperatorsMedium = data[\"OperatorsMedium\"] # scalar parameter\nToysSmall = data[\"ToysSmall\"] # scalar parameter\nOperatorsSmall = data[\"OperatorsSmall\"] # scalar parameter\nToysMin = data[\"ToysMin\"] # scalar parameter\nOperatorsTotal = data[\"OperatorsTotal\"] # scalar parameter\nMediumFactories = model.addVar(vtype=gp.GRB.INTEGER, name=\"MediumFactories\")\nSmallFactories = model.addVar(vtype=gp.GRB.INTEGER, name=\"SmallFactories\")\n\n# Add constraint to ensure the number of medium-sized factories is non-negative\nmodel.addConstr(MediumFactories >= 0, name=\"MediumFactories_non_negative\")\n\n# Small factories number should be non-negative (Redundant: Gurobi handles this through variable declaration)\n# No additional constraint code needed because non-negativity is ensured by the variable type (INTEGER) in Gurobi.\n\n# Add constraint for meeting minimum daily production requirement\nmodel.addConstr(MediumFactories * ToysMedium + SmallFactories * ToysSmall >= ToysMin, name=\"min_daily_production\")\n\n# Ensure total number of operators for medium and small factories does not exceed operators available\nmodel.addConstr(OperatorsMedium * MediumFactories + OperatorsSmall * SmallFactories <= OperatorsTotal, name=\"operator_availability\")\n\n# Add production constraint to meet the minimum daily toy production requirement\nmodel.addConstr(ToysMedium * MediumFactories + ToysSmall * SmallFactories >= ToysMin, name=\"production_constraint\")\n\nmodel.addConstr(OperatorsMedium * MediumFactories + OperatorsSmall * SmallFactories <= OperatorsTotal, name=\"operator_constraint\")\n\n# Set objective\nmodel.setObjective(MediumFactories + SmallFactories, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}