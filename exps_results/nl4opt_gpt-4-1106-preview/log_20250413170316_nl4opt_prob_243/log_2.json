{
    "background": "A restaurant offers two types of meal combos, original and experimental. Both create food and wrapping waste while requiring different cooking times.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Food waste units generated by the original meal",
            "symbol": "WasteFoodOriginal",
            "value": 20,
            "shape": [],
            "code": "WasteFoodOriginal = data[\"WasteFoodOriginal\"] # scalar parameter"
        },
        {
            "definition": "Wrapping waste units generated by the original meal",
            "symbol": "WasteWrapOriginal",
            "value": 45,
            "shape": [],
            "code": "WasteWrapOriginal = data[\"WasteWrapOriginal\"] # scalar parameter"
        },
        {
            "definition": "Cooking time for the original meal",
            "symbol": "TimeOriginal",
            "value": 10,
            "shape": [],
            "code": "TimeOriginal = data[\"TimeOriginal\"] # scalar parameter"
        },
        {
            "definition": "Food waste units generated by the experimental meal",
            "symbol": "WasteFoodExperimental",
            "value": 25,
            "shape": [],
            "code": "WasteFoodExperimental = data[\"WasteFoodExperimental\"] # scalar parameter"
        },
        {
            "definition": "Wrapping waste units generated by the experimental meal",
            "symbol": "WasteWrapExperimental",
            "value": 35,
            "shape": [],
            "code": "WasteWrapExperimental = data[\"WasteWrapExperimental\"] # scalar parameter"
        },
        {
            "definition": "Cooking time for the experimental meal",
            "symbol": "TimeExperimental",
            "value": 15,
            "shape": [],
            "code": "TimeExperimental = data[\"TimeExperimental\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowable wrapping waste units",
            "symbol": "MaxWrapWaste",
            "value": 900,
            "shape": [],
            "code": "MaxWrapWaste = data[\"MaxWrapWaste\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowable food waste units",
            "symbol": "MaxFoodWaste",
            "value": 800,
            "shape": [],
            "code": "MaxFoodWaste = data[\"MaxFoodWaste\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of original meals produced must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfOriginalMeals} \\geq 0",
            "related_variables": [
                "NumberOfOriginalMeals"
            ],
            "related_parameters": [],
            "code": "# Add constraint for non-negativity of original meals produced\nmodel.addConstr(NumberOfOriginalMeals >= 0, name=\"nonnegativity_original_meals\")"
        },
        {
            "description": "The number of experimental meals must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfExperimentalMeals} \\geq 0",
            "related_variables": [
                "NumberOfExperimentalMeals"
            ],
            "related_parameters": [],
            "code": "model.addConstr(NumberOfExperimentalMeals >= 0, \"NumberOfExperimentalMeals_nonnegativity\")"
        },
        {
            "description": "Total food waste from original and experimental meals should not exceed MaxFoodWaste",
            "status": "coded",
            "formulation": "\\textup{WasteFoodOriginal} \\times \\textup{NumberOfOriginalMeals} + \\textup{WasteFoodExperimental} \\times \\textup{NumberOfExperimentalMeals} \\leq \\textup{MaxFoodWaste}",
            "related_variables": [
                "NumberOfOriginalMeals",
                "NumberOfExperimentalMeals"
            ],
            "related_parameters": [
                "WasteFoodOriginal",
                "WasteFoodExperimental",
                "MaxFoodWaste"
            ],
            "code": "# Add constraint for total food waste from original and experimental meals not to exceed MaxFoodWaste\nmodel.addConstr(WasteFoodOriginal * NumberOfOriginalMeals + WasteFoodExperimental * NumberOfExperimentalMeals <= MaxFoodWaste, name=\"food_waste_limit\")"
        },
        {
            "description": "Total wrapping waste from original and experimental meals should not exceed MaxWrapWaste",
            "status": "coded",
            "formulation": "\\textup{NumberOfOriginalMeals} \\times \\textup{WasteWrapOriginal} + \\textup{NumberOfExperimentalMeals} \\times \\textup{WasteWrapExperimental} \\leq \\textup{MaxWrapWaste}",
            "related_variables": [
                "NumberOfOriginalMeals",
                "NumberOfExperimentalMeals"
            ],
            "related_parameters": [
                "WasteWrapOriginal",
                "WasteWrapExperimental",
                "MaxWrapWaste"
            ],
            "code": "# Add constraint for total wrapping waste\nmodel.addConstr(NumberOfOriginalMeals * WasteWrapOriginal + NumberOfExperimentalMeals * WasteWrapExperimental <= MaxWrapWaste, name=\"Max_Wrapping_Waste\")"
        },
        {
            "description": "Maximum allowable wrapping waste units must not be exceeded",
            "status": "coded",
            "formulation": "\\textup{WasteWrapOriginal} \\times \\textup{NumberOfOriginalMeals} + \\textup{WasteWrapExperimental} \\times \\textup{NumberOfExperimentalMeals} \\leq \\textup{MaxWrapWaste}",
            "related_variables": [
                "NumberOfOriginalMeals",
                "NumberOfExperimentalMeals"
            ],
            "related_parameters": [
                "WasteWrapOriginal",
                "WasteWrapExperimental",
                "MaxWrapWaste"
            ],
            "code": "# Constraint: Maximum allowable wrapping waste units must not be exceeded\nmodel.addConstr(WasteWrapOriginal * NumberOfOriginalMeals + WasteWrapExperimental * NumberOfExperimentalMeals <= MaxWrapWaste, \"max_wrapping_waste_constraint\")"
        },
        {
            "description": "Maximum allowable food waste units must not be exceeded",
            "status": "coded",
            "formulation": "\\textup{WasteFoodOriginal} \\times \\textup{NumberOfOriginalMeals} + \\textup{WasteFoodExperimental} \\times \\textup{NumberOfExperimentalMeals} \\leq \\textup{MaxFoodWaste}",
            "related_variables": [
                "NumberOfOriginalMeals",
                "NumberOfExperimentalMeals"
            ],
            "related_parameters": [
                "WasteFoodOriginal",
                "WasteFoodExperimental",
                "MaxFoodWaste"
            ],
            "code": "# Add constraint for maximum allowable food waste units\nmodel.addConstr(WasteFoodOriginal * NumberOfOriginalMeals + WasteFoodExperimental * NumberOfExperimentalMeals <= MaxFoodWaste, name=\"max_food_waste\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of original meals produced by the restaurant",
            "symbol": "NumberOfOriginalMeals",
            "shape": [],
            "status": "coded",
            "code": "NumberOfOriginalMeals = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfOriginalMeals\")"
        },
        {
            "definition": "Number of experimental meals produced by the restaurant",
            "symbol": "NumberOfExperimentalMeals",
            "shape": [],
            "status": "coded",
            "code": "NumberOfExperimentalMeals = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfExperimentalMeals\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cooking time for meals produced by the restaurant",
            "status": "coded",
            "formulation": "\\textup{TotalCookingTime} = \\textup{TimeOriginal} \\times \\textup{NumberOfOriginalMeals} + \\textup{TimeExperimental} \\times \\textup{NumberOfExperimentalMeals}",
            "related_variables": [
                "NumberOfOriginalMeals",
                "NumberOfExperimentalMeals"
            ],
            "related_parameters": [
                "TimeOriginal",
                "TimeExperimental"
            ],
            "code": "# Define the objective function\nmodel.setObjective(TimeOriginal * NumberOfOriginalMeals + TimeExperimental * NumberOfExperimentalMeals, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 0.0,
    "log_path": "logs/log_20250413170316_nl4opt_prob_243/",
    "problem_path": "data/nl4opt/prob_243/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_243/data.json\", \"r\") as f:\n    data = json.load(f)\n\nWasteFoodOriginal = data[\"WasteFoodOriginal\"] # scalar parameter\nWasteWrapOriginal = data[\"WasteWrapOriginal\"] # scalar parameter\nTimeOriginal = data[\"TimeOriginal\"] # scalar parameter\nWasteFoodExperimental = data[\"WasteFoodExperimental\"] # scalar parameter\nWasteWrapExperimental = data[\"WasteWrapExperimental\"] # scalar parameter\nTimeExperimental = data[\"TimeExperimental\"] # scalar parameter\nMaxWrapWaste = data[\"MaxWrapWaste\"] # scalar parameter\nMaxFoodWaste = data[\"MaxFoodWaste\"] # scalar parameter\nNumberOfOriginalMeals = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfOriginalMeals\")\nNumberOfExperimentalMeals = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfExperimentalMeals\")\n\n# Add constraint for non-negativity of original meals produced\nmodel.addConstr(NumberOfOriginalMeals >= 0, name=\"nonnegativity_original_meals\")\n\nmodel.addConstr(NumberOfExperimentalMeals >= 0, \"NumberOfExperimentalMeals_nonnegativity\")\n\n# Add constraint for total food waste from original and experimental meals not to exceed MaxFoodWaste\nmodel.addConstr(WasteFoodOriginal * NumberOfOriginalMeals + WasteFoodExperimental * NumberOfExperimentalMeals <= MaxFoodWaste, name=\"food_waste_limit\")\n\n# Add constraint for total wrapping waste\nmodel.addConstr(NumberOfOriginalMeals * WasteWrapOriginal + NumberOfExperimentalMeals * WasteWrapExperimental <= MaxWrapWaste, name=\"Max_Wrapping_Waste\")\n\n# Constraint: Maximum allowable wrapping waste units must not be exceeded\nmodel.addConstr(WasteWrapOriginal * NumberOfOriginalMeals + WasteWrapExperimental * NumberOfExperimentalMeals <= MaxWrapWaste, \"max_wrapping_waste_constraint\")\n\n# Add constraint for maximum allowable food waste units\nmodel.addConstr(WasteFoodOriginal * NumberOfOriginalMeals + WasteFoodExperimental * NumberOfExperimentalMeals <= MaxFoodWaste, name=\"max_food_waste\")\n\n# Define the objective function\nmodel.setObjective(TimeOriginal * NumberOfOriginalMeals + TimeExperimental * NumberOfExperimentalMeals, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}