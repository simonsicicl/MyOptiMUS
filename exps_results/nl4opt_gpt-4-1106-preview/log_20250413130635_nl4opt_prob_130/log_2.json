{
    "background": "A hospital patient needs medication, with the option to take two different pain killers. Each pain killer contributes different amounts of medicine to various parts of the body and includes a sleep medicine component.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Amount of leg medicine per dose of pain killer 1",
            "symbol": "LegMedicinePainKiller1",
            "value": 0.5,
            "shape": [],
            "code": "LegMedicinePainKiller1 = data[\"LegMedicinePainKiller1\"] # scalar parameter"
        },
        {
            "definition": "Amount of back medicine per dose of pain killer 1",
            "symbol": "BackMedicinePainKiller1",
            "value": 0.8,
            "shape": [],
            "code": "BackMedicinePainKiller1 = data[\"BackMedicinePainKiller1\"] # scalar parameter"
        },
        {
            "definition": "Amount of leg medicine per dose of pain killer 2",
            "symbol": "LegMedicinePainKiller2",
            "value": 0.7,
            "shape": [],
            "code": "LegMedicinePainKiller2 = data[\"LegMedicinePainKiller2\"] # scalar parameter"
        },
        {
            "definition": "Amount of back medicine per dose of pain killer 2",
            "symbol": "BackMedicinePainKiller2",
            "value": 0.4,
            "shape": [],
            "code": "BackMedicinePainKiller2 = data[\"BackMedicinePainKiller2\"] # scalar parameter"
        },
        {
            "definition": "Amount of sleep medicine per dose of pain killer 1",
            "symbol": "SleepMedicinePainKiller1",
            "value": 0.3,
            "shape": [],
            "code": "SleepMedicinePainKiller1 = data[\"SleepMedicinePainKiller1\"] # scalar parameter"
        },
        {
            "definition": "Amount of sleep medicine per dose of pain killer 2",
            "symbol": "SleepMedicinePainKiller2",
            "value": 0.6,
            "shape": [],
            "code": "SleepMedicinePainKiller2 = data[\"SleepMedicinePainKiller2\"] # scalar parameter"
        },
        {
            "definition": "Maximum units of sleep medicine allowed",
            "symbol": "MaxSleepMedicine",
            "value": 8,
            "shape": [],
            "code": "MaxSleepMedicine = data[\"MaxSleepMedicine\"] # scalar parameter"
        },
        {
            "definition": "Minimum units of leg medicine required",
            "symbol": "MinLegMedicine",
            "value": 4,
            "shape": [],
            "code": "MinLegMedicine = data[\"MinLegMedicine\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of doses of pain killer 1 must be non-negative",
            "status": "coded",
            "formulation": "\\textup{DosesPainKiller1} \\geq 0",
            "related_variables": [
                "DosesPainKiller1"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure non-negativity of the doses of pain killer 1\nmodel.addConstr(DosesPainKiller1 >= 0, name=\"doses_painkiller1_nonnegativity\")"
        },
        {
            "description": "Number of doses of pain killer 2 is non-negative",
            "status": "coded",
            "formulation": "DosesPainKiller2 \\geq 0",
            "related_variables": [
                "DosesPainKiller2"
            ],
            "related_parameters": [],
            "code": "# Since the variable DosesPainKiller2 is already defined as non-negative in its declaration, no additional code is needed for this constraint."
        },
        {
            "description": "Total amount of sleep medicine from both pain killers is at most MaxSleepMedicine units",
            "status": "coded",
            "formulation": "\\textup{SleepMedicinePainKiller1} \\cdot \\textup{DosesPainKiller1} + \\textup{SleepMedicinePainKiller2} \\cdot \\textup{DosesPainKiller2} \\leq \\textup{MaxSleepMedicine}",
            "related_variables": [
                "DosesPainKiller1",
                "DosesPainKiller2"
            ],
            "related_parameters": [
                "SleepMedicinePainKiller1",
                "SleepMedicinePainKiller2",
                "MaxSleepMedicine"
            ],
            "code": "# Add constraint: Total amount of sleep medicine from both pain killers is at most MaxSleepMedicine units\nmodel.addConstr(SleepMedicinePainKiller1 * DosesPainKiller1 + SleepMedicinePainKiller2 * DosesPainKiller2 <= MaxSleepMedicine, \"Max_sleep_medicine\")"
        },
        {
            "description": "Total amount of leg medicine from both pain killers is at least MinLegMedicine units",
            "status": "coded",
            "formulation": "\\textup{LegMedicinePainKiller1} \\cdot \\textup{DosesPainKiller1} + \\textup{LegMedicinePainKiller2} \\cdot \\textup{DosesPainKiller2} \\geq \\textup{MinLegMedicine}",
            "related_variables": [
                "DosesPainKiller1",
                "DosesPainKiller2"
            ],
            "related_parameters": [
                "LegMedicinePainKiller1",
                "LegMedicinePainKiller2",
                "MinLegMedicine"
            ],
            "code": "# Add constraint: Total amount of leg medicine from both pain killers is at least MinLegMedicine units\nmodel.addConstr(LegMedicinePainKiller1 * DosesPainKiller1 + LegMedicinePainKiller2 * DosesPainKiller2 >= MinLegMedicine, name=\"min_leg_medicine_requirement\")"
        },
        {
            "description": "The total sleep medicine from all pain killers should not exceed a maximum limit",
            "status": "coded",
            "formulation": "\\textup{SleepMedicinePainKiller1} \\times \\textup{DosesPainKiller1} + \\textup{SleepMedicinePainKiller2} \\times \\textup{DosesPainKiller2} \\leq \\textup{MaxSleepMedicine}",
            "related_variables": [
                "DosesPainKiller1",
                "DosesPainKiller2"
            ],
            "related_parameters": [
                "SleepMedicinePainKiller1",
                "SleepMedicinePainKiller2",
                "MaxSleepMedicine"
            ],
            "code": "# Add constraint for the total sleep medicine from all pain killers not exceeding the maximum limit\nmodel.addConstr(SleepMedicinePainKiller1 * DosesPainKiller1 + SleepMedicinePainKiller2 * DosesPainKiller2 <= MaxSleepMedicine, name=\"max_sleep_medicine\")"
        },
        {
            "description": "The total leg medicine from all pain killers should meet a minimum requirement",
            "status": "coded",
            "formulation": "\\textup{LegMedicinePainKiller1} \\times \\textup{DosesPainKiller1} + \\textup{LegMedicinePainKiller2} \\times \\textup{DosesPainKiller2} \\geq \\textup{MinLegMedicine}",
            "related_variables": [
                "DosesPainKiller1",
                "DosesPainKiller2"
            ],
            "related_parameters": [
                "LegMedicinePainKiller1",
                "LegMedicinePainKiller2",
                "MinLegMedicine"
            ],
            "code": "# Add constraint for minimum requirement of total leg medicine from all pain killers\nmodel.addConstr(LegMedicinePainKiller1 * DosesPainKiller1 + LegMedicinePainKiller2 * DosesPainKiller2 >= MinLegMedicine, name=\"min_leg_medicine_requirement\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of doses of pain killer 1 administered",
            "symbol": "DosesPainKiller1",
            "shape": [],
            "status": "coded",
            "code": "DosesPainKiller1 = model.addVar(vtype=gp.GRB.INTEGER, name=\"DosesPainKiller1\")"
        },
        {
            "definition": "Number of doses of pain killer 2 administered",
            "symbol": "DosesPainKiller2",
            "shape": [],
            "status": "coded",
            "code": "DosesPainKiller2 = model.addVar(vtype=gp.GRB.INTEGER, name=\"DosesPainKiller2\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total amount of medicine delivered to the back",
            "status": "coded",
            "formulation": "\\max \\quad \\textup{BackMedicinePainKiller1} \\times \\textup{DosesPainKiller1} + \\textup{BackMedicinePainKiller2} \\times \\textup{DosesPainKiller2}",
            "related_variables": [
                "DosesPainKiller1",
                "DosesPainKiller2"
            ],
            "related_parameters": [
                "BackMedicinePainKiller1",
                "BackMedicinePainKiller2"
            ],
            "code": "# Objective function\nmodel.setObjective(BackMedicinePainKiller1 * DosesPainKiller1 + BackMedicinePainKiller2 * DosesPainKiller2, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 20.8,
    "log_path": "logs/log_20250413130635_nl4opt_prob_130/",
    "problem_path": "data/nl4opt/prob_130/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_130/data.json\", \"r\") as f:\n    data = json.load(f)\n\nLegMedicinePainKiller1 = data[\"LegMedicinePainKiller1\"] # scalar parameter\nBackMedicinePainKiller1 = data[\"BackMedicinePainKiller1\"] # scalar parameter\nLegMedicinePainKiller2 = data[\"LegMedicinePainKiller2\"] # scalar parameter\nBackMedicinePainKiller2 = data[\"BackMedicinePainKiller2\"] # scalar parameter\nSleepMedicinePainKiller1 = data[\"SleepMedicinePainKiller1\"] # scalar parameter\nSleepMedicinePainKiller2 = data[\"SleepMedicinePainKiller2\"] # scalar parameter\nMaxSleepMedicine = data[\"MaxSleepMedicine\"] # scalar parameter\nMinLegMedicine = data[\"MinLegMedicine\"] # scalar parameter\nDosesPainKiller1 = model.addVar(vtype=gp.GRB.INTEGER, name=\"DosesPainKiller1\")\nDosesPainKiller2 = model.addVar(vtype=gp.GRB.INTEGER, name=\"DosesPainKiller2\")\n\n# Add constraint to ensure non-negativity of the doses of pain killer 1\nmodel.addConstr(DosesPainKiller1 >= 0, name=\"doses_painkiller1_nonnegativity\")\n\n# Since the variable DosesPainKiller2 is already defined as non-negative in its declaration, no additional code is needed for this constraint.\n\n# Add constraint: Total amount of sleep medicine from both pain killers is at most MaxSleepMedicine units\nmodel.addConstr(SleepMedicinePainKiller1 * DosesPainKiller1 + SleepMedicinePainKiller2 * DosesPainKiller2 <= MaxSleepMedicine, \"Max_sleep_medicine\")\n\n# Add constraint: Total amount of leg medicine from both pain killers is at least MinLegMedicine units\nmodel.addConstr(LegMedicinePainKiller1 * DosesPainKiller1 + LegMedicinePainKiller2 * DosesPainKiller2 >= MinLegMedicine, name=\"min_leg_medicine_requirement\")\n\n# Add constraint for the total sleep medicine from all pain killers not exceeding the maximum limit\nmodel.addConstr(SleepMedicinePainKiller1 * DosesPainKiller1 + SleepMedicinePainKiller2 * DosesPainKiller2 <= MaxSleepMedicine, name=\"max_sleep_medicine\")\n\n# Add constraint for minimum requirement of total leg medicine from all pain killers\nmodel.addConstr(LegMedicinePainKiller1 * DosesPainKiller1 + LegMedicinePainKiller2 * DosesPainKiller2 >= MinLegMedicine, name=\"min_leg_medicine_requirement\")\n\n# Objective function\nmodel.setObjective(BackMedicinePainKiller1 * DosesPainKiller1 + BackMedicinePainKiller2 * DosesPainKiller2, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}