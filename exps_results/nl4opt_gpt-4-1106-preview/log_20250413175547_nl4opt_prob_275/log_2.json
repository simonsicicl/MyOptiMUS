{
    "background": "A baking process requires the mixing of chemicals A and B, where chemical A can be hazardous, and the mix must take minimum time to be effective while adhering to safety and minimum quantity requirements.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Time for one unit of chemical A to be effective",
            "symbol": "TimeA",
            "value": 30,
            "shape": [],
            "code": "TimeA = data[\"TimeA\"] # scalar parameter"
        },
        {
            "definition": "Time for one unit of chemical B to be effective",
            "symbol": "TimeB",
            "value": 45,
            "shape": [],
            "code": "TimeB = data[\"TimeB\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowed ratio of chemical A to chemical B",
            "symbol": "MaxRatioAtoB",
            "value": 0.33,
            "shape": [],
            "code": "MaxRatioAtoB = data[\"MaxRatioAtoB\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of chemical A",
            "symbol": "MinUnitsA",
            "value": 300,
            "shape": [],
            "code": "MinUnitsA = data[\"MinUnitsA\"] # scalar parameter"
        },
        {
            "definition": "Minimum total required units of chemicals",
            "symbol": "MinTotalUnits",
            "value": 1500,
            "shape": [],
            "code": "MinTotalUnits = data[\"MinTotalUnits\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of units of chemical A must be non-negative",
            "status": "coded",
            "formulation": "\\textup{ChemicalAUnits} \\geq 0",
            "related_variables": [
                "ChemicalAUnits"
            ],
            "related_parameters": [],
            "code": "model.addConstr(ChemicalAUnits >= 0, name=\"non_negativity_ChemicalAUnits\")"
        },
        {
            "description": "The number of units of chemical B used in the mix must be non-negative",
            "status": "coded",
            "formulation": "\\textup{ChemicalBUnits} \\geq 0",
            "related_variables": [
                "ChemicalBUnits"
            ],
            "related_parameters": [],
            "code": "# Non-negativity constraint for ChemicalBUnits\nmodel.addConstr(ChemicalBUnits >= 0, name=\"ChemicalBUnits_non_negative\")"
        },
        {
            "description": "For every unit of chemical B, there can be at most MaxRatioAtoB units of chemical A",
            "status": "coded",
            "formulation": "\\textup{ChemicalAUnits} \\leq \\textup{MaxRatioAtoB} \\times \\textup{ChemicalBUnits}",
            "related_variables": [
                "ChemicalAUnits",
                "ChemicalBUnits"
            ],
            "related_parameters": [
                "MaxRatioAtoB"
            ],
            "code": "# Add constraint that for every unit of chemical B, there can be at most MaxRatioAtoB units of chemical A\nmodel.addConstr(ChemicalAUnits <= MaxRatioAtoB * ChemicalBUnits, name=\"max_ratio_A_to_B\")"
        },
        {
            "description": "At least MinUnitsA units of chemical A must be present in the mixer",
            "status": "coded",
            "formulation": "\\textup{ChemicalAUnits} \\geq \\textup{MinUnitsA}",
            "related_variables": [
                "ChemicalAUnits"
            ],
            "related_parameters": [
                "MinUnitsA"
            ],
            "code": "# Ensure the mix contains at least the minimum required units of Chemical A\nmodel.addConstr(ChemicalAUnits >= MinUnitsA, name=\"min_units_chemical_A\")"
        },
        {
            "description": "The total number of units of chemicals A and B must be at least the minimum required total units",
            "status": "coded",
            "formulation": "\\textup{ChemicalAUnits} + \\textup{ChemicalBUnits} \\geq \\textup{MinTotalUnits}",
            "related_variables": [
                "ChemicalAUnits",
                "ChemicalBUnits"
            ],
            "related_parameters": [
                "MinTotalUnits"
            ],
            "code": "# Constraint for minimum required units of Chemical A and B\nmodel.addConstr(ChemicalAUnits + ChemicalBUnits >= MinTotalUnits, name=\"min_total_units\")"
        },
        {
            "description": "Ensure the ratio of chemical A to chemical B does not exceed the maximum allowed ratio",
            "status": "coded",
            "formulation": "\\textup{ChemicalAUnits} \\leq \\textup{MaxRatioAtoB} \\times \\textup{ChemicalBUnits}",
            "related_variables": [
                "ChemicalAUnits",
                "ChemicalBUnits"
            ],
            "related_parameters": [
                "MaxRatioAtoB"
            ],
            "code": "# Ensure the ratio of chemical A to chemical B does not exceed the maximum allowed ratio\nmodel.addConstr(ChemicalAUnits <= MaxRatioAtoB * ChemicalBUnits, name=\"Max_ChemicalA_to_ChemicalB_Ratio\")"
        },
        {
            "description": "Ensure at least the minimum required units of chemical A are used",
            "status": "coded",
            "formulation": "\\textup{ChemicalAUnits} \\geq \\textup{MinUnitsA}",
            "related_variables": [
                "ChemicalAUnits"
            ],
            "related_parameters": [
                "MinUnitsA"
            ],
            "code": "# Ensure at least the minimum required units of chemical A are used\nmodel.addConstr(ChemicalAUnits >= MinUnitsA, name=\"min_chemical_A_units\")"
        },
        {
            "description": "Ensure the total units of chemicals meets the minimum requirement",
            "status": "coded",
            "formulation": "\\textup{ChemicalAUnits} + \\textup{ChemicalBUnits} \\geq \\textup{MinTotalUnits}",
            "related_variables": [
                "ChemicalAUnits",
                "ChemicalBUnits"
            ],
            "related_parameters": [
                "MinTotalUnits"
            ],
            "code": "# Ensure the total units of chemicals meets the minimum requirement\nmodel.addConstr(ChemicalAUnits + ChemicalBUnits >= MinTotalUnits, name=\"min_total_units\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of units of chemical A used in the mix",
            "symbol": "ChemicalAUnits",
            "shape": [],
            "status": "coded",
            "code": "ChemicalAUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ChemicalAUnits\")"
        },
        {
            "definition": "The number of units of chemical B used in the mix",
            "symbol": "ChemicalBUnits",
            "shape": [],
            "status": "coded",
            "code": "ChemicalBUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ChemicalBUnits\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total effective time of chemicals A and B",
            "status": "coded",
            "formulation": "\\textup{TotalEffectiveTime} = \\textup{TimeA} \\times \\textup{ChemicalAUnits} + \\textup{TimeB} \\times \\textup{ChemicalBUnits}",
            "related_variables": [
                "ChemicalAUnits",
                "ChemicalBUnits"
            ],
            "related_parameters": [
                "TimeA",
                "TimeB"
            ],
            "code": "# Set objective\nmodel.setObjective(TimeA * ChemicalAUnits + TimeB * ChemicalBUnits, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 61917.2932330827,
    "log_path": "logs/log_20250413175547_nl4opt_prob_275/",
    "problem_path": "data/nl4opt/prob_275/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_275/data.json\", \"r\") as f:\n    data = json.load(f)\n\nTimeA = data[\"TimeA\"] # scalar parameter\nTimeB = data[\"TimeB\"] # scalar parameter\nMaxRatioAtoB = data[\"MaxRatioAtoB\"] # scalar parameter\nMinUnitsA = data[\"MinUnitsA\"] # scalar parameter\nMinTotalUnits = data[\"MinTotalUnits\"] # scalar parameter\nChemicalAUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ChemicalAUnits\")\nChemicalBUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ChemicalBUnits\")\n\nmodel.addConstr(ChemicalAUnits >= 0, name=\"non_negativity_ChemicalAUnits\")\n\n# Non-negativity constraint for ChemicalBUnits\nmodel.addConstr(ChemicalBUnits >= 0, name=\"ChemicalBUnits_non_negative\")\n\n# Add constraint that for every unit of chemical B, there can be at most MaxRatioAtoB units of chemical A\nmodel.addConstr(ChemicalAUnits <= MaxRatioAtoB * ChemicalBUnits, name=\"max_ratio_A_to_B\")\n\n# Ensure the mix contains at least the minimum required units of Chemical A\nmodel.addConstr(ChemicalAUnits >= MinUnitsA, name=\"min_units_chemical_A\")\n\n# Constraint for minimum required units of Chemical A and B\nmodel.addConstr(ChemicalAUnits + ChemicalBUnits >= MinTotalUnits, name=\"min_total_units\")\n\n# Ensure the ratio of chemical A to chemical B does not exceed the maximum allowed ratio\nmodel.addConstr(ChemicalAUnits <= MaxRatioAtoB * ChemicalBUnits, name=\"Max_ChemicalA_to_ChemicalB_Ratio\")\n\n# Ensure at least the minimum required units of chemical A are used\nmodel.addConstr(ChemicalAUnits >= MinUnitsA, name=\"min_chemical_A_units\")\n\n# Ensure the total units of chemicals meets the minimum requirement\nmodel.addConstr(ChemicalAUnits + ChemicalBUnits >= MinTotalUnits, name=\"min_total_units\")\n\n# Set objective\nmodel.setObjective(TimeA * ChemicalAUnits + TimeB * ChemicalBUnits, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}