{
    "background": "The landscaper needs to decide how to allocate square footage of grass cutting between a heavy-duty yard machine and a gas lawn mower, considering pollution and fuel constraints.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total area of grass land",
            "symbol": "A",
            "value": 2500,
            "shape": [],
            "code": "A = data[\"A\"] # scalar parameter"
        },
        {
            "definition": "Time taken by heavy-duty yard machine per square foot",
            "symbol": "TimeHeavyDuty",
            "value": 2,
            "shape": [],
            "code": "TimeHeavyDuty = data[\"TimeHeavyDuty\"] # scalar parameter"
        },
        {
            "definition": "Time taken by gas lawn mower per square foot",
            "symbol": "TimeGasMower",
            "value": 5,
            "shape": [],
            "code": "TimeGasMower = data[\"TimeGasMower\"] # scalar parameter"
        },
        {
            "definition": "Pollution generated by heavy-duty yard machine per square foot",
            "symbol": "PollutionHeavyDuty",
            "value": 12,
            "shape": [],
            "code": "PollutionHeavyDuty = data[\"PollutionHeavyDuty\"] # scalar parameter"
        },
        {
            "definition": "Fuel required by heavy-duty yard machine per square foot",
            "symbol": "FuelHeavyDuty",
            "value": 3,
            "shape": [],
            "code": "FuelHeavyDuty = data[\"FuelHeavyDuty\"] # scalar parameter"
        },
        {
            "definition": "Pollution generated by gas lawn mower per square foot",
            "symbol": "PollutionGasMower",
            "value": 10,
            "shape": [],
            "code": "PollutionGasMower = data[\"PollutionGasMower\"] # scalar parameter"
        },
        {
            "definition": "Fuel required by gas lawn mower per square foot",
            "symbol": "FuelGasMower",
            "value": 2,
            "shape": [],
            "code": "FuelGasMower = data[\"FuelGasMower\"] # scalar parameter"
        },
        {
            "definition": "Total amount of fuel available",
            "symbol": "FuelTotal",
            "value": 450,
            "shape": [],
            "code": "FuelTotal = data[\"FuelTotal\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowable pollution",
            "symbol": "PollutionMax",
            "value": 2000,
            "shape": [],
            "code": "PollutionMax = data[\"PollutionMax\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Square footage cut by heavy-duty yard machine must be non-negative",
            "status": "runtime_error",
            "formulation": "\\textup{HeavyDutyCut} \\geq 0",
            "related_variables": [
                "HeavyDutyCut"
            ],
            "related_parameters": [],
            "code": "```"
        },
        {
            "description": "Square feet cut by gas lawn mower is non-negative",
            "status": "coded",
            "formulation": "\\textup{GasMowerCut} \\geq 0",
            "related_variables": [
                "GasMowerCut"
            ],
            "related_parameters": [],
            "code": "# Constraint: Square feet cut by gas lawn mower is non-negative\nmodel.addConstr(GasMowerCut >= 0, \"nonnegativity_GasMowerCut\")"
        },
        {
            "description": "The total square feet cut by the heavy-duty yard machine and the gas lawn mower must equal the total area of grass land A",
            "status": "coded",
            "formulation": "\\textup{HeavyDutyCut} + \\textup{GasMowerCut} = \\textup{A}",
            "related_variables": [
                "HeavyDutyCut",
                "GasMowerCut"
            ],
            "related_parameters": [
                "A"
            ],
            "code": "# Add constraint for total square feet cut to equal the total area of grass land A\nmodel.addConstr(HeavyDutyCut + GasMowerCut == A, name=\"total_cut_equals_A\")"
        },
        {
            "description": "Total pollution produced by heavy-duty yard machine and gas lawn mower should not exceed the maximum allowable pollution",
            "status": "coded",
            "formulation": "\\textup{PollutionHeavyDuty} \\cdot \\textup{HeavyDutyCut} + \\textup{PollutionGasMower} \\cdot \\textup{GasMowerCut} \\leq \\textup{PollutionMax}",
            "related_variables": [
                "HeavyDutyCut",
                "GasMowerCut"
            ],
            "related_parameters": [
                "PollutionHeavyDuty",
                "PollutionGasMower",
                "PollutionMax"
            ],
            "code": "# Constraint: Total pollution from heavy-duty yard machine and gas lawn mower not exceeding the maximum allowable pollution\nmodel.addConstr(PollutionHeavyDuty * HeavyDutyCut + PollutionGasMower * GasMowerCut <= PollutionMax, name=\"Max_Pollution\")"
        },
        {
            "description": "Total fuel consumption by both heavy-duty yard machine and gas lawn mower must not exceed the available fuel",
            "status": "coded",
            "formulation": "\\textup{FuelHeavyDuty} \\cdot \\textup{HeavyDutyCut} + \\textup{FuelGasMower} \\cdot \\textup{GasMowerCut} \\leq \\textup{FuelTotal}",
            "related_variables": [
                "HeavyDutyCut",
                "GasMowerCut"
            ],
            "related_parameters": [
                "FuelHeavyDuty",
                "FuelGasMower",
                "FuelTotal"
            ],
            "code": "# Add fuel consumption constraint\nmodel.addConstr(FuelHeavyDuty * HeavyDutyCut + FuelGasMower * GasMowerCut <= FuelTotal, name=\"fuel_consumption\")"
        },
        {
            "description": "Square footage cut by gas lawn mower must be non-negative",
            "status": "coded",
            "formulation": "\\textup{GasMowerCut} \\geq 0",
            "related_variables": [
                "GasMowerCut"
            ],
            "related_parameters": [],
            "code": "# Constraint: Square footage cut by gas lawn mower must be non-negative\nmodel.addConstr(GasMowerCut >= 0, name=\"nonnegativity_GasMowerCut\")"
        },
        {
            "description": "Total square footage cut by both machines cannot exceed the total area of grass land",
            "status": "coded",
            "formulation": "\\textup{HeavyDutyCut} + \\textup{GasMowerCut} \\leq A",
            "related_variables": [
                "HeavyDutyCut",
                "GasMowerCut"
            ],
            "related_parameters": [
                "A"
            ],
            "code": "# Add constraint for total square footage cut by both machines not exceeding the total area of grass land\nmodel.addConstr(HeavyDutyCut + GasMowerCut <= A, name=\"area_cut_limit\")"
        },
        {
            "description": "The sum of grass cut by both heavy-duty and gas mower must be equal to the total area.",
            "status": "coded",
            "formulation": "\\textup{HeavyDutyCut} + \\textup{GasMowerCut} \\leq \\textup{A}",
            "related_variables": [
                "HeavyDutyCut",
                "GasMowerCut"
            ],
            "related_parameters": [
                "A"
            ],
            "code": "# Constraint: Sum of grass cut by heavy-duty and gas mower must be equal to the total area\nmodel.addConstr(HeavyDutyCut + GasMowerCut == A, name=\"total_area_constraint\")"
        },
        {
            "description": "The total pollution generated by cutting machines must not exceed the maximum allowable pollution.",
            "status": "coded",
            "formulation": "\\textup{PollutionHeavyDuty} \\cdot \\textup{HeavyDutyCut} + \\textup{PollutionGasMower} \\cdot \\textup{GasMowerCut} \\leq \\textup{PollutionMax}",
            "related_variables": [
                "HeavyDutyCut",
                "GasMowerCut"
            ],
            "related_parameters": [
                "PollutionHeavyDuty",
                "PollutionGasMower",
                "PollutionMax"
            ],
            "code": "# Total pollution generated by cutting machines must not exceed the maximum allowable pollution\nmodel.addConstr(PollutionHeavyDuty * HeavyDutyCut + PollutionGasMower * GasMowerCut <= PollutionMax, name=\"pollution_limit\")"
        },
        {
            "description": "The total fuel usage by cutting machines must not exceed the total amount of fuel available.",
            "status": "coded",
            "formulation": "\\textup{FuelHeavyDuty} \\cdot \\textup{HeavyDutyCut} + \\textup{FuelGasMower} \\cdot \\textup{GasMowerCut} \\leq \\textup{FuelTotal}",
            "related_variables": [
                "HeavyDutyCut",
                "GasMowerCut"
            ],
            "related_parameters": [
                "FuelHeavyDuty",
                "FuelGasMower",
                "FuelTotal"
            ],
            "code": "# Fuel usage by cutting machines must not exceed the total amount of fuel available\nmodel.addConstr(FuelHeavyDuty * HeavyDutyCut + FuelGasMower * GasMowerCut <= FuelTotal, \"Fuel_Usage_Constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "Square feet cut by the heavy-duty yard machine",
            "symbol": "HeavyDutyCut",
            "shape": [],
            "status": "coded",
            "code": "HeavyDutyCut = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HeavyDutyCut\")"
        },
        {
            "definition": "Square feet cut by the gas lawn mower",
            "symbol": "GasMowerCut",
            "shape": [],
            "status": "coded",
            "code": "GasMowerCut = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"GasMowerCut\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total time required to cut A square feet of grass",
            "status": "coded",
            "formulation": "Minimize \\quad \\textup{TimeHeavyDuty} \\cdot \\textup{HeavyDutyCut} + \\textup{TimeGasMower} \\cdot \\textup{GasMowerCut}",
            "related_variables": [
                "HeavyDutyCut",
                "GasMowerCut"
            ],
            "related_parameters": [
                "TimeHeavyDuty",
                "TimeGasMower"
            ],
            "code": "# Set objective\nmodel.setObjective(TimeHeavyDuty * HeavyDutyCut + TimeGasMower * GasMowerCut, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "runtime_error",
    "solver_output_status": "runtime_error",
    "error_message": "Traceback (most recent call last):\n  File \"c:\\Users\\Simon\\Desktop\\Courses\\ECE 570\\ECE570_Project\\MyOptiMUS\\evaluator.py\", line 45, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 1\n    ```\n    ^\nSyntaxError: invalid syntax\n",
    "obj_val": null,
    "log_path": "logs/log_20250413180416_nl4opt_prob_284/",
    "problem_path": "data/nl4opt/prob_284/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_284/data.json\", \"r\") as f:\n    data = json.load(f)\n"
}