{
    "background": "A summer camp conducts science experiments creating slime using two different beakers, each with its own recipe of flour and special liquid and generating waste. The camp has limited supplies of flour, liquid, and waste capacity.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of flour used by beaker 1",
            "symbol": "FlourBeaker1",
            "value": 4,
            "shape": [],
            "code": "FlourBeaker1 = data[\"FlourBeaker1\"] # scalar parameter"
        },
        {
            "definition": "Units of special liquid used by beaker 1",
            "symbol": "LiquidBeaker1",
            "value": 6,
            "shape": [],
            "code": "LiquidBeaker1 = data[\"LiquidBeaker1\"] # scalar parameter"
        },
        {
            "definition": "Units of slime produced by beaker 1",
            "symbol": "SlimeBeaker1",
            "value": 5,
            "shape": [],
            "code": "SlimeBeaker1 = data[\"SlimeBeaker1\"] # scalar parameter"
        },
        {
            "definition": "Units of waste produced by beaker 1",
            "symbol": "WasteBeaker1",
            "value": 4,
            "shape": [],
            "code": "WasteBeaker1 = data[\"WasteBeaker1\"] # scalar parameter"
        },
        {
            "definition": "Units of flour used by beaker 2",
            "symbol": "FlourBeaker2",
            "value": 6,
            "shape": [],
            "code": "FlourBeaker2 = data[\"FlourBeaker2\"] # scalar parameter"
        },
        {
            "definition": "Units of special liquid used by beaker 2",
            "symbol": "LiquidBeaker2",
            "value": 3,
            "shape": [],
            "code": "LiquidBeaker2 = data[\"LiquidBeaker2\"] # scalar parameter"
        },
        {
            "definition": "Units of slime produced by beaker 2",
            "symbol": "SlimeBeaker2",
            "value": 3,
            "shape": [],
            "code": "SlimeBeaker2 = data[\"SlimeBeaker2\"] # scalar parameter"
        },
        {
            "definition": "Units of waste produced by beaker 2",
            "symbol": "WasteBeaker2",
            "value": 2,
            "shape": [],
            "code": "WasteBeaker2 = data[\"WasteBeaker2\"] # scalar parameter"
        },
        {
            "definition": "Total available units of flour",
            "symbol": "TotalFlour",
            "value": 150,
            "shape": [],
            "code": "TotalFlour = data[\"TotalFlour\"] # scalar parameter"
        },
        {
            "definition": "Total available units of special liquid",
            "symbol": "TotalLiquid",
            "value": 100,
            "shape": [],
            "code": "TotalLiquid = data[\"TotalLiquid\"] # scalar parameter"
        },
        {
            "definition": "Maximum units of waste allowed",
            "symbol": "MaxWaste",
            "value": 30,
            "shape": [],
            "code": "MaxWaste = data[\"MaxWaste\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of Beaker 1 used must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfBeakersUsed}_1 \\geq 0",
            "related_variables": [
                "NumberOfBeakersUsed1"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of Beaker 1 used is non-negative\nmodel.addConstr(NumberOfBeakersUsed1 >= 0, name=\"non_negativity_beaker1\")"
        },
        {
            "description": "The number of Beaker 2 used is non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfBeakersUsed2} \\geq 0",
            "related_variables": [
                "NumberOfBeakersUsed2"
            ],
            "related_parameters": [],
            "code": "# Since NumberOfBeakersUsed2 is already defined as an integer variable, by default it is non-negative in Gurobi.\n# No need to add an explicit constraint."
        },
        {
            "description": "Total flour used by Beaker 1 and Beaker 2 should not exceed TotalFlour",
            "status": "coded",
            "formulation": "\\textup{NumberOfBeakersUsed1} \\cdot \\textup{FlourBeaker1} + \\textup{NumberOfBeakersUsed2} \\cdot \\textup{FlourBeaker2} \\leq \\textup{TotalFlour}",
            "related_variables": [
                "NumberOfBeakersUsed1",
                "NumberOfBeakersUsed2"
            ],
            "related_parameters": [
                "FlourBeaker1",
                "FlourBeaker2",
                "TotalFlour"
            ],
            "code": "# Total flour used by Beaker 1 and Beaker 2 should not exceed TotalFlour\nmodel.addConstr(NumberOfBeakersUsed1 * FlourBeaker1 + NumberOfBeakersUsed2 * FlourBeaker2 <= TotalFlour, \"total_flour_constraint\")"
        },
        {
            "description": "Total liquid used by Beaker 1 and Beaker 2 is less than or equal to TotalLiquid",
            "status": "coded",
            "formulation": "\\textup{NumberOfBeakersUsed1} \\cdot \\textup{LiquidBeaker1} + \\textup{NumberOfBeakersUsed2} \\cdot \\textup{LiquidBeaker2} \\leq \\textup{TotalLiquid}",
            "related_variables": [
                "NumberOfBeakersUsed1",
                "NumberOfBeakersUsed2"
            ],
            "related_parameters": [
                "LiquidBeaker1",
                "LiquidBeaker2",
                "TotalLiquid"
            ],
            "code": "# Constraint: Total liquid used by Beaker 1 and Beaker 2 is less than or equal to TotalLiquid\nmodel.addConstr(NumberOfBeakersUsed1 * LiquidBeaker1 + NumberOfBeakersUsed2 * LiquidBeaker2 <= TotalLiquid, name=\"TotalLiquidConstraint\")"
        },
        {
            "description": "Total waste produced by Beaker 1 and Beaker 2 should not exceed MaxWaste",
            "status": "coded",
            "formulation": "\\textup{NumberOfBeakersUsed1} \\cdot \\textup{WasteBeaker1} + \\textup{NumberOfBeakersUsed2} \\cdot \\textup{WasteBeaker2} \\leq \\textup{MaxWaste}",
            "related_variables": [
                "NumberOfBeakersUsed1",
                "NumberOfBeakersUsed2"
            ],
            "related_parameters": [
                "WasteBeaker1",
                "WasteBeaker2",
                "MaxWaste"
            ],
            "code": "# Total waste produced by Beaker 1 and Beaker 2 should not exceed MaxWaste\nmodel.addConstr(NumberOfBeakersUsed1 * WasteBeaker1 + NumberOfBeakersUsed2 * WasteBeaker2 <= MaxWaste, name=\"max_waste_constraint\")"
        },
        {
            "description": "The camp cannot use more flour than is available",
            "status": "coded",
            "formulation": "\\textup{NumberOfBeakersUsed1} \\times \\textup{FlourBeaker1} + \\textup{NumberOfBeakersUsed2} \\times \\textup{FlourBeaker2} \\leq \\textup{TotalFlour}",
            "related_variables": [
                "NumberOfBeakersUsed1",
                "NumberOfBeakersUsed2"
            ],
            "related_parameters": [
                "FlourBeaker1",
                "FlourBeaker2",
                "TotalFlour"
            ],
            "code": "# The camp cannot use more flour than is available\nmodel.addConstr(NumberOfBeakersUsed1 * FlourBeaker1 + NumberOfBeakersUsed2 * FlourBeaker2 <= TotalFlour, \"flour_usage_constraint\")"
        },
        {
            "description": "The camp cannot use more liquid than is available",
            "status": "coded",
            "formulation": "\\textup{NumberOfBeakersUsed1} \\times \\textup{LiquidBeaker1} + \\textup{NumberOfBeakersUsed2} \\times \\textup{LiquidBeaker2} \\leq \\textup{TotalLiquid}",
            "related_variables": [
                "NumberOfBeakersUsed1",
                "NumberOfBeakersUsed2"
            ],
            "related_parameters": [
                "LiquidBeaker1",
                "LiquidBeaker2",
                "TotalLiquid"
            ],
            "code": "# Constraint: The camp cannot use more liquid than is available\nmodel.addConstr(NumberOfBeakersUsed1 * LiquidBeaker1 + NumberOfBeakersUsed2 * LiquidBeaker2 <= TotalLiquid, \"liquid_usage_limit\")"
        },
        {
            "description": "The camp cannot generate more waste than the limit",
            "status": "coded",
            "formulation": "\\textup{NumberOfBeakersUsed1} \\times \\textup{WasteBeaker1} + \\textup{NumberOfBeakersUsed2} \\times \\textup{WasteBeaker2} \\leq \\textup{MaxWaste}",
            "related_variables": [
                "NumberOfBeakersUsed1",
                "NumberOfBeakersUsed2"
            ],
            "related_parameters": [
                "WasteBeaker1",
                "WasteBeaker2",
                "MaxWaste"
            ],
            "code": "# Add waste generation limit constraint\nmodel.addConstr(\n    NumberOfBeakersUsed1 * WasteBeaker1 + NumberOfBeakersUsed2 * WasteBeaker2 <= MaxWaste,\n    name=\"waste_generation_limit\"\n)"
        }
    ],
    "variables": [
        {
            "definition": "Number of Beaker 1 used in the science experiment",
            "symbol": "NumberOfBeakersUsed1",
            "shape": [],
            "status": "coded",
            "code": "NumberOfBeakersUsed1 = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBeakersUsed1\")"
        },
        {
            "definition": "Number of Beaker 2 used in the science experiment",
            "symbol": "NumberOfBeakersUsed2",
            "shape": [],
            "status": "coded",
            "code": "NumberOfBeakersUsed2 = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBeakersUsed2\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total units of slime produced",
            "status": "coded",
            "formulation": "\\max \\textup{Slime} = \\textup{SlimeBeaker1} \\times \\textup{NumberOfBeakersUsed1} + \\textup{SlimeBeaker2} \\times \\textup{NumberOfBeakersUsed2}",
            "related_variables": [
                "NumberOfBeakersUsed1",
                "NumberOfBeakersUsed2"
            ],
            "related_parameters": [
                "SlimeBeaker1",
                "SlimeBeaker2"
            ],
            "code": "# Define the objective function\nmodel.setObjective(SlimeBeaker1 * NumberOfBeakersUsed1 + SlimeBeaker2 * NumberOfBeakersUsed2, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413105437_nl4opt_prob_102/",
    "problem_path": "data/nl4opt/prob_102/"
}