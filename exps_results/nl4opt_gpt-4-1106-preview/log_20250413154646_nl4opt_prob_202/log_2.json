{
    "background": "An office company manufactures desks and drawers, each requiring different amounts of assembly and sanding time. The company has limited time for these processes.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Minutes of assembly required for each desk",
            "symbol": "AssemblyDesk",
            "value": 40,
            "shape": [],
            "code": "AssemblyDesk = data[\"AssemblyDesk\"] # scalar parameter"
        },
        {
            "definition": "Minutes of sanding required for each desk",
            "symbol": "SandingDesk",
            "value": 20,
            "shape": [],
            "code": "SandingDesk = data[\"SandingDesk\"] # scalar parameter"
        },
        {
            "definition": "Minutes of assembly required for each drawer",
            "symbol": "AssemblyDrawer",
            "value": 30,
            "shape": [],
            "code": "AssemblyDrawer = data[\"AssemblyDrawer\"] # scalar parameter"
        },
        {
            "definition": "Minutes of sanding required for each drawer",
            "symbol": "SandingDrawer",
            "value": 10,
            "shape": [],
            "code": "SandingDrawer = data[\"SandingDrawer\"] # scalar parameter"
        },
        {
            "definition": "Total minutes available for assembly",
            "symbol": "TotalAssembly",
            "value": 4000,
            "shape": [],
            "code": "TotalAssembly = data[\"TotalAssembly\"] # scalar parameter"
        },
        {
            "definition": "Total minutes available for sanding",
            "symbol": "TotalSanding",
            "value": 3500,
            "shape": [],
            "code": "TotalSanding = data[\"TotalSanding\"] # scalar parameter"
        },
        {
            "definition": "Profit per desk",
            "symbol": "ProfitDesk",
            "value": 100,
            "shape": [],
            "code": "ProfitDesk = data[\"ProfitDesk\"] # scalar parameter"
        },
        {
            "definition": "Profit per drawer",
            "symbol": "ProfitDrawer",
            "value": 90,
            "shape": [],
            "code": "ProfitDrawer = data[\"ProfitDrawer\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of desks produced should be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfDesks} \\geq 0",
            "related_variables": [
                "NumberOfDesks"
            ],
            "related_parameters": [],
            "code": "# Ensure that the number of desks produced is non-negative\nmodel.addConstr(NumberOfDesks >= 0, name=\"non_negative_desks\")"
        },
        {
            "description": "The number of drawers is non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfDrawers} \\geq 0",
            "related_variables": [
                "NumberOfDrawers"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of drawers is non-negative\nmodel.addConstr(NumberOfDrawers >= 0, name=\"non_negative_drawers\")"
        },
        {
            "description": "Total assembly time for desks and drawers cannot exceed TotalAssembly minutes",
            "status": "coded",
            "formulation": "\\textup{AssemblyDesk} \\cdot \\textup{NumberOfDesks} + \\textup{AssemblyDrawer} \\cdot \\textup{NumberOfDrawers} \\leq \\textup{TotalAssembly}",
            "related_variables": [
                "NumberOfDesks",
                "NumberOfDrawers"
            ],
            "related_parameters": [
                "AssemblyDesk",
                "AssemblyDrawer",
                "TotalAssembly"
            ],
            "code": "# Add constraint for the total assembly time for desks and drawers\nmodel.addConstr(AssemblyDesk * NumberOfDesks + AssemblyDrawer * NumberOfDrawers <= TotalAssembly, name=\"Total_Assembly_Time\")"
        },
        {
            "description": "Total sanding time for desks and drawers cannot exceed TotalSanding minutes",
            "status": "coded",
            "formulation": "\\textup{SandingDesk} \\times \\textup{NumberOfDesks} + \\textup{SandingDrawer} \\times \\textup{NumberOfDrawers} \\leq \\textup{TotalSanding}",
            "related_variables": [
                "NumberOfDesks",
                "NumberOfDrawers"
            ],
            "related_parameters": [
                "SandingDesk",
                "SandingDrawer",
                "TotalSanding"
            ],
            "code": "# Add constraint for the total sanding time for desks and drawers\nmodel.addConstr(SandingDesk * NumberOfDesks + SandingDrawer * NumberOfDrawers <= TotalSanding, name=\"sanding_time_limit\")"
        },
        {
            "description": "The total assembly time for desks and drawers should not exceed the available assembly time",
            "status": "coded",
            "formulation": "\\textup{AssemblyDesk} \\cdot \\textup{NumberOfDesks} + \\textup{AssemblyDrawer} \\cdot \\textup{NumberOfDrawers} \\leq \\textup{TotalAssembly}",
            "related_variables": [
                "NumberOfDesks",
                "NumberOfDrawers"
            ],
            "related_parameters": [
                "AssemblyDesk",
                "AssemblyDrawer",
                "TotalAssembly"
            ],
            "code": "# Assembly time constraint for desks and drawers\nmodel.addConstr(NumberOfDesks * AssemblyDesk + NumberOfDrawers * AssemblyDrawer <= TotalAssembly, \"assembly_time\")"
        },
        {
            "description": "The total sanding time for desks and drawers should not exceed the available sanding time",
            "status": "coded",
            "formulation": "\\textup{SandingDesk} \\cdot \\textup{NumberOfDesks} + \\textup{SandingDrawer} \\cdot \\textup{NumberOfDrawers} \\leq \\textup{TotalSanding}",
            "related_variables": [
                "NumberOfDesks",
                "NumberOfDrawers"
            ],
            "related_parameters": [
                "SandingDesk",
                "SandingDrawer",
                "TotalSanding"
            ],
            "code": "SandingDesk = data[\"SandingDesk\"] # scalar parameter\nSandingDrawer = data[\"SandingDrawer\"] # scalar parameter\nTotalSanding = data[\"TotalSanding\"] # scalar parameter\n\nmodel.addConstr(SandingDesk * NumberOfDesks + SandingDrawer * NumberOfDrawers <= TotalSanding, name=\"sanding_time_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of desks manufactured by the company",
            "symbol": "NumberOfDesks",
            "shape": [],
            "status": "coded",
            "code": "NumberOfDesks = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfDesks\")"
        },
        {
            "definition": "The number of drawers manufactured by the company",
            "symbol": "NumberOfDrawers",
            "shape": [],
            "status": "coded",
            "code": "NumberOfDrawers = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfDrawers\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the company's profit from manufacturing desks and drawers",
            "status": "coded",
            "formulation": "\\textup{TotalProfit} = \\textup{ProfitDesk} \\cdot \\textup{NumberOfDesks} + \\textup{ProfitDrawer} \\cdot \\textup{NumberOfDrawers}",
            "related_variables": [
                "NumberOfDesks",
                "NumberOfDrawers"
            ],
            "related_parameters": [
                "ProfitDesk",
                "ProfitDrawer"
            ],
            "code": "# Define the objective function\nmodel.setObjective(ProfitDesk * NumberOfDesks + ProfitDrawer * NumberOfDrawers, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 11980.0,
    "log_path": "logs/log_20250413154646_nl4opt_prob_202/",
    "problem_path": "data/nl4opt/prob_202/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_202/data.json\", \"r\") as f:\n    data = json.load(f)\n\nAssemblyDesk = data[\"AssemblyDesk\"] # scalar parameter\nSandingDesk = data[\"SandingDesk\"] # scalar parameter\nAssemblyDrawer = data[\"AssemblyDrawer\"] # scalar parameter\nSandingDrawer = data[\"SandingDrawer\"] # scalar parameter\nTotalAssembly = data[\"TotalAssembly\"] # scalar parameter\nTotalSanding = data[\"TotalSanding\"] # scalar parameter\nProfitDesk = data[\"ProfitDesk\"] # scalar parameter\nProfitDrawer = data[\"ProfitDrawer\"] # scalar parameter\nNumberOfDesks = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfDesks\")\nNumberOfDrawers = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfDrawers\")\n\n# Ensure that the number of desks produced is non-negative\nmodel.addConstr(NumberOfDesks >= 0, name=\"non_negative_desks\")\n\n# Add constraint to ensure the number of drawers is non-negative\nmodel.addConstr(NumberOfDrawers >= 0, name=\"non_negative_drawers\")\n\n# Add constraint for the total assembly time for desks and drawers\nmodel.addConstr(AssemblyDesk * NumberOfDesks + AssemblyDrawer * NumberOfDrawers <= TotalAssembly, name=\"Total_Assembly_Time\")\n\n# Add constraint for the total sanding time for desks and drawers\nmodel.addConstr(SandingDesk * NumberOfDesks + SandingDrawer * NumberOfDrawers <= TotalSanding, name=\"sanding_time_limit\")\n\n# Assembly time constraint for desks and drawers\nmodel.addConstr(NumberOfDesks * AssemblyDesk + NumberOfDrawers * AssemblyDrawer <= TotalAssembly, \"assembly_time\")\n\nSandingDesk = data[\"SandingDesk\"] # scalar parameter\nSandingDrawer = data[\"SandingDrawer\"] # scalar parameter\nTotalSanding = data[\"TotalSanding\"] # scalar parameter\n\nmodel.addConstr(SandingDesk * NumberOfDesks + SandingDrawer * NumberOfDrawers <= TotalSanding, name=\"sanding_time_constraint\")\n\n# Define the objective function\nmodel.setObjective(ProfitDesk * NumberOfDesks + ProfitDrawer * NumberOfDrawers, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}