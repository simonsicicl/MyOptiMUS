{
    "background": "A flooring company produces laminate planks and carpets, facing expected minimum demand and a cap on weekly production due to raw material shortages, while seeking to maximize profit.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Minimum expected demand for laminate planks per week",
            "symbol": "Dlaminate",
            "value": 15000,
            "shape": [],
            "code": "Dlaminate = data[\"Dlaminate\"] # scalar parameter"
        },
        {
            "definition": "Minimum expected demand for carpets per week",
            "symbol": "Dcarpet",
            "value": 5000,
            "shape": [],
            "code": "Dcarpet = data[\"Dcarpet\"] # scalar parameter"
        },
        {
            "definition": "Minimum total amount of products to be shipped per week",
            "symbol": "Dtotal",
            "value": 50000,
            "shape": [],
            "code": "Dtotal = data[\"Dtotal\"] # scalar parameter"
        },
        {
            "definition": "Maximum production capacity for laminate planks per week",
            "symbol": "Claminate",
            "value": 40000,
            "shape": [],
            "code": "Claminate = data[\"Claminate\"] # scalar parameter"
        },
        {
            "definition": "Maximum production capacity for carpets per week",
            "symbol": "Ccarpet",
            "value": 20000,
            "shape": [],
            "code": "Ccarpet = data[\"Ccarpet\"] # scalar parameter"
        },
        {
            "definition": "Profit per square foot for laminate planks",
            "symbol": "Plaminate",
            "value": 2.1,
            "shape": [],
            "code": "Plaminate = data[\"Plaminate\"] # scalar parameter"
        },
        {
            "definition": "Profit per square foot for carpets",
            "symbol": "Pcarpet",
            "value": 3.3,
            "shape": [],
            "code": "Pcarpet = data[\"Pcarpet\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Produce at least Dlaminate square feet of laminate planks per week",
            "status": "coded",
            "formulation": "\\textup{LaminateProduced} \\geq \\textup{Dlaminate}",
            "related_variables": [
                "LaminateProduced"
            ],
            "related_parameters": [
                "Dlaminate"
            ],
            "code": "# Produce at least Dlaminate square feet of laminate planks per week constraint\nmodel.addConstr(LaminateProduced >= Dlaminate, name=\"min_laminate_production\")"
        },
        {
            "description": "Produce at least the minimum expected demand for carpets per week",
            "status": "coded",
            "formulation": "\\textup{CarpetProduced} \\geq \\textup{Dcarpet}",
            "related_variables": [
                "CarpetProduced"
            ],
            "related_parameters": [
                "Dcarpet"
            ],
            "code": "# Ensure production meets minimum demand for carpets\nmodel.addConstr(CarpetProduced >= Dcarpet, name=\"min_demand_carpets\")"
        },
        {
            "description": "Total production of laminate planks and carpets must meet minimum total demand per week.",
            "status": "coded",
            "formulation": "\\textup{LaminateProduced} + \\textup{CarpetProduced} \\geq \\textup{Dtotal}",
            "related_variables": [
                "LaminateProduced",
                "CarpetProduced"
            ],
            "related_parameters": [
                "Dtotal"
            ],
            "code": "# Add the constraint for minimum total production of laminate planks and carpets per week.\nmodel.addConstr(LaminateProduced + CarpetProduced >= Dtotal, name=\"min_total_demand\")"
        },
        {
            "description": "The company should produce no more than Claminate square feet of laminate planks per week",
            "status": "coded",
            "formulation": "\\textup{LaminateProduced} \\leq \\textup{Claminate}",
            "related_variables": [
                "LaminateProduced"
            ],
            "related_parameters": [
                "Claminate"
            ],
            "code": "# Production capacity constraint for laminate planks\nmodel.addConstr(LaminateProduced <= Claminate, name=\"production_capacity\")"
        },
        {
            "description": "Production limit constraint for carpets",
            "status": "coded",
            "formulation": "\\textup{CarpetProduced} \\leq \\textup{Ccarpet}",
            "related_variables": [
                "CarpetProduced"
            ],
            "related_parameters": [
                "Ccarpet"
            ],
            "code": "# Add production limit constraint for carpets\nmodel.addConstr(CarpetProduced <= Ccarpet, name=\"prod_limit_carpets\")"
        },
        {
            "description": "Number of square feet of laminate planks produced per week must be non-negative",
            "status": "coded",
            "formulation": "\\textup{LaminateProduced} \\geq 0",
            "related_variables": [
                "LaminateProduced"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure laminate produced per week is non-negative\nmodel.addConstr(LaminateProduced >= 0, name=\"non_negative_laminate_produced\")"
        },
        {
            "description": "The number of square feet of carpets produced must be non-negative",
            "status": "coded",
            "formulation": "\\textup{CarpetProduced} \\geq 0",
            "related_variables": [
                "CarpetProduced"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure carpet produced is non-negative\nmodel.addConstr(CarpetProduced >= 0, name=\"non_negative_carpet_produced\")"
        },
        {
            "description": "Minimum expected demand for laminate planks must be met",
            "status": "coded",
            "formulation": "\\textup{LaminateProduced} \\geq \\textup{Dlaminate}",
            "related_variables": [
                "LaminateProduced"
            ],
            "related_parameters": [
                "Dlaminate"
            ],
            "code": "# Minimum expected demand for laminate planks constraint\nmodel.addConstr(LaminateProduced >= Dlaminate, name=\"demand_laminate\")"
        },
        {
            "description": "Minimum expected demand for carpets must be met",
            "status": "coded",
            "formulation": "\\textup{CarpetProduced} \\geq \\textup{Dcarpet}",
            "related_variables": [
                "CarpetProduced"
            ],
            "related_parameters": [
                "Dcarpet"
            ],
            "code": "# Ensure the minimum expected demand for carpets is met\nmodel.addConstr(CarpetProduced >= Dcarpet, name=\"min_demand_carpets\")"
        },
        {
            "description": "Cannot exceed the maximum production capacity for laminate planks",
            "status": "coded",
            "formulation": "\\textup{LaminateProduced} \\leq \\textup{Claminate}",
            "related_variables": [
                "LaminateProduced"
            ],
            "related_parameters": [
                "Claminate"
            ],
            "code": "# Cannot exceed the maximum production capacity for laminate planks\nmodel.addConstr(LaminateProduced <= Claminate, name=\"max_production_capacity\")"
        },
        {
            "description": "Cannot exceed the maximum production capacity for carpets",
            "status": "coded",
            "formulation": "\\textup{CarpetProduced} \\leq \\textup{Ccarpet}",
            "related_variables": [
                "CarpetProduced"
            ],
            "related_parameters": [
                "Ccarpet"
            ],
            "code": "# Add maximum production capacity constraint for carpets\nmodel.addConstr(CarpetProduced <= Ccarpet, name=\"max_production_capacity\")"
        },
        {
            "description": "Meet the minimum total amount of products to be shipped per week",
            "status": "coded",
            "formulation": "\\textup{LaminateProduced} + \\textup{CarpetProduced} \\geq \\textup{Dtotal}",
            "related_variables": [
                "LaminateProduced",
                "CarpetProduced"
            ],
            "related_parameters": [
                "Dtotal"
            ],
            "code": "# Add constraint to meet the minimum total amount of products to be shipped per week\nmodel.addConstr(LaminateProduced + CarpetProduced >= Dtotal, \"Min_Total_Production\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of square feet of laminate planks produced per week",
            "symbol": "LaminateProduced",
            "shape": [],
            "status": "coded",
            "code": "LaminateProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"LaminateProduced\")"
        },
        {
            "definition": "Number of square feet of carpets produced per week",
            "symbol": "CarpetProduced",
            "shape": [],
            "status": "coded",
            "code": "CarpetProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"CarpetProduced\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the company's weekly profit from producing laminate planks and carpets",
            "status": "coded",
            "formulation": "\\textup{Profit} = \\textup{Plaminate} \\cdot \\textup{LaminateProduced} + \\textup{Pcarpet} \\cdot \\textup{CarpetProduced}",
            "related_variables": [
                "LaminateProduced",
                "CarpetProduced"
            ],
            "related_parameters": [
                "Plaminate",
                "Pcarpet"
            ],
            "code": "# Define the objective function\nmodel.setObjective(Plaminate * LaminateProduced + Pcarpet * CarpetProduced, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 150000.0,
    "log_path": "logs/log_20250413160034_nl4opt_prob_211/",
    "problem_path": "data/nl4opt/prob_211/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_211/data.json\", \"r\") as f:\n    data = json.load(f)\n\nDlaminate = data[\"Dlaminate\"] # scalar parameter\nDcarpet = data[\"Dcarpet\"] # scalar parameter\nDtotal = data[\"Dtotal\"] # scalar parameter\nClaminate = data[\"Claminate\"] # scalar parameter\nCcarpet = data[\"Ccarpet\"] # scalar parameter\nPlaminate = data[\"Plaminate\"] # scalar parameter\nPcarpet = data[\"Pcarpet\"] # scalar parameter\nLaminateProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"LaminateProduced\")\nCarpetProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"CarpetProduced\")\n\n# Produce at least Dlaminate square feet of laminate planks per week constraint\nmodel.addConstr(LaminateProduced >= Dlaminate, name=\"min_laminate_production\")\n\n# Ensure production meets minimum demand for carpets\nmodel.addConstr(CarpetProduced >= Dcarpet, name=\"min_demand_carpets\")\n\n# Add the constraint for minimum total production of laminate planks and carpets per week.\nmodel.addConstr(LaminateProduced + CarpetProduced >= Dtotal, name=\"min_total_demand\")\n\n# Production capacity constraint for laminate planks\nmodel.addConstr(LaminateProduced <= Claminate, name=\"production_capacity\")\n\n# Add production limit constraint for carpets\nmodel.addConstr(CarpetProduced <= Ccarpet, name=\"prod_limit_carpets\")\n\n# Add constraint to ensure laminate produced per week is non-negative\nmodel.addConstr(LaminateProduced >= 0, name=\"non_negative_laminate_produced\")\n\n# Add constraint to ensure carpet produced is non-negative\nmodel.addConstr(CarpetProduced >= 0, name=\"non_negative_carpet_produced\")\n\n# Minimum expected demand for laminate planks constraint\nmodel.addConstr(LaminateProduced >= Dlaminate, name=\"demand_laminate\")\n\n# Ensure the minimum expected demand for carpets is met\nmodel.addConstr(CarpetProduced >= Dcarpet, name=\"min_demand_carpets\")\n\n# Cannot exceed the maximum production capacity for laminate planks\nmodel.addConstr(LaminateProduced <= Claminate, name=\"max_production_capacity\")\n\n# Add maximum production capacity constraint for carpets\nmodel.addConstr(CarpetProduced <= Ccarpet, name=\"max_production_capacity\")\n\n# Add constraint to meet the minimum total amount of products to be shipped per week\nmodel.addConstr(LaminateProduced + CarpetProduced >= Dtotal, \"Min_Total_Production\")\n\n# Define the objective function\nmodel.setObjective(Plaminate * LaminateProduced + Pcarpet * CarpetProduced, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}