{
    "background": "Lucy is looking to mix dog food from regular and premium brands to meet certain nutritional requirements while minimizing costs.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Minimum units of calcium required",
            "symbol": "CalciumMin",
            "value": 15,
            "shape": [],
            "code": "CalciumMin = data[\"CalciumMin\"] # scalar parameter"
        },
        {
            "definition": "Minimum units of vitamin mix required",
            "symbol": "VitaminMixMin",
            "value": 20,
            "shape": [],
            "code": "VitaminMixMin = data[\"VitaminMixMin\"] # scalar parameter"
        },
        {
            "definition": "Minimum units of protein required",
            "symbol": "ProteinMin",
            "value": 20,
            "shape": [],
            "code": "ProteinMin = data[\"ProteinMin\"] # scalar parameter"
        },
        {
            "definition": "Cost of a bag of regular brand food",
            "symbol": "CostRegular",
            "value": 20,
            "shape": [],
            "code": "CostRegular = data[\"CostRegular\"] # scalar parameter"
        },
        {
            "definition": "Cost of a bag of premium brand food",
            "symbol": "CostPremium",
            "value": 35,
            "shape": [],
            "code": "CostPremium = data[\"CostPremium\"] # scalar parameter"
        },
        {
            "definition": "Calcium units in a bag of regular brand food",
            "symbol": "CalciumRegular",
            "value": 4,
            "shape": [],
            "code": "CalciumRegular = data[\"CalciumRegular\"] # scalar parameter"
        },
        {
            "definition": "Vitamin mix units in a bag of regular brand food",
            "symbol": "VitaminMixRegular",
            "value": 7,
            "shape": [],
            "code": "VitaminMixRegular = data[\"VitaminMixRegular\"] # scalar parameter"
        },
        {
            "definition": "Protein units in a bag of regular brand food",
            "symbol": "ProteinRegular",
            "value": 10,
            "shape": [],
            "code": "ProteinRegular = data[\"ProteinRegular\"] # scalar parameter"
        },
        {
            "definition": "Calcium units in a bag of premium brand food",
            "symbol": "CalciumPremium",
            "value": 12,
            "shape": [],
            "code": "CalciumPremium = data[\"CalciumPremium\"] # scalar parameter"
        },
        {
            "definition": "Vitamin mix units in a bag of premium brand food",
            "symbol": "VitaminMixPremium",
            "value": 10,
            "shape": [],
            "code": "VitaminMixPremium = data[\"VitaminMixPremium\"] # scalar parameter"
        },
        {
            "definition": "Protein units in a bag of premium brand food",
            "symbol": "ProteinPremium",
            "value": 16,
            "shape": [],
            "code": "ProteinPremium = data[\"ProteinPremium\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The mix must have at least CalciumMin units of calcium",
            "status": "formulated",
            "formulation": "\\textup{CalciumRegular} \\times \\textup{RegularBags} + \\textup{CalciumPremium} \\times \\textup{PremiumBags} \\geq \\textup{CalciumMin}",
            "related_variables": [
                "RegularBags",
                "PremiumBags"
            ],
            "related_parameters": [
                "CalciumRegular",
                "CalciumPremium",
                "CalciumMin"
            ]
        },
        {
            "description": "The mix must have at least VitaminMixMin units of vitamin mix",
            "status": "formulated",
            "formulation": "\\textup{VitaminMixRegular} \\cdot \\textup{RegularBags} + \\textup{VitaminMixPremium} \\cdot \\textup{PremiumBags} \\geq \\textup{VitaminMixMin}",
            "related_variables": [
                "RegularBags",
                "PremiumBags"
            ],
            "related_parameters": [
                "VitaminMixRegular",
                "VitaminMixPremium",
                "VitaminMixMin"
            ]
        },
        {
            "description": "The mix must have at least ProteinMin units of protein",
            "status": "formulated",
            "formulation": "\\textup{ProteinRegular} \\times \\textup{RegularBags} + \\textup{ProteinPremium} \\times \\textup{PremiumBags} \\geq \\textup{ProteinMin}",
            "related_variables": [
                "RegularBags",
                "PremiumBags"
            ],
            "related_parameters": [
                "ProteinRegular",
                "ProteinPremium",
                "ProteinMin"
            ]
        },
        {
            "description": "The number of regular brand bags must be non-negative",
            "status": "formulated",
            "formulation": "\\textup{RegularBags} \\geq 0",
            "related_variables": [
                "RegularBags"
            ],
            "related_parameters": []
        },
        {
            "description": "The number of premium brand bags must be non-negative",
            "status": "formulated",
            "formulation": "\\textup{PremiumBags} \\geq 0",
            "related_variables": [
                "PremiumBags"
            ],
            "related_parameters": []
        },
        {
            "description": "Ensure the minimum units of calcium are met",
            "status": "formulated",
            "formulation": "\\textup{CalciumRegular} \\times \\textup{RegularBags} + \\textup{CalciumPremium} \\times \\textup{PremiumBags} \\geq \\textup{CalciumMin}",
            "related_variables": [
                "RegularBags",
                "PremiumBags"
            ],
            "related_parameters": [
                "CalciumRegular",
                "CalciumPremium",
                "CalciumMin"
            ]
        },
        {
            "description": "Ensure the minimum units of vitamin mix are met",
            "status": "formulated",
            "formulation": "\\textup{VitaminMixRegular} \\times \\textup{RegularBags} + \\textup{VitaminMixPremium} \\times \\textup{PremiumBags} \\geq \\textup{VitaminMixMin}",
            "related_variables": [
                "RegularBags",
                "PremiumBags"
            ],
            "related_parameters": [
                "VitaminMixRegular",
                "VitaminMixPremium",
                "VitaminMixMin"
            ]
        },
        {
            "description": "Ensure the minimum units of protein are met",
            "status": "formulated",
            "formulation": "\\textup{ProteinRegular} \\times \\textup{RegularBags} + \\textup{ProteinPremium} \\times \\textup{PremiumBags} \\geq \\textup{ProteinMin}",
            "related_variables": [
                "RegularBags",
                "PremiumBags"
            ],
            "related_parameters": [
                "ProteinRegular",
                "ProteinPremium",
                "ProteinMin"
            ]
        }
    ],
    "variables": [
        {
            "definition": "The number of bags of regular brand food",
            "symbol": "RegularBags",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The number of bags of premium brand food",
            "symbol": "PremiumBags",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cost of purchasing bags of regular and premium brand dog food",
            "status": "formulated",
            "formulation": "\\textup{Minimize} \\quad \\textup{CostRegular} \\times \\textup{RegularBags} + \\textup{CostPremium} \\times \\textup{PremiumBags}",
            "related_variables": [
                "RegularBags",
                "PremiumBags"
            ],
            "related_parameters": [
                "CostRegular",
                "CostPremium"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413155531_nl4opt_prob_209/",
    "problem_path": "data/nl4opt/prob_209/"
}