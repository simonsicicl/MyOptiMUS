{
    "background": "A research group has two methods, A and B, for producing fabric and plastic, both of which consume a special element. The goal is to meet minimum production requirements for fabric and plastic with limited availability of the special element.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of fabric produced by method A per hour",
            "symbol": "FabricA",
            "value": 25,
            "shape": [],
            "code": "FabricA = data[\"FabricA\"] # scalar parameter"
        },
        {
            "definition": "Units of fabric produced by method B per hour",
            "symbol": "FabricB",
            "value": 45,
            "shape": [],
            "code": "FabricB = data[\"FabricB\"] # scalar parameter"
        },
        {
            "definition": "Units of plastic produced by method A per hour",
            "symbol": "PlasticA",
            "value": 14,
            "shape": [],
            "code": "PlasticA = data[\"PlasticA\"] # scalar parameter"
        },
        {
            "definition": "Units of plastic produced by method B per hour",
            "symbol": "PlasticB",
            "value": 25,
            "shape": [],
            "code": "PlasticB = data[\"PlasticB\"] # scalar parameter"
        },
        {
            "definition": "Units of the special element required by method A",
            "symbol": "ElementA",
            "value": 60,
            "shape": [],
            "code": "ElementA = data[\"ElementA\"] # scalar parameter"
        },
        {
            "definition": "Units of the special element required by method B",
            "symbol": "ElementB",
            "value": 65,
            "shape": [],
            "code": "ElementB = data[\"ElementB\"] # scalar parameter"
        },
        {
            "definition": "Total available units of the special element",
            "symbol": "TotalElement",
            "value": 3500,
            "shape": [],
            "code": "TotalElement = data[\"TotalElement\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of fabric that must be produced",
            "symbol": "MinFabric",
            "value": 1400,
            "shape": [],
            "code": "MinFabric = data[\"MinFabric\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of plastic that must be produced",
            "symbol": "MinPlastic",
            "value": 1000,
            "shape": [],
            "code": "MinPlastic = data[\"MinPlastic\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "At least MinFabric units of fabric must be produced using methods A and B",
            "status": "coded",
            "formulation": "\\textup{FabricA} \\cdot \\textup{HoursA} + \\textup{FabricB} \\cdot \\textup{HoursB} \\geq \\textup{MinFabric}",
            "related_variables": [
                "HoursA",
                "HoursB"
            ],
            "related_parameters": [
                "FabricA",
                "FabricB",
                "MinFabric"
            ],
            "code": "# At least MinFabric units of fabric must be produced using methods A and B\nmodel.addConstr(FabricA * HoursA + FabricB * HoursB >= MinFabric, name=\"min_fabric_production\")"
        },
        {
            "description": "Constraint that at least MinPlastic units of plastic must be produced",
            "status": "coded",
            "formulation": "\\textup{PlasticA} \\times \\textup{HoursA} + \\textup{PlasticB} \\times \\textup{HoursB} \\geq \\textup{MinPlastic}",
            "related_variables": [
                "HoursA",
                "HoursB"
            ],
            "related_parameters": [
                "PlasticA",
                "PlasticB",
                "MinPlastic"
            ],
            "code": "# Add constraint to ensure at least MinPlastic units of plastic are produced\nmodel.addConstr(PlasticA * HoursA + PlasticB * HoursB >= MinPlastic, name=\"min_plastic_produced\")"
        },
        {
            "description": "The number of hours using method A must be non-negative",
            "status": "coded",
            "formulation": "\\textup{HoursA} \\geq 0",
            "related_variables": [
                "HoursA"
            ],
            "related_parameters": [],
            "code": "model.addConstr(HoursA >= 0, name=\"non_negative_hours_A\")"
        },
        {
            "description": "The number of hours using method B is non-negative",
            "status": "coded",
            "formulation": "\\textup{HoursB} \\geq 0",
            "related_variables": [
                "HoursB"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of hours using method B is non-negative\nmodel.addConstr(HoursB >= 0, name=\"hoursB_non_negative\")"
        },
        {
            "description": "Ensure at least MinFabric units of fabric are produced",
            "status": "coded",
            "formulation": "\\textup{FabricA} \\cdot \\textup{HoursA} + \\textup{FabricB} \\cdot \\textup{HoursB} \\geq \\textup{MinFabric}",
            "related_variables": [
                "HoursA",
                "HoursB"
            ],
            "related_parameters": [
                "FabricA",
                "FabricB",
                "MinFabric"
            ],
            "code": "# Ensure at least MinFabric units of fabric are produced\nmodel.addConstr(FabricA * HoursA + FabricB * HoursB >= MinFabric, name=\"MinFabric_Production\")"
        },
        {
            "description": "Ensure at least MinPlastic units of plastic are produced",
            "status": "coded",
            "formulation": "\\textup{PlasticA} \\cdot \\textup{HoursA} + \\textup{PlasticB} \\cdot \\textup{HoursB} \\geq \\textup{MinPlastic}",
            "related_variables": [
                "HoursA",
                "HoursB"
            ],
            "related_parameters": [
                "PlasticA",
                "PlasticB",
                "MinPlastic"
            ],
            "code": "# Constraint to ensure at least MinPlastic units of plastic are produced\nmodel.addConstr(PlasticA * HoursA + PlasticB * HoursB >= MinPlastic, name=\"min_plastic_produced\")"
        },
        {
            "description": "Do not exceed the total available units of the special element",
            "status": "coded",
            "formulation": "\\textup{ElementA} \\cdot \\textup{HoursA} + \\textup{ElementB} \\cdot \\textup{HoursB} \\leq \\textup{TotalElement}",
            "related_variables": [
                "HoursA",
                "HoursB"
            ],
            "related_parameters": [
                "ElementA",
                "ElementB",
                "TotalElement"
            ],
            "code": "# Constraint: Do not exceed the total available units of the special element\nmodel.addConstr(ElementA * HoursA + ElementB * HoursB <= TotalElement, name=\"special_element_limit\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of hours method A is used",
            "symbol": "HoursA",
            "shape": [],
            "status": "coded",
            "code": "HoursA = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HoursA\")"
        },
        {
            "definition": "Number of hours method B is used",
            "symbol": "HoursB",
            "shape": [],
            "status": "coded",
            "code": "HoursB = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HoursB\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total hours needed to produce at least MinFabric units of fabric and at least MinPlastic units of plastic",
            "status": "coded",
            "formulation": "\\textup{HoursA} + \\textup{HoursB}",
            "related_variables": [
                "HoursA",
                "HoursB"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(HoursA + HoursB, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 40.0,
    "log_path": "logs/log_20250413172322_nl4opt_prob_260/",
    "problem_path": "data/nl4opt/prob_260/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_260/data.json\", \"r\") as f:\n    data = json.load(f)\n\nFabricA = data[\"FabricA\"] # scalar parameter\nFabricB = data[\"FabricB\"] # scalar parameter\nPlasticA = data[\"PlasticA\"] # scalar parameter\nPlasticB = data[\"PlasticB\"] # scalar parameter\nElementA = data[\"ElementA\"] # scalar parameter\nElementB = data[\"ElementB\"] # scalar parameter\nTotalElement = data[\"TotalElement\"] # scalar parameter\nMinFabric = data[\"MinFabric\"] # scalar parameter\nMinPlastic = data[\"MinPlastic\"] # scalar parameter\nHoursA = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HoursA\")\nHoursB = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HoursB\")\n\n# At least MinFabric units of fabric must be produced using methods A and B\nmodel.addConstr(FabricA * HoursA + FabricB * HoursB >= MinFabric, name=\"min_fabric_production\")\n\n# Add constraint to ensure at least MinPlastic units of plastic are produced\nmodel.addConstr(PlasticA * HoursA + PlasticB * HoursB >= MinPlastic, name=\"min_plastic_produced\")\n\nmodel.addConstr(HoursA >= 0, name=\"non_negative_hours_A\")\n\n# Add constraint to ensure the number of hours using method B is non-negative\nmodel.addConstr(HoursB >= 0, name=\"hoursB_non_negative\")\n\n# Ensure at least MinFabric units of fabric are produced\nmodel.addConstr(FabricA * HoursA + FabricB * HoursB >= MinFabric, name=\"MinFabric_Production\")\n\n# Constraint to ensure at least MinPlastic units of plastic are produced\nmodel.addConstr(PlasticA * HoursA + PlasticB * HoursB >= MinPlastic, name=\"min_plastic_produced\")\n\n# Constraint: Do not exceed the total available units of the special element\nmodel.addConstr(ElementA * HoursA + ElementB * HoursB <= TotalElement, name=\"special_element_limit\")\n\n# Set objective\nmodel.setObjective(HoursA + HoursB, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}