{
    "background": "A dog hospital has a limited supply of tooth medication and meat to produce small and large bones with certain preferences for small bones and a minimum requirement for large bones.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total units of tooth medication available",
            "symbol": "TotalMedication",
            "value": 2000,
            "shape": [],
            "code": "TotalMedication = data[\"TotalMedication\"] # scalar parameter"
        },
        {
            "definition": "Units of tooth medication required for a small bone",
            "symbol": "SmallMedication",
            "value": 10,
            "shape": [],
            "code": "SmallMedication = data[\"SmallMedication\"] # scalar parameter"
        },
        {
            "definition": "Units of meat required for a small bone",
            "symbol": "SmallMeat",
            "value": 12,
            "shape": [],
            "code": "SmallMeat = data[\"SmallMeat\"] # scalar parameter"
        },
        {
            "definition": "Units of tooth medication required for a large bone",
            "symbol": "LargeMedication",
            "value": 15,
            "shape": [],
            "code": "LargeMedication = data[\"LargeMedication\"] # scalar parameter"
        },
        {
            "definition": "Units of meat required for a large bone",
            "symbol": "LargeMeat",
            "value": 15,
            "shape": [],
            "code": "LargeMeat = data[\"LargeMeat\"] # scalar parameter"
        },
        {
            "definition": "Minimum percentage of total bones made that must be small",
            "symbol": "MinSmallBonePercentage",
            "value": 0.5,
            "shape": [],
            "code": "MinSmallBonePercentage = data[\"MinSmallBonePercentage\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of large bones to be made",
            "symbol": "MinLargeBones",
            "value": 30,
            "shape": [],
            "code": "MinLargeBones = data[\"MinLargeBones\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The total units of tooth medication used for small and large bones cannot exceed the total available units of tooth medication.",
            "status": "coded",
            "formulation": "\\textup{SmallBoneMedicationUnits} \\cdot \\textup{SmallMedication} + \\textup{LargeBoneMedicationUnits} \\cdot \\textup{LargeMedication} \\leq \\textup{TotalMedication}",
            "related_variables": [
                "SmallBoneMedicationUnits",
                "LargeBoneMedicationUnits"
            ],
            "related_parameters": [
                "SmallMedication",
                "LargeMedication",
                "TotalMedication"
            ],
            "code": "# Constraint for the maximum units of tooth medication used for small and large bones\nmodel.addConstr(SmallBoneMedicationUnits * SmallMedication + LargeBoneMedicationUnits * LargeMedication <= TotalMedication, name=\"total_medication_limit\")"
        },
        {
            "description": "At least MinSmallBonePercentage of all bones made must be small",
            "status": "coded",
            "formulation": "\\textup{SmallBoneMedicationUnits} \\geq \\textup{MinSmallBonePercentage} \\times (\\textup{SmallBoneMedicationUnits} + \\textup{LargeBoneMedicationUnits})",
            "related_variables": [
                "SmallBoneMedicationUnits",
                "LargeBoneMedicationUnits"
            ],
            "related_parameters": [
                "MinSmallBonePercentage"
            ],
            "code": "# Add constraint to ensure at least MinSmallBonePercentage of all bones made are small\nmodel.addConstr(SmallBoneMedicationUnits >= MinSmallBonePercentage * (SmallBoneMedicationUnits + LargeBoneMedicationUnits), name=\"MinSmallBonePercentageConstraint\")"
        },
        {
            "description": "At least MinLargeBones large bones must be made",
            "status": "coded",
            "formulation": "\\textup{LargeBoneMedicationUnits} \\geq \\textup{MinLargeBones} \\cdot \\textup{LargeMedication}",
            "related_variables": [
                "LargeBoneMedicationUnits"
            ],
            "related_parameters": [
                "MinLargeBones",
                "LargeMedication"
            ],
            "code": "# Add constraint to ensure at least MinLargeBones large bones must be made\nmodel.addConstr(LargeBoneMedicationUnits >= MinLargeBones * LargeMedication, name=\"min_large_bones\")"
        },
        {
            "description": "The number of small bones produced must be non-negative",
            "status": "coded",
            "formulation": "\\textup{SmallBoneMedicationUnits} \\geq 0",
            "related_variables": [
                "SmallBoneMedicationUnits"
            ],
            "related_parameters": [],
            "code": "# The SmallBoneMedicationUnits variable is already defined as continuous which means it can take on non-negative values by default.\n# Therefore, no further constraint is needed to ensure non-negativity."
        },
        {
            "description": "The number of large bones produced must be non-negative",
            "status": "coded",
            "formulation": "\\textup{LargeBoneMedicationUnits} \\geq 0",
            "related_variables": [
                "LargeBoneMedicationUnits"
            ],
            "related_parameters": [],
            "code": "# The number of large bones produced must be non-negative\nmodel.addConstr(LargeBoneMedicationUnits >= 0, name=\"non_negative_large_bone\")"
        },
        {
            "description": "Ensure the total medication used for small and large bones does not exceed the total medication available",
            "status": "coded",
            "formulation": "\\textup{SmallBoneMedicationUnits} \\cdot \\textup{SmallMedication} + \\textup{LargeBoneMedicationUnits} \\cdot \\textup{LargeMedication} \\leq \\textup{TotalMedication}",
            "related_variables": [
                "SmallBoneMedicationUnits",
                "LargeBoneMedicationUnits"
            ],
            "related_parameters": [
                "SmallMedication",
                "LargeMedication",
                "TotalMedication"
            ],
            "code": "# Ensure the total medication used for small and large bones does not exceed the total medication available\nmodel.addConstr(SmallBoneMedicationUnits * SmallMedication + LargeBoneMedicationUnits * LargeMedication <= TotalMedication, \"medication_limit\")"
        },
        {
            "description": "Ensure that at least the minimum number of large bones are made",
            "status": "coded",
            "formulation": "\\textup{LargeBoneMedicationUnits} \\cdot \\textup{LargeMedication} \\geq \\textup{MinLargeBones} \\cdot \\textup{LargeMedication}",
            "related_variables": [
                "LargeBoneMedicationUnits"
            ],
            "related_parameters": [
                "MinLargeBones",
                "LargeMedication"
            ],
            "code": "# Ensure that at least the minimum number of large bones are made\nmodel.addConstr(LargeBoneMedicationUnits * LargeMedication >= MinLargeBones * LargeMedication, name=\"min_large_bones\")"
        },
        {
            "description": "Ensure that the number of small bones is at least half the total number of bones produced",
            "status": "coded",
            "formulation": "\\textup{SmallBoneMedicationUnits} \\geq \\textup{MinSmallBonePercentage} \\cdot (\\textup{SmallBoneMedicationUnits} + \\textup{LargeBoneMedicationUnits})",
            "related_variables": [
                "SmallBoneMedicationUnits",
                "LargeBoneMedicationUnits"
            ],
            "related_parameters": [
                "MinSmallBonePercentage"
            ],
            "code": "# Ensure that the number of small bones is at least half the total number of bones produced\nmodel.addConstr(SmallBoneMedicationUnits >= MinSmallBonePercentage * (SmallBoneMedicationUnits + LargeBoneMedicationUnits),\n                name=\"min_small_bone_percentage\")"
        }
    ],
    "variables": [
        {
            "definition": "The total number of small bones produced, which translates into total units of tooth medication used for small bones",
            "symbol": "SmallBoneMedicationUnits",
            "shape": [],
            "status": "coded",
            "code": "SmallBoneMedicationUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SmallBoneMedicationUnits\")"
        },
        {
            "definition": "The total number of large bones produced, which translates into total units of tooth medication used for large bones",
            "symbol": "LargeBoneMedicationUnits",
            "shape": [],
            "status": "coded",
            "code": "LargeBoneMedicationUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"LargeBoneMedicationUnits\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total amount of meat required to produce the small and large bones",
            "status": "coded",
            "formulation": "\\min\\left(\\textup{SmallBoneMedicationUnits} \\cdot \\textup{SmallMeat} + \\textup{LargeBoneMedicationUnits} \\cdot \\textup{LargeMeat}\\right)",
            "related_variables": [
                "SmallBoneMedicationUnits",
                "LargeBoneMedicationUnits"
            ],
            "related_parameters": [
                "SmallMeat",
                "LargeMeat"
            ],
            "code": "# Define the objective function\nmodel.setObjective(SmallBoneMedicationUnits * SmallMeat + LargeBoneMedicationUnits * LargeMeat, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413105552_nl4opt_prob_103/",
    "problem_path": "data/nl4opt/prob_103/"
}