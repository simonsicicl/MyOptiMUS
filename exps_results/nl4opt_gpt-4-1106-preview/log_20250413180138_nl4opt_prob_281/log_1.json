{
    "background": "A body wash requires a mixture of coconut oil and lavender, each taking a certain time to become efficient, with restrictions on the minimum amount of coconut oil, the maximum combined units of both ingredients, and the coconut oil to lavender ratio.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Time in minutes for one unit of coconut oil to be effective",
            "symbol": "CoconutOilTime",
            "value": 0.7,
            "shape": [],
            "code": "CoconutOilTime = data[\"CoconutOilTime\"] # scalar parameter"
        },
        {
            "definition": "Time in minutes for one unit of lavender to be effective",
            "symbol": "LavenderTime",
            "value": 0.9,
            "shape": [],
            "code": "LavenderTime = data[\"LavenderTime\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of coconut oil",
            "symbol": "MinCoconutOilUnits",
            "value": 300,
            "shape": [],
            "code": "MinCoconutOilUnits = data[\"MinCoconutOilUnits\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowed units of both ingredients combined",
            "symbol": "MaxCombinedUnits",
            "value": 550,
            "shape": [],
            "code": "MaxCombinedUnits = data[\"MaxCombinedUnits\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowed ratio of units of coconut oil to units of lavender",
            "symbol": "MaxOilLavenderRatio",
            "value": 3,
            "shape": [],
            "code": "MaxOilLavenderRatio = data[\"MaxOilLavenderRatio\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Coconut oil units must be non-negative",
            "status": "coded",
            "formulation": "\\textup{CoconutOilUnits} \\geq 0",
            "related_variables": [
                "CoconutOilUnits"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for coconut oil units\nmodel.addConstr(CoconutOilUnits >= 0, name=\"coconut_oil_nonnegativity\")"
        },
        {
            "description": "Lavender units must be non-negative",
            "status": "coded",
            "formulation": "\\textup{LavenderUnits} \\geq 0",
            "related_variables": [
                "LavenderUnits"
            ],
            "related_parameters": [],
            "code": "# Lavender units must be non-negative\nmodel.addConstr(LavenderUnits >= 0, name=\"lavender_non_negative\")"
        },
        {
            "description": "At least a minimum number of coconut oil units must be added to the body wash",
            "status": "coded",
            "formulation": "\\textup{CoconutOilUnits} \\geq \\textup{MinCoconutOilUnits}",
            "related_variables": [
                "CoconutOilUnits"
            ],
            "related_parameters": [
                "MinCoconutOilUnits"
            ],
            "code": "# Ensure that a minimum amount of coconut oil units is added to the body wash\nmodel.addConstr(CoconutOilUnits >= MinCoconutOilUnits, name=\"min_coconut_oil\")"
        },
        {
            "description": "The sum of the coconut oil and lavender units must not exceed the maximum combined units allowed",
            "status": "coded",
            "formulation": "\\textup{CoconutOilUnits} + \\textup{LavenderUnits} \\leq \\textup{MaxCombinedUnits}",
            "related_variables": [
                "CoconutOilUnits",
                "LavenderUnits"
            ],
            "related_parameters": [
                "MaxCombinedUnits"
            ],
            "code": "# Add constraint for maximum combined units of coconut oil and lavender\nmodel.addConstr(CoconutOilUnits + LavenderUnits <= MaxCombinedUnits, name=\"max_combined_units_constraint\")"
        },
        {
            "description": "The ratio of CoconutOilUnits to LavenderUnits must not exceed MaxOilLavenderRatio",
            "status": "coded",
            "formulation": "\\textup{CoconutOilUnits} \\leq \\textup{MaxOilLavenderRatio} \\cdot \\textup{LavenderUnits}",
            "related_variables": [
                "CoconutOilUnits",
                "LavenderUnits"
            ],
            "related_parameters": [
                "MaxOilLavenderRatio"
            ],
            "code": "# Constraint: The ratio of CoconutOilUnits to LavenderUnits must not exceed MaxOilLavenderRatio\nmodel.addConstr(CoconutOilUnits <= MaxOilLavenderRatio * LavenderUnits, \"Ratio_CoconutOil_to_Lavender\")"
        }
    ],
    "variables": [
        {
            "definition": "Amount of coconut oil used in the body wash",
            "symbol": "CoconutOilUnits",
            "shape": [],
            "status": "coded",
            "code": "CoconutOilUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"CoconutOilUnits\")"
        },
        {
            "definition": "Amount of lavender used in the body wash",
            "symbol": "LavenderUnits",
            "shape": [],
            "status": "coded",
            "code": "LavenderUnits = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"LavenderUnits\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total effective time for the body wash mixture",
            "status": "coded",
            "formulation": "\\textup{CoconutOilUnits} \\times \\textup{CoconutOilTime} + \\textup{LavenderUnits} \\times \\textup{LavenderTime}",
            "related_variables": [
                "CoconutOilUnits",
                "LavenderUnits"
            ],
            "related_parameters": [
                "CoconutOilTime",
                "LavenderTime"
            ],
            "code": "# Define the objective function\nmodel.setObjective(CoconutOilUnits * CoconutOilTime + LavenderUnits * LavenderTime, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413180138_nl4opt_prob_281/",
    "problem_path": "data/nl4opt/prob_281/"
}