{
    "background": "A company must use camels or trucks to deliver goods to rural cities. Camels and trucks each have different unit capacities and trip durations.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of units of goods delivered per trip by camel caravan",
            "symbol": "UnitsCamel",
            "value": 50,
            "shape": [],
            "code": "UnitsCamel = data[\"UnitsCamel\"] # scalar parameter"
        },
        {
            "definition": "Travel time per trip for camel caravan",
            "symbol": "TimeCamel",
            "value": 12,
            "shape": [],
            "code": "TimeCamel = data[\"TimeCamel\"] # scalar parameter"
        },
        {
            "definition": "Number of units of goods delivered per trip by desert truck",
            "symbol": "UnitsTruck",
            "value": 150,
            "shape": [],
            "code": "UnitsTruck = data[\"UnitsTruck\"] # scalar parameter"
        },
        {
            "definition": "Travel time per trip for desert truck",
            "symbol": "TimeTruck",
            "value": 5,
            "shape": [],
            "code": "TimeTruck = data[\"TimeTruck\"] # scalar parameter"
        },
        {
            "definition": "Total units of goods that need to be delivered",
            "symbol": "GoodsTotal",
            "value": 1500,
            "shape": [],
            "code": "GoodsTotal = data[\"GoodsTotal\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of camel caravans used is non-negative",
            "status": "coded",
            "formulation": "\\textup{CamelCaravans} \\geq 0",
            "related_variables": [
                "CamelCaravans"
            ],
            "related_parameters": [],
            "code": "model.addConstr(CamelCaravans >= 0, name=\"non_negative_caravans\")"
        },
        {
            "description": "Number of desert trucks must be non-negative",
            "status": "coded",
            "formulation": "\\textup{DesertTrucks} \\geq 0",
            "related_variables": [
                "DesertTrucks"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for the number of desert trucks\nmodel.addConstr(DesertTrucks >= 0, name=\"nonnegativity_desert_trucks\")"
        },
        {
            "description": "Total units delivered by camel caravans and desert trucks must be at least equal to GoodsTotal",
            "status": "coded",
            "formulation": "\\textup{CamelCaravans} \\times \\textup{UnitsCamel} + \\textup{DesertTrucks} \\times \\textup{UnitsTruck} \\geq \\textup{GoodsTotal}",
            "related_variables": [
                "CamelCaravans",
                "DesertTrucks"
            ],
            "related_parameters": [
                "UnitsCamel",
                "UnitsTruck",
                "GoodsTotal"
            ],
            "code": "# Ensure total units delivered by camel caravans and desert trucks meet or exceed GoodsTotal\nmodel.addConstr(CamelCaravans * UnitsCamel + DesertTrucks * UnitsTruck >= GoodsTotal, name=\"delivery_capacity\")"
        },
        {
            "description": "Ensure that the total units of goods delivered meet or exceed GoodsTotal",
            "status": "coded",
            "formulation": "\\textup{CamelCaravans} \\cdot \\textup{UnitsCamel} + \\textup{DesertTrucks} \\cdot \\textup{UnitsTruck} \\geq \\textup{GoodsTotal}",
            "related_variables": [
                "CamelCaravans",
                "DesertTrucks"
            ],
            "related_parameters": [
                "UnitsCamel",
                "UnitsTruck",
                "GoodsTotal"
            ],
            "code": "# Ensure that the total units of goods delivered meet or exceed GoodsTotal\nmodel.addConstr(CamelCaravans * UnitsCamel + DesertTrucks * UnitsTruck >= GoodsTotal, \"goods_delivery_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of camel caravans used for delivery",
            "symbol": "CamelCaravans",
            "shape": [],
            "status": "coded",
            "code": "CamelCaravans = model.addVar(vtype=gp.GRB.INTEGER, name=\"CamelCaravans\")"
        },
        {
            "definition": "Number of desert trucks used for delivery",
            "symbol": "DesertTrucks",
            "shape": [],
            "status": "coded",
            "code": "DesertTrucks = model.addVar(vtype=gp.GRB.INTEGER, name=\"DesertTrucks\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total time spent on delivering the required number of goods using camel caravans and desert trucks",
            "status": "coded",
            "formulation": "minimize \\quad \\textup{CamelCaravans} \\cdot \\textup{TimeCamel} + \\textup{DesertTrucks} \\cdot \\textup{TimeTruck}",
            "related_variables": [
                "CamelCaravans",
                "DesertTrucks"
            ],
            "related_parameters": [
                "TimeCamel",
                "TimeTruck"
            ],
            "code": "# Objective: Minimize the total time spent\nobjective = CamelCaravans * TimeCamel + DesertTrucks * TimeTruck\nmodel.setObjective(objective, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 50.0,
    "log_path": "logs/log_20250413175316_nl4opt_prob_273/",
    "problem_path": "data/nl4opt/prob_273/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_273/data.json\", \"r\") as f:\n    data = json.load(f)\n\nUnitsCamel = data[\"UnitsCamel\"] # scalar parameter\nTimeCamel = data[\"TimeCamel\"] # scalar parameter\nUnitsTruck = data[\"UnitsTruck\"] # scalar parameter\nTimeTruck = data[\"TimeTruck\"] # scalar parameter\nGoodsTotal = data[\"GoodsTotal\"] # scalar parameter\nCamelCaravans = model.addVar(vtype=gp.GRB.INTEGER, name=\"CamelCaravans\")\nDesertTrucks = model.addVar(vtype=gp.GRB.INTEGER, name=\"DesertTrucks\")\n\nmodel.addConstr(CamelCaravans >= 0, name=\"non_negative_caravans\")\n\n# Add non-negativity constraint for the number of desert trucks\nmodel.addConstr(DesertTrucks >= 0, name=\"nonnegativity_desert_trucks\")\n\n# Ensure total units delivered by camel caravans and desert trucks meet or exceed GoodsTotal\nmodel.addConstr(CamelCaravans * UnitsCamel + DesertTrucks * UnitsTruck >= GoodsTotal, name=\"delivery_capacity\")\n\n# Ensure that the total units of goods delivered meet or exceed GoodsTotal\nmodel.addConstr(CamelCaravans * UnitsCamel + DesertTrucks * UnitsTruck >= GoodsTotal, \"goods_delivery_constraint\")\n\n# Objective: Minimize the total time spent\nobjective = CamelCaravans * TimeCamel + DesertTrucks * TimeTruck\nmodel.setObjective(objective, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}