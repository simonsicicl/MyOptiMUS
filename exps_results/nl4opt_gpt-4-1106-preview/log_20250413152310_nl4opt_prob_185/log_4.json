{
    "background": "A dog school is training labradors and golden retrievers to deliver newspapers, with differing capacities and treat requirements for each breed, and certain limitations on treats availability and dog breed proportions.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of newspapers a labrador can deliver at a time",
            "symbol": "LabradorNewspaperCount",
            "value": 7,
            "shape": [],
            "code": "LabradorNewspaperCount = data[\"LabradorNewspaperCount\"] # scalar parameter"
        },
        {
            "definition": "Number of bone treats required for a labrador service",
            "symbol": "LabradorBoneTreatCount",
            "value": 5,
            "shape": [],
            "code": "LabradorBoneTreatCount = data[\"LabradorBoneTreatCount\"] # scalar parameter"
        },
        {
            "definition": "Number of newspapers a golden retriever can deliver at a time",
            "symbol": "GoldenRetrieverNewspaperCount",
            "value": 10,
            "shape": [],
            "code": "GoldenRetrieverNewspaperCount = data[\"GoldenRetrieverNewspaperCount\"] # scalar parameter"
        },
        {
            "definition": "Number of bone treats required for a golden retriever service",
            "symbol": "GoldenRetrieverBoneTreatCount",
            "value": 6,
            "shape": [],
            "code": "GoldenRetrieverBoneTreatCount = data[\"GoldenRetrieverBoneTreatCount\"] # scalar parameter"
        },
        {
            "definition": "Total number of small bone treats available",
            "symbol": "TotalBoneTreatsAvailable",
            "value": 1500,
            "shape": [],
            "code": "TotalBoneTreatsAvailable = data[\"TotalBoneTreatsAvailable\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of golden retrievers that must be used",
            "symbol": "MinGoldenRetrievers",
            "value": 50,
            "shape": [],
            "code": "MinGoldenRetrievers = data[\"MinGoldenRetrievers\"] # scalar parameter"
        },
        {
            "definition": "Maximum proportion of dogs that can be labradors",
            "symbol": "MaxLabradorProportion",
            "value": 0.6,
            "shape": [],
            "code": "MaxLabradorProportion = data[\"MaxLabradorProportion\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of labradors must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfLabradors} \\geq 0",
            "related_variables": [
                "NumberOfLabradors"
            ],
            "related_parameters": [],
            "code": "# The number of labradors must be non-negative\nmodel.addConstr(NumberOfLabradors >= 0, name=\"non_negative_labradors\")"
        },
        {
            "description": "The number of golden retrievers must be non-negative",
            "status": "coded",
            "formulation": "NumberOfGoldenRetrievers \\geq 0",
            "related_variables": [
                "NumberOfGoldenRetrievers"
            ],
            "related_parameters": [],
            "code": "# The number of golden retrievers must be non-negative\n# Since NumberOfGoldenRetrievers is already added as an integer variable, no further constraint is needed.\n# This constraint is inherently satisfied by the variable's type."
        },
        {
            "description": "Total number of bone treats used by labradors and golden retrievers cannot exceed TotalBoneTreatsAvailable",
            "status": "coded",
            "formulation": "\\textup{NumberOfLabradors} \\times \\textup{LabradorBoneTreatCount} + \\textup{NumberOfGoldenRetrievers} \\times \\textup{GoldenRetrieverBoneTreatCount} \\leq \\textup{TotalBoneTreatsAvailable}",
            "related_variables": [
                "NumberOfLabradors",
                "NumberOfGoldenRetrievers"
            ],
            "related_parameters": [
                "LabradorBoneTreatCount",
                "GoldenRetrieverBoneTreatCount",
                "TotalBoneTreatsAvailable"
            ],
            "code": "# Total bone treats used by labradors and golden retrievers cannot exceed TotalBoneTreatsAvailable\nmodel.addConstr(NumberOfLabradors * LabradorBoneTreatCount +\n                NumberOfGoldenRetrievers * GoldenRetrieverBoneTreatCount <= TotalBoneTreatsAvailable,\n                name=\"bone_treats_limit\")"
        },
        {
            "description": "At least the minimum number of golden retrievers must be used in the dog school program",
            "status": "coded",
            "formulation": "\\textup{NumberOfGoldenRetrievers} \\geq \\textup{MinGoldenRetrievers}",
            "related_variables": [
                "NumberOfGoldenRetrievers"
            ],
            "related_parameters": [
                "MinGoldenRetrievers"
            ],
            "code": "# At least the minimum number of golden retrievers must be used in the dog school program\nmodel.addConstr(NumberOfGoldenRetrievers >= MinGoldenRetrievers, name=\"min_golden_retrievers\")"
        },
        {
            "description": "At most MaxLabradorProportion of the total number of dogs can be labradors",
            "status": "coded",
            "formulation": "\\textup{NumberOfLabradors} \\leq \\textup{MaxLabradorProportion} \\times (\\textup{NumberOfLabradors} + \\textup{NumberOfGoldenRetrievers})",
            "related_variables": [
                "NumberOfLabradors",
                "NumberOfGoldenRetrievers"
            ],
            "related_parameters": [
                "MaxLabradorProportion"
            ],
            "code": "# Labrador proportion constraint\nmodel.addConstr(NumberOfLabradors <= MaxLabradorProportion * (NumberOfLabradors + NumberOfGoldenRetrievers), name=\"LabradorProportionConstraint\")"
        },
        {
            "description": "Total number of bone treats used by labradors and golden retrievers should not exceed the available bone treats",
            "status": "coded",
            "formulation": "\\textup{LabradorBoneTreatCount} \\times \\textup{NumberOfLabradors} + \\textup{GoldenRetrieverBoneTreatCount} \\times \\textup{NumberOfGoldenRetrievers} \\leq \\textup{TotalBoneTreatsAvailable}",
            "related_variables": [
                "NumberOfLabradors",
                "NumberOfGoldenRetrievers"
            ],
            "related_parameters": [
                "LabradorBoneTreatCount",
                "GoldenRetrieverBoneTreatCount",
                "TotalBoneTreatsAvailable"
            ],
            "code": "# Total number of bone treats used by labradors and golden retrievers should not exceed the available bone treats\nmodel.addConstr(LabradorBoneTreatCount * NumberOfLabradors + GoldenRetrieverBoneTreatCount * NumberOfGoldenRetrievers <= TotalBoneTreatsAvailable, name=\"bone_treats_limit\")"
        },
        {
            "description": "The number of golden retrievers must meet or exceed the stipulated minimum",
            "status": "coded",
            "formulation": "\\textup{NumberOfGoldenRetrievers} \\geq \\textup{MinGoldenRetrievers}",
            "related_variables": [
                "NumberOfGoldenRetrievers"
            ],
            "related_parameters": [
                "MinGoldenRetrievers"
            ],
            "code": "NumberOfGoldenRetrievers = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfGoldenRetrievers\")"
        },
        {
            "description": "The proportion of labradors must not exceed the maximum allowed",
            "status": "coded",
            "formulation": "\\textup{NumberOfLabradors} \\leq \\textup{MaxLabradorProportion} \\times (\\textup{NumberOfLabradors} + \\textup{NumberOfGoldenRetrievers})",
            "related_variables": [
                "NumberOfLabradors",
                "NumberOfGoldenRetrievers"
            ],
            "related_parameters": [
                "MaxLabradorProportion"
            ],
            "code": "# Proportion of labradors constraint\nmodel.addConstr(NumberOfLabradors <= MaxLabradorProportion * (NumberOfLabradors + NumberOfGoldenRetrievers), name=\"labrador_proportion\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of labradors used in the dog school program",
            "symbol": "NumberOfLabradors",
            "shape": [],
            "status": "coded",
            "code": "NumberOfLabradors = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfLabradors\")"
        },
        {
            "definition": "Number of golden retrievers used in the dog school program",
            "symbol": "NumberOfGoldenRetrievers",
            "shape": [],
            "status": "coded",
            "code": "NumberOfGoldenRetrievers = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfGoldenRetriebers\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total number of newspapers delivered by labradors and golden retrievers",
            "status": "coded",
            "formulation": "\\max (\\textup{LabradorNewspaperCount} \\times \\textup{NumberOfLabradors} + \\textup{GoldenRetrieverNewspaperCount} \\times \\textup{NumberOfGoldenRetrievers})",
            "related_variables": [
                "NumberOfLabradors",
                "NumberOfGoldenRetrievers"
            ],
            "related_parameters": [
                "LabradorNewspaperCount",
                "GoldenRetrieverNewspaperCount"
            ],
            "code": "# Set objective\nmodel.setObjective(LabradorNewspaperCount * NumberOfLabradors + GoldenRetrieverNewspaperCount * NumberOfGoldenRetrievers, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 4,
    "error_message": "Traceback (most recent call last):\n  File \"c:\\Users\\Simon\\Desktop\\Courses\\ECE 570\\ECE570_Project\\MyOptiMUS\\evaluator.py\", line 45, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 1\n    ```\n    ^\nSyntaxError: invalid syntax\n",
    "obj_val": "infeasible or unbounded",
    "log_path": "logs/log_20250413152310_nl4opt_prob_185/",
    "problem_path": "data/nl4opt/prob_185/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_185/data.json\", \"r\") as f:\n    data = json.load(f)\n",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_185/data.json\", \"r\") as f:\n    data = json.load(f)\n\nLabradorNewspaperCount = data[\"LabradorNewspaperCount\"] # scalar parameter\nLabradorBoneTreatCount = data[\"LabradorBoneTreatCount\"] # scalar parameter\nGoldenRetrieverNewspaperCount = data[\"GoldenRetrieverNewspaperCount\"] # scalar parameter\nGoldenRetrieverBoneTreatCount = data[\"GoldenRetrieverBoneTreatCount\"] # scalar parameter\nTotalBoneTreatsAvailable = data[\"TotalBoneTreatsAvailable\"] # scalar parameter\nMinGoldenRetrievers = data[\"MinGoldenRetrievers\"] # scalar parameter\nMaxLabradorProportion = data[\"MaxLabradorProportion\"] # scalar parameter\nNumberOfLabradors = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfLabradors\")\nNumberOfGoldenRetrievers = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfGoldenRetriebers\")\n\n# The number of labradors must be non-negative\nmodel.addConstr(NumberOfLabradors >= 0, name=\"non_negative_labradors\")\n\n# The number of golden retrievers must be non-negative\n# Since NumberOfGoldenRetrievers is already added as an integer variable, no further constraint is needed.\n# This constraint is inherently satisfied by the variable's type.\n\n# Total bone treats used by labradors and golden retrievers cannot exceed TotalBoneTreatsAvailable\nmodel.addConstr(NumberOfLabradors * LabradorBoneTreatCount +\n                NumberOfGoldenRetrievers * GoldenRetrieverBoneTreatCount <= TotalBoneTreatsAvailable,\n                name=\"bone_treats_limit\")\n\n# At least the minimum number of golden retrievers must be used in the dog school program\nmodel.addConstr(NumberOfGoldenRetrievers >= MinGoldenRetrievers, name=\"min_golden_retrievers\")\n\n# Labrador proportion constraint\nmodel.addConstr(NumberOfLabradors <= MaxLabradorProportion * (NumberOfLabradors + NumberOfGoldenRetrievers), name=\"LabradorProportionConstraint\")\n\n# Total number of bone treats used by labradors and golden retrievers should not exceed the available bone treats\nmodel.addConstr(LabradorBoneTreatCount * NumberOfLabradors + GoldenRetrieverBoneTreatCount * NumberOfGoldenRetrievers <= TotalBoneTreatsAvailable, name=\"bone_treats_limit\")\n\nNumberOfGoldenRetrievers = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfGoldenRetrievers\")\n\n# Proportion of labradors constraint\nmodel.addConstr(NumberOfLabradors <= MaxLabradorProportion * (NumberOfLabradors + NumberOfGoldenRetrievers), name=\"labrador_proportion\")\n\n# Set objective\nmodel.setObjective(LabradorNewspaperCount * NumberOfLabradors + GoldenRetrieverNewspaperCount * NumberOfGoldenRetrievers, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}