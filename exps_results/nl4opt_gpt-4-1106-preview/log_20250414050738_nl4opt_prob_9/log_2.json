{
    "background": "A store owner is looking to maximize profit by selling carrots and cucumbers with known costs and profits while adhering to budget constraints.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Monthly budget for carrots and cucumbers",
            "symbol": "Budget",
            "value": 500,
            "shape": [],
            "code": "Budget = data[\"Budget\"] # scalar parameter"
        },
        {
            "definition": "Cost per carrot",
            "symbol": "CostCarrot",
            "value": 0.3,
            "shape": [],
            "code": "CostCarrot = data[\"CostCarrot\"] # scalar parameter"
        },
        {
            "definition": "Cost per cucumber",
            "symbol": "CostCucumber",
            "value": 0.5,
            "shape": [],
            "code": "CostCucumber = data[\"CostCucumber\"] # scalar parameter"
        },
        {
            "definition": "Profit per carrot",
            "symbol": "ProfitCarrot",
            "value": 0.75,
            "shape": [],
            "code": "ProfitCarrot = data[\"ProfitCarrot\"] # scalar parameter"
        },
        {
            "definition": "Profit per cucumber",
            "symbol": "ProfitCucumber",
            "value": 0.8,
            "shape": [],
            "code": "ProfitCucumber = data[\"ProfitCucumber\"] # scalar parameter"
        },
        {
            "definition": "Estimated maximum ratio of cucumbers sold to carrots sold",
            "symbol": "RatioCucumbersToCarrots",
            "value": 0.33,
            "shape": [],
            "code": "RatioCucumbersToCarrots = data[\"RatioCucumbersToCarrots\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of carrots sold per month",
            "symbol": "MinCarrotsSold",
            "value": 300,
            "shape": [],
            "code": "MinCarrotsSold = data[\"MinCarrotsSold\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of carrots sold per month",
            "symbol": "MaxCarrotsSold",
            "value": 500,
            "shape": [],
            "code": "MaxCarrotsSold = data[\"MaxCarrotsSold\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of carrots sold must be an integer",
            "status": "coded",
            "formulation": "\\textup{CarrotsSold} \\in \\mathbb{Z}^{+}",
            "related_variables": [
                "CarrotsSold"
            ],
            "related_parameters": [],
            "code": "# Since the variable \"CarrotsSold\" is already defined as an integer variable, no additional constraints are needed."
        },
        {
            "description": "The number of cucumbers sold must be an integer",
            "status": "coded",
            "formulation": "\\textup{CucumbersSold} \\in \\mathbb{Z}",
            "related_variables": [
                "CucumbersSold"
            ],
            "related_parameters": [],
            "code": "# No additional code needed since the variable 'CucumbersSold' has already been defined as an integer."
        },
        {
            "description": "Number of carrots sold should be non-negative",
            "status": "coded",
            "formulation": "\\textup{CarrotsSold} \\geq 0",
            "related_variables": [
                "CarrotsSold"
            ],
            "related_parameters": [],
            "code": "# Since CarrotsSold has already been added as a non-negative integer var, no constraint required\n# CarrotsSold >= 0 is implicit in its declaration as a non-negative integer."
        },
        {
            "description": "The number of cucumbers sold must be non-negative",
            "status": "coded",
            "formulation": "\\textup{CucumbersSold} \\geq 0",
            "related_variables": [
                "CucumbersSold"
            ],
            "related_parameters": [],
            "code": "# No code needed as the variable CucumbersSold is already defined as non-negative by its type being INTEGER"
        },
        {
            "description": "The total cost of carrots and cucumbers sold must not exceed the budget.",
            "status": "coded",
            "formulation": "\\textup{CostCarrot} \\times \\textup{CarrotsSold} + \\textup{CostCucumber} \\times \\textup{CucumbersSold} \\leq \\textup{Budget}",
            "related_variables": [
                "CarrotsSold",
                "CucumbersSold"
            ],
            "related_parameters": [
                "CostCarrot",
                "CostCucumber",
                "Budget"
            ],
            "code": "# Add budget constraint for the total cost of carrots and cucumbers\nmodel.addConstr(CostCarrot * CarrotsSold + CostCucumber * CucumbersSold <= Budget, name=\"budget_constraint\")"
        },
        {
            "description": "Cucumbers sold should not exceed the estimated maximum ratio of cucumbers sold to carrots sold times the number of carrots sold",
            "status": "coded",
            "formulation": "\\textup{CucumbersSold} \\leq \\textup{RatioCucumbersToCarrots} \\times \\textup{CarrotsSold}",
            "related_variables": [
                "CucumbersSold",
                "CarrotsSold"
            ],
            "related_parameters": [
                "RatioCucumbersToCarrots"
            ],
            "code": "# Ensure that cucumbers sold do not exceed the maximum ratio of cucumbers to carrots sold times the number of carrots sold\nmodel.addConstr(CucumbersSold <= RatioCucumbersToCarrots * CarrotsSold, name=\"cucumber_carrot_ratio_constraint\")"
        },
        {
            "description": "Ensure that the number of carrots sold is greater than or equal to the minimum required number of carrots to be sold",
            "status": "coded",
            "formulation": "\\textup{CarrotsSold} \\geq \\textup{MinCarrotsSold}",
            "related_variables": [
                "CarrotsSold"
            ],
            "related_parameters": [
                "MinCarrotsSold"
            ],
            "code": "# Ensure that the number of carrots sold is greater than or equal to the minimum required number of carrots to be sold\nmodel.addConstr(CarrotsSold >= MinCarrotsSold, name=\"min_carrots_sold_constraint\")"
        },
        {
            "description": "The number of carrots sold must not exceed the maximum allowed number of carrots sold per month.",
            "status": "coded",
            "formulation": "\\textup{CarrotsSold} \\leq \\textup{MaxCarrotsSold}",
            "related_variables": [
                "CarrotsSold"
            ],
            "related_parameters": [
                "MaxCarrotsSold"
            ],
            "code": "# Constraint: The number of carrots sold must not exceed the maximum allowed\nmodel.addConstr(CarrotsSold <= MaxCarrotsSold, name=\"max_carrots_sold\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of carrots sold",
            "symbol": "CarrotsSold",
            "shape": [],
            "status": "coded",
            "code": "CarrotsSold = model.addVar(vtype=gp.GRB.INTEGER, name=\"CarrotsSold\")"
        },
        {
            "definition": "The number of cucumbers sold",
            "symbol": "CucumbersSold",
            "shape": [],
            "status": "coded",
            "code": "CucumbersSold = model.addVar(vtype=gp.GRB.INTEGER, name=\"CucumbersSold\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total profit from selling carrots and cucumbers",
            "status": "coded",
            "formulation": "\\textup{ProfitCarrot} \\times \\textup{CarrotsSold} + \\textup{ProfitCucumber} \\times \\textup{CucumbersSold}",
            "related_variables": [
                "CarrotsSold",
                "CucumbersSold"
            ],
            "related_parameters": [
                "ProfitCarrot",
                "ProfitCucumber"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitCarrot * CarrotsSold + ProfitCucumber * CucumbersSold, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 507.0,
    "log_path": "logs/log_20250414050738_nl4opt_prob_9/",
    "problem_path": "data/nl4opt/prob_9/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_9/data.json\", \"r\") as f:\n    data = json.load(f)\n\nBudget = data[\"Budget\"] # scalar parameter\nCostCarrot = data[\"CostCarrot\"] # scalar parameter\nCostCucumber = data[\"CostCucumber\"] # scalar parameter\nProfitCarrot = data[\"ProfitCarrot\"] # scalar parameter\nProfitCucumber = data[\"ProfitCucumber\"] # scalar parameter\nRatioCucumbersToCarrots = data[\"RatioCucumbersToCarrots\"] # scalar parameter\nMinCarrotsSold = data[\"MinCarrotsSold\"] # scalar parameter\nMaxCarrotsSold = data[\"MaxCarrotsSold\"] # scalar parameter\nCarrotsSold = model.addVar(vtype=gp.GRB.INTEGER, name=\"CarrotsSold\")\nCucumbersSold = model.addVar(vtype=gp.GRB.INTEGER, name=\"CucumbersSold\")\n\n# Since the variable \"CarrotsSold\" is already defined as an integer variable, no additional constraints are needed.\n\n# No additional code needed since the variable 'CucumbersSold' has already been defined as an integer.\n\n# Since CarrotsSold has already been added as a non-negative integer var, no constraint required\n# CarrotsSold >= 0 is implicit in its declaration as a non-negative integer.\n\n# No code needed as the variable CucumbersSold is already defined as non-negative by its type being INTEGER\n\n# Add budget constraint for the total cost of carrots and cucumbers\nmodel.addConstr(CostCarrot * CarrotsSold + CostCucumber * CucumbersSold <= Budget, name=\"budget_constraint\")\n\n# Ensure that cucumbers sold do not exceed the maximum ratio of cucumbers to carrots sold times the number of carrots sold\nmodel.addConstr(CucumbersSold <= RatioCucumbersToCarrots * CarrotsSold, name=\"cucumber_carrot_ratio_constraint\")\n\n# Ensure that the number of carrots sold is greater than or equal to the minimum required number of carrots to be sold\nmodel.addConstr(CarrotsSold >= MinCarrotsSold, name=\"min_carrots_sold_constraint\")\n\n# Constraint: The number of carrots sold must not exceed the maximum allowed\nmodel.addConstr(CarrotsSold <= MaxCarrotsSold, name=\"max_carrots_sold\")\n\n# Set objective\nmodel.setObjective(ProfitCarrot * CarrotsSold + ProfitCucumber * CucumbersSold, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}