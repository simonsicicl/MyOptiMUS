{
    "background": "A fashion company sells regular and premium handbags, each yielding different profits while having different manufacturing costs within a budget and a maximum sales capacity.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Profit per regular handbag sold",
            "symbol": "ProfitRegular",
            "value": 30,
            "shape": [],
            "code": "ProfitRegular = data[\"ProfitRegular\"] # scalar parameter"
        },
        {
            "definition": "Profit per premium handbag sold",
            "symbol": "ProfitPremium",
            "value": 180,
            "shape": [],
            "code": "ProfitPremium = data[\"ProfitPremium\"] # scalar parameter"
        },
        {
            "definition": "Cost of manufacturing a regular handbag",
            "symbol": "CostRegular",
            "value": 200,
            "shape": [],
            "code": "CostRegular = data[\"CostRegular\"] # scalar parameter"
        },
        {
            "definition": "Cost of manufacturing a premium handbag",
            "symbol": "CostPremium",
            "value": 447,
            "shape": [],
            "code": "CostPremium = data[\"CostPremium\"] # scalar parameter"
        },
        {
            "definition": "Total monthly budget for manufacturing",
            "symbol": "Budget",
            "value": 250000,
            "shape": [],
            "code": "Budget = data[\"Budget\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of handbags that can be sold per month",
            "symbol": "MaxHandbags",
            "value": 475,
            "shape": [],
            "code": "MaxHandbags = data[\"MaxHandbags\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of regular handbags sold must be non-negative",
            "status": "coded",
            "formulation": "\\textup{RegularHandbagsSold} \\geq 0",
            "related_variables": [
                "RegularHandbagsSold"
            ],
            "related_parameters": [],
            "code": "# Since RegularHandbagsSold is already defined as an integer variable, no further code is needed to ensure its non-negativity.\n# The constraint \"RegularHandbagsSold >= 0\" is inherently satisfied by the variable type definition."
        },
        {
            "description": "Number of premium handbags sold is non-negative",
            "status": "coded",
            "formulation": "\\textup{PremiumHandbagsSold} \\geq 0",
            "related_variables": [
                "PremiumHandbagsSold"
            ],
            "related_parameters": [],
            "code": "# Since PremiumHandbagsSold is already an integer variable, no code is needed to enforce non-negativity\n# The Gurobi optimizer enforces the non-negative constraint by default for integer variables."
        },
        {
            "description": "Total cost of manufacturing handbags does not exceed Budget",
            "status": "coded",
            "formulation": "\\textup{CostRegular} \\times \\textup{RegularHandbagsSold} + \\textup{CostPremium} \\times \\textup{PremiumHandbagsSold} \\leq \\textup{Budget}",
            "related_variables": [
                "RegularHandbagsSold",
                "PremiumHandbagsSold"
            ],
            "related_parameters": [
                "CostRegular",
                "CostPremium",
                "Budget"
            ],
            "code": "# Add constraint for the total cost of manufacturing handbags not to exceed the budget\nmodel.addConstr(CostRegular * RegularHandbagsSold + CostPremium * PremiumHandbagsSold <= Budget, name=\"budget_constraint\")"
        },
        {
            "description": "The total number of handbags sold, which includes both regular and premium handbags, cannot exceed the maximum allowed handbags per month",
            "status": "coded",
            "formulation": "\\textup{RegularHandbagsSold} + \\textup{PremiumHandbagsSold} \\leq \\textup{MaxHandbags}",
            "related_variables": [
                "RegularHandbagsSold",
                "PremiumHandbagsSold"
            ],
            "related_parameters": [
                "MaxHandbags"
            ],
            "code": "model.addConstr(RegularHandbagsSold + PremiumHandbagsSold <= MaxHandbags, name=\"Max_Handbags_Sold_Constraint\")"
        },
        {
            "description": "Total cost of manufacturing handbags must not exceed the budget",
            "status": "coded",
            "formulation": "\\textup{CostRegular} \\times \\textup{RegularHandbagsSold} + \\textup{CostPremium} \\times \\textup{PremiumHandbagsSold} \\leq \\textup{Budget}",
            "related_variables": [
                "RegularHandbagsSold",
                "PremiumHandbagsSold"
            ],
            "related_parameters": [
                "CostRegular",
                "CostPremium",
                "Budget"
            ],
            "code": "# Total cost of manufacturing handbags must not exceed the budget\nmodel.addConstr(CostRegular * RegularHandbagsSold + CostPremium * PremiumHandbagsSold <= Budget, name=\"budget_constraint\")"
        },
        {
            "description": "Total number of handbags sold should not exceed the maximum sales capacity",
            "status": "coded",
            "formulation": "\\textup{RegularHandbagsSold} + \\textup{PremiumHandbagsSold} \\leq \\textup{MaxHandbags}",
            "related_variables": [
                "RegularHandbagsSold",
                "PremiumHandbagsSold"
            ],
            "related_parameters": [
                "MaxHandbags"
            ],
            "code": "# Constraint: Total number of handbags sold should not exceed the maximum sales capacity\nmodel.addConstr(RegularHandbagsSold + PremiumHandbagsSold <= MaxHandbags, name=\"max_sales_capacity\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of regular handbags sold",
            "symbol": "RegularHandbagsSold",
            "shape": [],
            "status": "coded",
            "code": "RegularHandbagsSold = model.addVar(vtype=gp.GRB.INTEGER, name=\"RegularHandbagsSold\")"
        },
        {
            "definition": "Number of premium handbags sold",
            "symbol": "PremiumHandbagsSold",
            "shape": [],
            "status": "coded",
            "code": "PremiumHandbagsSold = model.addVar(vtype=gp.GRB.INTEGER, name=\"PremiumHandbagsSold\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the company's monthly profit from selling regular and premium handbags",
            "status": "coded",
            "formulation": "\\max (\\textup{ProfitRegular} \\times \\textup{RegularHandbagsSold} + \\textup{ProfitPremium} \\times \\textup{PremiumHandbagsSold})",
            "related_variables": [
                "RegularHandbagsSold",
                "PremiumHandbagsSold"
            ],
            "related_parameters": [
                "ProfitRegular",
                "ProfitPremium"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitRegular * RegularHandbagsSold + ProfitPremium * PremiumHandbagsSold, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 85500.0,
    "log_path": "logs/log_20250413160315_nl4opt_prob_213/",
    "problem_path": "data/nl4opt/prob_213/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_213/data.json\", \"r\") as f:\n    data = json.load(f)\n\nProfitRegular = data[\"ProfitRegular\"] # scalar parameter\nProfitPremium = data[\"ProfitPremium\"] # scalar parameter\nCostRegular = data[\"CostRegular\"] # scalar parameter\nCostPremium = data[\"CostPremium\"] # scalar parameter\nBudget = data[\"Budget\"] # scalar parameter\nMaxHandbags = data[\"MaxHandbags\"] # scalar parameter\nRegularHandbagsSold = model.addVar(vtype=gp.GRB.INTEGER, name=\"RegularHandbagsSold\")\nPremiumHandbagsSold = model.addVar(vtype=gp.GRB.INTEGER, name=\"PremiumHandbagsSold\")\n\n# Since RegularHandbagsSold is already defined as an integer variable, no further code is needed to ensure its non-negativity.\n# The constraint \"RegularHandbagsSold >= 0\" is inherently satisfied by the variable type definition.\n\n# Since PremiumHandbagsSold is already an integer variable, no code is needed to enforce non-negativity\n# The Gurobi optimizer enforces the non-negative constraint by default for integer variables.\n\n# Add constraint for the total cost of manufacturing handbags not to exceed the budget\nmodel.addConstr(CostRegular * RegularHandbagsSold + CostPremium * PremiumHandbagsSold <= Budget, name=\"budget_constraint\")\n\nmodel.addConstr(RegularHandbagsSold + PremiumHandbagsSold <= MaxHandbags, name=\"Max_Handbags_Sold_Constraint\")\n\n# Total cost of manufacturing handbags must not exceed the budget\nmodel.addConstr(CostRegular * RegularHandbagsSold + CostPremium * PremiumHandbagsSold <= Budget, name=\"budget_constraint\")\n\n# Constraint: Total number of handbags sold should not exceed the maximum sales capacity\nmodel.addConstr(RegularHandbagsSold + PremiumHandbagsSold <= MaxHandbags, name=\"max_sales_capacity\")\n\n# Set objective\nmodel.setObjective(ProfitRegular * RegularHandbagsSold + ProfitPremium * PremiumHandbagsSold, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}