{
    "background": "My grandma is required to take two medicines Z1 and D3 everyday. There are two types of pills available: Zodiac and Sunny, containing different quantities of Z1 and D3.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Minimum required grams of medicine Z1 per day",
            "symbol": "MinZ1",
            "value": 5,
            "shape": [],
            "code": "MinZ1 = data[\"MinZ1\"] # scalar parameter"
        },
        {
            "definition": "Minimum required grams of medicine D3 per day",
            "symbol": "MinD3",
            "value": 10,
            "shape": [],
            "code": "MinD3 = data[\"MinD3\"] # scalar parameter"
        },
        {
            "definition": "Grams of Z1 in one pill of Zodiac",
            "symbol": "Z1perZodiac",
            "value": 1.3,
            "shape": [],
            "code": "Z1perZodiac = data[\"Z1perZodiac\"] # scalar parameter"
        },
        {
            "definition": "Grams of Z1 in one pill of Sunny",
            "symbol": "Z1perSunny",
            "value": 1.2,
            "shape": [],
            "code": "Z1perSunny = data[\"Z1perSunny\"] # scalar parameter"
        },
        {
            "definition": "Grams of D3 in one pill of Zodiac",
            "symbol": "D3perZodiac",
            "value": 1.5,
            "shape": [],
            "code": "D3perZodiac = data[\"D3perZodiac\"] # scalar parameter"
        },
        {
            "definition": "Grams of D3 in one pill of Sunny",
            "symbol": "D3perSunny",
            "value": 5,
            "shape": [],
            "code": "D3perSunny = data[\"D3perSunny\"] # scalar parameter"
        },
        {
            "definition": "Cost per pill of Zodiac",
            "symbol": "CostZodiac",
            "value": 1,
            "shape": [],
            "code": "CostZodiac = data[\"CostZodiac\"] # scalar parameter"
        },
        {
            "definition": "Cost per pill of Sunny",
            "symbol": "CostSunny",
            "value": 3,
            "shape": [],
            "code": "CostSunny = data[\"CostSunny\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Grandma should take at least the minimum required grams of medicine Z1 per day",
            "status": "coded",
            "formulation": "\\textup{MinZ1} \\leq (\\textup{NumZodiacPills} \\times \\textup{Z1perZodiac}) + (\\textup{NumSunnyPills} \\times \\textup{Z1perSunny})",
            "related_variables": [
                "NumZodiacPills",
                "NumSunnyPills"
            ],
            "related_parameters": [
                "MinZ1",
                "Z1perZodiac",
                "Z1perSunny"
            ],
            "code": "# Minimum Z1 medicine intake constraint for Grandma\nmodel.addConstr((NumZodiacPills * Z1perZodiac) + (NumSunnyPills * Z1perSunny) >= MinZ1, name=\"min_medicine_Z1\")"
        },
        {
            "description": "Grandma must consume at least MinD3 grams of D3 everyday",
            "status": "coded",
            "formulation": "\\textup{NumZodiacPills} \\cdot \\textup{D3perZodiac} + \\textup{NumSunnyPills} \\cdot \\textup{D3perSunny} \\geq \\textup{MinD3}",
            "related_variables": [
                "NumZodiacPills",
                "NumSunnyPills"
            ],
            "related_parameters": [
                "D3perZodiac",
                "D3perSunny",
                "MinD3"
            ],
            "code": "# Grandma's minimum D3 consumption constraint\nmodel.addConstr(NumZodiacPills * D3perZodiac + NumSunnyPills * D3perSunny >= MinD3, name=\"min_d3_intake\")"
        },
        {
            "description": "Number of Zodiac pills Grandma takes per day must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumZodiacPills} \\geq 0",
            "related_variables": [
                "NumZodiacPills"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of Zodiac pills is non-negative\nmodel.addConstr(NumZodiacPills >= 0, name=\"NumZodiacPills_nonnegative\")"
        },
        {
            "description": "Number of Sunny pills must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumSunnyPills} \\geq 0",
            "related_variables": [
                "NumSunnyPills"
            ],
            "related_parameters": [],
            "code": "# Since NumSunnyPills is already defined as an integer variable, \n# we just need to add a constraint to ensure it is non-negative\nmodel.addConstr(NumSunnyPills >= 0, \"NumSunnyPills_nonnegativity\")"
        },
        {
            "description": "Ensure the minimum required grams of medicine Z1 per day is met",
            "status": "coded",
            "formulation": "\\textup{Z1perZodiac} \\cdot \\textup{NumZodiacPills} + \\textup{Z1perSunny} \\cdot \\textup{NumSunnyPills} \\geq \\textup{MinZ1}",
            "related_variables": [
                "NumZodiacPills",
                "NumSunnyPills"
            ],
            "related_parameters": [
                "Z1perZodiac",
                "Z1perSunny",
                "MinZ1"
            ],
            "code": "# Ensure the minimum required grams of medicine Z1 per day is met\nmodel.addConstr(Z1perZodiac * NumZodiacPills + Z1perSunny * NumSunnyPills >= MinZ1, name=\"min_med_Z1_requirement\")"
        },
        {
            "description": "Ensure the minimum required grams of medicine D3 per day is met",
            "status": "coded",
            "formulation": "\\textup{D3perZodiac} \\cdot \\textup{NumZodiacPills} + \\textup{D3perSunny} \\cdot \\textup{NumSunnyPills} \\geq \\textup{MinD3}",
            "related_variables": [
                "NumZodiacPills",
                "NumSunnyPills"
            ],
            "related_parameters": [
                "D3perZodiac",
                "D3perSunny",
                "MinD3"
            ],
            "code": "# Ensure the minimum required grams of medicine D3 per day is met\nmodel.addConstr(D3perZodiac * NumZodiacPills + D3perSunny * NumSunnyPills >= MinD3, name=\"min_d3_requirement\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of Zodiac pills Grandma takes per day",
            "symbol": "NumZodiacPills",
            "shape": [],
            "status": "coded",
            "code": "NumZodiacPills = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumZodiacPills\")"
        },
        {
            "definition": "Number of Sunny pills Grandma takes per day",
            "symbol": "NumSunnyPills",
            "shape": [],
            "status": "coded",
            "code": "NumSunnyPills = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumSunnyPills\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cost of the pills while fulfilling the medicine requirements of Z1 and D3",
            "status": "coded",
            "formulation": "\\min (\\textup{CostZodiac} \\cdot \\textup{NumZodiacPills} + \\textup{CostSunny} \\cdot \\textup{NumSunnyPills})",
            "related_variables": [
                "NumZodiacPills",
                "NumSunnyPills"
            ],
            "related_parameters": [
                "CostZodiac",
                "CostSunny"
            ],
            "code": "# Define the objective function\nmodel.setObjective(CostZodiac * NumZodiacPills + CostSunny * NumSunnyPills, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413172221_nl4opt_prob_26/",
    "problem_path": "data/nl4opt/prob_26/"
}