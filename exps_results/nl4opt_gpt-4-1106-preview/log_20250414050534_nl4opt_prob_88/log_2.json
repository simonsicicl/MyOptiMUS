{
    "background": "A water company allocates its total water supply into two types of bottles, glass, and plastic, with differing capacities and customer preferences influencing production ratios.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Volume of water that a glass bottle can hold",
            "symbol": "VolumeGlass",
            "value": 500,
            "shape": [],
            "code": "VolumeGlass = data[\"VolumeGlass\"] # scalar parameter"
        },
        {
            "definition": "Volume of water that a plastic bottle can hold",
            "symbol": "VolumePlastic",
            "value": 750,
            "shape": [],
            "code": "VolumePlastic = data[\"VolumePlastic\"] # scalar parameter"
        },
        {
            "definition": "The minimum ratio of the number of plastic bottles to the number of glass bottles",
            "symbol": "RatioPlasticToGlass",
            "value": 3.0,
            "shape": [],
            "code": "RatioPlasticToGlass = data[\"RatioPlasticToGlass\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of glass bottles that must be produced",
            "symbol": "MinGlassBottles",
            "value": 20,
            "shape": [],
            "code": "MinGlassBottles = data[\"MinGlassBottles\"] # scalar parameter"
        },
        {
            "definition": "Total volume of water available",
            "symbol": "TotalWaterVolume",
            "value": 250000,
            "shape": [],
            "code": "TotalWaterVolume = data[\"TotalWaterVolume\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of glass bottles must be non-negative",
            "status": "coded",
            "formulation": "NumGlassBottles \\geq 0",
            "related_variables": [
                "NumGlassBottles"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for glass bottles\nmodel.addConstr(NumGlassBottles >= 0, name=\"non_negativity_glass_bottles\")"
        },
        {
            "description": "The number of plastic bottles produced must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumPlasticBottles} \\geq 0",
            "related_variables": [
                "NumPlasticBottles"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of plastic bottles produced is non-negative\nmodel.addConstr(NumPlasticBottles >= 0, name=\"non_negativity_NumPlasticBottles\")"
        },
        {
            "description": "The sum of water in all bottles should not exceed the total water volume available",
            "status": "coded",
            "formulation": "\\textup{VolumeGlass} \\times \\textup{NumGlassBottles} + \\textup{VolumePlastic} \\times \\textup{NumPlasticBottles} \\leq \\textup{TotalWaterVolume}",
            "related_variables": [
                "NumGlassBottles",
                "NumPlasticBottles"
            ],
            "related_parameters": [
                "VolumeGlass",
                "VolumePlastic",
                "TotalWaterVolume"
            ],
            "code": "# Add constraint for the total volume of water in bottles not to exceed available water volume\nmodel.addConstr(VolumeGlass * NumGlassBottles + VolumePlastic * NumPlasticBottles <= TotalWaterVolume, \"total_water_volume_constraint\")"
        },
        {
            "description": "The number of plastic bottles must be at least RatioPlasticToGlass times the number of glass bottles",
            "status": "coded",
            "formulation": "\\textup{NumPlasticBottles} \\geq \\textup{RatioPlasticToGlass} \\cdot \\textup{NumGlassBottles}",
            "related_variables": [
                "NumGlassBottles",
                "NumPlasticBottles"
            ],
            "related_parameters": [
                "RatioPlasticToGlass"
            ],
            "code": "# Add constraint: Number of plastic bottles must be at least RatioPlasticToGlass times the number of glass bottles\nmodel.addConstr(NumPlasticBottles >= RatioPlasticToGlass * NumGlassBottles, \"plastic_to_glass_ratio\")"
        },
        {
            "description": "Ensure the production of at least the minimum number of glass bottles",
            "status": "coded",
            "formulation": "\\textup{NumGlassBottles} \\geq \\textup{MinGlassBottles}",
            "related_variables": [
                "NumGlassBottles"
            ],
            "related_parameters": [
                "MinGlassBottles"
            ],
            "code": "# Ensure the production of at least the minimum number of glass bottles\nmodel.addConstr(NumGlassBottles >= MinGlassBottles, \"min_glass_bottles\")"
        },
        {
            "description": "Ensure that the volume of water used does not exceed the total available water volume",
            "status": "coded",
            "formulation": "\\textup{VolumeGlass} \\times \\textup{NumGlassBottles} + \\textup{VolumePlastic} \\times \\textup{NumPlasticBottles} \\leq \\textup{TotalWaterVolume}",
            "related_variables": [
                "NumGlassBottles",
                "NumPlasticBottles"
            ],
            "related_parameters": [
                "VolumeGlass",
                "VolumePlastic",
                "TotalWaterVolume"
            ],
            "code": "# Ensure the volume of water used does not exceed the total available water volume\nmodel.addConstr(VolumeGlass * NumGlassBottles + VolumePlastic * NumPlasticBottles <= TotalWaterVolume, name=\"water_volume_constraint\")"
        },
        {
            "description": "Maintain the minimum required production of glass bottles",
            "status": "coded",
            "formulation": "\\textup{NumGlassBottles} \\geq \\textup{MinGlassBottles}",
            "related_variables": [
                "NumGlassBottles"
            ],
            "related_parameters": [
                "MinGlassBottles"
            ],
            "code": "# Ensure minimum required production of glass bottles\nmodel.addConstr(NumGlassBottles >= MinGlassBottles, name=\"min_glass_bottles\")"
        },
        {
            "description": "Maintain the minimum ratio of the number of plastic bottles to the number of glass bottles",
            "status": "coded",
            "formulation": "\\textup{NumPlasticBottles} \\geq \\textup{RatioPlasticToGlass} \\times \\textup{NumGlassBottles}",
            "related_variables": [
                "NumGlassBottles",
                "NumPlasticBottles"
            ],
            "related_parameters": [
                "RatioPlasticToGlass"
            ],
            "code": "# Maintain the minimum ratio constraint of plastic bottles to glass bottles\nmodel.addConstr(NumPlasticBottles >= RatioPlasticToGlass * NumGlassBottles, \"min_ratio_plastic_to_glass\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of glass bottles produced",
            "symbol": "NumGlassBottles",
            "shape": [],
            "status": "coded",
            "code": "NumGlassBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumGlassBottles\")"
        },
        {
            "definition": "The number of plastic bottles produced",
            "symbol": "NumPlasticBottles",
            "shape": [],
            "status": "coded",
            "code": "NumPlasticBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumPlasticBottles\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total number of bottles produced",
            "status": "coded",
            "formulation": "\\textup{Maximize} \\quad \\textup{NumGlassBottles} + \\textup{NumPlasticBottles}",
            "related_variables": [
                "NumGlassBottles",
                "NumPlasticBottles"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(NumGlassBottles + NumPlasticBottles, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 363.0,
    "log_path": "logs/log_20250414050534_nl4opt_prob_88/",
    "problem_path": "data/nl4opt/prob_88/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_88/data.json\", \"r\") as f:\n    data = json.load(f)\n\nVolumeGlass = data[\"VolumeGlass\"] # scalar parameter\nVolumePlastic = data[\"VolumePlastic\"] # scalar parameter\nRatioPlasticToGlass = data[\"RatioPlasticToGlass\"] # scalar parameter\nMinGlassBottles = data[\"MinGlassBottles\"] # scalar parameter\nTotalWaterVolume = data[\"TotalWaterVolume\"] # scalar parameter\nNumGlassBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumGlassBottles\")\nNumPlasticBottles = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumPlasticBottles\")\n\n# Add non-negativity constraint for glass bottles\nmodel.addConstr(NumGlassBottles >= 0, name=\"non_negativity_glass_bottles\")\n\n# Add constraint to ensure the number of plastic bottles produced is non-negative\nmodel.addConstr(NumPlasticBottles >= 0, name=\"non_negativity_NumPlasticBottles\")\n\n# Add constraint for the total volume of water in bottles not to exceed available water volume\nmodel.addConstr(VolumeGlass * NumGlassBottles + VolumePlastic * NumPlasticBottles <= TotalWaterVolume, \"total_water_volume_constraint\")\n\n# Add constraint: Number of plastic bottles must be at least RatioPlasticToGlass times the number of glass bottles\nmodel.addConstr(NumPlasticBottles >= RatioPlasticToGlass * NumGlassBottles, \"plastic_to_glass_ratio\")\n\n# Ensure the production of at least the minimum number of glass bottles\nmodel.addConstr(NumGlassBottles >= MinGlassBottles, \"min_glass_bottles\")\n\n# Ensure the volume of water used does not exceed the total available water volume\nmodel.addConstr(VolumeGlass * NumGlassBottles + VolumePlastic * NumPlasticBottles <= TotalWaterVolume, name=\"water_volume_constraint\")\n\n# Ensure minimum required production of glass bottles\nmodel.addConstr(NumGlassBottles >= MinGlassBottles, name=\"min_glass_bottles\")\n\n# Maintain the minimum ratio constraint of plastic bottles to glass bottles\nmodel.addConstr(NumPlasticBottles >= RatioPlasticToGlass * NumGlassBottles, \"min_ratio_plastic_to_glass\")\n\n# Set objective\nmodel.setObjective(NumGlassBottles + NumPlasticBottles, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}