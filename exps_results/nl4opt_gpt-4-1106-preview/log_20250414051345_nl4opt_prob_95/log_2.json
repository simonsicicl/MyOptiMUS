{
    "background": "A mining company has a fixed amount of mining sites and must decide on the proportion of land to allocate to two different mining techniques, considering production capacity, waste generation, and machine availability.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total area of mining sites",
            "symbol": "A",
            "value": 100,
            "shape": [],
            "code": "A = data[\"A\"] # scalar parameter"
        },
        {
            "definition": "Daily production of rare earth oxide per square mile using heap leaching technique",
            "symbol": "HeapProduction",
            "value": 3,
            "shape": [],
            "code": "HeapProduction = data[\"HeapProduction\"] # scalar parameter"
        },
        {
            "definition": "Daily production of polluted wastewater per square mile using heap leaching technique",
            "symbol": "HeapWaste",
            "value": 8,
            "shape": [],
            "code": "HeapWaste = data[\"HeapWaste\"] # scalar parameter"
        },
        {
            "definition": "Number of extraction machines required per square mile using heap leaching technique",
            "symbol": "HeapMachines",
            "value": 10,
            "shape": [],
            "code": "HeapMachines = data[\"HeapMachines\"] # scalar parameter"
        },
        {
            "definition": "Daily production of rare earth oxide per square mile using vat leaching technique",
            "symbol": "VatProduction",
            "value": 5,
            "shape": [],
            "code": "VatProduction = data[\"VatProduction\"] # scalar parameter"
        },
        {
            "definition": "Daily production of polluted wastewater per square mile using vat leaching technique",
            "symbol": "VatWaste",
            "value": 17,
            "shape": [],
            "code": "VatWaste = data[\"VatWaste\"] # scalar parameter"
        },
        {
            "definition": "Number of extraction machines required per square mile using vat leaching technique",
            "symbol": "VatMachines",
            "value": 20,
            "shape": [],
            "code": "VatMachines = data[\"VatMachines\"] # scalar parameter"
        },
        {
            "definition": "Total number of extraction machines available",
            "symbol": "MachinesAvailable",
            "value": 100,
            "shape": [],
            "code": "MachinesAvailable = data[\"MachinesAvailable\"] # scalar parameter"
        },
        {
            "definition": "Maximum daily production of polluted wastewater allowed by environmental regulations",
            "symbol": "WasteLimit",
            "value": 90,
            "shape": [],
            "code": "WasteLimit = data[\"WasteLimit\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Total land used for heap leaching and vat leaching must not exceed A square miles",
            "status": "coded",
            "formulation": "\\textup{HeapLeachingLand} + \\textup{VatLeachingLand} \\leq \\textup{A}",
            "related_variables": [
                "HeapLeachingLand",
                "VatLeachingLand"
            ],
            "related_parameters": [
                "A"
            ],
            "code": "# Constrain the total land used for heap leaching and vat leaching to not exceed A square miles\nmodel.addConstr(HeapLeachingLand + VatLeachingLand <= A, name=\"land_usage_leaching_techniques\")"
        },
        {
            "description": "The total number of machines used for heap leaching and vat leaching must not exceed the number of machines available",
            "status": "coded",
            "formulation": "\\textup{HeapLeachingLand} \\times \\textup{HeapMachines} + \\textup{VatLeachingLand} \\times \\textup{VatMachines} \\leq \\textup{MachinesAvailable}",
            "related_variables": [
                "HeapLeachingLand",
                "VatLeachingLand"
            ],
            "related_parameters": [
                "HeapMachines",
                "VatMachines",
                "MachinesAvailable"
            ],
            "code": "# Constraint: Total number of machines used for heap leaching and vat leaching must not exceed the number of machines available\nmodel.addConstr(HeapLeachingLand * HeapMachines + VatLeachingLand * VatMachines <= MachinesAvailable, \"machines_usage_constraint\")"
        },
        {
            "description": "Total wastewater produced by both leaching techniques must not exceed WasteLimit tons daily",
            "status": "coded",
            "formulation": "\\textup{HeapWaste} \\cdot \\textup{HeapLeachingLand} + \\textup{VatWaste} \\cdot \\textup{VatLeachingLand} \\leq \\textup{WasteLimit}",
            "related_variables": [
                "HeapLeachingLand",
                "VatLeachingLand"
            ],
            "related_parameters": [
                "HeapWaste",
                "VatWaste",
                "WasteLimit"
            ],
            "code": "# Add wastewater production constraint\nwasteConstraint = HeapWaste * HeapLeachingLand + VatWaste * VatLeachingLand <= WasteLimit\nmodel.addConstr(wasteConstraint, name=\"daily_waste_limit\")"
        },
        {
            "description": "The area allocated to heap leaching is non-negative",
            "status": "coded",
            "formulation": "\\textup{HeapLeachingLand} \\geq 0",
            "related_variables": [
                "HeapLeachingLand"
            ],
            "related_parameters": [],
            "code": "# Constraint: The area allocated to heap leaching is non-negative\nmodel.addConstr(HeapLeachingLand >= 0, name=\"non_negative_heap_leaching_land\")"
        },
        {
            "description": "The area allocated to vat leaching is non-negative",
            "status": "coded",
            "formulation": "\\textup{VatLeachingLand} \\geq 0",
            "related_variables": [
                "VatLeachingLand"
            ],
            "related_parameters": [],
            "code": "# Ensure the area allocated to vat leaching is non-negative\nmodel.addConstr(VatLeachingLand >= 0, name=\"VatLeachingLand_non_negative\")"
        },
        {
            "description": "The total land allocated for both techniques should not exceed the total area of mining sites",
            "status": "coded",
            "formulation": "\\textup{HeapLeachingLand} + \\textup{VatLeachingLand} \\leq \\textup{A}",
            "related_variables": [
                "HeapLeachingLand",
                "VatLeachingLand"
            ],
            "related_parameters": [
                "A"
            ],
            "code": "# Ensure the total land allocated for both techniques does not exceed the total area of mining sites\nmodel.addConstr(HeapLeachingLand + VatLeachingLand <= A, name=\"total_land_constraint\")"
        },
        {
            "description": "The total machine usage for both techniques should not exceed the total number of machines available",
            "status": "coded",
            "formulation": "\\textup{HeapLeachingLand} \\cdot \\textup{HeapMachines} + \\textup{VatLeachingLand} \\cdot \\textup{VatMachines} \\leq \\textup{MachinesAvailable}",
            "related_variables": [
                "HeapLeachingLand",
                "VatLeachingLand"
            ],
            "related_parameters": [
                "HeapMachines",
                "VatMachines",
                "MachinesAvailable"
            ],
            "code": "# Add machine usage constraint\nmodel.addConstr(HeapLeachingLand * HeapMachines + VatLeachingLand * VatMachines <= MachinesAvailable, name=\"total_machine_usage\")"
        },
        {
            "description": "The total daily production of polluted wastewater should not exceed the limit set by environmental regulations",
            "status": "coded",
            "formulation": "\\textup{HeapLeachingLand} \\cdot \\textup{HeapWaste} + \\textup{VatLeachingLand} \\cdot \\textup{VatWaste} \\leq \\textup{WasteLimit}",
            "related_variables": [
                "HeapLeachingLand",
                "VatLeachingLand"
            ],
            "related_parameters": [
                "HeapWaste",
                "VatWaste",
                "WasteLimit"
            ],
            "code": "# Add environmental regulation constraint for daily production of polluted wastewater\nmodel.addConstr(HeapLeachingLand * HeapWaste + VatLeachingLand * VatWaste <= WasteLimit, name=\"env_regulations_waste_limit\")"
        }
    ],
    "variables": [
        {
            "definition": "Amount of land allocated for heap leaching technique",
            "symbol": "HeapLeachingLand",
            "shape": [],
            "status": "coded",
            "code": "HeapLeachingLand = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HeapLeachingLand\")"
        },
        {
            "definition": "Amount of land allocated for vat leaching technique",
            "symbol": "VatLeachingLand",
            "shape": [],
            "status": "coded",
            "code": "VatLeachingLand = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"VatLeachingLand\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the daily production of rare earth oxide",
            "status": "coded",
            "formulation": "\\max (\\textup{HeapLeachingLand} \\cdot \\textup{HeapProduction} + \\textup{VatLeachingLand} \\cdot \\textup{VatProduction})",
            "related_variables": [
                "HeapLeachingLand",
                "VatLeachingLand"
            ],
            "related_parameters": [
                "HeapProduction",
                "VatProduction"
            ],
            "code": "# Set objective\nmodel.setObjective(HeapLeachingLand * HeapProduction + VatLeachingLand * VatProduction, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 30.0,
    "log_path": "logs/log_20250414051345_nl4opt_prob_95/",
    "problem_path": "data/nl4opt/prob_95/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_95/data.json\", \"r\") as f:\n    data = json.load(f)\n\nA = data[\"A\"] # scalar parameter\nHeapProduction = data[\"HeapProduction\"] # scalar parameter\nHeapWaste = data[\"HeapWaste\"] # scalar parameter\nHeapMachines = data[\"HeapMachines\"] # scalar parameter\nVatProduction = data[\"VatProduction\"] # scalar parameter\nVatWaste = data[\"VatWaste\"] # scalar parameter\nVatMachines = data[\"VatMachines\"] # scalar parameter\nMachinesAvailable = data[\"MachinesAvailable\"] # scalar parameter\nWasteLimit = data[\"WasteLimit\"] # scalar parameter\nHeapLeachingLand = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HeapLeachingLand\")\nVatLeachingLand = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"VatLeachingLand\")\n\n# Constrain the total land used for heap leaching and vat leaching to not exceed A square miles\nmodel.addConstr(HeapLeachingLand + VatLeachingLand <= A, name=\"land_usage_leaching_techniques\")\n\n# Constraint: Total number of machines used for heap leaching and vat leaching must not exceed the number of machines available\nmodel.addConstr(HeapLeachingLand * HeapMachines + VatLeachingLand * VatMachines <= MachinesAvailable, \"machines_usage_constraint\")\n\n# Add wastewater production constraint\nwasteConstraint = HeapWaste * HeapLeachingLand + VatWaste * VatLeachingLand <= WasteLimit\nmodel.addConstr(wasteConstraint, name=\"daily_waste_limit\")\n\n# Constraint: The area allocated to heap leaching is non-negative\nmodel.addConstr(HeapLeachingLand >= 0, name=\"non_negative_heap_leaching_land\")\n\n# Ensure the area allocated to vat leaching is non-negative\nmodel.addConstr(VatLeachingLand >= 0, name=\"VatLeachingLand_non_negative\")\n\n# Ensure the total land allocated for both techniques does not exceed the total area of mining sites\nmodel.addConstr(HeapLeachingLand + VatLeachingLand <= A, name=\"total_land_constraint\")\n\n# Add machine usage constraint\nmodel.addConstr(HeapLeachingLand * HeapMachines + VatLeachingLand * VatMachines <= MachinesAvailable, name=\"total_machine_usage\")\n\n# Add environmental regulation constraint for daily production of polluted wastewater\nmodel.addConstr(HeapLeachingLand * HeapWaste + VatLeachingLand * VatWaste <= WasteLimit, name=\"env_regulations_waste_limit\")\n\n# Set objective\nmodel.setObjective(HeapLeachingLand * HeapProduction + VatLeachingLand * VatProduction, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}