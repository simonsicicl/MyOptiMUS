{
    "background": "A neighbourhood pizza restaurant sells large and medium pizzas, each requiring different amounts of dough, toppings, and baking time.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of dough required for a large pizza",
            "symbol": "DoughLarge",
            "value": 12,
            "shape": [],
            "code": "DoughLarge = data[\"DoughLarge\"] # scalar parameter"
        },
        {
            "definition": "Units of toppings required for a large pizza",
            "symbol": "ToppingsLarge",
            "value": 5,
            "shape": [],
            "code": "ToppingsLarge = data[\"ToppingsLarge\"] # scalar parameter"
        },
        {
            "definition": "Baking time for a large pizza",
            "symbol": "TimeLarge",
            "value": 12,
            "shape": [],
            "code": "TimeLarge = data[\"TimeLarge\"] # scalar parameter"
        },
        {
            "definition": "Units of dough required for a medium pizza",
            "symbol": "DoughMedium",
            "value": 8,
            "shape": [],
            "code": "DoughMedium = data[\"DoughMedium\"] # scalar parameter"
        },
        {
            "definition": "Units of toppings required for a medium pizza",
            "symbol": "ToppingsMedium",
            "value": 4,
            "shape": [],
            "code": "ToppingsMedium = data[\"ToppingsMedium\"] # scalar parameter"
        },
        {
            "definition": "Baking time for a medium pizza",
            "symbol": "TimeMedium",
            "value": 8,
            "shape": [],
            "code": "TimeMedium = data[\"TimeMedium\"] # scalar parameter"
        },
        {
            "definition": "Minimum units of dough the restaurant must use",
            "symbol": "MinDough",
            "value": 10000,
            "shape": [],
            "code": "MinDough = data[\"MinDough\"] # scalar parameter"
        },
        {
            "definition": "Minimum units of toppings the restaurant must use",
            "symbol": "MinToppings",
            "value": 4400,
            "shape": [],
            "code": "MinToppings = data[\"MinToppings\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of medium pizzas that must be made",
            "symbol": "MinMedium",
            "value": 200,
            "shape": [],
            "code": "MinMedium = data[\"MinMedium\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of large pizzas made should be non-negative",
            "status": "formulated",
            "formulation": "\\textup{LargePizzas} \\geq 0",
            "related_variables": [
                "LargePizzas"
            ],
            "related_parameters": []
        },
        {
            "description": "The number of medium pizzas must be non-negative",
            "status": "formulated",
            "formulation": "MediumPizzas \\geq 0",
            "related_variables": [
                "MediumPizzas"
            ],
            "related_parameters": []
        },
        {
            "description": "At least MinDough units of dough must be used",
            "status": "formulated",
            "formulation": "\\textup{DoughLarge} \\times \\textup{LargePizzas} + \\textup{DoughMedium} \\times \\textup{MediumPizzas} \\geq \\textup{MinDough}",
            "related_variables": [
                "LargePizzas",
                "MediumPizzas"
            ],
            "related_parameters": [
                "DoughLarge",
                "DoughMedium",
                "MinDough"
            ]
        },
        {
            "description": "At least MinToppings units of toppings must be used",
            "status": "formulated",
            "formulation": "\\textup{ToppingsLarge} \\cdot \\textup{LargePizzas} + \\textup{ToppingsMedium} \\cdot \\textup{MediumPizzas} \\geq \\textup{MinToppings}",
            "related_variables": [
                "LargePizzas",
                "MediumPizzas"
            ],
            "related_parameters": [
                "ToppingsLarge",
                "ToppingsMedium",
                "MinToppings"
            ]
        },
        {
            "description": "At least MinMedium medium pizzas must be made",
            "status": "formulated",
            "formulation": "\\textup{MediumPizzas} \\geq \\textup{MinMedium}",
            "related_variables": [
                "MediumPizzas"
            ],
            "related_parameters": [
                "MinMedium"
            ]
        },
        {
            "description": "The number of large pizzas made must be at least twice the number of medium pizzas",
            "status": "formulated",
            "formulation": "\\textup{LargePizzas} \\geq 2 \\times \\textup{MediumPizzas}",
            "related_variables": [
                "LargePizzas",
                "MediumPizzas"
            ],
            "related_parameters": []
        }
    ],
    "variables": [
        {
            "definition": "Number of large pizzas to be made",
            "symbol": "LargePizzas",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of medium pizzas to be made",
            "symbol": "MediumPizzas",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Total baking time for all pizzas",
            "symbol": "TotalBakingTime",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total baking time for all pizzas",
            "status": "formulated",
            "formulation": "\\textup{Minimize} \\quad \\textup{TotalBakingTime}",
            "related_variables": [
                "LargePizzas",
                "MediumPizzas"
            ],
            "related_parameters": [
                "TimeLarge",
                "TimeMedium"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413165602_nl4opt_prob_238/",
    "problem_path": "data/nl4opt/prob_238/"
}