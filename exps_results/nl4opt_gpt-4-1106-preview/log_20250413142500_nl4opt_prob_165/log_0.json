{
    "background": "A meal service company plans deliveries using electric bikes and scooters. Each type of vehicle has a capacity for meals and requires a certain amount of charge.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Capacity of a bike in number of meals",
            "symbol": "BikeCapacity",
            "value": 8,
            "shape": [],
            "code": "BikeCapacity = data[\"BikeCapacity\"] # scalar parameter"
        },
        {
            "definition": "Units of charge required by a bike",
            "symbol": "BikeCharge",
            "value": 3,
            "shape": [],
            "code": "BikeCharge = data[\"BikeCharge\"] # scalar parameter"
        },
        {
            "definition": "Capacity of a scooter in number of meals",
            "symbol": "ScooterCapacity",
            "value": 5,
            "shape": [],
            "code": "ScooterCapacity = data[\"ScooterCapacity\"] # scalar parameter"
        },
        {
            "definition": "Units of charge required by a scooter",
            "symbol": "ScooterCharge",
            "value": 2,
            "shape": [],
            "code": "ScooterCharge = data[\"ScooterCharge\"] # scalar parameter"
        },
        {
            "definition": "Maximum proportion of electric vehicles that can be bikes",
            "symbol": "MaxBikeRatio",
            "value": 0.3,
            "shape": [],
            "code": "MaxBikeRatio = data[\"MaxBikeRatio\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of scooters that must be used",
            "symbol": "MinScooters",
            "value": 20,
            "shape": [],
            "code": "MinScooters = data[\"MinScooters\"] # scalar parameter"
        },
        {
            "definition": "Total units of charge available",
            "symbol": "TotalCharge",
            "value": 200,
            "shape": [],
            "code": "TotalCharge = data[\"TotalCharge\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of bikes must be non-negative",
            "status": "formulated",
            "formulation": "\\textup{NumberOfBikes} \\geq 0",
            "related_variables": [
                "NumberOfBikes"
            ],
            "related_parameters": []
        },
        {
            "description": "The number of scooters used for deliveries must be non-negative",
            "status": "formulated",
            "formulation": "\\textup{NumberOfScooters} \\geq 0",
            "related_variables": [
                "NumberOfScooters"
            ],
            "related_parameters": []
        },
        {
            "description": "Each bike must carry a non-negative number of meals and cannot exceed its capacity",
            "status": "formulated",
            "formulation": "\\textup{MealsPerBike} \\geq 0 \\quad \\textup{and} \\quad \\textup{MealsPerBike} \\leq \\textup{BikeCapacity}",
            "related_variables": [
                "MealsPerBike"
            ],
            "related_parameters": [
                "BikeCapacity"
            ]
        },
        {
            "description": "Each scooter can carry a non-negative number of meals, up to its capacity.",
            "status": "formulated",
            "formulation": "0 \\leq \\textup{MealsPerScooter} \\leq \\textup{ScooterCapacity}",
            "related_variables": [
                "MealsPerScooter"
            ],
            "related_parameters": [
                "ScooterCapacity"
            ]
        },
        {
            "description": "The total charge used by bikes and scooters cannot exceed the total available charge",
            "status": "formulated",
            "formulation": "\\textup{NumberOfBikes} \\cdot \\textup{BikeCharge} + \\textup{NumberOfScooters} \\cdot \\textup{ScooterCharge} \\leq \\textup{TotalCharge}",
            "related_variables": [
                "NumberOfBikes",
                "NumberOfScooters"
            ],
            "related_parameters": [
                "BikeCharge",
                "ScooterCharge",
                "TotalCharge"
            ]
        },
        {
            "description": "At most MaxBikeRatio of the electric vehicles can be bikes",
            "status": "formulated",
            "formulation": "\\textup{NumberOfBikes} \\leq \\textup{MaxBikeRatio} \\cdot (\\textup{NumberOfBikes} + \\textup{NumberOfScooters})",
            "related_variables": [
                "NumberOfBikes",
                "NumberOfScooters"
            ],
            "related_parameters": [
                "MaxBikeRatio"
            ]
        },
        {
            "description": "At least MinScooters must be used for the deliveries",
            "status": "formulated",
            "formulation": "\\textup{NumberOfScooters} \\geq \\textup{MinScooters}",
            "related_variables": [
                "NumberOfScooters"
            ],
            "related_parameters": [
                "MinScooters"
            ]
        },
        {
            "description": "The number of meals carried by a bike must not exceed the bike's capacity",
            "status": "formulated",
            "formulation": "\\textup{MealsPerBike} \\leq \\textup{BikeCapacity}",
            "related_variables": [
                "MealsPerBike"
            ],
            "related_parameters": [
                "BikeCapacity"
            ]
        },
        {
            "description": "The number of meals carried by a scooter must not exceed the scooter's capacity",
            "status": "formulated",
            "formulation": "\\textup{MealsPerScooter} \\leq \\textup{ScooterCapacity}",
            "related_variables": [
                "MealsPerScooter"
            ],
            "related_parameters": [
                "ScooterCapacity"
            ]
        },
        {
            "description": "The total charge used by all bikes and scooters must not exceed the total available charge",
            "status": "formulated",
            "formulation": "\\textup{NumberOfBikes} \\times \\textup{BikeCharge} + \\textup{NumberOfScooters} \\times \\textup{ScooterCharge} \\leq \\textup{TotalCharge}",
            "related_variables": [
                "NumberOfBikes",
                "NumberOfScooters"
            ],
            "related_parameters": [
                "BikeCharge",
                "ScooterCharge",
                "TotalCharge"
            ]
        },
        {
            "description": "The proportion of bikes must not exceed the maximum bike ratio",
            "status": "formulated",
            "formulation": "\\textup{NumberOfBikes} \\leq (\\textup{NumberOfBikes} + \\textup{NumberOfScooters}) \\times \\textup{MaxBikeRatio}",
            "related_variables": [
                "NumberOfBikes",
                "NumberOfScooters"
            ],
            "related_parameters": [
                "MaxBikeRatio"
            ]
        },
        {
            "description": "The number of scooters must be at least the minimum number of scooters required",
            "status": "formulated",
            "formulation": "\\textup{NumberOfScooters} \\geq \\textup{MinScooters}",
            "related_variables": [
                "NumberOfScooters"
            ],
            "related_parameters": [
                "MinScooters"
            ]
        }
    ],
    "variables": [
        {
            "definition": "The number of bikes used for deliveries",
            "symbol": "NumberOfBikes",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The number of scooters used for deliveries",
            "symbol": "NumberOfScooters",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The number of meals carried by a bike",
            "symbol": "MealsPerBike",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "The number of meals carried by a scooter",
            "symbol": "MealsPerScooter",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total number of meals delivered by the company using bikes and scooters",
            "status": "formulated",
            "formulation": "\\textup{Maximize} \\quad \\textup{NumberOfBikes} \\times \\textup{MealsPerBike} + \\textup{NumberOfScooters} \\times \\textup{MealsPerScooter}",
            "related_variables": [
                "NumberOfBikes",
                "NumberOfScooters",
                "MealsPerBike",
                "MealsPerScooter"
            ],
            "related_parameters": []
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413142500_nl4opt_prob_165/",
    "problem_path": "data/nl4opt/prob_165/"
}