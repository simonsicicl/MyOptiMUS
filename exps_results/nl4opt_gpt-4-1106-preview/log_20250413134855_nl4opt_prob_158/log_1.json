{
    "background": "A school is organizing a field trip and requires buses of two sizes to transport students, with constraints on minimum students transported and parking limitations for the larger buses.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Capacity of a small bus",
            "symbol": "SmallBusCapacity",
            "value": 20,
            "shape": [],
            "code": "SmallBusCapacity = data[\"SmallBusCapacity\"] # scalar parameter"
        },
        {
            "definition": "Capacity of a large bus",
            "symbol": "LargeBusCapacity",
            "value": 50,
            "shape": [],
            "code": "LargeBusCapacity = data[\"LargeBusCapacity\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of students to be transported",
            "symbol": "MinStudents",
            "value": 500,
            "shape": [],
            "code": "MinStudents = data[\"MinStudents\"] # scalar parameter"
        },
        {
            "definition": "Maximum proportion of large buses",
            "symbol": "MaxLargeBusProportion",
            "value": 0.2,
            "shape": [],
            "code": "MaxLargeBusProportion = data[\"MaxLargeBusProportion\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of small buses must be non-negative",
            "status": "coded",
            "formulation": "\\textup{SmallBuses} \\geq 0",
            "related_variables": [
                "SmallBuses"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for the SmallBuses variable\nmodel.addConstr(SmallBuses >= 0, name=\"non_negativity_small_buses\")"
        },
        {
            "description": "The number of large buses must be non-negative",
            "status": "coded",
            "formulation": "\\textup{LargeBuses} \\geq 0",
            "related_variables": [
                "LargeBuses"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for the number of large buses\nmodel.addConstr(LargeBuses >= 0, name=\"non_negativity_large_buses\")"
        },
        {
            "description": "The total number of students transported by small and large buses must be at least MinStudents",
            "status": "coded",
            "formulation": "\\textup{SmallBuses} \\cdot \\textup{SmallBusCapacity} + \\textup{LargeBuses} \\cdot \\textup{LargeBusCapacity} \\geq \\textup{MinStudents}",
            "related_variables": [
                "SmallBuses",
                "LargeBuses"
            ],
            "related_parameters": [
                "SmallBusCapacity",
                "LargeBusCapacity",
                "MinStudents"
            ],
            "code": "# Add constraint to ensure the minimum number of students transported\nmodel.addConstr(SmallBuses * SmallBusCapacity + LargeBuses * LargeBusCapacity >= MinStudents, \n                name=\"MinStudentsConstraint\")"
        },
        {
            "description": "The number of large buses cannot exceed a certain proportion of the total number of buses",
            "status": "coded",
            "formulation": "\\textup{LargeBuses} \\leq \\textup{MaxLargeBusProportion} \\times (\\textup{SmallBuses} + \\textup{LargeBuses})",
            "related_variables": [
                "SmallBuses",
                "LargeBuses"
            ],
            "related_parameters": [
                "MaxLargeBusProportion"
            ],
            "code": "# Large buses constraint: The number of large buses cannot exceed a certain proportion of the total number of buses\nmodel.addConstr(LargeBuses <= MaxLargeBusProportion * (SmallBuses + LargeBuses), name=\"large_buses_proportion\")"
        },
        {
            "description": "Ensure that the minimum number of students are transported",
            "status": "coded",
            "formulation": "\\textup{SmallBuses} \\cdot \\textup{SmallBusCapacity} + \\textup{LargeBuses} \\cdot \\textup{LargeBusCapacity} \\geq \\textup{MinStudents}",
            "related_variables": [
                "SmallBuses",
                "LargeBuses"
            ],
            "related_parameters": [
                "SmallBusCapacity",
                "LargeBusCapacity",
                "MinStudents"
            ],
            "code": "# Ensure that the minimum number of students are transported\nmodel.addConstr(SmallBuses * SmallBusCapacity + LargeBuses * LargeBusCapacity >= MinStudents, name=\"min_students_transported\")"
        },
        {
            "description": "Ensure that the number of large buses does not exceed the specified maximum proportion",
            "status": "coded",
            "formulation": "\\textup{LargeBuses} \\leq \\textup{MaxLargeBusProportion} \\cdot (\\textup{SmallBuses} + \\textup{LargeBuses})",
            "related_variables": [
                "SmallBuses",
                "LargeBuses"
            ],
            "related_parameters": [
                "MaxLargeBusProportion"
            ],
            "code": "# Ensure that the number of large buses does not exceed the specified maximum proportion\nmodel.addConstr(LargeBuses <= MaxLargeBusProportion * (SmallBuses + LargeBuses), name=\"max_large_buses_proportion\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of small buses used for the field trip",
            "symbol": "SmallBuses",
            "shape": [],
            "status": "coded",
            "code": "SmallBuses = model.addVar(vtype=gp.GRB.INTEGER, name=\"SmallBuses\")"
        },
        {
            "definition": "The number of large buses used for the field trip",
            "symbol": "LargeBuses",
            "shape": [],
            "status": "coded",
            "code": "LargeBuses = model.addVar(vtype=gp.GRB.INTEGER, name=\"LargeBuses\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of buses needed for the field trip",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{SmallBuses} + \\textup{LargeBuses}",
            "related_variables": [
                "SmallBuses",
                "LargeBuses"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(SmallBuses + LargeBuses, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413134855_nl4opt_prob_158/",
    "problem_path": "data/nl4opt/prob_158/"
}