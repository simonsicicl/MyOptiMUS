{
    "background": "A car manufacturing company needs to provide a minimum-cost diet consisting of hamburgers and chicken wraps that meets the workers' nutritional requirements for calories, protein, and carbs.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Minimum required calories per worker",
            "symbol": "C",
            "value": 2200,
            "shape": [],
            "code": "C = data[\"C\"] # scalar parameter"
        },
        {
            "definition": "Minimum required protein in grams per worker",
            "symbol": "P",
            "value": 50,
            "shape": [],
            "code": "P = data[\"P\"] # scalar parameter"
        },
        {
            "definition": "Minimum required carbohydrates in grams per worker",
            "symbol": "Cr",
            "value": 70,
            "shape": [],
            "code": "Cr = data[\"Cr\"] # scalar parameter"
        },
        {
            "definition": "Cost of one hamburger",
            "symbol": "HamburgerCost",
            "value": 6.5,
            "shape": [],
            "code": "HamburgerCost = data[\"HamburgerCost\"] # scalar parameter"
        },
        {
            "definition": "Calories provided by one hamburger",
            "symbol": "HamburgerCalories",
            "value": 800,
            "shape": [],
            "code": "HamburgerCalories = data[\"HamburgerCalories\"] # scalar parameter"
        },
        {
            "definition": "Protein provided by one hamburger in grams",
            "symbol": "HamburgerProtein",
            "value": 19,
            "shape": [],
            "code": "HamburgerProtein = data[\"HamburgerProtein\"] # scalar parameter"
        },
        {
            "definition": "Carbohydrates provided by one hamburger in grams",
            "symbol": "HamburgerCarbs",
            "value": 20,
            "shape": [],
            "code": "HamburgerCarbs = data[\"HamburgerCarbs\"] # scalar parameter"
        },
        {
            "definition": "Cost of one chicken wrap",
            "symbol": "WrapCost",
            "value": 4,
            "shape": [],
            "code": "WrapCost = data[\"WrapCost\"] # scalar parameter"
        },
        {
            "definition": "Calories provided by one chicken wrap",
            "symbol": "WrapCalories",
            "value": 450,
            "shape": [],
            "code": "WrapCalories = data[\"WrapCalories\"] # scalar parameter"
        },
        {
            "definition": "Protein provided by one chicken wrap in grams",
            "symbol": "WrapProtein",
            "value": 12,
            "shape": [],
            "code": "WrapProtein = data[\"WrapProtein\"] # scalar parameter"
        },
        {
            "definition": "Carbohydrates provided by one chicken wrap in grams",
            "symbol": "WrapCarbs",
            "value": 10,
            "shape": [],
            "code": "WrapCarbs = data[\"WrapCarbs\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Total calories from hamburgers and chicken wraps must be at least C",
            "status": "formulated",
            "formulation": "NumHamburgers \\times \\textup{HamburgerCalories} + NumWraps \\times \\textup{WrapCalories} \\geq C",
            "related_variables": [
                "NumHamburgers",
                "NumWraps"
            ],
            "related_parameters": [
                "HamburgerCalories",
                "WrapCalories",
                "C"
            ]
        },
        {
            "description": "Total grams of protein provided by hamburgers and chicken wraps must be at least P",
            "status": "formulated",
            "formulation": "\\textup{HamburgerProtein} \\times \\textup{NumHamburgers} + \\textup{WrapProtein} \\times \\textup{NumWraps} \\geq \\textup{P}",
            "related_variables": [
                "NumHamburgers",
                "NumWraps"
            ],
            "related_parameters": [
                "HamburgerProtein",
                "WrapProtein",
                "P"
            ]
        },
        {
            "description": "Total grams of carbohydrates from hamburgers and chicken wraps must be at least the minimum required carbohydrates per worker",
            "status": "formulated",
            "formulation": "\\textup{NumHamburgers} \\times \\textup{HamburgerCarbs} + \\textup{NumWraps} \\times \\textup{WrapCarbs} \\geq \\textup{Cr}",
            "related_variables": [
                "NumHamburgers",
                "NumWraps"
            ],
            "related_parameters": [
                "HamburgerCarbs",
                "WrapCarbs",
                "Cr"
            ]
        },
        {
            "description": "The number of hamburgers consumed must be non-negative",
            "status": "formulated",
            "formulation": "\\textup{NumHamburgers} \\geq 0",
            "related_variables": [
                "NumHamburgers"
            ],
            "related_parameters": []
        },
        {
            "description": "Number of chicken wraps must be non-negative",
            "status": "formulated",
            "formulation": "\\textup{NumWraps} \\geq 0",
            "related_variables": [
                "NumWraps"
            ],
            "related_parameters": []
        },
        {
            "description": "Ensure that the total calories provided by hamburgers and wraps meet the minimum required calories",
            "status": "formulated",
            "formulation": "\\textup{NumHamburgers} \\times \\textup{HamburgerCalories} + \\textup{NumWraps} \\times \\textup{WrapCalories} \\geq \\textup{C}",
            "related_variables": [
                "NumHamburgers",
                "NumWraps"
            ],
            "related_parameters": [
                "HamburgerCalories",
                "WrapCalories",
                "C"
            ]
        },
        {
            "description": "Ensure that the total protein provided by hamburgers and wraps meet the minimum required protein",
            "status": "formulated",
            "formulation": "\\textup{NumHamburgers} \\times \\textup{HamburgerProtein} + \\textup{NumWraps} \\times \\textup{WrapProtein} \\geq \\textup{P}",
            "related_variables": [
                "NumHamburgers",
                "NumWraps"
            ],
            "related_parameters": [
                "HamburgerProtein",
                "WrapProtein",
                "P"
            ]
        },
        {
            "description": "Ensure that the total carbohydrates provided by hamburgers and wraps meet the minimum required carbohydrates",
            "status": "formulated",
            "formulation": "\\textup{NumHamburgers} \\times \\textup{HamburgerCarbs} + \\textup{NumWraps} \\times \\textup{WrapCarbs} \\geq \\textup{Cr}",
            "related_variables": [
                "NumHamburgers",
                "NumWraps"
            ],
            "related_parameters": [
                "HamburgerCarbs",
                "WrapCarbs",
                "Cr"
            ]
        }
    ],
    "variables": [
        {
            "definition": "Number of hamburgers consumed",
            "symbol": "NumHamburgers",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of chicken wraps consumed",
            "symbol": "NumWraps",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cost of providing hamburgers and chicken wraps to meet the dietary requirements",
            "status": "formulated",
            "formulation": "\\textup{TotalCost} = \\textup{NumHamburgers} \\times \\textup{HamburgerCost} + \\textup{NumWraps} \\times \\textup{WrapCost}",
            "related_variables": [
                "NumHamburgers",
                "NumWraps"
            ],
            "related_parameters": [
                "HamburgerCost",
                "WrapCost"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413154002_nl4opt_prob_199/",
    "problem_path": "data/nl4opt/prob_199/"
}