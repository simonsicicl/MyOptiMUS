{
    "background": "A man needs to meet his daily iron and calcium requirements by taking pills from two different supplements, A and B, which contain varying amounts of iron and calcium.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of iron in supplement A",
            "symbol": "IronA",
            "value": 5,
            "shape": [],
            "code": "IronA = data[\"IronA\"] # scalar parameter"
        },
        {
            "definition": "Units of calcium in supplement A",
            "symbol": "CalciumA",
            "value": 10,
            "shape": [],
            "code": "CalciumA = data[\"CalciumA\"] # scalar parameter"
        },
        {
            "definition": "Units of iron in supplement B",
            "symbol": "IronB",
            "value": 4,
            "shape": [],
            "code": "IronB = data[\"IronB\"] # scalar parameter"
        },
        {
            "definition": "Units of calcium in supplement B",
            "symbol": "CalciumB",
            "value": 15,
            "shape": [],
            "code": "CalciumB = data[\"CalciumB\"] # scalar parameter"
        },
        {
            "definition": "Minimum daily requirement of iron",
            "symbol": "IronReq",
            "value": 40,
            "shape": [],
            "code": "IronReq = data[\"IronReq\"] # scalar parameter"
        },
        {
            "definition": "Minimum daily requirement of calcium",
            "symbol": "CalciumReq",
            "value": 50,
            "shape": [],
            "code": "CalciumReq = data[\"CalciumReq\"] # scalar parameter"
        },
        {
            "definition": "Cost per pill of supplement A",
            "symbol": "CostA",
            "value": 2,
            "shape": [],
            "code": "CostA = data[\"CostA\"] # scalar parameter"
        },
        {
            "definition": "Cost per pill of supplement B",
            "symbol": "CostB",
            "value": 3,
            "shape": [],
            "code": "CostB = data[\"CostB\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of supplement A pills must be non-negative",
            "status": "coded",
            "formulation": "\\textup{PillsA} \\geq 0",
            "related_variables": [
                "PillsA"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for the number of pills of supplement A\nmodel.addConstr(PillsA >= 0, name=\"non_negativity_PillsA\")"
        },
        {
            "description": "The number of supplement B pills must be non-negative",
            "status": "coded",
            "formulation": "\\textup{PillsB} \\geq 0",
            "related_variables": [
                "PillsB"
            ],
            "related_parameters": [],
            "code": "model.addConstr(PillsB >= 0, name=\"non_negativity_pillsB\")"
        },
        {
            "description": "Total units of iron from pills must be at least the minimum daily requirement",
            "status": "coded",
            "formulation": "\\textup{IronA} \\cdot \\textup{PillsA} + \\textup{IronB} \\cdot \\textup{PillsB} \\geq \\textup{IronReq}",
            "related_variables": [
                "PillsA",
                "PillsB"
            ],
            "related_parameters": [
                "IronA",
                "IronB",
                "IronReq"
            ],
            "code": "# Add constraint for minimum daily requirement of iron from pills\nmodel.addConstr(IronA * PillsA + IronB * PillsB >= IronReq, name=\"min_daily_iron_requirement\")"
        },
        {
            "description": "Total units of calcium from pills must be at least the minimum daily requirement",
            "status": "coded",
            "formulation": "\\textup{CalciumA} \\cdot \\textup{PillsA} + \\textup{CalciumB} \\cdot \\textup{PillsB} \\geq \\textup{CalciumReq}",
            "related_variables": [
                "PillsA",
                "PillsB"
            ],
            "related_parameters": [
                "CalciumA",
                "CalciumB",
                "CalciumReq"
            ],
            "code": "# Total units of calcium from pills must be at least the minimum daily requirement\nmodel.addConstr(CalciumA * PillsA + CalciumB * PillsB >= CalciumReq, name=\"calcium_requirement\")"
        },
        {
            "description": "Ensure the minimum daily requirement of iron is met",
            "status": "coded",
            "formulation": "\\textup{IronA} \\cdot \\textup{PillsA} + \\textup{IronB} \\cdot \\textup{PillsB} \\geq \\textup{IronReq}",
            "related_variables": [
                "PillsA",
                "PillsB"
            ],
            "related_parameters": [
                "IronA",
                "IronB",
                "IronReq"
            ],
            "code": "# Ensure the minimum daily requirement of iron is met\nmodel.addConstr(IronA * PillsA + IronB * PillsB >= IronReq, name=\"min_iron_requirement\")"
        },
        {
            "description": "Ensure the minimum daily requirement of calcium is met",
            "status": "coded",
            "formulation": "\\textup{CalciumA} \\cdot \\textup{PillsA} + \\textup{CalciumB} \\cdot \\textup{PillsB} \\geq \\textup{CalciumReq}",
            "related_variables": [
                "PillsA",
                "PillsB"
            ],
            "related_parameters": [
                "CalciumA",
                "CalciumB",
                "CalciumReq"
            ],
            "code": "# Ensure the minimum daily requirement of calcium is met\nmodel.addConstr(CalciumA * PillsA + CalciumB * PillsB >= CalciumReq, \"min_calcium_requirement\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of pills of supplement A",
            "symbol": "PillsA",
            "shape": [],
            "status": "coded",
            "code": "PillsA = model.addVar(vtype=gp.GRB.INTEGER, name=\"PillsA\")"
        },
        {
            "definition": "Number of pills of supplement B",
            "symbol": "PillsB",
            "shape": [],
            "status": "coded",
            "code": "PillsB = model.addVar(vtype=gp.GRB.INTEGER, name=\"PillsB\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cost of purchasing pills of supplement A and B",
            "status": "coded",
            "formulation": "\\min (\\textup{CostA} \\cdot \\textup{PillsA} + \\textup{CostB} \\cdot \\textup{PillsB})",
            "related_variables": [
                "PillsA",
                "PillsB"
            ],
            "related_parameters": [
                "CostA",
                "CostB"
            ],
            "code": "# Define the objective function\nmodel.setObjective(CostA * PillsA + CostB * PillsB, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 16.0,
    "log_path": "logs/log_20250413160225_nl4opt_prob_212/",
    "problem_path": "data/nl4opt/prob_212/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_212/data.json\", \"r\") as f:\n    data = json.load(f)\n\nIronA = data[\"IronA\"] # scalar parameter\nCalciumA = data[\"CalciumA\"] # scalar parameter\nIronB = data[\"IronB\"] # scalar parameter\nCalciumB = data[\"CalciumB\"] # scalar parameter\nIronReq = data[\"IronReq\"] # scalar parameter\nCalciumReq = data[\"CalciumReq\"] # scalar parameter\nCostA = data[\"CostA\"] # scalar parameter\nCostB = data[\"CostB\"] # scalar parameter\nPillsA = model.addVar(vtype=gp.GRB.INTEGER, name=\"PillsA\")\nPillsB = model.addVar(vtype=gp.GRB.INTEGER, name=\"PillsB\")\n\n# Add non-negativity constraint for the number of pills of supplement A\nmodel.addConstr(PillsA >= 0, name=\"non_negativity_PillsA\")\n\nmodel.addConstr(PillsB >= 0, name=\"non_negativity_pillsB\")\n\n# Add constraint for minimum daily requirement of iron from pills\nmodel.addConstr(IronA * PillsA + IronB * PillsB >= IronReq, name=\"min_daily_iron_requirement\")\n\n# Total units of calcium from pills must be at least the minimum daily requirement\nmodel.addConstr(CalciumA * PillsA + CalciumB * PillsB >= CalciumReq, name=\"calcium_requirement\")\n\n# Ensure the minimum daily requirement of iron is met\nmodel.addConstr(IronA * PillsA + IronB * PillsB >= IronReq, name=\"min_iron_requirement\")\n\n# Ensure the minimum daily requirement of calcium is met\nmodel.addConstr(CalciumA * PillsA + CalciumB * PillsB >= CalciumReq, \"min_calcium_requirement\")\n\n# Define the objective function\nmodel.setObjective(CostA * PillsA + CostB * PillsB, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}