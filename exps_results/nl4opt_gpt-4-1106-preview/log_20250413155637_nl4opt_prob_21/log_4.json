{
    "background": "A bakery uses a stand-mixer and a slow bake oven to make bread and cookies.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Maximum operational hours per year for the stand-mixer and the oven",
            "symbol": "MaxHours",
            "value": 3000,
            "shape": [],
            "code": "MaxHours = data[\"MaxHours\"] # scalar parameter"
        },
        {
            "definition": "Hours taken in the stand mixer to make a loaf of bread",
            "symbol": "BreadMixerHours",
            "value": 1,
            "shape": [],
            "code": "BreadMixerHours = data[\"BreadMixerHours\"] # scalar parameter"
        },
        {
            "definition": "Hours taken in the oven to bake a loaf of bread",
            "symbol": "BreadOvenHours",
            "value": 3,
            "shape": [],
            "code": "BreadOvenHours = data[\"BreadOvenHours\"] # scalar parameter"
        },
        {
            "definition": "Hours taken in the stand mixer to make a batch of cookies",
            "symbol": "CookieMixerHours",
            "value": 0.5,
            "shape": [],
            "code": "CookieMixerHours = data[\"CookieMixerHours\"] # scalar parameter"
        },
        {
            "definition": "Hours taken in the oven to bake a batch of cookies",
            "symbol": "CookieOvenHours",
            "value": 1,
            "shape": [],
            "code": "CookieOvenHours = data[\"CookieOvenHours\"] # scalar parameter"
        },
        {
            "definition": "Profit per loaf of bread",
            "symbol": "ProfitBread",
            "value": 5,
            "shape": [],
            "code": "ProfitBread = data[\"ProfitBread\"] # scalar parameter"
        },
        {
            "definition": "Profit per batch of cookies",
            "symbol": "ProfitCookies",
            "value": 3,
            "shape": [],
            "code": "ProfitCookies = data[\"ProfitCookies\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Total mixer hours for bread and cookies cannot exceed MaxHours",
            "status": "coded",
            "formulation": "\\textup{LoavesBread} \\times \\textup{BreadMixerHours} + \\textup{BatchesCookies} \\times \\textup{CookieMixerHours} \\leq \\textup{MaxHours}",
            "related_variables": [
                "LoavesBread",
                "BatchesCookies"
            ],
            "related_parameters": [
                "BreadMixerHours",
                "CookieMixerHours",
                "MaxHours"
            ],
            "code": "# Total mixer hours constraint for bread and cookies not exceeding MaxHours\nmodel.addConstr(LoavesBread * BreadMixerHours + BatchesCookies * CookieMixerHours <= MaxHours, \"MixerHoursConstraint\")"
        },
        {
            "description": "Total oven hours for bread and cookies cannot exceed MaxHours",
            "status": "coded",
            "formulation": "\\textup{LoavesBread} \\cdot \\textup{BreadOvenHours} + \\textup{BatchesCookies} \\cdot \\textup{CookieOvenHours} \\leq \\textup{MaxHours}",
            "related_variables": [
                "LoavesBread",
                "BatchesCookies"
            ],
            "related_parameters": [
                "MaxHours",
                "BreadOvenHours",
                "CookieOvenHours"
            ],
            "code": "LoavesBread = model.addVar(vtype=gp.GRB.CONTINUOUS, name='LoavesBread')\nBatchesCookies = model.addVar(vtype=gp.GRB.INTEGER, name='BatchesCookies')"
        },
        {
            "description": "The number of loaves of bread produced must be non-negative",
            "status": "coded",
            "formulation": "\\textup{LoavesBread} \\geq 0",
            "related_variables": [
                "LoavesBread"
            ],
            "related_parameters": [],
            "code": "# The number of loaves of bread produced must be non-negative\nmodel.addConstr(LoavesBread >= 0, name=\"non_negative_loaves\")"
        },
        {
            "description": "The number of batches of cookies must be non-negative",
            "status": "coded",
            "formulation": "\\textup{BatchesCookies} \\geq 0",
            "related_variables": [
                "BatchesCookies"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for the number of batches of cookies\nmodel.addConstr(BatchesCookies >= 0, name=\"non_negativity_batches\")"
        },
        {
            "description": "The stand-mixer is used within available operational hours",
            "status": "coded",
            "formulation": "\\textup{BreadMixerHours} \\cdot \\textup{LoavesBread} + \\textup{CookieMixerHours} \\cdot \\textup{BatchesCookies} \\leq \\textup{MaxHours}",
            "related_variables": [
                "LoavesBread",
                "BatchesCookies"
            ],
            "related_parameters": [
                "BreadMixerHours",
                "CookieMixerHours",
                "MaxHours"
            ],
            "code": "# Mixer operational hours constraint\nmodel.addConstr(BreadMixerHours * LoavesBread + CookieMixerHours * BatchesCookies <= MaxHours, name=\"mixer_operational_hours\")"
        },
        {
            "description": "The oven is used within available operational hours",
            "status": "coded",
            "formulation": "\\textup{BreadOvenHours} \\cdot \\textup{LoavesBread} + \\textup{CookieOvenHours} \\cdot \\textup{BatchesCookies} \\leq \\textup{MaxHours}",
            "related_variables": [
                "LoavesBread",
                "BatchesCookies"
            ],
            "related_parameters": [
                "BreadOvenHours",
                "CookieOvenHours",
                "MaxHours"
            ],
            "code": "# Add constraint for the oven usage within available operational hours\nmodel.addConstr(BreadOvenHours * LoavesBread + CookieOvenHours * BatchesCookies <= MaxHours, name=\"OvenOperationalHours\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of loaves of bread produced",
            "symbol": "LoavesBread",
            "shape": [],
            "status": "coded",
            "code": "LoavesBread = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"LoavesBread\")"
        },
        {
            "definition": "Number of batches of cookies produced",
            "symbol": "BatchesCookies",
            "shape": [],
            "status": "coded",
            "code": "BatchesCookies = model.addVar(vtype=gp.GRB.INTEGER, name=\"BatchesCookies\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total profit from bread and cookies",
            "status": "coded",
            "formulation": "\\max (\\textup{ProfitBread} \\cdot \\textup{LoavesBread} + \\textup{ProfitCookies} \\cdot \\textup{BatchesCookies})",
            "related_variables": [
                "LoavesBread",
                "BatchesCookies"
            ],
            "related_parameters": [
                "ProfitBread",
                "ProfitCookies"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitBread * LoavesBread + ProfitCookies * BatchesCookies, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": "Traceback (most recent call last):\n  File \"c:\\Users\\Simon\\Desktop\\Courses\\ECE 570\\ECE570_Project\\MyOptiMUS\\evaluator.py\", line 45, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 1\n    ```\n    ^\nSyntaxError: invalid syntax\n",
    "obj_val": 9000.0,
    "log_path": "logs/log_20250413155637_nl4opt_prob_21/",
    "problem_path": "data/nl4opt/prob_21/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_21/data.json\", \"r\") as f:\n    data = json.load(f)\n",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_21/data.json\", \"r\") as f:\n    data = json.load(f)\n\nMaxHours = data[\"MaxHours\"] # scalar parameter\nBreadMixerHours = data[\"BreadMixerHours\"] # scalar parameter\nBreadOvenHours = data[\"BreadOvenHours\"] # scalar parameter\nCookieMixerHours = data[\"CookieMixerHours\"] # scalar parameter\nCookieOvenHours = data[\"CookieOvenHours\"] # scalar parameter\nProfitBread = data[\"ProfitBread\"] # scalar parameter\nProfitCookies = data[\"ProfitCookies\"] # scalar parameter\nLoavesBread = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"LoavesBread\")\nBatchesCookies = model.addVar(vtype=gp.GRB.INTEGER, name=\"BatchesCookies\")\n\n# Total mixer hours constraint for bread and cookies not exceeding MaxHours\nmodel.addConstr(LoavesBread * BreadMixerHours + BatchesCookies * CookieMixerHours <= MaxHours, \"MixerHoursConstraint\")\n\nLoavesBread = model.addVar(vtype=gp.GRB.CONTINUOUS, name='LoavesBread')\nBatchesCookies = model.addVar(vtype=gp.GRB.INTEGER, name='BatchesCookies')\n\n# The number of loaves of bread produced must be non-negative\nmodel.addConstr(LoavesBread >= 0, name=\"non_negative_loaves\")\n\n# Add non-negativity constraint for the number of batches of cookies\nmodel.addConstr(BatchesCookies >= 0, name=\"non_negativity_batches\")\n\n# Mixer operational hours constraint\nmodel.addConstr(BreadMixerHours * LoavesBread + CookieMixerHours * BatchesCookies <= MaxHours, name=\"mixer_operational_hours\")\n\n# Add constraint for the oven usage within available operational hours\nmodel.addConstr(BreadOvenHours * LoavesBread + CookieOvenHours * BatchesCookies <= MaxHours, name=\"OvenOperationalHours\")\n\n# Set objective\nmodel.setObjective(ProfitBread * LoavesBread + ProfitCookies * BatchesCookies, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}