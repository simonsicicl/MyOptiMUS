{
    "background": "A lawn mowing service uses small and large teams to mow lawns, with different numbers of employees and capacities for each team size.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of employees required for a small team",
            "symbol": "SmallTeamEmployees",
            "value": 3,
            "shape": [],
            "code": "SmallTeamEmployees = data[\"SmallTeamEmployees\"] # scalar parameter"
        },
        {
            "definition": "Lawn area mowed by a small team",
            "symbol": "SmallTeamArea",
            "value": 50,
            "shape": [],
            "code": "SmallTeamArea = data[\"SmallTeamArea\"] # scalar parameter"
        },
        {
            "definition": "Number of employees required for a large team",
            "symbol": "LargeTeamEmployees",
            "value": 5,
            "shape": [],
            "code": "LargeTeamEmployees = data[\"LargeTeamEmployees\"] # scalar parameter"
        },
        {
            "definition": "Lawn area mowed by a large team",
            "symbol": "LargeTeamArea",
            "value": 80,
            "shape": [],
            "code": "LargeTeamArea = data[\"LargeTeamArea\"] # scalar parameter"
        },
        {
            "definition": "Total number of employees available",
            "symbol": "TotalEmployees",
            "value": 150,
            "shape": [],
            "code": "TotalEmployees = data[\"TotalEmployees\"] # scalar parameter"
        },
        {
            "definition": "Minimum ratio of the number of small teams to large teams",
            "symbol": "MinRatioSmallToLarge",
            "value": 0.33,
            "shape": [],
            "code": "MinRatioSmallToLarge = data[\"MinRatioSmallToLarge\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of large teams",
            "symbol": "MinLargeTeams",
            "value": 6,
            "shape": [],
            "code": "MinLargeTeams = data[\"MinLargeTeams\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of small teams",
            "symbol": "MinSmallTeams",
            "value": 10,
            "shape": [],
            "code": "MinSmallTeams = data[\"MinSmallTeams\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The sum of the number of employees in small and large teams is less than or equal to the total number of employees available",
            "status": "coded",
            "formulation": "\\textup{SmallTeamEmployees} \\times \\textup{NumberOfSmallTeams} + \\textup{LargeTeamEmployees} \\times \\textup{NumberOfLargeTeams} \\leq \\textup{TotalEmployees}",
            "related_variables": [
                "NumberOfSmallTeams",
                "NumberOfLargeTeams"
            ],
            "related_parameters": [
                "SmallTeamEmployees",
                "LargeTeamEmployees",
                "TotalEmployees"
            ],
            "code": "# Add constraint for the sum of employees in small and large teams\nmodel.addConstr(SmallTeamEmployees * NumberOfSmallTeams + LargeTeamEmployees * NumberOfLargeTeams <= TotalEmployees, name=\"total_employees_constraint\")"
        },
        {
            "description": "The number of small teams employed by the lawn mowing service must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfSmallTeams} \\geq 0",
            "related_variables": [
                "NumberOfSmallTeams"
            ],
            "related_parameters": [],
            "code": "# Small teams employed constraint ensuring non-negativity\nmodel.addConstr(NumberOfSmallTeams >= 0, name=\"non_negativity_small_teams\")"
        },
        {
            "description": "The number of large teams employed by the lawn mowing service must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfLargeTeams} \\geq 0",
            "related_variables": [
                "NumberOfLargeTeams"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of large teams is non-negative\nmodel.addConstr(NumberOfLargeTeams >= 0, name=\"non_negative_large_teams\")"
        },
        {
            "description": "The number of small teams should be at least MinRatioSmallToLarge times the number of large teams",
            "status": "coded",
            "formulation": "\\textup{NumberOfSmallTeams} \\geq \\textup{MinRatioSmallToLarge} \\times \\textup{NumberOfLargeTeams}",
            "related_variables": [
                "NumberOfSmallTeams",
                "NumberOfLargeTeams"
            ],
            "related_parameters": [
                "MinRatioSmallToLarge"
            ],
            "code": "# Constraint for minimum ratio of small to large teams\nmodel.addConstr(NumberOfSmallTeams >= MinRatioSmallToLarge * NumberOfLargeTeams, name=\"min_ratio_small_large_teams\")"
        },
        {
            "description": "There should be at least MinLargeTeams large teams employed",
            "status": "coded",
            "formulation": "\\textup{NumberOfLargeTeams} \\geq \\textup{MinLargeTeams}",
            "related_variables": [
                "NumberOfLargeTeams"
            ],
            "related_parameters": [
                "MinLargeTeams"
            ],
            "code": "# Add constraint for minimum number of large teams\nmodel.addConstr(NumberOfLargeTeams >= MinLargeTeams, name=\"min_large_teams\")"
        },
        {
            "description": "There should be at least MinSmallTeams small teams employed",
            "status": "coded",
            "formulation": "\\textup{NumberOfSmallTeams} \\geq \\textup{MinSmallTeams}",
            "related_variables": [
                "NumberOfSmallTeams"
            ],
            "related_parameters": [
                "MinSmallTeams"
            ],
            "code": "# Ensure the minimum number of small teams employed constraint\nmodel.addConstr(NumberOfSmallTeams >= MinSmallTeams, name=\"min_small_teams\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of small teams employed by the lawn mowing service",
            "symbol": "NumberOfSmallTeams",
            "shape": [],
            "status": "coded",
            "code": "NumberOfSmallTeams = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfSmallTeams\")"
        },
        {
            "definition": "Number of large teams employed by the lawn mowing service",
            "symbol": "NumberOfLargeTeams",
            "shape": [],
            "status": "coded",
            "code": "NumberOfLargeTeams = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfLargeTeams\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total area of lawn mowed by all small and large teams",
            "status": "coded",
            "formulation": "\\max (\\textup{NumberOfSmallTeams} \\times \\textup{SmallTeamArea} + \\textup{NumberOfLargeTeams} \\times \\textup{LargeTeamArea})",
            "related_variables": [
                "NumberOfSmallTeams",
                "NumberOfLargeTeams"
            ],
            "related_parameters": [
                "SmallTeamArea",
                "LargeTeamArea"
            ],
            "code": "# Set objective function\nmodel.setObjective(NumberOfSmallTeams * SmallTeamArea + NumberOfLargeTeams * LargeTeamArea, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413134452_nl4opt_prob_154/",
    "problem_path": "data/nl4opt/prob_154/"
}