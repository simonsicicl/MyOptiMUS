{
    "background": "A dentist must optimize the number of molars and canines to fill with a limited supply of resin and a goal to minimize the use of pain killer, while adhering to specific requirements for molars and canines.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total units of resin available",
            "symbol": "TotalResin",
            "value": 3000,
            "shape": [],
            "code": "TotalResin = data[\"TotalResin\"] # scalar parameter"
        },
        {
            "definition": "Units of resin required per molar",
            "symbol": "ResinMolar",
            "value": 20,
            "shape": [],
            "code": "ResinMolar = data[\"ResinMolar\"] # scalar parameter"
        },
        {
            "definition": "Units of resin required per canine",
            "symbol": "ResinCanine",
            "value": 15,
            "shape": [],
            "code": "ResinCanine = data[\"ResinCanine\"] # scalar parameter"
        },
        {
            "definition": "Units of pain killer required per molar",
            "symbol": "PainKillerMolar",
            "value": 3,
            "shape": [],
            "code": "PainKillerMolar = data[\"PainKillerMolar\"] # scalar parameter"
        },
        {
            "definition": "Units of pain killer required per canine",
            "symbol": "PainKillerCanine",
            "value": 2.3,
            "shape": [],
            "code": "PainKillerCanine = data[\"PainKillerCanine\"] # scalar parameter"
        },
        {
            "definition": "Minimum percentage of cavities to be filled in canines",
            "symbol": "MinCaninePercentage",
            "value": 0.6,
            "shape": [],
            "code": "MinCaninePercentage = data[\"MinCaninePercentage\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of molars required to be filled",
            "symbol": "MinMolars",
            "value": 45,
            "shape": [],
            "code": "MinMolars = data[\"MinMolars\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Total resin used for all cavities is at most TotalResin",
            "status": "coded",
            "formulation": "\\textup{ResinMolar} \\cdot \\textup{NumMolars} + \\textup{ResinCanine} \\cdot \\textup{NumCanines} \\leq \\textup{TotalResin}",
            "related_variables": [
                "NumMolars",
                "NumCanines"
            ],
            "related_parameters": [
                "ResinMolar",
                "ResinCanine",
                "TotalResin"
            ],
            "code": "TotalResin = data[\"TotalResin\"] # scalar parameter\nResinMolar = data[\"ResinMolar\"] # scalar parameter\nResinCanine = data[\"ResinCanine\"] # scalar parameter\n\n# Add constraint for total resin usage for all cavities\nmodel.addConstr(ResinMolar * NumMolars + ResinCanine * NumCanines <= TotalResin, name=\"total_resin_usage\")"
        },
        {
            "description": "At least MinCaninePercentage of cavities filled must be canines",
            "status": "coded",
            "formulation": "\\textup{NumCanines} \\geq \\textup{MinCaninePercentage} \\cdot (\\textup{NumMolars} + \\textup{NumCanines})",
            "related_variables": [
                "NumMolars",
                "NumCanines"
            ],
            "related_parameters": [
                "MinCaninePercentage"
            ],
            "code": "# Add constraint to ensure at least MinCaninePercentage of cavities filled are canines\nmodel.addConstr(NumCanines >= MinCaninePercentage * (NumMolars + NumCanines), name=\"min_canine_percentage\")"
        },
        {
            "description": "At least Minimum number of molars must be filled",
            "status": "coded",
            "formulation": "\\textup{NumMolars} \\geq \\textup{MinMolars}",
            "related_variables": [
                "NumMolars"
            ],
            "related_parameters": [
                "MinMolars"
            ],
            "code": "# Add constraint to ensure at least the minimum number of molars are filled\nmodel.addConstr(NumMolars >= MinMolars, name=\"min_molars_filled\")"
        },
        {
            "description": "Number of molars to be filled must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumMolars} \\geq 0",
            "related_variables": [
                "NumMolars"
            ],
            "related_parameters": [],
            "code": "# Since NumMolars is already defined as an integer variable, no code is needed to enforce non-negativity\n# The Gurobi integer variable by default has a lower bound of 0, hence the constraint is implicitly handled"
        },
        {
            "description": "The number of canines to be filled must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumCanines} \\geq 0",
            "related_variables": [
                "NumCanines"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for the number of canines to be filled\nmodel.addConstr(NumCanines >= 0, name=\"nonnegativity_canines\")"
        },
        {
            "description": "The resin used must be less than or equal to the total resin available",
            "status": "coded",
            "formulation": "\\textup{NumMolars} \\times \\textup{ResinMolar} + \\textup{NumCanines} \\times \\textup{ResinCanine} \\leq \\textup{TotalResin}",
            "related_variables": [
                "NumMolars",
                "NumCanines"
            ],
            "related_parameters": [
                "ResinMolar",
                "ResinCanine",
                "TotalResin"
            ],
            "code": "# Resin usage constraint\nmodel.addConstr(NumMolars * ResinMolar + NumCanines * ResinCanine <= TotalResin, name=\"resin_usage\")"
        },
        {
            "description": "The number of canines filled must be at least 60 percent of the total cavities filled",
            "status": "coded",
            "formulation": "\\textup{NumCanines} \\geq 0.6 \\times (\\textup{NumMolars} + \\textup{NumCanines})",
            "related_variables": [
                "NumMolars",
                "NumCanines"
            ],
            "related_parameters": [
                "MinCaninePercentage"
            ],
            "code": "# Add constraint: The number of canines filled must be at least 60 percent of the total cavities filled\nmodel.addConstr(NumCanines >= MinCaninePercentage * (NumMolars + NumCanines), name=\"canine_to_cavity_ratio\")"
        },
        {
            "description": "The number of molars filled must meet the minimum required",
            "status": "coded",
            "formulation": "\\textup{NumMolars} \\geq \\textup{MinMolars}",
            "related_variables": [
                "NumMolars"
            ],
            "related_parameters": [
                "MinMolars"
            ],
            "code": "# Add constraint for minimum number of molars to be filled\nmodel.addConstr(NumMolars >= MinMolars, name=\"min_molars_filled\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of molars to be filled",
            "symbol": "NumMolars",
            "shape": [],
            "status": "coded",
            "code": "NumMolars = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumMolars\")"
        },
        {
            "definition": "Number of canines to be filled",
            "symbol": "NumCanines",
            "shape": [],
            "status": "coded",
            "code": "NumCanines = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumCanines\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total amount of pain killer needed for filling cavities in molars and canines",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad Z = \\textup{NumMolars} \\times \\textup{PainKillerMolar} + \\textup{NumCanines} \\times \\textup{PainKillerCanine}",
            "related_variables": [
                "NumMolars",
                "NumCanines"
            ],
            "related_parameters": [
                "PainKillerMolar",
                "PainKillerCanine"
            ],
            "code": "# Define the objective function\nmodel.setObjective(NumMolars * PainKillerMolar + NumCanines * PainKillerCanine, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 291.4,
    "log_path": "logs/log_20250413165210_nl4opt_prob_235/",
    "problem_path": "data/nl4opt/prob_235/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_235/data.json\", \"r\") as f:\n    data = json.load(f)\n\nTotalResin = data[\"TotalResin\"] # scalar parameter\nResinMolar = data[\"ResinMolar\"] # scalar parameter\nResinCanine = data[\"ResinCanine\"] # scalar parameter\nPainKillerMolar = data[\"PainKillerMolar\"] # scalar parameter\nPainKillerCanine = data[\"PainKillerCanine\"] # scalar parameter\nMinCaninePercentage = data[\"MinCaninePercentage\"] # scalar parameter\nMinMolars = data[\"MinMolars\"] # scalar parameter\nNumMolars = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumMolars\")\nNumCanines = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumCanines\")\n\nTotalResin = data[\"TotalResin\"] # scalar parameter\nResinMolar = data[\"ResinMolar\"] # scalar parameter\nResinCanine = data[\"ResinCanine\"] # scalar parameter\n\n# Add constraint for total resin usage for all cavities\nmodel.addConstr(ResinMolar * NumMolars + ResinCanine * NumCanines <= TotalResin, name=\"total_resin_usage\")\n\n# Add constraint to ensure at least MinCaninePercentage of cavities filled are canines\nmodel.addConstr(NumCanines >= MinCaninePercentage * (NumMolars + NumCanines), name=\"min_canine_percentage\")\n\n# Add constraint to ensure at least the minimum number of molars are filled\nmodel.addConstr(NumMolars >= MinMolars, name=\"min_molars_filled\")\n\n# Since NumMolars is already defined as an integer variable, no code is needed to enforce non-negativity\n# The Gurobi integer variable by default has a lower bound of 0, hence the constraint is implicitly handled\n\n# Add non-negativity constraint for the number of canines to be filled\nmodel.addConstr(NumCanines >= 0, name=\"nonnegativity_canines\")\n\n# Resin usage constraint\nmodel.addConstr(NumMolars * ResinMolar + NumCanines * ResinCanine <= TotalResin, name=\"resin_usage\")\n\n# Add constraint: The number of canines filled must be at least 60 percent of the total cavities filled\nmodel.addConstr(NumCanines >= MinCaninePercentage * (NumMolars + NumCanines), name=\"canine_to_cavity_ratio\")\n\n# Add constraint for minimum number of molars to be filled\nmodel.addConstr(NumMolars >= MinMolars, name=\"min_molars_filled\")\n\n# Define the objective function\nmodel.setObjective(NumMolars * PainKillerMolar + NumCanines * PainKillerCanine, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}