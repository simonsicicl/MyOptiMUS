{
    "background": "An engineering school is hosting a bridge building competition where students aim to build the maximum number of beam and truss bridges using limited supplies of Popsicle sticks and glue to maximize the total mass the bridges can support.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of Popsicle sticks required for a beam bridge",
            "symbol": "PopsicleBeam",
            "value": 30,
            "shape": [],
            "code": "PopsicleBeam = data[\"PopsicleBeam\"] # scalar parameter"
        },
        {
            "definition": "Units of glue required for a beam bridge",
            "symbol": "GlueBeam",
            "value": 5,
            "shape": [],
            "code": "GlueBeam = data[\"GlueBeam\"] # scalar parameter"
        },
        {
            "definition": "Number of Popsicle sticks required for a truss bridge",
            "symbol": "PopsicleTruss",
            "value": 50,
            "shape": [],
            "code": "PopsicleTruss = data[\"PopsicleTruss\"] # scalar parameter"
        },
        {
            "definition": "Units of glue required for a truss bridge",
            "symbol": "GlueTruss",
            "value": 8,
            "shape": [],
            "code": "GlueTruss = data[\"GlueTruss\"] # scalar parameter"
        },
        {
            "definition": "Total available Popsicle sticks",
            "symbol": "TotalPopsicles",
            "value": 600,
            "shape": [],
            "code": "TotalPopsicles = data[\"TotalPopsicles\"] # scalar parameter"
        },
        {
            "definition": "Total available units of glue",
            "symbol": "TotalGlue",
            "value": 100,
            "shape": [],
            "code": "TotalGlue = data[\"TotalGlue\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of truss bridges",
            "symbol": "MaxTruss",
            "value": 5,
            "shape": [],
            "code": "MaxTruss = data[\"MaxTruss\"] # scalar parameter"
        },
        {
            "definition": "Mass supported by a beam bridge",
            "symbol": "MassBeam",
            "value": 40,
            "shape": [],
            "code": "MassBeam = data[\"MassBeam\"] # scalar parameter"
        },
        {
            "definition": "Mass supported by a truss bridge",
            "symbol": "MassTruss",
            "value": 60,
            "shape": [],
            "code": "MassTruss = data[\"MassTruss\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of beam bridges should be non-negative",
            "status": "formulated",
            "formulation": "\\textup{NumberOfBeamBridges} \\geq 0",
            "related_variables": [
                "NumberOfBeamBridges"
            ],
            "related_parameters": []
        },
        {
            "description": "Number of truss bridges should be non-negative",
            "status": "formulated",
            "formulation": "\\textup{NumberOfTrussBridges} \\geq 0",
            "related_variables": [
                "NumberOfTrussBridges"
            ],
            "related_parameters": []
        },
        {
            "description": "Total use of Popsicle sticks must not exceed the total available Popsicle sticks",
            "status": "formulated",
            "formulation": "\\textup{NumberOfBeamBridges} \\cdot \\textup{PopsicleBeam} + \\textup{NumberOfTrussBridges} \\cdot \\textup{PopsicleTruss} \\leq \\textup{TotalPopsicles}",
            "related_variables": [
                "NumberOfBeamBridges",
                "NumberOfTrussBridges"
            ],
            "related_parameters": [
                "PopsicleBeam",
                "PopsicleTruss",
                "TotalPopsicles"
            ]
        },
        {
            "description": "The total consumption of glue for building the bridges must not exceed the TotalGlue available",
            "status": "formulated",
            "formulation": "\\textup{GlueBeam} \\times \\textup{NumberOfBeamBridges} + \\textup{GlueTruss} \\times \\textup{NumberOfTrussBridges} \\leq \\textup{TotalGlue}",
            "related_variables": [
                "NumberOfBeamBridges",
                "NumberOfTrussBridges"
            ],
            "related_parameters": [
                "GlueBeam",
                "GlueTruss",
                "TotalGlue"
            ]
        },
        {
            "description": "Each team can build at most 'MaxTruss' truss bridges in the competition",
            "status": "formulated",
            "formulation": "\\textup{NumberOfTrussBridges} \\leq \\textup{MaxTruss}",
            "related_variables": [
                "NumberOfTrussBridges"
            ],
            "related_parameters": [
                "MaxTruss"
            ]
        },
        {
            "description": "The number of beam bridges must be greater than the number of truss bridges",
            "status": "formulated",
            "formulation": "\\textup{NumberOfBeamBridges} \\geq \\textup{NumberOfTrussBridges} + 1",
            "related_variables": [
                "NumberOfBeamBridges",
                "NumberOfTrussBridges"
            ],
            "related_parameters": []
        },
        {
            "description": "The total number of Popsicle sticks used should not exceed the total available Popsicle sticks",
            "status": "formulated",
            "formulation": "PopsicleBeam \\cdot NumberOfBeamBridges + PopsicleTruss \\cdot NumberOfTrussBridges \\leq TotalPopsicles",
            "related_variables": [
                "NumberOfBeamBridges",
                "NumberOfTrussBridges"
            ],
            "related_parameters": [
                "PopsicleBeam",
                "PopsicleTruss",
                "TotalPopsicles"
            ]
        },
        {
            "description": "The total units of glue used should not exceed the total available units of glue",
            "status": "formulated",
            "formulation": "GlueBeam \\cdot NumberOfBeamBridges + GlueTruss \\cdot NumberOfTrussBridges \\leq TotalGlue",
            "related_variables": [
                "NumberOfBeamBridges",
                "NumberOfTrussBridges"
            ],
            "related_parameters": [
                "GlueBeam",
                "GlueTruss",
                "TotalGlue"
            ]
        },
        {
            "description": "The number of truss bridges should not exceed the maximum number of truss bridges allowed",
            "status": "formulated",
            "formulation": "NumberOfTrussBridges \\leq MaxTruss",
            "related_variables": [
                "NumberOfTrussBridges"
            ],
            "related_parameters": [
                "MaxTruss"
            ]
        }
    ],
    "variables": [
        {
            "definition": "Number of beam bridges built in the competition",
            "symbol": "NumberOfBeamBridges",
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of truss bridges built in the competition",
            "symbol": "NumberOfTrussBridges",
            "shape": [],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total mass that the built bridges can support",
            "status": "formulated",
            "formulation": "\\textup{Maximize} \\quad \\textup{TotalSupportedMass} = \\textup{MassBeam} \\cdot \\textup{NumberOfBeamBridges} + \\textup{MassTruss} \\cdot \\textup{NumberOfTrussBridges}",
            "related_variables": [
                "NumberOfBeamBridges",
                "NumberOfTrussBridges"
            ],
            "related_parameters": [
                "MassBeam",
                "MassTruss"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413133046_nl4opt_prob_147/",
    "problem_path": "data/nl4opt/prob_147/"
}