{
    "background": "A pharmacy produces acne and anti-bacterial creams in two factories with different production rates and requires a certain amount of base gel per hour for each factory. The pharmacy aims to meet minimum production requirements for both creams with a limited supply of base gel.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Quantity of acne cream produced by factory 1 per hour",
            "symbol": "AcneFactory1",
            "value": 12,
            "shape": [],
            "code": "AcneFactory1 = data[\"AcneFactory1\"] # scalar parameter"
        },
        {
            "definition": "Quantity of anti-bacterial cream produced by factory 1 per hour",
            "symbol": "AntibacterialFactory1",
            "value": 15,
            "shape": [],
            "code": "AntibacterialFactory1 = data[\"AntibacterialFactory1\"] # scalar parameter"
        },
        {
            "definition": "Quantity of acne cream produced by factory 2 per hour",
            "symbol": "AcneFactory2",
            "value": 20,
            "shape": [],
            "code": "AcneFactory2 = data[\"AcneFactory2\"] # scalar parameter"
        },
        {
            "definition": "Quantity of anti-bacterial cream produced by factory 2 per hour",
            "symbol": "AntibacterialFactory2",
            "value": 10,
            "shape": [],
            "code": "AntibacterialFactory2 = data[\"AntibacterialFactory2\"] # scalar parameter"
        },
        {
            "definition": "Base gel used by factory 1 per hour",
            "symbol": "BaseGelFactory1",
            "value": 30,
            "shape": [],
            "code": "BaseGelFactory1 = data[\"BaseGelFactory1\"] # scalar parameter"
        },
        {
            "definition": "Base gel used by factory 2 per hour",
            "symbol": "BaseGelFactory2",
            "value": 45,
            "shape": [],
            "code": "BaseGelFactory2 = data[\"BaseGelFactory2\"] # scalar parameter"
        },
        {
            "definition": "Total available units of base gel",
            "symbol": "TotalBaseGel",
            "value": 5000,
            "shape": [],
            "code": "TotalBaseGel = data[\"TotalBaseGel\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of acne cream to be produced",
            "symbol": "MinAcneCream",
            "value": 800,
            "shape": [],
            "code": "MinAcneCream = data[\"MinAcneCream\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of anti-bacterial cream to be produced",
            "symbol": "MinAntibacterialCream",
            "value": 1000,
            "shape": [],
            "code": "MinAntibacterialCream = data[\"MinAntibacterialCream\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Total base gel used by both factories must not exceed the available base gel",
            "status": "coded",
            "formulation": "\\textup{BaseGelFactory1} \\cdot \\textup{HoursFactory1} + \\textup{BaseGelFactory2} \\cdot \\textup{HoursFactory2} \\leq \\textup{TotalBaseGel}",
            "related_variables": [
                "HoursFactory1",
                "HoursFactory2"
            ],
            "related_parameters": [
                "BaseGelFactory1",
                "BaseGelFactory2",
                "TotalBaseGel"
            ],
            "code": "# Constraint: Total base gel used by both factories must not exceed the available base gel\nmodel.addConstr(BaseGelFactory1 * HoursFactory1 + BaseGelFactory2 * HoursFactory2 <= TotalBaseGel, name=\"TotalBaseGelConstraint\")"
        },
        {
            "description": "Total production of acne cream must meet the minimum required units",
            "status": "coded",
            "formulation": "\\textup{AcneFactory1} \\times \\textup{HoursFactory1} + \\textup{AcneFactory2} \\times \\textup{HoursFactory2} \\geq \\textup{MinAcneCream}",
            "related_variables": [
                "HoursFactory1",
                "HoursFactory2"
            ],
            "related_parameters": [
                "AcneFactory1",
                "AcneFactory2",
                "MinAcneCream"
            ],
            "code": "# Production constraint to meet minimum required units of acne cream\nmodel.addConstr(AcneFactory1 * HoursFactory1 + AcneFactory2 * HoursFactory2 >= MinAcneCream, name=\"min_acne_cream_production\")"
        },
        {
            "description": "Total production of anti-bacterial cream must meet or exceed the minimum required units",
            "status": "coded",
            "formulation": "\\textup{HoursFactory1} \\times \\textup{AntibacterialFactory1} + \\textup{HoursFactory2} \\times \\textup{AntibacterialFactory2} \\geq \\textup{MinAntibacterialCream}",
            "related_variables": [
                "HoursFactory1",
                "HoursFactory2"
            ],
            "related_parameters": [
                "AntibacterialFactory1",
                "AntibacterialFactory2",
                "MinAntibacterialCream"
            ],
            "code": "# Total production of anti-bacterial cream must meet or exceed minimum required units\nmodel.addConstr(HoursFactory1 * AntibacterialFactory1 + HoursFactory2 * AntibacterialFactory2 >= MinAntibacterialCream, \"MinTotalAntibacterialCream\")"
        },
        {
            "description": "Number of hours factory 1 operates must be non-negative",
            "status": "coded",
            "formulation": "\\textup{HoursFactory1} \\geq 0",
            "related_variables": [
                "HoursFactory1"
            ],
            "related_parameters": [],
            "code": "# Constraint: Number of hours factory 1 operates must be non-negative\nmodel.addConstr(HoursFactory1 >= 0, \"Factory1_Hours_Nonnegative\")"
        },
        {
            "description": "Number of hours factory 2 operates must be non-negative",
            "status": "coded",
            "formulation": "\\textup{HoursFactory2} \\geq 0",
            "related_variables": [
                "HoursFactory2"
            ],
            "related_parameters": [],
            "code": "# Constraint: Number of hours factory 2 operates must be non-negative\nmodel.addConstr(HoursFactory2 >= 0, \"Factory2_Hours_Nonnegative\")"
        },
        {
            "description": "Ensure that the total production of acne cream meets the minimum requirement",
            "status": "coded",
            "formulation": "\\textup{HoursFactory1} \\cdot \\textup{AcneFactory1} + \\textup{HoursFactory2} \\cdot \\textup{AcneFactory2} \\geq \\textup{MinAcneCream}",
            "related_variables": [
                "HoursFactory1",
                "HoursFactory2"
            ],
            "related_parameters": [
                "AcneFactory1",
                "AcneFactory2",
                "MinAcneCream"
            ],
            "code": "# Ensure that the total production of acne cream meets the minimum requirement\nmodel.addConstr(HoursFactory1 * AcneFactory1 + HoursFactory2 * AcneFactory2 >= MinAcneCream, name=\"min_acne_cream_production\")"
        },
        {
            "description": "Ensure that the total production of anti-bacterial cream meets the minimum requirement",
            "status": "coded",
            "formulation": "\\textup{HoursFactory1} \\cdot \\textup{AntibacterialFactory1} + \\textup{HoursFactory2} \\cdot \\textup{AntibacterialFactory2} \\geq \\textup{MinAntibacterialCream}",
            "related_variables": [
                "HoursFactory1",
                "HoursFactory2"
            ],
            "related_parameters": [
                "AntibacterialFactory1",
                "AntibacterialFactory2",
                "MinAntibacterialCream"
            ],
            "code": "# Ensure that the total production of anti-bacterial cream meets the minimum requirement\nmodel.addConstr(HoursFactory1 * AntibacterialFactory1 + HoursFactory2 * AntibacterialFactory2 >= MinAntibacterialCream, name=\"min_antibacterial_cream_requirement\")"
        },
        {
            "description": "Ensure the total usage of base gel does not exceed the available quantity",
            "status": "coded",
            "formulation": "\\textup{HoursFactory1} \\cdot \\textup{BaseGelFactory1} + \\textup{HoursFactory2} \\cdot \\textup{BaseGelFactory2} \\leq \\textup{TotalBaseGel}",
            "related_variables": [
                "HoursFactory1",
                "HoursFactory2"
            ],
            "related_parameters": [
                "BaseGelFactory1",
                "BaseGelFactory2",
                "TotalBaseGel"
            ],
            "code": "# Ensure the total usage of base gel does not exceed the available quantity\nmodel.addConstr(HoursFactory1 * BaseGelFactory1 + HoursFactory2 * BaseGelFactory2 <= TotalBaseGel, \"TotalBaseGelUsage\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of hours factory 1 operates",
            "symbol": "HoursFactory1",
            "shape": [],
            "status": "coded",
            "code": "HoursFactory1 = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HoursFactory1\")"
        },
        {
            "definition": "Number of hours factory 2 operates",
            "symbol": "HoursFactory2",
            "shape": [],
            "status": "coded",
            "code": "HoursFactory2 = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HoursFactory2\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total hours of operation across both factories",
            "status": "coded",
            "formulation": "\\min \\left( \\textup{HoursFactory1} + \\textup{HoursFactory2} \\right)",
            "related_variables": [
                "HoursFactory1",
                "HoursFactory2"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(HoursFactory1 + HoursFactory2, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 66.66666666666667,
    "log_path": "logs/log_20250413111015_nl4opt_prob_116/",
    "problem_path": "data/nl4opt/prob_116/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_116/data.json\", \"r\") as f:\n    data = json.load(f)\n\nAcneFactory1 = data[\"AcneFactory1\"] # scalar parameter\nAntibacterialFactory1 = data[\"AntibacterialFactory1\"] # scalar parameter\nAcneFactory2 = data[\"AcneFactory2\"] # scalar parameter\nAntibacterialFactory2 = data[\"AntibacterialFactory2\"] # scalar parameter\nBaseGelFactory1 = data[\"BaseGelFactory1\"] # scalar parameter\nBaseGelFactory2 = data[\"BaseGelFactory2\"] # scalar parameter\nTotalBaseGel = data[\"TotalBaseGel\"] # scalar parameter\nMinAcneCream = data[\"MinAcneCream\"] # scalar parameter\nMinAntibacterialCream = data[\"MinAntibacterialCream\"] # scalar parameter\nHoursFactory1 = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HoursFactory1\")\nHoursFactory2 = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HoursFactory2\")\n\n# Constraint: Total base gel used by both factories must not exceed the available base gel\nmodel.addConstr(BaseGelFactory1 * HoursFactory1 + BaseGelFactory2 * HoursFactory2 <= TotalBaseGel, name=\"TotalBaseGelConstraint\")\n\n# Production constraint to meet minimum required units of acne cream\nmodel.addConstr(AcneFactory1 * HoursFactory1 + AcneFactory2 * HoursFactory2 >= MinAcneCream, name=\"min_acne_cream_production\")\n\n# Total production of anti-bacterial cream must meet or exceed minimum required units\nmodel.addConstr(HoursFactory1 * AntibacterialFactory1 + HoursFactory2 * AntibacterialFactory2 >= MinAntibacterialCream, \"MinTotalAntibacterialCream\")\n\n# Constraint: Number of hours factory 1 operates must be non-negative\nmodel.addConstr(HoursFactory1 >= 0, \"Factory1_Hours_Nonnegative\")\n\n# Constraint: Number of hours factory 2 operates must be non-negative\nmodel.addConstr(HoursFactory2 >= 0, \"Factory2_Hours_Nonnegative\")\n\n# Ensure that the total production of acne cream meets the minimum requirement\nmodel.addConstr(HoursFactory1 * AcneFactory1 + HoursFactory2 * AcneFactory2 >= MinAcneCream, name=\"min_acne_cream_production\")\n\n# Ensure that the total production of anti-bacterial cream meets the minimum requirement\nmodel.addConstr(HoursFactory1 * AntibacterialFactory1 + HoursFactory2 * AntibacterialFactory2 >= MinAntibacterialCream, name=\"min_antibacterial_cream_requirement\")\n\n# Ensure the total usage of base gel does not exceed the available quantity\nmodel.addConstr(HoursFactory1 * BaseGelFactory1 + HoursFactory2 * BaseGelFactory2 <= TotalBaseGel, \"TotalBaseGelUsage\")\n\n# Set objective\nmodel.setObjective(HoursFactory1 + HoursFactory2, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}