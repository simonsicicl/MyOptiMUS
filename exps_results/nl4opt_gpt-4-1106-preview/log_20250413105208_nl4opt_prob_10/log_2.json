{
    "background": "A farmer wants to manufacture a special plant nutrition using fertilizers A and B.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of nitrogen per kg of fertilizer A",
            "symbol": "NitrogenA",
            "value": 13,
            "shape": [],
            "code": "NitrogenA = data[\"NitrogenA\"] # scalar parameter"
        },
        {
            "definition": "Units of phosphoric acid per kg of fertilizer A",
            "symbol": "PhosphoricA",
            "value": 5,
            "shape": [],
            "code": "PhosphoricA = data[\"PhosphoricA\"] # scalar parameter"
        },
        {
            "definition": "Units of vitamin A per kg of fertilizer A",
            "symbol": "VitaminAA",
            "value": 6,
            "shape": [],
            "code": "VitaminAA = data[\"VitaminAA\"] # scalar parameter"
        },
        {
            "definition": "Units of vitamin D per kg of fertilizer A",
            "symbol": "VitaminDA",
            "value": 5,
            "shape": [],
            "code": "VitaminDA = data[\"VitaminDA\"] # scalar parameter"
        },
        {
            "definition": "Units of nitrogen per kg of fertilizer B",
            "symbol": "NitrogenB",
            "value": 8,
            "shape": [],
            "code": "NitrogenB = data[\"NitrogenB\"] # scalar parameter"
        },
        {
            "definition": "Units of phosphoric acid per kg of fertilizer B",
            "symbol": "PhosphoricB",
            "value": 14,
            "shape": [],
            "code": "PhosphoricB = data[\"PhosphoricB\"] # scalar parameter"
        },
        {
            "definition": "Units of vitamin A per kg of fertilizer B",
            "symbol": "VitaminAB",
            "value": 6,
            "shape": [],
            "code": "VitaminAB = data[\"VitaminAB\"] # scalar parameter"
        },
        {
            "definition": "Units of vitamin D per kg of fertilizer B",
            "symbol": "VitaminDB",
            "value": 9,
            "shape": [],
            "code": "VitaminDB = data[\"VitaminDB\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of nitrogen for the plant nutrition",
            "symbol": "MinNitrogen",
            "value": 220,
            "shape": [],
            "code": "MinNitrogen = data[\"MinNitrogen\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of phosphoric acid for the plant nutrition",
            "symbol": "MinPhosphoric",
            "value": 160,
            "shape": [],
            "code": "MinPhosphoric = data[\"MinPhosphoric\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowed units of vitamin A for the plant nutrition",
            "symbol": "MaxVitaminA",
            "value": 350,
            "shape": [],
            "code": "MaxVitaminA = data[\"MaxVitaminA\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Amount of fertilizer A must be non-negative",
            "status": "coded",
            "formulation": "A \\geq 0",
            "related_variables": [
                "A"
            ],
            "related_parameters": [],
            "code": "# Fertilizer A must be non-negative\nmodel.addConstr(A >= 0, name=\"non_negativity_A\")"
        },
        {
            "description": "The amount of fertilizer B is non-negative",
            "status": "coded",
            "formulation": "B \\geq 0",
            "related_variables": [
                "B"
            ],
            "related_parameters": [],
            "code": "# Fertilizer B is non-negative\nmodel.addConstr(B >= 0, name=\"B_non_negative\")"
        },
        {
            "description": "Constraint for minimum required units of nitrogen in the plant nutrition",
            "status": "coded",
            "formulation": "\\textup{NitrogenA} \\cdot \\textup{A} + \\textup{NitrogenB} \\cdot \\textup{B} \\geq \\textup{MinNitrogen}",
            "related_variables": [
                "A",
                "B"
            ],
            "related_parameters": [
                "NitrogenA",
                "NitrogenB",
                "MinNitrogen"
            ],
            "code": "# Minimum nitrogen constraint\nmodel.addConstr(NitrogenA * A + NitrogenB * B >= MinNitrogen, name=\"min_nitrogen\")"
        },
        {
            "description": "Total phosphoric acid from fertilizers A and B must meet the minimum required units",
            "status": "coded",
            "formulation": "\\textup{PhosphoricA} \\cdot \\textup{A} + \\textup{PhosphoricB} \\cdot \\textup{B} \\geq \\textup{MinPhosphoric}",
            "related_variables": [
                "A",
                "B"
            ],
            "related_parameters": [
                "PhosphoricA",
                "PhosphoricB",
                "MinPhosphoric"
            ],
            "code": "# Add constraint for minimum required units of phosphoric acid\nmodel.addConstr(PhosphoricA * A + PhosphoricB * B >= MinPhosphoric, name=\"min_phosphoric_acid\")"
        },
        {
            "description": "Total units of vitamin A from both fertilizers should not exceed the maximum allowed",
            "status": "coded",
            "formulation": "\\textup{VitaminAA} \\cdot \\textup{A} + \\textup{VitaminAB} \\cdot \\textup{B} \\leq \\textup{MaxVitaminA}",
            "related_variables": [
                "A",
                "B"
            ],
            "related_parameters": [
                "VitaminAA",
                "VitaminAB",
                "MaxVitaminA"
            ],
            "code": "# Constraint: Total units of vitamin A from both fertilizers should not exceed the maximum allowed\nmodel.addConstr((VitaminAA * A) + (VitaminAB * B) <= MaxVitaminA, \"max_vitamin_A\")"
        }
    ],
    "variables": [
        {
            "definition": "Amount of fertilizer A to be used",
            "symbol": "A",
            "shape": [],
            "status": "coded",
            "code": "A = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"A\")"
        },
        {
            "definition": "Amount of fertilizer B to be used",
            "symbol": "B",
            "shape": [],
            "status": "coded",
            "code": "B = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"B\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the amount of vitamin D in the plant nutrition",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad VitaminDA \\cdot A + VitaminDB \\cdot B",
            "related_variables": [
                "A",
                "B"
            ],
            "related_parameters": [
                "VitaminDA",
                "VitaminDB"
            ],
            "code": "# Set objective\nmodel.setObjective(VitaminDA * A + VitaminDB * B, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 125.49295774647888,
    "log_path": "logs/log_20250413105208_nl4opt_prob_10/",
    "problem_path": "data/nl4opt/prob_10/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_10/data.json\", \"r\") as f:\n    data = json.load(f)\n\nNitrogenA = data[\"NitrogenA\"] # scalar parameter\nPhosphoricA = data[\"PhosphoricA\"] # scalar parameter\nVitaminAA = data[\"VitaminAA\"] # scalar parameter\nVitaminDA = data[\"VitaminDA\"] # scalar parameter\nNitrogenB = data[\"NitrogenB\"] # scalar parameter\nPhosphoricB = data[\"PhosphoricB\"] # scalar parameter\nVitaminAB = data[\"VitaminAB\"] # scalar parameter\nVitaminDB = data[\"VitaminDB\"] # scalar parameter\nMinNitrogen = data[\"MinNitrogen\"] # scalar parameter\nMinPhosphoric = data[\"MinPhosphoric\"] # scalar parameter\nMaxVitaminA = data[\"MaxVitaminA\"] # scalar parameter\nA = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"A\")\nB = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"B\")\n\n# Fertilizer A must be non-negative\nmodel.addConstr(A >= 0, name=\"non_negativity_A\")\n\n# Fertilizer B is non-negative\nmodel.addConstr(B >= 0, name=\"B_non_negative\")\n\n# Minimum nitrogen constraint\nmodel.addConstr(NitrogenA * A + NitrogenB * B >= MinNitrogen, name=\"min_nitrogen\")\n\n# Add constraint for minimum required units of phosphoric acid\nmodel.addConstr(PhosphoricA * A + PhosphoricB * B >= MinPhosphoric, name=\"min_phosphoric_acid\")\n\n# Constraint: Total units of vitamin A from both fertilizers should not exceed the maximum allowed\nmodel.addConstr((VitaminAA * A) + (VitaminAB * B) <= MaxVitaminA, \"max_vitamin_A\")\n\n# Set objective\nmodel.setObjective(VitaminDA * A + VitaminDB * B, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}