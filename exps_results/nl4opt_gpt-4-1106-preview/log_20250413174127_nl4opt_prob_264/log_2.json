{
    "background": "A researcher needs to outsource image annotations and has two companies to choose from with different annotations rates and charges. Part of the dataset requires a specialized company for annotation.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Annotation rate of the specialized company",
            "symbol": "SpecializedRate",
            "value": 60,
            "shape": [],
            "code": "SpecializedRate = data[\"SpecializedRate\"] # scalar parameter"
        },
        {
            "definition": "Annotation rate of the common company",
            "symbol": "CommonRate",
            "value": 40,
            "shape": [],
            "code": "CommonRate = data[\"CommonRate\"] # scalar parameter"
        },
        {
            "definition": "Hourly charge of the specialized company",
            "symbol": "SpecializedCharge",
            "value": 100,
            "shape": [],
            "code": "SpecializedCharge = data[\"SpecializedCharge\"] # scalar parameter"
        },
        {
            "definition": "Hourly charge of the common company",
            "symbol": "CommonCharge",
            "value": 72,
            "shape": [],
            "code": "CommonCharge = data[\"CommonCharge\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of images to be annotated",
            "symbol": "MinimumImages",
            "value": 10000,
            "shape": [],
            "code": "MinimumImages = data[\"MinimumImages\"] # scalar parameter"
        },
        {
            "definition": "Minimum proportion of work to be allocated to the specialized company",
            "symbol": "MinimumSpecializedProportion",
            "value": 0.33,
            "shape": [],
            "code": "MinimumSpecializedProportion = data[\"MinimumSpecializedProportion\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of images annotated by the specialized company must be non-negative",
            "status": "coded",
            "formulation": "\\textup{SpecializedImagesAnnotated} \\geq 0",
            "related_variables": [
                "SpecializedImagesAnnotated"
            ],
            "related_parameters": [],
            "code": "# No code needed since the variable 'SpecializedImagesAnnotated' is already defined as non-negative by setting its type to INTEGER.\n# Gurobi's default lower bound for integer variables is 0, which satisfies the given constraint."
        },
        {
            "description": "Number of images annotated by the common company must be non-negative",
            "status": "coded",
            "formulation": "\\textup{CommonImagesAnnotated} \\geq 0",
            "related_variables": [
                "CommonImagesAnnotated"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint on the number of images annotated by the common company\nmodel.addConstr(CommonImagesAnnotated >= 0, name=\"non_negative_common_images\")"
        },
        {
            "description": "Total number of images annotated must be at least MinimumImages",
            "status": "runtime_error",
            "formulation": "\\textup{SpecializedImagesAnnotated} + \\textup{CommonImagesAnnotated} \\geq \\textup{MinimumImages}",
            "related_variables": [
                "SpecializedImagesAnnotated",
                "CommonImagesAnnotated"
            ],
            "related_parameters": [
                "MinimumImages"
            ],
            "code": "```"
        },
        {
            "description": "At least a Minimum proportion of the work must be allocated to the specialized company",
            "status": "coded",
            "formulation": "\\textup{SpecializedImagesAnnotated} \\geq \\textup{MinimumSpecializedProportion} \\times (\\textup{SpecializedImagesAnnotated} + \\textup{CommonImagesAnnotated})",
            "related_variables": [
                "SpecializedImagesAnnotated",
                "CommonImagesAnnotated"
            ],
            "related_parameters": [
                "MinimumSpecializedProportion"
            ],
            "code": "# Add constraint to ensure that at least a minimum proportion of the work is allocated to the specialized company\nmodel.addConstr(SpecializedImagesAnnotated >= MinimumSpecializedProportion * (SpecializedImagesAnnotated + CommonImagesAnnotated), name=\"min_specialized_proportion\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of images annotated by the specialized company",
            "symbol": "SpecializedImagesAnnotated",
            "shape": [],
            "status": "coded",
            "code": "SpecializedImagesAnnotated = model.addVar(vtype=gp.GRB.INTEGER, name=\"SpecializedImagesAnnotated\")"
        },
        {
            "definition": "Number of images annotated by the common company",
            "symbol": "CommonImagesAnnotated",
            "shape": [],
            "status": "coded",
            "code": "CommonImagesAnnotated = model.addVar(vtype=gp.GRB.INTEGER, name=\"CommonImagesAnnotated\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cost of annotating the dataset by choosing the number of images annotated by specialized and common companies",
            "status": "coded",
            "formulation": "\\textup{Minimize}\\quad TotalCost = \\left( \\frac{\\textup{SpecializedImagesAnnotated}}{\\textup{SpecializedRate}} \\right) \\cdot \\textup{SpecializedCharge} + \\left( \\frac{\\textup{CommonImagesAnnotated}}{\\textup{CommonRate}} \\right) \\cdot \\textup{CommonCharge}",
            "related_variables": [
                "SpecializedImagesAnnotated",
                "CommonImagesAnnotated"
            ],
            "related_parameters": [
                "SpecializedRate",
                "CommonRate",
                "SpecializedCharge",
                "CommonCharge"
            ],
            "code": "# Define the objective function\nTotalCost = (SpecializedImagesAnnotated / SpecializedRate) * SpecializedCharge + \\\n            (CommonImagesAnnotated / CommonRate) * CommonCharge\n\n# Set the objective\nmodel.setObjective(TotalCost, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "runtime_error",
    "solver_output_status": "runtime_error",
    "error_message": "Traceback (most recent call last):\n  File \"c:\\Users\\Simon\\Desktop\\Courses\\ECE 570\\ECE570_Project\\MyOptiMUS\\evaluator.py\", line 45, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 1\n    ```\n    ^\nSyntaxError: invalid syntax\n",
    "obj_val": null,
    "log_path": "logs/log_20250413174127_nl4opt_prob_264/",
    "problem_path": "data/nl4opt/prob_264/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_264/data.json\", \"r\") as f:\n    data = json.load(f)\n"
}