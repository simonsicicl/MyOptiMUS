{
    "background": "A hospital is purchasing two types of pills for patients, one for prevention and another for treatment, with specific cost and demand constraints within a limited budget.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Cost to make one prevention pill",
            "symbol": "PreventionPillCost",
            "value": 15,
            "shape": [],
            "code": "PreventionPillCost = data[\"PreventionPillCost\"] # scalar parameter"
        },
        {
            "definition": "Cost to make one treatment pill",
            "symbol": "TreatmentPillCost",
            "value": 25,
            "shape": [],
            "code": "TreatmentPillCost = data[\"TreatmentPillCost\"] # scalar parameter"
        },
        {
            "definition": "Minimum ratio of prevention pills to treatment pills",
            "symbol": "PreventionTreatmentRatio",
            "value": 2,
            "shape": [],
            "code": "PreventionTreatmentRatio = data[\"PreventionTreatmentRatio\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of treatment pills the hospital must purchase",
            "symbol": "MinTreatmentPills",
            "value": 50,
            "shape": [],
            "code": "MinTreatmentPills = data[\"MinTreatmentPills\"] # scalar parameter"
        },
        {
            "definition": "Budget of the hospital for purchasing pills",
            "symbol": "Budget",
            "value": 10000,
            "shape": [],
            "code": "Budget = data[\"Budget\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of prevention pills must be at least PreventionTreatmentRatio times the number of treatment pills",
            "status": "coded",
            "formulation": "\\textup{PreventionPills} \\geq \\textup{PreventionTreatmentRatio} \\times \\textup{TreatmentPills}",
            "related_variables": [
                "PreventionPills",
                "TreatmentPills"
            ],
            "related_parameters": [
                "PreventionTreatmentRatio"
            ],
            "code": "# Constraint: Number of prevention pills must be at least PreventionTreatmentRatio times the number of treatment pills\nmodel.addConstr(PreventionPills >= PreventionTreatmentRatio * TreatmentPills, name=\"Prevention_Treatment_Ratio\")"
        },
        {
            "description": "Ensure that at least MinTreatmentPills treatment pills are purchased",
            "status": "coded",
            "formulation": "\\textup{TreatmentPills} \\geq \\textup{MinTreatmentPills}",
            "related_variables": [
                "TreatmentPills"
            ],
            "related_parameters": [
                "MinTreatmentPills"
            ],
            "code": "model.addConstr(TreatmentPills >= MinTreatmentPills, name=\"min_treatment_pills\")"
        },
        {
            "description": "The total cost of purchasing prevention and treatment pills must not exceed the budget.",
            "status": "coded",
            "formulation": "\\textup{PreventionPillCost} \\times \\textup{PreventionPills} + \\textup{TreatmentPillCost} \\times \\textup{TreatmentPills} \\leq \\textup{Budget}",
            "related_variables": [
                "PreventionPills",
                "TreatmentPills"
            ],
            "related_parameters": [
                "PreventionPillCost",
                "TreatmentPillCost",
                "Budget"
            ],
            "code": "# Budget constraint for the total cost of purchasing prevention and treatment pills\nmodel.addConstr(PreventionPillCost * PreventionPills + TreatmentPillCost * TreatmentPills <= Budget, name=\"budget_constraint\")"
        },
        {
            "description": "Non-negativity constraints for the number of prevention and treatment pills",
            "status": "coded",
            "formulation": "\\textup{PreventionPills} \\geq 0 \\quad \\textup{and} \\quad \\textup{TreatmentPills} \\geq 0",
            "related_variables": [
                "PreventionPills",
                "TreatmentPills"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraints for the number of prevention and treatment pills\nmodel.addConstr(PreventionPills >= 0, name=\"prevention_pills_nonnegativity\")\nmodel.addConstr(TreatmentPills >= 0, name=\"treatment_pills_nonnegativity\")"
        },
        {
            "description": "Ensure the total cost of prevention and treatment pills does not exceed the hospital's budget",
            "status": "coded",
            "formulation": "\\textup{PreventionPillCost} \\cdot \\textup{PreventionPills} + \\textup{TreatmentPillCost} \\cdot \\textup{TreatmentPills} \\leq \\textup{Budget}",
            "related_variables": [
                "PreventionPills",
                "TreatmentPills"
            ],
            "related_parameters": [
                "PreventionPillCost",
                "TreatmentPillCost",
                "Budget"
            ],
            "code": "# Ensure the total cost of prevention and treatment pills does not exceed the hospital's budget\nmodel.addConstr(PreventionPillCost * PreventionPills + TreatmentPillCost * TreatmentPills <= Budget, name=\"budget_constraint\")"
        },
        {
            "description": "Ensure the number of prevention pills is at least twice the number of treatment pills",
            "status": "coded",
            "formulation": "\\textup{PreventionPills} \\geq \\textup{PreventionTreatmentRatio} \\cdot \\textup{TreatmentPills}",
            "related_variables": [
                "PreventionPills",
                "TreatmentPills"
            ],
            "related_parameters": [
                "PreventionTreatmentRatio"
            ],
            "code": "# Ensure the number of prevention pills is at least twice the number of treatment pills\nmodel.addConstr(PreventionPills >= PreventionTreatmentRatio * TreatmentPills, name=\"pill_ratio_constraint\")"
        },
        {
            "description": "Ensure the hospital purchases at least the minimum required number of treatment pills",
            "status": "coded",
            "formulation": "\\textup{TreatmentPills} \\geq \\textup{MinTreatmentPills}",
            "related_variables": [
                "TreatmentPills"
            ],
            "related_parameters": [
                "MinTreatmentPills"
            ],
            "code": "# Ensure the hospital purchases at least the minimum required number of treatment pills\nmodel.addConstr(TreatmentPills >= MinTreatmentPills, name=\"min_treatment_pills\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of prevention pills to be purchased",
            "symbol": "PreventionPills",
            "shape": [],
            "status": "coded",
            "code": "PreventionPills = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PreventionPills\")"
        },
        {
            "definition": "Number of treatment pills to be purchased",
            "symbol": "TreatmentPills",
            "shape": [],
            "status": "coded",
            "code": "TreatmentPills = model.addVar(vtype=gp.GRB.INTEGER, name=\"TreatmentPills\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the number of treatment pills that can be purchased given the budget and other constraints on the pill quantities",
            "status": "coded",
            "formulation": "\\max \\textup{TreatmentPills}",
            "related_variables": [
                "TreatmentPills"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(TreatmentPills, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413165923_nl4opt_prob_240/",
    "problem_path": "data/nl4opt/prob_240/"
}