{
    "background": "A navy ship is preparing meals to ensure sufficient vitamin and fibre intake for their staff, using only salads and fruit bowls.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Minimum units of vitamin intake required per staff",
            "symbol": "V",
            "value": 90,
            "shape": [],
            "code": "V = data[\"V\"] # scalar parameter"
        },
        {
            "definition": "Minimum units of fibre intake required per staff",
            "symbol": "F",
            "value": 110,
            "shape": [],
            "code": "F = data[\"F\"] # scalar parameter"
        },
        {
            "definition": "Units of vitamins in one salad",
            "symbol": "VSalad",
            "value": 7,
            "shape": [],
            "code": "VSalad = data[\"VSalad\"] # scalar parameter"
        },
        {
            "definition": "Units of fibre in one salad",
            "symbol": "FSalad",
            "value": 12,
            "shape": [],
            "code": "FSalad = data[\"FSalad\"] # scalar parameter"
        },
        {
            "definition": "Units of vitamins in one fruit bowl",
            "symbol": "VFruitBowl",
            "value": 15,
            "shape": [],
            "code": "VFruitBowl = data[\"VFruitBowl\"] # scalar parameter"
        },
        {
            "definition": "Units of fibre in one fruit bowl",
            "symbol": "FFruitBowl",
            "value": 3,
            "shape": [],
            "code": "FFruitBowl = data[\"FFruitBowl\"] # scalar parameter"
        },
        {
            "definition": "Maximum proportion of meals that can be fruit bowls",
            "symbol": "MaxFruitBowlProportion",
            "value": 0.3,
            "shape": [],
            "code": "MaxFruitBowlProportion = data[\"MaxFruitBowlProportion\"] # scalar parameter"
        },
        {
            "definition": "Units of potassium in one salad",
            "symbol": "KSalad",
            "value": 2,
            "shape": [],
            "code": "KSalad = data[\"KSalad\"] # scalar parameter"
        },
        {
            "definition": "Units of potassium in one fruit bowl",
            "symbol": "KFruitBowl",
            "value": 8,
            "shape": [],
            "code": "KFruitBowl = data[\"KFruitBowl\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Each staff must receive at least V units of vitamins from salads and fruit bowls",
            "status": "coded",
            "formulation": "\\textup{VSalad} \\times \\textup{NumSalads} + \\textup{VFruitBowl} \\times \\textup{NumFruitBowls} \\geq \\textup{V}",
            "related_variables": [
                "NumSalads",
                "NumFruitBowls"
            ],
            "related_parameters": [
                "VSalad",
                "VFruitBowl",
                "V"
            ],
            "code": "# Each staff must receive at least V units of vitamins from salads and fruit bowls\nmodel.addConstr(VSalad * NumSalads + VFruitBowl * NumFruitBowls >= V, name=\"vitamin_intake\")"
        },
        {
            "description": "Each staff must receive at least F units of fibre",
            "status": "coded",
            "formulation": "\\textup{NumSalads} \\cdot \\textup{FSalad} + \\textup{NumFruitBowls} \\cdot \\textup{FFruitBowl} \\geq \\textup{F}",
            "related_variables": [
                "NumSalads",
                "NumFruitBowls"
            ],
            "related_parameters": [
                "FSalad",
                "FFruitBowl",
                "F"
            ],
            "code": "# Ensure each staff member receives at least F units of fibre\nmodel.addConstr(NumSalads * FSalad + NumFruitBowls * FFruitBowl >= F, name=\"min_fibre_intake\")"
        },
        {
            "description": "Each staff is limited to a maximum proportion of MaxFruitBowlProportion of their total meals as fruit bowls",
            "status": "coded",
            "formulation": "\\textup{NumFruitBowls} \\leq \\textup{MaxFruitBowlProportion} \\cdot (\\textup{NumSalads} + \\textup{NumFruitBowls})",
            "related_variables": [
                "NumSalads",
                "NumFruitBowls"
            ],
            "related_parameters": [
                "MaxFruitBowlProportion"
            ],
            "code": "# Each staff is limited to a maximum proportion of MaxFruitBowlProportion of their total meals as fruit bowls\nmodel.addConstr(NumFruitBowls <= MaxFruitBowlProportion * (NumSalads + NumFruitBowls), \"max_fruit_bowl_proportion\")"
        },
        {
            "description": "Each staff member must receive a non-negative number of salads",
            "status": "coded",
            "formulation": "\\textup{NumSalads} \\geq 0",
            "related_variables": [
                "NumSalads"
            ],
            "related_parameters": [],
            "code": "# Since NumSalads is a scalar and already defined as an integer variable, we just need to add the non-negativity constraint\nmodel.addConstr(NumSalads >= 0, name=\"salads_non_negative\")"
        },
        {
            "description": "The number of fruit bowls prepared for each staff member must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumFruitBowl} \\geq 0",
            "related_variables": [
                "NumFruitBowls"
            ],
            "related_parameters": [],
            "code": "# Since NumFruitBowls is already an integer variable, we only need to add the constraint that it is non-negative\nmodel.addConstr(NumFruitBowls >= 0, \"NumFruitBowls_nonnegativity\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of salads each staff will receive",
            "symbol": "NumSalads",
            "shape": [],
            "status": "coded",
            "code": "NumSalads = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumSalads\")"
        },
        {
            "definition": "Number of fruit bowls each staff will receive",
            "symbol": "NumFruitBowls",
            "shape": [],
            "status": "coded",
            "code": "NumFruitBowls = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumFruitBowls\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total potassium intake from salads and fruit bowls for each staff member",
            "status": "coded",
            "formulation": "\\textup{Maximize} \\quad \\textup{TotalPotassiumIntake} = \\textup{NumSalads} \\times \\textup{KSalad} + \\textup{NumFruitBowls} \\times \\textup{KFruitBowl}",
            "related_variables": [
                "NumSalads",
                "NumFruitBowls"
            ],
            "related_parameters": [
                "KSalad",
                "KFruitBowl"
            ],
            "code": "# Set objective function\nTotalPotassiumIntake = NumSalads * KSalad + NumFruitBowls * KFruitBowl\nmodel.setObjective(TotalPotassiumIntake, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 5,
    "error_message": null,
    "obj_val": "unbounded",
    "log_path": "logs/log_20250413170821_nl4opt_prob_248/",
    "problem_path": "data/nl4opt/prob_248/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_248/data.json\", \"r\") as f:\n    data = json.load(f)\n\nV = data[\"V\"] # scalar parameter\nF = data[\"F\"] # scalar parameter\nVSalad = data[\"VSalad\"] # scalar parameter\nFSalad = data[\"FSalad\"] # scalar parameter\nVFruitBowl = data[\"VFruitBowl\"] # scalar parameter\nFFruitBowl = data[\"FFruitBowl\"] # scalar parameter\nMaxFruitBowlProportion = data[\"MaxFruitBowlProportion\"] # scalar parameter\nKSalad = data[\"KSalad\"] # scalar parameter\nKFruitBowl = data[\"KFruitBowl\"] # scalar parameter\nNumSalads = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumSalads\")\nNumFruitBowls = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumFruitBowls\")\n\n# Each staff must receive at least V units of vitamins from salads and fruit bowls\nmodel.addConstr(VSalad * NumSalads + VFruitBowl * NumFruitBowls >= V, name=\"vitamin_intake\")\n\n# Ensure each staff member receives at least F units of fibre\nmodel.addConstr(NumSalads * FSalad + NumFruitBowls * FFruitBowl >= F, name=\"min_fibre_intake\")\n\n# Each staff is limited to a maximum proportion of MaxFruitBowlProportion of their total meals as fruit bowls\nmodel.addConstr(NumFruitBowls <= MaxFruitBowlProportion * (NumSalads + NumFruitBowls), \"max_fruit_bowl_proportion\")\n\n# Since NumSalads is a scalar and already defined as an integer variable, we just need to add the non-negativity constraint\nmodel.addConstr(NumSalads >= 0, name=\"salads_non_negative\")\n\n# Since NumFruitBowls is already an integer variable, we only need to add the constraint that it is non-negative\nmodel.addConstr(NumFruitBowls >= 0, \"NumFruitBowls_nonnegativity\")\n\n# Set objective function\nTotalPotassiumIntake = NumSalads * KSalad + NumFruitBowls * KFruitBowl\nmodel.setObjective(TotalPotassiumIntake, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}