{
    "background": "A man is recommended to eat burgers and pizza to gain weight and needs to meet certain dietary minimums while minimizing cholesterol intake.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Fat content per burger",
            "symbol": "FatPerBurger",
            "value": 10,
            "shape": [],
            "code": "FatPerBurger = data[\"FatPerBurger\"] # scalar parameter"
        },
        {
            "definition": "Calories per burger",
            "symbol": "CaloriesPerBurger",
            "value": 300,
            "shape": [],
            "code": "CaloriesPerBurger = data[\"CaloriesPerBurger\"] # scalar parameter"
        },
        {
            "definition": "Fat content per slice of pizza",
            "symbol": "FatPerPizzaSlice",
            "value": 8,
            "shape": [],
            "code": "FatPerPizzaSlice = data[\"FatPerPizzaSlice\"] # scalar parameter"
        },
        {
            "definition": "Calories per slice of pizza",
            "symbol": "CaloriesPerPizzaSlice",
            "value": 250,
            "shape": [],
            "code": "CaloriesPerPizzaSlice = data[\"CaloriesPerPizzaSlice\"] # scalar parameter"
        },
        {
            "definition": "Minimum required fat",
            "symbol": "MinFat",
            "value": 130,
            "shape": [],
            "code": "MinFat = data[\"MinFat\"] # scalar parameter"
        },
        {
            "definition": "Minimum required calories",
            "symbol": "MinCalories",
            "value": 3000,
            "shape": [],
            "code": "MinCalories = data[\"MinCalories\"] # scalar parameter"
        },
        {
            "definition": "Cholesterol per burger",
            "symbol": "CholesterolPerBurger",
            "value": 12,
            "shape": [],
            "code": "CholesterolPerBurger = data[\"CholesterolPerBurger\"] # scalar parameter"
        },
        {
            "definition": "Cholesterol per slice of pizza",
            "symbol": "CholesterolPerPizzaSlice",
            "value": 10,
            "shape": [],
            "code": "CholesterolPerPizzaSlice = data[\"CholesterolPerPizzaSlice\"] # scalar parameter"
        },
        {
            "definition": "Ratio of the number of pizza slices to the number of burgers",
            "symbol": "PizzaBurgerRatio",
            "value": 0.33,
            "shape": [],
            "code": "PizzaBurgerRatio = data[\"PizzaBurgerRatio\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Total fat from burgers and pizzas must be at least MinFat units",
            "status": "coded",
            "formulation": "\\textup{FatPerBurger} \\times \\textup{BurgersEaten} + \\textup{FatPerPizzaSlice} \\times \\textup{PizzasEaten} \\geq \\textup{MinFat}",
            "related_variables": [
                "BurgersEaten",
                "PizzasEaten"
            ],
            "related_parameters": [
                "FatPerBurger",
                "FatPerPizzaSlice",
                "MinFat"
            ],
            "code": "# Add constraint for minimum total fat from burgers and pizzas\nmodel.addConstr(FatPerBurger * BurgersEaten + FatPerPizzaSlice * PizzasEaten >= MinFat, name=\"min_total_fat\")"
        },
        {
            "description": "Total calories from burgers and pizzas must be at least MinCalories",
            "status": "coded",
            "formulation": "\\textup{CaloriesPerBurger} \\cdot \\textup{BurgersEaten} + \\textup{CaloriesPerPizzaSlice} \\cdot \\textup{PizzasEaten} \\geq \\textup{MinCalories}",
            "related_variables": [
                "BurgersEaten",
                "PizzasEaten"
            ],
            "related_parameters": [
                "CaloriesPerBurger",
                "CaloriesPerPizzaSlice",
                "MinCalories"
            ],
            "code": "# Add a constraint for minimum calorie intake\nmodel.addConstr(CaloriesPerBurger * BurgersEaten + CaloriesPerPizzaSlice * PizzasEaten >= MinCalories, \"min_calories\")"
        },
        {
            "description": "The quantity of pizza slices eaten must be at least PizzaBurgerRatio times the quantity of burgers eaten",
            "status": "coded",
            "formulation": "\\textup{PizzasEaten} \\geq \\textup{PizzaBurgerRatio} \\times \\textup{BurgersEaten}",
            "related_variables": [
                "PizzasEaten",
                "BurgersEaten"
            ],
            "related_parameters": [
                "PizzaBurgerRatio"
            ],
            "code": "# Add constraint for pizza slices eaten to be at least PizzaBurgerRatio times the burgers eaten\nmodel.addConstr(PizzasEaten >= PizzaBurgerRatio * BurgersEaten, name=\"pizza_burger_ratio_constraint\")"
        },
        {
            "description": "Number of burgers eaten must be non-negative",
            "status": "coded",
            "formulation": "\\textup{BurgersEaten} \\geq 0",
            "related_variables": [
                "BurgersEaten"
            ],
            "related_parameters": [],
            "code": "# Add constraint for non-negative burgers eaten\nmodel.addConstr(BurgersEaten >= 0, name=\"non_negative_burgers\")"
        },
        {
            "description": "Number of pizza slices eaten must be non-negative",
            "status": "coded",
            "formulation": "\\textup{PizzasEaten} \\geq 0",
            "related_variables": [
                "PizzasEaten"
            ],
            "related_parameters": [],
            "code": "# Constraint to ensure the number of pizza slices eaten is non-negative\nmodel.addConstr(PizzasEaten >= 0, name=\"non_negative_pizza_slices\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of burgers the man eats",
            "symbol": "BurgersEaten",
            "shape": [],
            "status": "coded",
            "code": "BurgersEaten = model.addVar(vtype=gp.GRB.INTEGER, name=\"BurgersEaten\")"
        },
        {
            "definition": "Number of pizza slices the man eats",
            "symbol": "PizzasEaten",
            "shape": [],
            "status": "coded",
            "code": "PizzasEaten = model.addVar(vtype=gp.GRB.INTEGER, name=\"PizzasEaten\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cholesterol intake from burgers and pizzas",
            "status": "coded",
            "formulation": "\\textup{TotalCholesterolIntake} = \\textup{CholesterolPerBurger} \\cdot \\textup{BurgersEaten} + \\textup{CholesterolPerPizzaSlice} \\cdot \\textup{PizzasEaten}",
            "related_variables": [
                "BurgersEaten",
                "PizzasEaten"
            ],
            "related_parameters": [
                "CholesterolPerBurger",
                "CholesterolPerPizzaSlice"
            ],
            "code": "# Define the objective function\nobjective = CholesterolPerBurger * BurgersEaten + CholesterolPerPizzaSlice * PizzasEaten\nmodel.setObjective(objective, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413111132_nl4opt_prob_117/",
    "problem_path": "data/nl4opt/prob_117/"
}