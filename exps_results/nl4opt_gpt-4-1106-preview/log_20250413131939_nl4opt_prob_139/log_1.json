{
    "background": "A popup clinic is administering spit tests and swabs for virus testing with constrained resources and time.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Time to administer a spit test",
            "symbol": "SpitTestTime",
            "value": 10,
            "shape": [],
            "code": "SpitTestTime = data[\"SpitTestTime\"] # scalar parameter"
        },
        {
            "definition": "Time to administer a swab test",
            "symbol": "SwabTestTime",
            "value": 15,
            "shape": [],
            "code": "SwabTestTime = data[\"SwabTestTime\"] # scalar parameter"
        },
        {
            "definition": "Minimum ratio of spit tests to swabs",
            "symbol": "SpitSwabRatio",
            "value": 2.0,
            "shape": [],
            "code": "SpitSwabRatio = data[\"SpitSwabRatio\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of swabs",
            "symbol": "MinSwabs",
            "value": 20,
            "shape": [],
            "code": "MinSwabs = data[\"MinSwabs\"] # scalar parameter"
        },
        {
            "definition": "Total operation time of the popup clinic",
            "symbol": "TotalTime",
            "value": 8000,
            "shape": [],
            "code": "TotalTime = data[\"TotalTime\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The total time spent on spit tests and swabs cannot exceed the total operation time of the popup clinic",
            "status": "coded",
            "formulation": "\\textup{SpitTestTime} \\times \\textup{NumberOfSpitTests} + \\textup{SwabTestTime} \\times \\textup{NumberOfSwabs} \\leq \\textup{TotalTime}",
            "related_variables": [
                "NumberOfSpitTests",
                "NumberOfSwabs"
            ],
            "related_parameters": [
                "SpitTestTime",
                "SwabTestTime",
                "TotalTime"
            ],
            "code": "# Add constraint for the total time spent on spit tests and swabs not exceeding total operation time\nmodel.addConstr(SpitTestTime * NumberOfSpitTests + SwabTestTime * NumberOfSwabs <= TotalTime, name=\"total_test_time_constraint\")"
        },
        {
            "description": "Number of spit tests must be at least SpitSwabRatio times the number of swabs",
            "status": "coded",
            "formulation": "\\textup{NumberOfSpitTests} \\geq \\textup{SpitSwabRatio} \\times \\textup{NumberOfSwabs}",
            "related_variables": [
                "NumberOfSpitTests",
                "NumberOfSwabs"
            ],
            "related_parameters": [
                "SpitSwabRatio"
            ],
            "code": "# Add constraint to ensure the number of spit tests is at least SpitSwabRatio times the number of swabs\nmodel.addConstr(NumberOfSpitTests >= SpitSwabRatio * NumberOfSwabs, name=\"spit_to_swab_ratio\")"
        },
        {
            "description": "The number of spit tests must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfSpitTests} \\geq 0",
            "related_variables": [
                "NumberOfSpitTests"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for the number of spit tests\nmodel.addConstr(NumberOfSpitTests >= 0, name=\"nonnegativity_spit_tests\")"
        },
        {
            "description": "The number of swab tests administered must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfSwabs} \\geq 0",
            "related_variables": [
                "NumberOfSwabs"
            ],
            "related_parameters": [],
            "code": "# Since NumberOfSwabs is already defined as an integer variable, no additional constraint is needed\n# to ensure non-negativity. Integer variables in Gurobi are non-negative by default."
        },
        {
            "description": "At least MinSwabs swabs must be administered",
            "status": "coded",
            "formulation": "\\textup{NumberOfSwabs} \\geq \\textup{MinSwabs}",
            "related_variables": [
                "NumberOfSwabs"
            ],
            "related_parameters": [
                "MinSwabs"
            ],
            "code": "# Add constraint for minimum number of swabs\nmodel.addConstr(NumberOfSwabs >= MinSwabs, name=\"min_swabs\")"
        },
        {
            "description": "The minimum number of swabs the clinic needs to administer",
            "status": "coded",
            "formulation": "\\textup{NumberOfSwabs} \\geq \\textup{MinSwabs}",
            "related_variables": [
                "NumberOfSwabs"
            ],
            "related_parameters": [
                "MinSwabs"
            ],
            "code": "# Ensure the minimum number of swabs is administered\nmodel.addConstr(NumberOfSwabs >= MinSwabs, name=\"min_swabs_requirement\")"
        },
        {
            "description": "The minimum ratio of spit tests to swabs needs to be maintained",
            "status": "coded",
            "formulation": "\\frac{\\textup{NumberOfSpitTests}}{\\textup{NumberOfSwabs}} \\geq \\textup{SpitSwabRatio}",
            "related_variables": [
                "NumberOfSpitTests",
                "NumberOfSwabs"
            ],
            "related_parameters": [
                "SpitSwabRatio"
            ],
            "code": "# Constraint to maintain minimum ratio of spit tests to swabs\nmodel.addConstr(NumberOfSpitTests >= SpitSwabRatio * NumberOfSwabs, name=\"SpitSwabRatioConstraint\")"
        },
        {
            "description": "The time to administer all spit and swab tests must not exceed the total operation time of the clinic",
            "status": "coded",
            "formulation": "\\textup{SpitTestTime} \\cdot \\textup{NumberOfSpitTests} + \\textup{SwabTestTime} \\cdot \\textup{NumberOfSwabs} \\leq \\textup{TotalTime}",
            "related_variables": [
                "NumberOfSpitTests",
                "NumberOfSwabs"
            ],
            "related_parameters": [
                "SpitTestTime",
                "SwabTestTime",
                "TotalTime"
            ],
            "code": "# Add constraint for the time to administer tests not exceeding clinic's total operation time\nmodel.addConstr(SpitTestTime * NumberOfSpitTests + SwabTestTime * NumberOfSwabs <= TotalTime, \"clinic_operation_time\")"
        },
        {
            "description": "The minimum number of swabs must be respected",
            "status": "coded",
            "formulation": "\\textup{NumberOfSwabs} \\geq \\textup{MinSwabs}",
            "related_variables": [
                "NumberOfSwabs"
            ],
            "related_parameters": [
                "MinSwabs"
            ],
            "code": "# Ensure the minimum number of swabs is respected\nmodel.addConstr(NumberOfSwabs >= MinSwabs, name=\"min_swabs_constraint\")"
        },
        {
            "description": "The number of spit tests must be at least twice the number of swabs",
            "status": "coded",
            "formulation": "\\textup{NumberOfSpitTests} \\geq \\textup{SpitSwabRatio} \\cdot \\textup{NumberOfSwabs}",
            "related_variables": [
                "NumberOfSpitTests",
                "NumberOfSwabs"
            ],
            "related_parameters": [
                "SpitSwabRatio"
            ],
            "code": "# Constraint: The number of spit tests must be at least twice the number of swabs\nmodel.addConstr(NumberOfSpitTests >= SpitSwabRatio * NumberOfSwabs, \"SpitTestSwabConstraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of spit tests administered",
            "symbol": "NumberOfSpitTests",
            "shape": [],
            "status": "coded",
            "code": "NumberOfSpitTests = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfSpitTests\")"
        },
        {
            "definition": "The number of swab tests administered",
            "symbol": "NumberOfSwabs",
            "shape": [],
            "status": "coded",
            "code": "NumberOfSwabs = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfSwabs\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total number of spit tests and swab tests administered",
            "status": "coded",
            "formulation": "\\max (\\textup{NumberOfSpitTests} + \\textup{NumberOfSwabs})",
            "related_variables": [
                "NumberOfSpitTests",
                "NumberOfSwabs"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(NumberOfSpitTests + NumberOfSwabs, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413131939_nl4opt_prob_139/",
    "problem_path": "data/nl4opt/prob_139/"
}