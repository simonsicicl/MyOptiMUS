{
    "background": "A railway company is planning transportation infrastructure in the city, focusing on trains and trams with different capacities and building times.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of people per hour a train can transport comfortably",
            "symbol": "TrainCapacity",
            "value": 120,
            "shape": [],
            "code": "TrainCapacity = data[\"TrainCapacity\"] # scalar parameter"
        },
        {
            "definition": "Number of people per hour a tram can transport comfortably",
            "symbol": "TramCapacity",
            "value": 30,
            "shape": [],
            "code": "TramCapacity = data[\"TramCapacity\"] # scalar parameter"
        },
        {
            "definition": "Minimum ratio of the number of trams to the number of trains",
            "symbol": "TramTrainRatio",
            "value": 2,
            "shape": [],
            "code": "TramTrainRatio = data[\"TramTrainRatio\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of people per hour to be transported",
            "symbol": "MinPeople",
            "value": 600,
            "shape": [],
            "code": "MinPeople = data[\"MinPeople\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of trains must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfTrains} \\geq 0",
            "related_variables": [
                "NumberOfTrains"
            ],
            "related_parameters": [],
            "code": "# The number of trains must be non-negative. Since the variable is defined as an integer, it cannot be negative by definition in Gurobi.\n# No additional constraint is needed."
        },
        {
            "description": "Number of trams must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfTrams} \\geq 0",
            "related_variables": [
                "NumberOfTrams"
            ],
            "related_parameters": [],
            "code": "model.addConstr(NumberOfTrams >= 0, name=\"trams_non_negative\")"
        },
        {
            "description": "Number of trams must be at least TramTrainRatio times the number of trains",
            "status": "coded",
            "formulation": "\\textup{NumberOfTrams} \\geq \\textup{TramTrainRatio} \\times \\textup{NumberOfTrains}",
            "related_variables": [
                "NumberOfTrams",
                "NumberOfTrains"
            ],
            "related_parameters": [
                "TramTrainRatio"
            ],
            "code": "# Add the constraint that number of trams must be at least TramTrainRatio times the number of trains\nmodel.addConstr(NumberOfTrams >= TramTrainRatio * NumberOfTrains, name=\"TramTrainRatioConstraint\")"
        },
        {
            "description": "Total transportation capacity should meet or exceed the minimum required people per hour",
            "status": "coded",
            "formulation": "\\textup{NumberOfTrains} \\times \\textup{TrainCapacity} + \\textup{NumberOfTrams} \\times \\textup{TramCapacity} \\geq \\textup{MinPeople}",
            "related_variables": [
                "NumberOfTrains",
                "NumberOfTrams"
            ],
            "related_parameters": [
                "TrainCapacity",
                "TramCapacity",
                "MinPeople"
            ],
            "code": "# Constraint: Total transportation capacity should meet or exceed the minimum required people per hour\nmodel.addConstr((NumberOfTrains * TrainCapacity) + (NumberOfTrams * TramCapacity) >= MinPeople, \"capacity_constraint\")"
        },
        {
            "description": "Ensure that the minimum number of people per hour to be transported is met",
            "status": "coded",
            "formulation": "\\textup{TrainCapacity} \\cdot \\textup{NumberOfTrains} + \\textup{TramCapacity} \\cdot \\textup{NumberOfTrams} \\geq \\textup{MinPeople}",
            "related_variables": [
                "NumberOfTrains",
                "NumberOfTrams"
            ],
            "related_parameters": [
                "TrainCapacity",
                "TramCapacity",
                "MinPeople"
            ],
            "code": "TrainCapacity = data[\"TrainCapacity\"]  # scalar parameter, assumed to be defined as given\nTramCapacity = data[\"TramCapacity\"]    # scalar parameter, assumed to be defined as given\nMinPeople = data[\"MinPeople\"]          # scalar parameter, assumed to be defined as given\n\n# Ensure that the minimum number of people per hour to be transported is met\nmodel.addConstr(TrainCapacity * NumberOfTrains + TramCapacity * NumberOfTrams >= MinPeople, name=\"min_people_transportation\")"
        },
        {
            "description": "Ensure that the number of trams is at least twice the number of trains as per the minimum ratio requirement",
            "status": "coded",
            "formulation": "\\textup{NumberOfTrams} \\geq \\textup{TramTrainRatio} \\cdot \\textup{NumberOfTrains}",
            "related_variables": [
                "NumberOfTrains",
                "NumberOfTrams"
            ],
            "related_parameters": [
                "TramTrainRatio"
            ],
            "code": "# Add constraint to ensure that the number of trams is at least twice the number of trains\nmodel.addConstr(NumberOfTrams >= TramTrainRatio * NumberOfTrains, name=\"TramTrainMinRatio\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of trains in the transportation infrastructure",
            "symbol": "NumberOfTrains",
            "shape": [],
            "status": "coded",
            "code": "NumberOfTrains = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfTrains\")"
        },
        {
            "definition": "Number of trams in the transportation infrastructure",
            "symbol": "NumberOfTrams",
            "shape": [],
            "status": "coded",
            "code": "NumberOfTrams = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfTrams\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of trains and trams required for transportation",
            "status": "coded",
            "formulation": "\\min \\textup{NumberOfTrains} + \\textup{NumberOfTrams}",
            "related_variables": [
                "NumberOfTrains",
                "NumberOfTrams"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(NumberOfTrains + NumberOfTrams, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413171807_nl4opt_prob_256/",
    "problem_path": "data/nl4opt/prob_256/"
}