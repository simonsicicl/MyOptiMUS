{
    "background": "A doctor advises a patient to consume oranges and grapefruits to meet certain vitamin C and vitamin A requirements, while minimizing sugar intake.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of vitamin C in one orange",
            "symbol": "VitaminCOrange",
            "value": 5,
            "shape": [],
            "code": "VitaminCOrange = data[\"VitaminCOrange\"] # scalar parameter"
        },
        {
            "definition": "Units of vitamin A in one orange",
            "symbol": "VitaminAOrange",
            "value": 3,
            "shape": [],
            "code": "VitaminAOrange = data[\"VitaminAOrange\"] # scalar parameter"
        },
        {
            "definition": "Grams of sugar in one orange",
            "symbol": "SugarOrange",
            "value": 5,
            "shape": [],
            "code": "SugarOrange = data[\"SugarOrange\"] # scalar parameter"
        },
        {
            "definition": "Units of vitamin C in one grapefruit",
            "symbol": "VitaminCGrapefruit",
            "value": 7,
            "shape": [],
            "code": "VitaminCGrapefruit = data[\"VitaminCGrapefruit\"] # scalar parameter"
        },
        {
            "definition": "Units of vitamin A in one grapefruit",
            "symbol": "VitaminAGrapefruit",
            "value": 5,
            "shape": [],
            "code": "VitaminAGrapefruit = data[\"VitaminAGrapefruit\"] # scalar parameter"
        },
        {
            "definition": "Grams of sugar in one grapefruit",
            "symbol": "SugarGrapefruit",
            "value": 6,
            "shape": [],
            "code": "SugarGrapefruit = data[\"SugarGrapefruit\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of vitamin C",
            "symbol": "MinVitaminC",
            "value": 80,
            "shape": [],
            "code": "MinVitaminC = data[\"MinVitaminC\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of vitamin A",
            "symbol": "MinVitaminA",
            "value": 70,
            "shape": [],
            "code": "MinVitaminA = data[\"MinVitaminA\"] # scalar parameter"
        },
        {
            "definition": "Ratio of the number of oranges to grapefruits",
            "symbol": "OrangeGrapefruitRatio",
            "value": 2,
            "shape": [],
            "code": "OrangeGrapefruitRatio = data[\"OrangeGrapefruitRatio\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of oranges must be non-negative",
            "status": "coded",
            "formulation": "NumberOfOranges \\geq 0",
            "related_variables": [
                "NumberOfOranges"
            ],
            "related_parameters": [],
            "code": "model.addConstr(NumberOfOranges >= 0, name=\"non_negativity_oranges\")"
        },
        {
            "description": "Number of grapefruits must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfGrapefruits} \\geq 0",
            "related_variables": [
                "NumberOfGrapefruits"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of grapefruits is non-negative\nmodel.addConstr(NumberOfGrapefruits >= 0, name=\"grapefruits_non_negative\")"
        },
        {
            "description": "Total vitamin C from oranges and grapefruits must be at least MinVitaminC",
            "status": "coded",
            "formulation": "\\textup{VitaminCOrange} \\times \\textup{NumberOfOranges} + \\textup{VitaminCGrapefruit} \\times \\textup{NumberOfGrapefruits} \\geq \\textup{MinVitaminC}",
            "related_variables": [
                "NumberOfOranges",
                "NumberOfGrapefruits"
            ],
            "related_parameters": [
                "VitaminCOrange",
                "VitaminCGrapefruit",
                "MinVitaminC"
            ],
            "code": "# Add constraint for the minimum total vitamin C from oranges and grapefruits\nmodel.addConstr(VitaminCOrange * NumberOfOranges + VitaminCGrapefruit * NumberOfGrapefruits >= MinVitaminC, name=\"min_vitamin_c\")"
        },
        {
            "description": "Total vitamin A from oranges and grapefruits must be at least MinVitaminA",
            "status": "coded",
            "formulation": "\\textup{NumberOfOranges} \\cdot \\textup{VitaminAOrange} + \\textup{NumberOfGrapefruits} \\cdot \\textup{VitaminAGrapefruit} \\geq \\textup{MinVitaminA}",
            "related_variables": [
                "NumberOfOranges",
                "NumberOfGrapefruits"
            ],
            "related_parameters": [
                "VitaminAOrange",
                "VitaminAGrapefruit",
                "MinVitaminA"
            ],
            "code": "# Add constraint for the minimum total vitamin A from oranges and grapefruits\nmodel.addConstr(NumberOfOranges * VitaminAOrange + NumberOfGrapefruits * VitaminAGrapefruit >= MinVitaminA, name=\"MinVitaminARequirement\")"
        },
        {
            "description": "The patient must eat at least OrangeGrapefruitRatio times as many oranges as grapefruits",
            "status": "coded",
            "formulation": "\\textup{NumberOfOranges} \\geq \\textup{OrangeGrapefruitRatio} \\times \\textup{NumberOfGrapefruits}",
            "related_variables": [
                "NumberOfOranges",
                "NumberOfGrapefruits"
            ],
            "related_parameters": [
                "OrangeGrapefruitRatio"
            ],
            "code": "# Constraint for minimum oranges to grapefruits ratio\nmodel.addConstr(NumberOfOranges >= OrangeGrapefruitRatio * NumberOfGrapefruits, name=\"min_oranges_to_grapefruits_ratio\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of oranges in the diet plan",
            "symbol": "NumberOfOranges",
            "shape": [],
            "status": "coded",
            "code": "NumberOfOranges = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfOranges\")"
        },
        {
            "definition": "The number of grapefruits in the diet plan",
            "symbol": "NumberOfGrapefruits",
            "shape": [],
            "status": "coded",
            "code": "NumberOfGrapefruits = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfGrapefruits\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total sugar intake from consuming oranges and grapefruits",
            "status": "coded",
            "formulation": "\\textup{Minimize}\\quad TotalSugarIntake = \\textup{SugarOrange} \\cdot \\textup{NumberOfOranges} + \\textup{SugarGrapefruit} \\cdot \\textup{NumberOfGrapefruits}",
            "related_variables": [
                "NumberOfOranges",
                "NumberOfGrapefruits"
            ],
            "related_parameters": [
                "SugarOrange",
                "SugarGrapefruit"
            ],
            "code": "# Define Objective Function\nmodel.setObjective(SugarOrange * NumberOfOranges + SugarGrapefruit * NumberOfGrapefruits, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413131656_nl4opt_prob_137/",
    "problem_path": "data/nl4opt/prob_137/"
}