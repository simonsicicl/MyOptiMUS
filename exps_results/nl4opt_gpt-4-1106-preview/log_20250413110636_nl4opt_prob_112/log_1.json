{
    "background": "A science show has two different demonstrations that use mint and active ingredients to produce minty foam and black tar. There are limited resources of mint, active ingredients, and a maximum amount of black tar that can be tolerated.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of mint used in demonstration 1",
            "symbol": "MintD1",
            "value": 10,
            "shape": [],
            "code": "MintD1 = data[\"MintD1\"] # scalar parameter"
        },
        {
            "definition": "Units of mint used in demonstration 2",
            "symbol": "MintD2",
            "value": 12,
            "shape": [],
            "code": "MintD2 = data[\"MintD2\"] # scalar parameter"
        },
        {
            "definition": "Units of active ingredient used in demonstration 1",
            "symbol": "ActiveD1",
            "value": 20,
            "shape": [],
            "code": "ActiveD1 = data[\"ActiveD1\"] # scalar parameter"
        },
        {
            "definition": "Units of active ingredient used in demonstration 2",
            "symbol": "ActiveD2",
            "value": 15,
            "shape": [],
            "code": "ActiveD2 = data[\"ActiveD2\"] # scalar parameter"
        },
        {
            "definition": "Units of minty foam produced in demonstration 1",
            "symbol": "FoamD1",
            "value": 25,
            "shape": [],
            "code": "FoamD1 = data[\"FoamD1\"] # scalar parameter"
        },
        {
            "definition": "Units of minty foam produced in demonstration 2",
            "symbol": "FoamD2",
            "value": 18,
            "shape": [],
            "code": "FoamD2 = data[\"FoamD2\"] # scalar parameter"
        },
        {
            "definition": "Units of black tar produced in demonstration 1",
            "symbol": "TarD1",
            "value": 5,
            "shape": [],
            "code": "TarD1 = data[\"TarD1\"] # scalar parameter"
        },
        {
            "definition": "Units of black tar produced in demonstration 2",
            "symbol": "TarD2",
            "value": 3,
            "shape": [],
            "code": "TarD2 = data[\"TarD2\"] # scalar parameter"
        },
        {
            "definition": "Total available units of mint",
            "symbol": "TotalMint",
            "value": 120,
            "shape": [],
            "code": "TotalMint = data[\"TotalMint\"] # scalar parameter"
        },
        {
            "definition": "Total available units of active ingredient",
            "symbol": "TotalActive",
            "value": 100,
            "shape": [],
            "code": "TotalActive = data[\"TotalActive\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowable units of black tar to be produced",
            "symbol": "MaxTar",
            "value": 50,
            "shape": [],
            "code": "MaxTar = data[\"MaxTar\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of Demonstration 1 must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumDem1} \\geq 0",
            "related_variables": [
                "NumDem1"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for the number of times Demonstration 1 is conducted\nmodel.addConstr(NumDem1 >= 0, name=\"nonnegativity_NumDem1\")"
        },
        {
            "description": "The number of Demonstration 2 must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumDem2} \\geq 0",
            "related_variables": [
                "NumDem2"
            ],
            "related_parameters": [],
            "code": "# Constraint to ensure the number of Demonstration 2 is non-negative\nmodel.addConstr(NumDem2 >= 0, name=\"non_negativity_Dem2\")"
        },
        {
            "description": "Total mint used in both demonstrations cannot exceed the available total mint",
            "status": "coded",
            "formulation": "\\textup{NumDem1} \\cdot \\textup{MintD1} + \\textup{NumDem2} \\cdot \\textup{MintD2} \\leq \\textup{TotalMint}",
            "related_variables": [
                "NumDem1",
                "NumDem2"
            ],
            "related_parameters": [
                "MintD1",
                "MintD2",
                "TotalMint"
            ],
            "code": "# Constraint: Total mint used in both demonstrations cannot exceed the available total mint\nmodel.addConstr(NumDem1 * MintD1 + NumDem2 * MintD2 <= TotalMint, name=\"mint_usage_limit\")"
        },
        {
            "description": "Total used units of active ingredient in both demonstrations should not exceed TotalActive",
            "status": "coded",
            "formulation": "\\textup{NumDem1} \\cdot \\textup{ActiveD1} + \\textup{NumDem2} \\cdot \\textup{ActiveD2} \\leq \\textup{TotalActive}",
            "related_variables": [
                "NumDem1",
                "NumDem2"
            ],
            "related_parameters": [
                "ActiveD1",
                "ActiveD2",
                "TotalActive"
            ],
            "code": "# Add constraint for total used units of active ingredient not to exceed TotalActive\nmodel.addConstr(NumDem1 * ActiveD1 + NumDem2 * ActiveD2 <= TotalActive, name=\"total_active_ingredient\")"
        },
        {
            "description": "Total produced units of black tar from Demonstration 1 and Demonstration 2 cannot exceed MaxTar",
            "status": "coded",
            "formulation": "\\textup{NumDem1} \\cdot \\textup{TarD1} + \\textup{NumDem2} \\cdot \\textup{TarD2} \\leq \\textup{MaxTar}",
            "related_variables": [
                "NumDem1",
                "NumDem2"
            ],
            "related_parameters": [
                "TarD1",
                "TarD2",
                "MaxTar"
            ],
            "code": "# Black tar production constraint from Demonstration 1 and 2 should not exceed MaxTar\nmodel.addConstr(NumDem1 * TarD1 + NumDem2 * TarD2 <= MaxTar, name=\"black_tar_production_limit\")"
        },
        {
            "description": "The total usage of mint for all demonstrations does not exceed the total available units of mint",
            "status": "coded",
            "formulation": "\\textup{MintD1} \\cdot \\textup{NumDem1} + \\textup{MintD2} \\cdot \\textup{NumDem2} \\leq \\textup{TotalMint}",
            "related_variables": [
                "NumDem1",
                "NumDem2"
            ],
            "related_parameters": [
                "MintD1",
                "MintD2",
                "TotalMint"
            ],
            "code": "# Constraint: The total usage of mint for all demonstrations does not exceed the total available units of mint\nmodel.addConstr(MintD1 * NumDem1 + MintD2 * NumDem2 <= TotalMint, name=\"mint_usage\")"
        },
        {
            "description": "The total usage of active ingredients for all demonstrations does not exceed the total available units of active ingredient",
            "status": "coded",
            "formulation": "\\textup{ActiveD1} \\cdot \\textup{NumDem1} + \\textup{ActiveD2} \\cdot \\textup{NumDem2} \\leq \\textup{TotalActive}",
            "related_variables": [
                "NumDem1",
                "NumDem2"
            ],
            "related_parameters": [
                "ActiveD1",
                "ActiveD2",
                "TotalActive"
            ],
            "code": "# Add constraint for total usage of active ingredients\nmodel.addConstr(ActiveD1 * NumDem1 + ActiveD2 * NumDem2 <= TotalActive, name=\"total_active_ingredient_usage\")"
        },
        {
            "description": "The total amount of black tar produced from all demonstrations does not exceed the maximum allowable units of black tar",
            "status": "coded",
            "formulation": "\\textup{TarD1} \\cdot \\textup{NumDem1} + \\textup{TarD2} \\cdot \\textup{NumDem2} \\leq \\textup{MaxTar}",
            "related_variables": [
                "NumDem1",
                "NumDem2"
            ],
            "related_parameters": [
                "TarD1",
                "TarD2",
                "MaxTar"
            ],
            "code": "# Black tar production constraint\nmodel.addConstr(TarD1 * NumDem1 + TarD2 * NumDem2 <= MaxTar, name=\"max_black_tar\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of times Demonstration 1 is conducted",
            "symbol": "NumDem1",
            "shape": [],
            "status": "coded",
            "code": "NumDem1 = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumDem1\")"
        },
        {
            "definition": "Number of times Demonstration 2 is conducted",
            "symbol": "NumDem2",
            "shape": [],
            "status": "coded",
            "code": "NumDem2 = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumDem2\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total amount of minty foam produced from both demonstrations",
            "status": "coded",
            "formulation": "\\max \\left( \\textup{FoamD1} \\cdot \\textup{NumDem1} + \\textup{FoamD2} \\cdot \\textup{NumDem2} \\right)",
            "related_variables": [
                "NumDem1",
                "NumDem2"
            ],
            "related_parameters": [
                "FoamD1",
                "FoamD2"
            ],
            "code": "# Set objective\nmodel.setObjective(FoamD1 * NumDem1 + FoamD2 * NumDem2, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413110636_nl4opt_prob_112/",
    "problem_path": "data/nl4opt/prob_112/"
}