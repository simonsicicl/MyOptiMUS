{
    "background": "Mrs. Watson is looking to invest her budget in the real-estate market focusing on two types of properties: condos and detached houses, with specific profits and minimum investment requirements for each.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total budget for investments",
            "symbol": "TotalBudget",
            "value": 760000,
            "shape": [],
            "code": "TotalBudget = data[\"TotalBudget\"] # scalar parameter"
        },
        {
            "definition": "Profit yield per dollar invested in condos",
            "symbol": "ProfitCondo",
            "value": 0.5,
            "shape": [],
            "code": "ProfitCondo = data[\"ProfitCondo\"] # scalar parameter"
        },
        {
            "definition": "Profit yield per dollar invested in detached houses",
            "symbol": "ProfitHouse",
            "value": 1,
            "shape": [],
            "code": "ProfitHouse = data[\"ProfitHouse\"] # scalar parameter"
        },
        {
            "definition": "Minimum percentage of total investment that must be in condos",
            "symbol": "MinPercentCondo",
            "value": 0.2,
            "shape": [],
            "code": "MinPercentCondo = data[\"MinPercentCondo\"] # scalar parameter"
        },
        {
            "definition": "Minimum investment in detached houses",
            "symbol": "MinInvestHouse",
            "value": 20000,
            "shape": [],
            "code": "MinInvestHouse = data[\"MinInvestHouse\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The total investment in both condos and detached houses must be at most TotalBudget",
            "status": "coded",
            "formulation": "\\textup{InvestmentCondo} + \\textup{InvestmentHouse} \\leq \\textup{TotalBudget}",
            "related_variables": [
                "InvestmentCondo",
                "InvestmentHouse"
            ],
            "related_parameters": [
                "TotalBudget"
            ],
            "code": "# Add constraint for the total investment in condos and houses not to exceed the total budget\nmodel.addConstr(InvestmentCondo + InvestmentHouse <= TotalBudget, name=\"total_investment_constraint\")"
        },
        {
            "description": "The investment in condos must be at least MinPercentCondo of the total investment",
            "status": "coded",
            "formulation": "\\textup{InvestmentCondo} \\geq \\textup{MinPercentCondo} \\times (\\textup{InvestmentCondo} + \\textup{InvestmentHouse})",
            "related_variables": [
                "InvestmentCondo",
                "InvestmentHouse"
            ],
            "related_parameters": [
                "MinPercentCondo"
            ],
            "code": "# Add constraint to ensure the investment in condos is at least MinPercentCondo of the total investment\nmodel.addConstr(InvestmentCondo >= MinPercentCondo * (InvestmentCondo + InvestmentHouse), name=\"min_condo_investment\")"
        },
        {
            "description": "The investment in detached houses must be at least MinInvestHouse",
            "status": "coded",
            "formulation": "\\textup{InvestmentHouse} \\geq \\textup{MinInvestHouse}",
            "related_variables": [
                "InvestmentHouse"
            ],
            "related_parameters": [
                "MinInvestHouse"
            ],
            "code": "# Add minimum investment constraint for detached houses\nmodel.addConstr(InvestmentHouse >= MinInvestHouse, name=\"min_investment_house\")"
        },
        {
            "description": "The amount of money invested in condos must be non-negative",
            "status": "coded",
            "formulation": "\\textup{InvestmentCondo} \\geq 0",
            "related_variables": [
                "InvestmentCondo"
            ],
            "related_parameters": [],
            "code": "model.addConstr(InvestmentCondo >= 0, name=\"condos_non_negative\")"
        },
        {
            "description": "The investment in detached houses must be non-negative",
            "status": "coded",
            "formulation": "\\textup{InvestmentHouse} \\geq 0",
            "related_variables": [
                "InvestmentHouse"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for investment in detached houses\nmodel.addConstr(InvestmentHouse >= 0, name=\"investment_house_nonneg\")"
        }
    ],
    "variables": [
        {
            "definition": "The amount of money invested in condos",
            "symbol": "InvestmentCondo",
            "shape": [],
            "status": "coded",
            "code": "InvestmentCondo = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"InvestmentCondo\")"
        },
        {
            "definition": "The amount of money invested in detached houses",
            "symbol": "InvestmentHouse",
            "shape": [],
            "status": "coded",
            "code": "InvestmentHouse = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"InvestmentHouse\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total profit earned from investments in condos and detached houses",
            "status": "coded",
            "formulation": "\\max\\quad \\textup{ProfitCondo} \\cdot \\textup{InvestmentCondo} + \\textup{ProfitHouse} \\cdot \\textup{InvestmentHouse}",
            "related_variables": [
                "InvestmentCondo",
                "InvestmentHouse"
            ],
            "related_parameters": [
                "ProfitCondo",
                "ProfitHouse"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitCondo * InvestmentCondo + ProfitHouse * InvestmentHouse, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 684000.0,
    "log_path": "logs/log_20250413110327_nl4opt_prob_11/",
    "problem_path": "data/nl4opt/prob_11/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_11/data.json\", \"r\") as f:\n    data = json.load(f)\n\nTotalBudget = data[\"TotalBudget\"] # scalar parameter\nProfitCondo = data[\"ProfitCondo\"] # scalar parameter\nProfitHouse = data[\"ProfitHouse\"] # scalar parameter\nMinPercentCondo = data[\"MinPercentCondo\"] # scalar parameter\nMinInvestHouse = data[\"MinInvestHouse\"] # scalar parameter\nInvestmentCondo = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"InvestmentCondo\")\nInvestmentHouse = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"InvestmentHouse\")\n\n# Add constraint for the total investment in condos and houses not to exceed the total budget\nmodel.addConstr(InvestmentCondo + InvestmentHouse <= TotalBudget, name=\"total_investment_constraint\")\n\n# Add constraint to ensure the investment in condos is at least MinPercentCondo of the total investment\nmodel.addConstr(InvestmentCondo >= MinPercentCondo * (InvestmentCondo + InvestmentHouse), name=\"min_condo_investment\")\n\n# Add minimum investment constraint for detached houses\nmodel.addConstr(InvestmentHouse >= MinInvestHouse, name=\"min_investment_house\")\n\nmodel.addConstr(InvestmentCondo >= 0, name=\"condos_non_negative\")\n\n# Add non-negativity constraint for investment in detached houses\nmodel.addConstr(InvestmentHouse >= 0, name=\"investment_house_nonneg\")\n\n# Set objective\nmodel.setObjective(ProfitCondo * InvestmentCondo + ProfitHouse * InvestmentHouse, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}