{
    "background": "A sand company needs to optimize the number of small and large containers to deliver sand for playgrounds given labor and container constraints.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Number of units of sand a small container can hold",
            "symbol": "SmallCapacity",
            "value": 20,
            "shape": [],
            "code": "SmallCapacity = data[\"SmallCapacity\"] # scalar parameter"
        },
        {
            "definition": "Number of units of sand a large container can hold",
            "symbol": "LargeCapacity",
            "value": 50,
            "shape": [],
            "code": "LargeCapacity = data[\"LargeCapacity\"] # scalar parameter"
        },
        {
            "definition": "Number of people required to unload a small container",
            "symbol": "SmallUnload",
            "value": 1,
            "shape": [],
            "code": "SmallUnload = data[\"SmallUnload\"] # scalar parameter"
        },
        {
            "definition": "Number of people required to unload a large container",
            "symbol": "LargeUnload",
            "value": 3,
            "shape": [],
            "code": "LargeUnload = data[\"LargeUnload\"] # scalar parameter"
        },
        {
            "definition": "Ratio of the number of small containers to the number of large containers",
            "symbol": "ContainerRatio",
            "value": 3,
            "shape": [],
            "code": "ContainerRatio = data[\"ContainerRatio\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of small containers used",
            "symbol": "MinSmallContainers",
            "value": 5,
            "shape": [],
            "code": "MinSmallContainers = data[\"MinSmallContainers\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of large containers used",
            "symbol": "MinLargeContainers",
            "value": 3,
            "shape": [],
            "code": "MinLargeContainers = data[\"MinLargeContainers\"] # scalar parameter"
        },
        {
            "definition": "Total number of people available for unloading",
            "symbol": "PeopleAvailable",
            "value": 100,
            "shape": [],
            "code": "PeopleAvailable = data[\"PeopleAvailable\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Small and large containers must be non-negative integers",
            "status": "coded",
            "formulation": "\\textup{SmallContainers} \\geq 0, \\quad \\textup{LargeContainers} \\geq 0, \\quad \\textup{SmallContainers}, \\textup{LargeContainers} \\in \\mathbb{Z}^{+}",
            "related_variables": [
                "SmallContainers",
                "LargeContainers"
            ],
            "related_parameters": [],
            "code": "# Since the SmallContainers and LargeContainers variables are already defined as integer,\n# with the default lower bound of 0 in Gurobi, there is no need to add any additional constraints.\n# The non-negativity and integrality are already enforced by their respective variable declarations."
        },
        {
            "description": "The total number of people required to unload all small containers should not exceed the number of people available",
            "status": "coded",
            "formulation": "\\textup{SmallContainers} \\times \\textup{SmallUnload} \\leq \\textup{PeopleAvailable}",
            "related_variables": [
                "SmallContainers"
            ],
            "related_parameters": [
                "SmallUnload",
                "PeopleAvailable"
            ],
            "code": "# Constraint: The total number of people required to unload all small containers should not exceed the number of people available\nmodel.addConstr(SmallContainers * SmallUnload <= PeopleAvailable, name=\"small_containers_unloading\")"
        },
        {
            "description": "Small containers used must be ContainerRatio times the number of large containers used",
            "status": "coded",
            "formulation": "\\textup{SmallContainers} = \\textup{ContainerRatio} \\times \\textup{LargeContainers}",
            "related_variables": [
                "SmallContainers",
                "LargeContainers"
            ],
            "related_parameters": [
                "ContainerRatio"
            ],
            "code": ""
        },
        {
            "description": "At least MinSmallContainers small containers must be used",
            "status": "coded",
            "formulation": "\\textup{SmallContainers} \\geq \\textup{MinSmallContainers}",
            "related_variables": [
                "SmallContainers"
            ],
            "related_parameters": [
                "MinSmallContainers"
            ],
            "code": "# Ensure at least MinSmallContainers small containers are used\nmodel.addConstr(SmallContainers >= MinSmallContainers, name=\"min_small_containers\")"
        },
        {
            "description": "At least MinLargeContainers large containers must be used",
            "status": "coded",
            "formulation": "\\textup{LargeContainers} \\geq \\textup{MinLargeContainers}",
            "related_variables": [
                "LargeContainers"
            ],
            "related_parameters": [
                "MinLargeContainers"
            ],
            "code": "# Ensure at least MinLargeContainers large containers are used\nmodel.addConstr(LargeContainers >= MinLargeContainers, name=\"min_large_containers\")"
        },
        {
            "description": "The total people used for unloading should not exceed the total number of people available",
            "status": "coded",
            "formulation": "(\\textup{SmallContainers} \\times \\textup{SmallUnload}) + (\\textup{LargeContainers} \\times \\textup{LargeUnload}) \\leq \\textup{PeopleAvailable}",
            "related_variables": [
                "SmallContainers",
                "LargeContainers"
            ],
            "related_parameters": [
                "SmallUnload",
                "LargeUnload",
                "PeopleAvailable"
            ],
            "code": "# The total people used for unloading should not exceed the total number of people available\nmodel.addConstr((SmallContainers * SmallUnload) + (LargeContainers * LargeUnload) <= PeopleAvailable, \"unloading_capacity\")"
        },
        {
            "description": "The number of small containers used must be at least three times the number of large containers used.",
            "status": "coded",
            "formulation": "\\textup{SmallContainers} \\geq \\textup{ContainerRatio} \\times \\textup{LargeContainers}",
            "related_variables": [
                "SmallContainers",
                "LargeContainers"
            ],
            "related_parameters": [
                "ContainerRatio"
            ],
            "code": "# Add constraint for the relation between small and large containers\nmodel.addConstr(SmallContainers >= ContainerRatio * LargeContainers, name=\"container_ratio_constraint\")"
        },
        {
            "description": "The minimum number of small containers must be used",
            "status": "coded",
            "formulation": "\\textup{SmallContainers} \\geq \\textup{MinSmallContainers}",
            "related_variables": [
                "SmallContainers"
            ],
            "related_parameters": [
                "MinSmallContainers"
            ],
            "code": "# Ensure that the minimum number of small containers is used\nmodel.addConstr(SmallContainers >= MinSmallContainers, name=\"min_small_containers\")"
        },
        {
            "description": "The minimum number of large containers must be used",
            "status": "coded",
            "formulation": "\\textup{LargeContainers} \\geq \\textup{MinLargeContainers}",
            "related_variables": [
                "LargeContainers"
            ],
            "related_parameters": [
                "MinLargeContainers"
            ],
            "code": "model.addConstr(LargeContainers >= MinLargeContainers, name=\"min_large_containers\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of small containers used",
            "symbol": "SmallContainers",
            "shape": [],
            "status": "coded",
            "code": "SmallContainers = model.addVar(vtype=gp.GRB.INTEGER, name=\"SmallContainers\")"
        },
        {
            "definition": "Number of large containers used",
            "symbol": "LargeContainers",
            "shape": [],
            "status": "coded",
            "code": "LargeContainers = model.addVar(vtype=gp.GRB.INTEGER, name=\"LargeContainers\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total units of sand delivered by optimizing the number of small and large containers",
            "status": "coded",
            "formulation": "\\max (\\textup{SmallContainers} \\times \\textup{SmallCapacity} + \\textup{LargeContainers} \\times \\textup{LargeCapacity})",
            "related_variables": [
                "SmallContainers",
                "LargeContainers"
            ],
            "related_parameters": [
                "SmallCapacity",
                "LargeCapacity"
            ],
            "code": "# Set objective\nmodel.setObjective(SmallContainers * SmallCapacity + LargeContainers * LargeCapacity, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": "Traceback (most recent call last):\n  File \"c:\\Users\\Simon\\Desktop\\Courses\\ECE 570\\ECE570_Project\\MyOptiMUS\\evaluator.py\", line 45, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 1\n    ```\n    ^\nSyntaxError: invalid syntax\n",
    "obj_val": 1970.0,
    "log_path": "logs/log_20250413142353_nl4opt_prob_164/",
    "problem_path": "data/nl4opt/prob_164/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_164/data.json\", \"r\") as f:\n    data = json.load(f)\n",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_164/data.json\", \"r\") as f:\n    data = json.load(f)\n\nSmallCapacity = data[\"SmallCapacity\"] # scalar parameter\nLargeCapacity = data[\"LargeCapacity\"] # scalar parameter\nSmallUnload = data[\"SmallUnload\"] # scalar parameter\nLargeUnload = data[\"LargeUnload\"] # scalar parameter\nContainerRatio = data[\"ContainerRatio\"] # scalar parameter\nMinSmallContainers = data[\"MinSmallContainers\"] # scalar parameter\nMinLargeContainers = data[\"MinLargeContainers\"] # scalar parameter\nPeopleAvailable = data[\"PeopleAvailable\"] # scalar parameter\nSmallContainers = model.addVar(vtype=gp.GRB.INTEGER, name=\"SmallContainers\")\nLargeContainers = model.addVar(vtype=gp.GRB.INTEGER, name=\"LargeContainers\")\n\n# Since the SmallContainers and LargeContainers variables are already defined as integer,\n# with the default lower bound of 0 in Gurobi, there is no need to add any additional constraints.\n# The non-negativity and integrality are already enforced by their respective variable declarations.\n\n# Constraint: The total number of people required to unload all small containers should not exceed the number of people available\nmodel.addConstr(SmallContainers * SmallUnload <= PeopleAvailable, name=\"small_containers_unloading\")\n\n\n\n# Ensure at least MinSmallContainers small containers are used\nmodel.addConstr(SmallContainers >= MinSmallContainers, name=\"min_small_containers\")\n\n# Ensure at least MinLargeContainers large containers are used\nmodel.addConstr(LargeContainers >= MinLargeContainers, name=\"min_large_containers\")\n\n# The total people used for unloading should not exceed the total number of people available\nmodel.addConstr((SmallContainers * SmallUnload) + (LargeContainers * LargeUnload) <= PeopleAvailable, \"unloading_capacity\")\n\n# Add constraint for the relation between small and large containers\nmodel.addConstr(SmallContainers >= ContainerRatio * LargeContainers, name=\"container_ratio_constraint\")\n\n# Ensure that the minimum number of small containers is used\nmodel.addConstr(SmallContainers >= MinSmallContainers, name=\"min_small_containers\")\n\nmodel.addConstr(LargeContainers >= MinLargeContainers, name=\"min_large_containers\")\n\n# Set objective\nmodel.setObjective(SmallContainers * SmallCapacity + LargeContainers * LargeCapacity, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}