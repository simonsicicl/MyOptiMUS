{
    "background": "Mr. Roberts wants to invest in two industries: telecom and healthcare.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total amount of money Mr. Roberts has for investment",
            "symbol": "TotalInvestment",
            "value": 100000,
            "shape": [],
            "code": "TotalInvestment = data[\"TotalInvestment\"] # scalar parameter"
        },
        {
            "definition": "Maximum amount that can be invested in telecom",
            "symbol": "MaxTelecomInvestment",
            "value": 70000,
            "shape": [],
            "code": "MaxTelecomInvestment = data[\"MaxTelecomInvestment\"] # scalar parameter"
        },
        {
            "definition": "Minimum ratio of investment in telecom compared to healthcare",
            "symbol": "MinTelecomRatio",
            "value": 3,
            "shape": [],
            "code": "MinTelecomRatio = data[\"MinTelecomRatio\"] # scalar parameter"
        },
        {
            "definition": "Profit rate for the telecom investment",
            "symbol": "ProfitTelecom",
            "value": 0.03,
            "shape": [],
            "code": "ProfitTelecom = data[\"ProfitTelecom\"] # scalar parameter"
        },
        {
            "definition": "Profit rate for the healthcare investment",
            "symbol": "ProfitHealthcare",
            "value": 0.01,
            "shape": [],
            "code": "ProfitHealthcare = data[\"ProfitHealthcare\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The investment in telecom must be non-negative",
            "status": "coded",
            "formulation": "TelecomInvestment \\geq 0",
            "related_variables": [
                "TelecomInvestment"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for TelecomInvestment\nmodel.addConstr(TelecomInvestment >= 0, name=\"non_negativity_telecom\")"
        },
        {
            "description": "Healthcare investment must be non-negative",
            "status": "coded",
            "formulation": "\\textup{HealthcareInvestment} \\geq 0",
            "related_variables": [
                "HealthcareInvestment"
            ],
            "related_parameters": [],
            "code": "# Healthcare investment must be non-negative constraint\nmodel.addConstr(HealthcareInvestment >= 0, name=\"healthcare_investment_nonnegativity\")"
        },
        {
            "description": "Total investment in telecom and healthcare industries does not exceed the available total investment",
            "status": "coded",
            "formulation": "\\textup{TelecomInvestment} + \\textup{HealthcareInvestment} \\leq \\textup{TotalInvestment}",
            "related_variables": [
                "TelecomInvestment",
                "HealthcareInvestment"
            ],
            "related_parameters": [
                "TotalInvestment"
            ],
            "code": "# Total investment in telecom and healthcare industry does not exceed the available total investment\nmodel.addConstr(TelecomInvestment + HealthcareInvestment <= TotalInvestment, name=\"total_investment_constraint\")"
        },
        {
            "description": "The investment in telecom must be at least MinTelecomRatio times the investment in healthcare",
            "status": "coded",
            "formulation": "\\textup{TelecomInvestment} \\geq \\textup{MinTelecomRatio} \\times \\textup{HealthcareInvestment}",
            "related_variables": [
                "TelecomInvestment",
                "HealthcareInvestment"
            ],
            "related_parameters": [
                "MinTelecomRatio"
            ],
            "code": "# Add investment ratio constraint\nmodel.addConstr(TelecomInvestment >= MinTelecomRatio * HealthcareInvestment, name=\"investment_ratio\")"
        },
        {
            "description": "The investment in telecom must not exceed MaxTelecomInvestment",
            "status": "coded",
            "formulation": "\\textup{TelecomInvestment} \\leq \\textup{MaxTelecomInvestment}",
            "related_variables": [
                "TelecomInvestment"
            ],
            "related_parameters": [
                "MaxTelecomInvestment"
            ],
            "code": "# Ensure investment in telecom does not exceed the maximum limit\nmodel.addConstr(TelecomInvestment <= MaxTelecomInvestment, name=\"Max_Telecom_Investment\")"
        },
        {
            "description": "The sum of investments in telecom and healthcare must not exceed the total investment",
            "status": "coded",
            "formulation": "\\textup{TelecomInvestment} + \\textup{HealthcareInvestment} \\leq \\textup{TotalInvestment}",
            "related_variables": [
                "TelecomInvestment",
                "HealthcareInvestment"
            ],
            "related_parameters": [
                "TotalInvestment"
            ],
            "code": "# The sum of investments in telecom and healthcare must not exceed the total investment\nmodel.addConstr(TelecomInvestment + HealthcareInvestment <= TotalInvestment, \"investment_limit\")"
        },
        {
            "description": "The investment in telecom must not exceed the maximum amount allowed for telecom",
            "status": "coded",
            "formulation": "\\textup{TelecomInvestment} \\leq \\textup{MaxTelecomInvestment}",
            "related_variables": [
                "TelecomInvestment"
            ],
            "related_parameters": [
                "MaxTelecomInvestment"
            ],
            "code": "# Add constraint: The investment in telecom must not exceed the maximum amount allowed for telecom\nmodel.addConstr(TelecomInvestment <= MaxTelecomInvestment, name=\"telecom_investment_limit\")"
        },
        {
            "description": "The investment in telecom must be at least three times greater than the investment in healthcare",
            "status": "coded",
            "formulation": "\\textup{TelecomInvestment} \\geq 3 \\times \\textup{HealthcareInvestment}",
            "related_variables": [
                "TelecomInvestment",
                "HealthcareInvestment"
            ],
            "related_parameters": [
                "MinTelecomRatio"
            ],
            "code": "model.addConstr(TelecomInvestment >= MinTelecomRatio * HealthcareInvestment, name=\"investment_ratio\")"
        }
    ],
    "variables": [
        {
            "definition": "The amount of money invested in the telecom industry by Mr. Roberts",
            "symbol": "TelecomInvestment",
            "shape": [],
            "status": "coded",
            "code": "TelecomInvestment = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TelecomInvestment\")"
        },
        {
            "definition": "The amount of money invested in the healthcare industry by Mr. Roberts",
            "symbol": "HealthcareInvestment",
            "shape": [],
            "status": "coded",
            "code": "HealthcareInvestment = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HealthcareInvestment\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize Mr. Roberts' profit from investing in the telecom and healthcare industries",
            "status": "coded",
            "formulation": "\\max (\\textup{TelecomInvestment} \\times \\textup{ProfitTelecom} + \\textup{HealthcareInvestment} \\times \\textup{ProfitHealthcare})",
            "related_variables": [
                "TelecomInvestment",
                "HealthcareInvestment"
            ],
            "related_parameters": [
                "ProfitTelecom",
                "ProfitHealthcare"
            ],
            "code": "# Set objective\nmodel.setObjective(TelecomInvestment * ProfitTelecom + HealthcareInvestment * ProfitHealthcare, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 2333.3333333333335,
    "log_path": "logs/log_20250414023307_nl4opt_prob_5/",
    "problem_path": "data/nl4opt/prob_5/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_5/data.json\", \"r\") as f:\n    data = json.load(f)\n\nTotalInvestment = data[\"TotalInvestment\"] # scalar parameter\nMaxTelecomInvestment = data[\"MaxTelecomInvestment\"] # scalar parameter\nMinTelecomRatio = data[\"MinTelecomRatio\"] # scalar parameter\nProfitTelecom = data[\"ProfitTelecom\"] # scalar parameter\nProfitHealthcare = data[\"ProfitHealthcare\"] # scalar parameter\nTelecomInvestment = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"TelecomInvestment\")\nHealthcareInvestment = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"HealthcareInvestment\")\n\n# Add non-negativity constraint for TelecomInvestment\nmodel.addConstr(TelecomInvestment >= 0, name=\"non_negativity_telecom\")\n\n# Healthcare investment must be non-negative constraint\nmodel.addConstr(HealthcareInvestment >= 0, name=\"healthcare_investment_nonnegativity\")\n\n# Total investment in telecom and healthcare industry does not exceed the available total investment\nmodel.addConstr(TelecomInvestment + HealthcareInvestment <= TotalInvestment, name=\"total_investment_constraint\")\n\n# Add investment ratio constraint\nmodel.addConstr(TelecomInvestment >= MinTelecomRatio * HealthcareInvestment, name=\"investment_ratio\")\n\n# Ensure investment in telecom does not exceed the maximum limit\nmodel.addConstr(TelecomInvestment <= MaxTelecomInvestment, name=\"Max_Telecom_Investment\")\n\n# The sum of investments in telecom and healthcare must not exceed the total investment\nmodel.addConstr(TelecomInvestment + HealthcareInvestment <= TotalInvestment, \"investment_limit\")\n\n# Add constraint: The investment in telecom must not exceed the maximum amount allowed for telecom\nmodel.addConstr(TelecomInvestment <= MaxTelecomInvestment, name=\"telecom_investment_limit\")\n\nmodel.addConstr(TelecomInvestment >= MinTelecomRatio * HealthcareInvestment, name=\"investment_ratio\")\n\n# Set objective\nmodel.setObjective(TelecomInvestment * ProfitTelecom + HealthcareInvestment * ProfitHealthcare, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}