{
    "background": "An industrial tire company needs to deliver large tires to remote engineering sites with a minimum delivery requirement, a budget, and constraints on transport modes.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Tires transported per trip by cargo plane",
            "symbol": "TiresPlane",
            "value": 10,
            "shape": [],
            "code": "TiresPlane = data[\"TiresPlane\"] # scalar parameter"
        },
        {
            "definition": "Cost per trip of a cargo plane",
            "symbol": "CostPlane",
            "value": 1000,
            "shape": [],
            "code": "CostPlane = data[\"CostPlane\"] # scalar parameter"
        },
        {
            "definition": "Tires transported per trip by ultrawide truck",
            "symbol": "TiresTruck",
            "value": 6,
            "shape": [],
            "code": "TiresTruck = data[\"TiresTruck\"] # scalar parameter"
        },
        {
            "definition": "Cost per trip of an ultrawide truck",
            "symbol": "CostTruck",
            "value": 700,
            "shape": [],
            "code": "CostTruck = data[\"CostTruck\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of tires required to transport",
            "symbol": "MinTires",
            "value": 200,
            "shape": [],
            "code": "MinTires = data[\"MinTires\"] # scalar parameter"
        },
        {
            "definition": "Available budget for transport",
            "symbol": "Budget",
            "value": 22000,
            "shape": [],
            "code": "Budget = data[\"Budget\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of plane trips must be non-negative",
            "status": "coded",
            "formulation": "NumberOfPlaneTrips \\geq 0",
            "related_variables": [
                "NumberOfPlaneTrips"
            ],
            "related_parameters": [],
            "code": "# Constraint: Number of plane trips must be non-negative\nmodel.addConstr(NumberOfPlaneTrips >= 0, name=\"non_negative_plane_trips\")"
        },
        {
            "description": "The number of truck trips must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfTruckTrips} \\geq 0",
            "related_variables": [
                "NumberOfTruckTrips"
            ],
            "related_parameters": [],
            "code": "# No code needed since the variable NumberOfTruckTrips is already defined as an integer which implies it cannot take negative values."
        },
        {
            "description": "At least MinTires tires must be transported in total",
            "status": "coded",
            "formulation": "\\textup{NumberOfPlaneTrips} \\times \\textup{TiresPlane} + \\textup{NumberOfTruckTrips} \\times \\textup{TiresTruck} \\geq \\textup{MinTires}",
            "related_variables": [
                "NumberOfPlaneTrips",
                "NumberOfTruckTrips"
            ],
            "related_parameters": [
                "TiresPlane",
                "TiresTruck",
                "MinTires"
            ],
            "code": "# Constraint: At least MinTires tires must be transported in total\nmodel.addConstr(NumberOfPlaneTrips * TiresPlane + NumberOfTruckTrips * TiresTruck >= MinTires, name=\"MinTires_Transport\")"
        },
        {
            "description": "The total cost of plane and truck trips must not exceed the available budget",
            "status": "coded",
            "formulation": "\\textup{CostPlane} \\cdot \\textup{NumberOfPlaneTrips} + \\textup{CostTruck} \\cdot \\textup{NumberOfTruckTrips} \\leq \\textup{Budget}",
            "related_variables": [
                "NumberOfPlaneTrips",
                "NumberOfTruckTrips"
            ],
            "related_parameters": [
                "CostPlane",
                "CostTruck",
                "Budget"
            ],
            "code": "# Define the budget constraint for the total cost of plane and truck trips\nmodel.addConstr(CostPlane * NumberOfPlaneTrips + CostTruck * NumberOfTruckTrips <= Budget, name=\"budget_constraint\")"
        },
        {
            "description": "The number of plane trips taken by the company to deliver tires cannot exceed the number of truck trips taken to deliver tires",
            "status": "coded",
            "formulation": "\\textup{NumberOfPlaneTrips} \\leq \\textup{NumberOfTruckTrips}",
            "related_variables": [
                "NumberOfPlaneTrips",
                "NumberOfTruckTrips"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure plane trips do not exceed truck trips\nmodel.addConstr(NumberOfPlaneTrips <= NumberOfTruckTrips, name=\"plane_truck_trip_limit\")"
        },
        {
            "description": "Ensure at least the minimum required tires are transported",
            "status": "coded",
            "formulation": "\\textup{TiresPlane} \\cdot \\textup{NumberOfPlaneTrips} + \\textup{TiresTruck} \\cdot \\textup{NumberOfTruckTrips} \\geq \\textup{MinTires}",
            "related_variables": [
                "NumberOfPlaneTrips",
                "NumberOfTruckTrips"
            ],
            "related_parameters": [
                "TiresPlane",
                "TiresTruck",
                "MinTires"
            ],
            "code": "# Ensure at least the minimum required tires are transported\nmodel.addConstr(TiresPlane * NumberOfPlaneTrips + TiresTruck * NumberOfTruckTrips >= MinTires, name=\"min_tires_transported\")"
        },
        {
            "description": "Ensure the total cost does not exceed the available budget",
            "status": "coded",
            "formulation": "\\textup{CostPlane} \\cdot \\textup{NumberOfPlaneTrips} + \\textup{CostTruck} \\cdot \\textup{NumberOfTruckTrips} \\leq \\textup{Budget}",
            "related_variables": [
                "NumberOfPlaneTrips",
                "NumberOfTruckTrips"
            ],
            "related_parameters": [
                "CostPlane",
                "CostTruck",
                "Budget"
            ],
            "code": "# Ensure the total cost does not exceed the available budget\ntotal_cost = CostPlane * NumberOfPlaneTrips + CostTruck * NumberOfTruckTrips\nmodel.addConstr(total_cost <= Budget, name=\"budget_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of plane trips taken by the company to deliver tires",
            "symbol": "NumberOfPlaneTrips",
            "shape": [],
            "status": "coded",
            "code": "NumberOfPlaneTrips = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfPlaneTrips\")"
        },
        {
            "definition": "The number of truck trips taken by the company to deliver tires",
            "symbol": "NumberOfTruckTrips",
            "shape": [],
            "status": "coded",
            "code": "NumberOfTruckTrips = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfTruckTrips\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of trips (plane + truck)",
            "status": "coded",
            "formulation": "\\min \\quad \\textup{NumberOfPlaneTrips} + \\textup{NumberOfTruckTrips}",
            "related_variables": [
                "NumberOfPlaneTrips",
                "NumberOfTruckTrips"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(NumberOfPlaneTrips + NumberOfTruckTrips, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413144410_nl4opt_prob_179/",
    "problem_path": "data/nl4opt/prob_179/"
}