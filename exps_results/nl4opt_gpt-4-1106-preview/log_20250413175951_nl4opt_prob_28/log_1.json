{
    "background": "An electronics store is optimizing inventory for phones and laptops with constraints on floor space, spending cap, and a ratio of laptops to the total appliances.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Profit earned from one phone",
            "symbol": "ProfitPhone",
            "value": 120,
            "shape": [],
            "code": "ProfitPhone = data[\"ProfitPhone\"] # scalar parameter"
        },
        {
            "definition": "Profit earned from one laptop",
            "symbol": "ProfitLaptop",
            "value": 40,
            "shape": [],
            "code": "ProfitLaptop = data[\"ProfitLaptop\"] # scalar parameter"
        },
        {
            "definition": "Floor space required by one phone",
            "symbol": "SpacePhone",
            "value": 1,
            "shape": [],
            "code": "SpacePhone = data[\"SpacePhone\"] # scalar parameter"
        },
        {
            "definition": "Floor space required by one laptop",
            "symbol": "SpaceLaptop",
            "value": 4,
            "shape": [],
            "code": "SpaceLaptop = data[\"SpaceLaptop\"] # scalar parameter"
        },
        {
            "definition": "Total available floor space",
            "symbol": "TotalSpace",
            "value": 400,
            "shape": [],
            "code": "TotalSpace = data[\"TotalSpace\"] # scalar parameter"
        },
        {
            "definition": "Minimum percentage of total appliances that must be laptops",
            "symbol": "MinLaptopRatio",
            "value": 0.8,
            "shape": [],
            "code": "MinLaptopRatio = data[\"MinLaptopRatio\"] # scalar parameter"
        },
        {
            "definition": "Cost of one phone for the store",
            "symbol": "CostPhone",
            "value": 400,
            "shape": [],
            "code": "CostPhone = data[\"CostPhone\"] # scalar parameter"
        },
        {
            "definition": "Cost of one laptop for the store",
            "symbol": "CostLaptop",
            "value": 100,
            "shape": [],
            "code": "CostLaptop = data[\"CostLaptop\"] # scalar parameter"
        },
        {
            "definition": "Maximum amount store wants to spend on inventory",
            "symbol": "MaxSpend",
            "value": 6000,
            "shape": [],
            "code": "MaxSpend = data[\"MaxSpend\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of phones must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfPhones} \\geq 0",
            "related_variables": [
                "NumberOfPhones"
            ],
            "related_parameters": [],
            "code": "# The number of phones must be non-negative constraint\nmodel.addConstr(NumberOfPhones >= 0, name=\"NumberOfPhones_nonnegativity\")"
        },
        {
            "description": "The number of laptops in the store's inventory must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfLaptops} \\geq 0",
            "related_variables": [
                "NumberOfLaptops"
            ],
            "related_parameters": [],
            "code": "# Add constraint for non-negative number of laptops\nmodel.addConstr(NumberOfLaptops >= 0, name=\"non_negative_laptops\")"
        },
        {
            "description": "Floor space for phones and laptops does not exceed TotalSpace",
            "status": "coded",
            "formulation": "\\textup{SpacePhone} \\cdot \\textup{NumberOfPhones} + \\textup{SpaceLaptop} \\cdot \\textup{NumberOfLaptops} \\leq \\textup{TotalSpace}",
            "related_variables": [
                "NumberOfPhones",
                "NumberOfLaptops"
            ],
            "related_parameters": [
                "SpacePhone",
                "SpaceLaptop",
                "TotalSpace"
            ],
            "code": "# Add floor space constraint for phones and laptops\nmodel.addConstr(SpacePhone * NumberOfPhones + SpaceLaptop * NumberOfLaptops <= TotalSpace, name=\"floor_space_constraint\")"
        },
        {
            "description": "At least MinLaptopRatio of all appliances in stock must be laptops",
            "status": "coded",
            "formulation": "\\frac{\\textup{NumberOfLaptops}}{\\textup{NumberOfLaptops} + \\textup{NumberOfPhones}} \\geq \\textup{MinLaptopRatio}",
            "related_variables": [
                "NumberOfLaptops",
                "NumberOfPhones"
            ],
            "related_parameters": [
                "MinLaptopRatio"
            ],
            "code": "# Add constraint to ensure the ratio of laptops to total appliances is at least the MinLaptopRatio\nmodel.addConstr(NumberOfLaptops >= MinLaptopRatio * (NumberOfLaptops + NumberOfPhones), name=\"MinLaptopRatioConstraint\")"
        },
        {
            "description": "Total spending on phones and laptops should not exceed MaxSpend",
            "status": "coded",
            "formulation": "\\textup{CostPhone} \\cdot \\textup{NumberOfPhones} + \\textup{CostLaptop} \\cdot \\textup{NumberOfLaptops} \\leq \\textup{MaxSpend}",
            "related_variables": [
                "NumberOfPhones",
                "NumberOfLaptops"
            ],
            "related_parameters": [
                "CostPhone",
                "CostLaptop",
                "MaxSpend"
            ],
            "code": "# Total spending constraint for phones and laptops\nmodel.addConstr(CostPhone * NumberOfPhones + CostLaptop * NumberOfLaptops <= MaxSpend, name=\"TotalSpending\")"
        },
        {
            "description": "The total floor space occupied by phones and laptops must not exceed the available floor space",
            "status": "coded",
            "formulation": "\\textup{SpacePhone} \\cdot \\textup{NumberOfPhones} + \\textup{SpaceLaptop} \\cdot \\textup{NumberOfLaptops} \\leq \\textup{TotalSpace}",
            "related_variables": [
                "NumberOfPhones",
                "NumberOfLaptops"
            ],
            "related_parameters": [
                "SpacePhone",
                "SpaceLaptop",
                "TotalSpace"
            ],
            "code": "# Add floor space constraint for phones and laptops\nmodel.addConstr(SpacePhone * NumberOfPhones + SpaceLaptop * NumberOfLaptops <= TotalSpace, \"floor_space_constraint\")"
        },
        {
            "description": "The total cost of purchasing phones and laptops must not exceed the spending cap",
            "status": "coded",
            "formulation": "\\textup{CostPhone} \\cdot \\textup{NumberOfPhones} + \\textup{CostLaptop} \\cdot \\textup{NumberOfLaptops} \\leq \\textup{MaxSpend}",
            "related_variables": [
                "NumberOfPhones",
                "NumberOfLaptops"
            ],
            "related_parameters": [
                "CostPhone",
                "CostLaptop",
                "MaxSpend"
            ],
            "code": "# Add a constraint for the total cost of purchasing phones and laptops not exceeding the spending cap\nmodel.addConstr((CostPhone * NumberOfPhones) + (CostLaptop * NumberOfLaptops) <= MaxSpend, \"budget_constraint\")"
        },
        {
            "description": "The number of laptops must be at least the specified minimum ratio of the total appliances",
            "status": "coded",
            "formulation": "\\textup{NumberOfLaptops} \\geq \\textup{MinLaptopRatio} \\cdot (\\textup{NumberOfLaptops} + \\textup{NumberOfPhones})",
            "related_variables": [
                "NumberOfPhones",
                "NumberOfLaptops"
            ],
            "related_parameters": [
                "MinLaptopRatio"
            ],
            "code": "# Add constraint for the minimum ratio of laptops in the total appliances\nmodel.addConstr(NumberOfLaptops >= MinLaptopRatio * (NumberOfLaptops + NumberOfPhones), name=\"min_laptop_ratio\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of phones in the store's inventory",
            "symbol": "NumberOfPhones",
            "shape": [],
            "status": "coded",
            "code": "NumberOfPhones = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfPhones\")"
        },
        {
            "definition": "The number of laptops in the store's inventory",
            "symbol": "NumberOfLaptops",
            "shape": [],
            "status": "coded",
            "code": "NumberOfLaptops = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfLaptops\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the store's profit from the sale of phones and laptops",
            "status": "coded",
            "formulation": "\\textup{Maximize } Z = \\textup{ProfitPhone} \\cdot \\textup{NumberOfPhones} + \\textup{ProfitLaptop} \\cdot \\textup{NumberOfLaptops}",
            "related_variables": [
                "NumberOfPhones",
                "NumberOfLaptops"
            ],
            "related_parameters": [
                "ProfitPhone",
                "ProfitLaptop"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitPhone * NumberOfPhones + ProfitLaptop * NumberOfLaptops, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413175951_nl4opt_prob_28/",
    "problem_path": "data/nl4opt/prob_28/"
}