{
    "background": "A pharmacy has a limited amount of morphine to produce painkillers and sleeping pills, both of which require morphine and digestive medicine. The objective is to minimize the total amount of digestive medicine used while adhering to pill production requirements.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Total amount of morphine available",
            "symbol": "TotalMorphine",
            "value": 3000,
            "shape": [],
            "code": "TotalMorphine = data[\"TotalMorphine\"] # scalar parameter"
        },
        {
            "definition": "Amount of morphine required to make one painkiller pill",
            "symbol": "MorphinePainkiller",
            "value": 10,
            "shape": [],
            "code": "MorphinePainkiller = data[\"MorphinePainkiller\"] # scalar parameter"
        },
        {
            "definition": "Amount of morphine required to make one sleeping pill",
            "symbol": "MorphineSleepingPill",
            "value": 6,
            "shape": [],
            "code": "MorphineSleepingPill = data[\"MorphineSleepingPill\"] # scalar parameter"
        },
        {
            "definition": "Units of digestive medicine required to make one painkiller pill",
            "symbol": "DigestiveMedicinePainkiller",
            "value": 3,
            "shape": [],
            "code": "DigestiveMedicinePainkiller = data[\"DigestiveMedicinePainkiller\"] # scalar parameter"
        },
        {
            "definition": "Units of digestive medicine required to make one sleeping pill",
            "symbol": "DigestiveMedicineSleepingPill",
            "value": 5,
            "shape": [],
            "code": "DigestiveMedicineSleepingPill = data[\"DigestiveMedicineSleepingPill\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of painkiller pills required",
            "symbol": "MinPainkillers",
            "value": 50,
            "shape": [],
            "code": "MinPainkillers = data[\"MinPainkillers\"] # scalar parameter"
        },
        {
            "definition": "Minimum proportion of the total pills that must be sleeping pills",
            "symbol": "MinProportionSleepingPills",
            "value": 0.7,
            "shape": [],
            "code": "MinProportionSleepingPills = data[\"MinProportionSleepingPills\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Total morphine used in the production of painkiller pills and sleeping pills must be less than or equal to the total available morphine",
            "status": "coded",
            "formulation": "MorphinePainkiller \\cdot \\textup{PainkillerPillsProduced} + MorphineSleepingPill \\cdot \\textup{SleepingPillsProduced} \\leq \\textup{TotalMorphine}",
            "related_variables": [
                "PainkillerPillsProduced",
                "SleepingPillsProduced"
            ],
            "related_parameters": [
                "TotalMorphine",
                "MorphinePainkiller",
                "MorphineSleepingPill"
            ],
            "code": "# Total morphine used constraint\nmodel.addConstr(MorphinePainkiller * PainkillerPillsProduced + MorphineSleepingPill * SleepingPillsProduced <= TotalMorphine, name=\"total_morphine_used\")"
        },
        {
            "description": "At least MinPainkillers painkiller pills must be produced",
            "status": "coded",
            "formulation": "\\textup{PainkillerPillsProduced} \\geq \\textup{MinPainkillers}",
            "related_variables": [
                "PainkillerPillsProduced"
            ],
            "related_parameters": [
                "MinPainkillers"
            ],
            "code": "# Add constraint to ensure the minimum production of painkiller pills\nmodel.addConstr(PainkillerPillsProduced >= MinPainkillers, name=\"min_painkillers_produced\")"
        },
        {
            "description": "At least a minimum proportion of the total pills produced should be sleeping pills",
            "status": "coded",
            "formulation": "\\textup{SleepingPillsProduced} \\geq \\textup{MinProportionSleepingPills} \\cdot (\\textup{SleepingPillsProduced} + \\textup{PainkillerPillsProduced})",
            "related_variables": [
                "SleepingPillsProduced",
                "PainkillerPillsProduced"
            ],
            "related_parameters": [
                "MinProportionSleepingPills"
            ],
            "code": "# Constraint: At least a minimum proportion of the total pills produced should be sleeping pills\nmodel.addConstr(SleepingPillsProduced >= MinProportionSleepingPills * (SleepingPillsProduced + PainkillerPillsProduced), \n                name=\"min_proportion_sleeping_pills\")"
        },
        {
            "description": "Number of painkiller pills produced must be non-negative",
            "status": "coded",
            "formulation": "\\textup{PainkillerPillsProduced} \\geq 0",
            "related_variables": [
                "PainkillerPillsProduced"
            ],
            "related_parameters": [],
            "code": "# Since PainkillerPillsProduced is already a non-negative integer variable, no constraint is needed to enforce this.\n# Gurobi variables are non-negative by default unless specified."
        },
        {
            "description": "The number of sleeping pills produced must be non-negative",
            "status": "coded",
            "formulation": "\\textup{SleepingPillsProduced} \\geq 0",
            "related_variables": [
                "SleepingPillsProduced"
            ],
            "related_parameters": [],
            "code": "# Add constraint for non-negativity of the number of sleeping pills produced\nmodel.addConstr(SleepingPillsProduced >= 0, name=\"non_negative_sleeping_pills_produced\")"
        },
        {
            "description": "The total amount of morphine used cannot exceed the total amount available",
            "status": "coded",
            "formulation": "\\textup{MorphinePainkiller} \\times \\textup{PainkillerPillsProduced} + \\textup{MorphineSleepingPill} \\times \\textup{SleepingPillsProduced} \\leq \\textup{TotalMorphine}",
            "related_variables": [
                "PainkillerPillsProduced",
                "SleepingPillsProduced"
            ],
            "related_parameters": [
                "MorphinePainkiller",
                "MorphineSleepingPill",
                "TotalMorphine"
            ],
            "code": "# Total amount of morphine used cannot exceed the total amount available constraint\nmodel.addConstr(MorphinePainkiller * PainkillerPillsProduced + MorphineSleepingPill * SleepingPillsProduced <= TotalMorphine, \"TotalMorphineConstraint\")"
        },
        {
            "description": "The minimum number of painkiller pills must be produced",
            "status": "coded",
            "formulation": "\\textup{PainkillerPillsProduced} \\geq \\textup{MinPainkillers}",
            "related_variables": [
                "PainkillerPillsProduced"
            ],
            "related_parameters": [
                "MinPainkillers"
            ],
            "code": "# Add constraint to ensure the minimum number of painkiller pills is produced\nmodel.addConstr(PainkillerPillsProduced >= MinPainkillers, name=\"min_painkiller_production\")"
        },
        {
            "description": "At least a certain proportion of the total pills must be sleeping pills",
            "status": "coded",
            "formulation": "\\textup{SleepingPillsProduced} \\geq \\textup{MinProportionSleepingPills} \\times (\\textup{PainkillerPillsProduced} + \\textup{SleepingPillsProduced})",
            "related_variables": [
                "SleepingPillsProduced",
                "PainkillerPillsProduced"
            ],
            "related_parameters": [
                "MinProportionSleepingPills"
            ],
            "code": "# Add constraint to ensure that at least a certain proportion of the total pills must be sleeping pills\nmodel.addConstr(SleepingPillsProduced >= MinProportionSleepingPills * (PainkillerPillsProduced + SleepingPillsProduced), \"min_sleeping_pills_proportion\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of painkiller pills produced",
            "symbol": "PainkillerPillsProduced",
            "shape": [],
            "status": "coded",
            "code": "PainkillerPillsProduced = model.addVar(vtype=gp.GRB.INTEGER, name=\"PainkillerPillsProduced\")"
        },
        {
            "definition": "Number of sleeping pills produced",
            "symbol": "SleepingPillsProduced",
            "shape": [],
            "status": "coded",
            "code": "SleepingPillsProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SleepingPillsProduced\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total amount of digestive medicine used in pill production",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{DigestiveMedicinePainkiller} \\times \\textup{PainkillerPillsProduced} + \\textup{DigestiveMedicineSleepingPill} \\times \\textup{SleepingPillsProduced}",
            "related_variables": [
                "PainkillerPillsProduced",
                "SleepingPillsProduced"
            ],
            "related_parameters": [
                "DigestiveMedicinePainkiller",
                "DigestiveMedicineSleepingPill"
            ],
            "code": "# Set objective\nmodel.setObjective(DigestiveMedicinePainkiller * PainkillerPillsProduced + DigestiveMedicineSleepingPill * SleepingPillsProduced, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 733.3333333333333,
    "log_path": "logs/log_20250413111817_nl4opt_prob_123/",
    "problem_path": "data/nl4opt/prob_123/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_123/data.json\", \"r\") as f:\n    data = json.load(f)\n\nTotalMorphine = data[\"TotalMorphine\"] # scalar parameter\nMorphinePainkiller = data[\"MorphinePainkiller\"] # scalar parameter\nMorphineSleepingPill = data[\"MorphineSleepingPill\"] # scalar parameter\nDigestiveMedicinePainkiller = data[\"DigestiveMedicinePainkiller\"] # scalar parameter\nDigestiveMedicineSleepingPill = data[\"DigestiveMedicineSleepingPill\"] # scalar parameter\nMinPainkillers = data[\"MinPainkillers\"] # scalar parameter\nMinProportionSleepingPills = data[\"MinProportionSleepingPills\"] # scalar parameter\nPainkillerPillsProduced = model.addVar(vtype=gp.GRB.INTEGER, name=\"PainkillerPillsProduced\")\nSleepingPillsProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SleepingPillsProduced\")\n\n# Total morphine used constraint\nmodel.addConstr(MorphinePainkiller * PainkillerPillsProduced + MorphineSleepingPill * SleepingPillsProduced <= TotalMorphine, name=\"total_morphine_used\")\n\n# Add constraint to ensure the minimum production of painkiller pills\nmodel.addConstr(PainkillerPillsProduced >= MinPainkillers, name=\"min_painkillers_produced\")\n\n# Constraint: At least a minimum proportion of the total pills produced should be sleeping pills\nmodel.addConstr(SleepingPillsProduced >= MinProportionSleepingPills * (SleepingPillsProduced + PainkillerPillsProduced), \n                name=\"min_proportion_sleeping_pills\")\n\n# Since PainkillerPillsProduced is already a non-negative integer variable, no constraint is needed to enforce this.\n# Gurobi variables are non-negative by default unless specified.\n\n# Add constraint for non-negativity of the number of sleeping pills produced\nmodel.addConstr(SleepingPillsProduced >= 0, name=\"non_negative_sleeping_pills_produced\")\n\n# Total amount of morphine used cannot exceed the total amount available constraint\nmodel.addConstr(MorphinePainkiller * PainkillerPillsProduced + MorphineSleepingPill * SleepingPillsProduced <= TotalMorphine, \"TotalMorphineConstraint\")\n\n# Add constraint to ensure the minimum number of painkiller pills is produced\nmodel.addConstr(PainkillerPillsProduced >= MinPainkillers, name=\"min_painkiller_production\")\n\n# Add constraint to ensure that at least a certain proportion of the total pills must be sleeping pills\nmodel.addConstr(SleepingPillsProduced >= MinProportionSleepingPills * (PainkillerPillsProduced + SleepingPillsProduced), \"min_sleeping_pills_proportion\")\n\n# Set objective\nmodel.setObjective(DigestiveMedicinePainkiller * PainkillerPillsProduced + DigestiveMedicineSleepingPill * SleepingPillsProduced, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}