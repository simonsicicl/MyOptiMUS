{
    "background": "A music company produces two types of digital keyboards, full-weighted and semi-weighted, which require oscillator chips and production time from a daily limited resource pool.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Sale price of the full-weighted keyboard",
            "symbol": "FullWeightedPrice",
            "value": 2800,
            "shape": [],
            "code": "FullWeightedPrice = data[\"FullWeightedPrice\"] # scalar parameter"
        },
        {
            "definition": "Sale price of the semi-weighted keyboard",
            "symbol": "SemiWeightedPrice",
            "value": 2400,
            "shape": [],
            "code": "SemiWeightedPrice = data[\"SemiWeightedPrice\"] # scalar parameter"
        },
        {
            "definition": "Total number of oscillator chips available per day",
            "symbol": "TotalChips",
            "value": 3500,
            "shape": [],
            "code": "TotalChips = data[\"TotalChips\"] # scalar parameter"
        },
        {
            "definition": "Number of oscillator chips required to produce one full-weighted keyboard",
            "symbol": "ChipsFullWeighted",
            "value": 20,
            "shape": [],
            "code": "ChipsFullWeighted = data[\"ChipsFullWeighted\"] # scalar parameter"
        },
        {
            "definition": "Number of oscillator chips required to produce one semi-weighted keyboard",
            "symbol": "ChipsSemiWeighted",
            "value": 15,
            "shape": [],
            "code": "ChipsSemiWeighted = data[\"ChipsSemiWeighted\"] # scalar parameter"
        },
        {
            "definition": "Total available production time per day in hours",
            "symbol": "TotalTime",
            "value": 6,
            "shape": [],
            "code": "TotalTime = data[\"TotalTime\"] # scalar parameter"
        },
        {
            "definition": "Production time required to produce one keyboard (regardless of type) in hours",
            "symbol": "ProductionTimePerKeyboard",
            "value": 1.2,
            "shape": [],
            "code": "ProductionTimePerKeyboard = data[\"ProductionTimePerKeyboard\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of full-weighted keyboards produced must be non-negative.",
            "status": "coded",
            "formulation": "\\textup{FullWeightedKeyboards} \\geq 0",
            "related_variables": [
                "FullWeightedKeyboards"
            ],
            "related_parameters": [],
            "code": "# Since FullWeightedKeyboards is already a non-negative continuous variable by default, no additional constraint is needed."
        },
        {
            "description": "Number of semi-weighted keyboards must be non-negative",
            "status": "coded",
            "formulation": "\\textup{SemiWeightedKeyboards} \\geq 0",
            "related_variables": [
                "SemiWeightedKeyboards"
            ],
            "related_parameters": [],
            "code": "# Add constraint that the number of semi-weighted keyboards must be non-negative\nmodel.addConstr(SemiWeightedKeyboards >= 0, name=\"non_negative_semiweighted_keyboards\")"
        },
        {
            "description": "Total number of chips used in producing full-weighted and semi-weighted keyboards cannot exceed the total number of chips available",
            "status": "coded",
            "formulation": "\\textup{ChipsFullWeighted} \\times \\textup{FullWeightedKeyboards} + \\textup{ChipsSemiWeighted} \\times \\textup{SemiWeightedKeyboards} \\leq \\textup{TotalChips}",
            "related_variables": [
                "FullWeightedKeyboards",
                "SemiWeightedKeyboards"
            ],
            "related_parameters": [
                "ChipsFullWeighted",
                "ChipsSemiWeighted",
                "TotalChips"
            ],
            "code": "# Total number of chips used for full-weighted and semi-weighted keyboards cannot exceed total number of chips available\nmodel.addConstr(ChipsFullWeighted * FullWeightedKeyboards + ChipsSemiWeighted * SemiWeightedKeyboards <= TotalChips, \"chip_capacity_constraint\")"
        },
        {
            "description": "Total production time of full-weighted and semi-weighted keyboards cannot exceed available production time per day",
            "status": "coded",
            "formulation": "\\textup{ProductionTimePerKeyboard} \\cdot (\\textup{FullWeightedKeyboards} + \\textup{SemiWeightedKeyboards}) \\leq \\textup{TotalTime}",
            "related_variables": [
                "FullWeightedKeyboards",
                "SemiWeightedKeyboards"
            ],
            "related_parameters": [
                "ProductionTimePerKeyboard",
                "TotalTime"
            ],
            "code": "# Add constraint for total production time of full-weighted and semi-weighted keyboards\nmodel.addConstr(ProductionTimePerKeyboard * (FullWeightedKeyboards + SemiWeightedKeyboards) <= TotalTime, name=\"production_time_limit\")"
        },
        {
            "description": "The total oscillator chips used should not exceed the available number of oscillator chips per day",
            "status": "coded",
            "formulation": "\\textup{ChipsFullWeighted} \\times \\textup{FullWeightedKeyboards} + \\textup{ChipsSemiWeighted} \\times \\textup{SemiWeightedKeyboards} \\leq \\textup{TotalChips}",
            "related_variables": [
                "FullWeightedKeyboards",
                "SemiWeightedKeyboards"
            ],
            "related_parameters": [
                "ChipsFullWeighted",
                "ChipsSemiWeighted",
                "TotalChips"
            ],
            "code": "# Total oscillator chips used should not exceed the available number per day\nmodel.addConstr(ChipsFullWeighted * FullWeightedKeyboards + ChipsSemiWeighted * SemiWeightedKeyboards <= TotalChips, \"oscillator_chips_constraint\")"
        },
        {
            "description": "The total production time used should not exceed the total available production time per day",
            "status": "coded",
            "formulation": "\\textup{ProductionTimePerKeyboard} \\times (\\textup{FullWeightedKeyboards} + \\textup{SemiWeightedKeyboards}) \\leq \\textup{TotalTime}",
            "related_variables": [
                "FullWeightedKeyboards",
                "SemiWeightedKeyboards"
            ],
            "related_parameters": [
                "ProductionTimePerKeyboard",
                "TotalTime"
            ],
            "code": "# Add constraint to ensure the total production time does not exceed the total available time per day\nmodel.addConstr(ProductionTimePerKeyboard * (FullWeightedKeyboards + SemiWeightedKeyboards) <= TotalTime, name=\"production_time\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of full-weighted keyboards produced",
            "symbol": "FullWeightedKeyboards",
            "shape": [],
            "status": "coded",
            "code": "FullWeightedKeyboards = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"FullWeightedKeyboards\")"
        },
        {
            "definition": "Number of semi-weighted keyboards produced",
            "symbol": "SemiWeightedKeyboards",
            "shape": [],
            "status": "coded",
            "code": "SemiWeightedKeyboards = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"SemiWeightedKeyboards\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize total revenue from producing full-weighted and semi-weighted keyboards",
            "status": "coded",
            "formulation": "\\max (\\textup{FullWeightedPrice} \\times \\textup{FullWeightedKeyboards} + \\textup{SemiWeightedPrice} \\times \\textup{SemiWeightedKeyboards})",
            "related_variables": [
                "FullWeightedKeyboards",
                "SemiWeightedKeyboards"
            ],
            "related_parameters": [
                "FullWeightedPrice",
                "SemiWeightedPrice"
            ],
            "code": "# Set objective\nmodel.setObjective(FullWeightedPrice * FullWeightedKeyboards + SemiWeightedPrice * SemiWeightedKeyboards, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413163255_nl4opt_prob_220/",
    "problem_path": "data/nl4opt/prob_220/"
}