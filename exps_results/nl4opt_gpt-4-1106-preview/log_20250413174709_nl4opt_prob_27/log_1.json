{
    "background": "A hobbyist makes model trains and planes using wood and paint.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of wood required to make a model train",
            "symbol": "WoodTrain",
            "value": 3,
            "shape": [],
            "code": "WoodTrain = data[\"WoodTrain\"] # scalar parameter"
        },
        {
            "definition": "Units of paint required to make a model train",
            "symbol": "PaintTrain",
            "value": 3,
            "shape": [],
            "code": "PaintTrain = data[\"PaintTrain\"] # scalar parameter"
        },
        {
            "definition": "Units of wood required to make a model plane",
            "symbol": "WoodPlane",
            "value": 4,
            "shape": [],
            "code": "WoodPlane = data[\"WoodPlane\"] # scalar parameter"
        },
        {
            "definition": "Units of paint required to make a model plane",
            "symbol": "PaintPlane",
            "value": 2,
            "shape": [],
            "code": "PaintPlane = data[\"PaintPlane\"] # scalar parameter"
        },
        {
            "definition": "Total available units of wood",
            "symbol": "TotalWood",
            "value": 120,
            "shape": [],
            "code": "TotalWood = data[\"TotalWood\"] # scalar parameter"
        },
        {
            "definition": "Total available units of paint",
            "symbol": "TotalPaint",
            "value": 90,
            "shape": [],
            "code": "TotalPaint = data[\"TotalPaint\"] # scalar parameter"
        },
        {
            "definition": "Profit per model train",
            "symbol": "ProfitTrain",
            "value": 8,
            "shape": [],
            "code": "ProfitTrain = data[\"ProfitTrain\"] # scalar parameter"
        },
        {
            "definition": "Profit per model plane",
            "symbol": "ProfitPlane",
            "value": 10,
            "shape": [],
            "code": "ProfitPlane = data[\"ProfitPlane\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of trains must be an integer value",
            "status": "coded",
            "formulation": "\\textup{NumberOfTrains} \\in \\mathbb{Z}",
            "related_variables": [
                "NumberOfTrains"
            ],
            "related_parameters": [],
            "code": "# No additional code needed as the variable NumberOfTrains is already defined as an integer"
        },
        {
            "description": "Number of model planes must be an integer value",
            "status": "coded",
            "formulation": "\\textup{NumberOfPlanes} \\in \\mathbb{Z}",
            "related_variables": [
                "NumberOfPlanes"
            ],
            "related_parameters": [],
            "code": "# The code for the variable NumberOfPlanes already defines it as an integer variable, so no further constraints are needed."
        },
        {
            "description": "The number of model trains produced must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfTrains} \\geq 0",
            "related_variables": [
                "NumberOfTrains"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of model trains produced is non-negative\nmodel.addConstr(NumberOfTrains >= 0, name=\"non_negativity_trains\")"
        },
        {
            "description": "The number of model planes produced must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfPlanes} \\geq 0",
            "related_variables": [
                "NumberOfPlanes"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for the number of model planes produced\nmodel.addConstr(NumberOfPlanes >= 0, name=\"non_negativity_planes\")"
        },
        {
            "description": "The total wood used for making trains and planes should not exceed the available units of wood",
            "status": "coded",
            "formulation": "\\textup{NumberOfTrains} \\cdot \\textup{WoodTrain} + \\textup{NumberOfPlanes} \\cdot \\textup{WoodPlane} \\leq \\textup{TotalWood}",
            "related_variables": [
                "NumberOfTrains",
                "NumberOfPlanes"
            ],
            "related_parameters": [
                "WoodTrain",
                "WoodPlane",
                "TotalWood"
            ],
            "code": "# Add wood usage constraint for making trains and planes\nmodel.addConstr(NumberOfTrains * WoodTrain + NumberOfPlanes * WoodPlane <= TotalWood, name=\"wood_usage\")"
        },
        {
            "description": "The total use of paint must not exceed TotalPaint units",
            "status": "coded",
            "formulation": "\\textup{NumberOfTrains} \\cdot \\textup{PaintTrain} + \\textup{NumberOfPlanes} \\cdot \\textup{PaintPlane} \\leq \\textup{TotalPaint}",
            "related_variables": [
                "NumberOfTrains",
                "NumberOfPlanes"
            ],
            "related_parameters": [
                "PaintTrain",
                "PaintPlane",
                "TotalPaint"
            ],
            "code": "# Total use of paint must not exceed TotalPaint units\nmodel.addConstr(NumberOfTrains * PaintTrain + NumberOfPlanes * PaintPlane <= TotalPaint, name=\"total_paint_usage\")"
        },
        {
            "description": "Wood resource constraint for model trains",
            "status": "coded",
            "formulation": "\\textup{NumberOfTrains} \\cdot \\textup{WoodTrain} \\leq \\textup{TotalWood}",
            "related_variables": [
                "NumberOfTrains"
            ],
            "related_parameters": [
                "WoodTrain",
                "TotalWood"
            ],
            "code": "# Add wood resource constraint for model trains\nmodel.addConstr(NumberOfTrains * WoodTrain <= TotalWood, name=\"wood_resource_constraint\")"
        },
        {
            "description": "Total wood used for all planes does not exceed the total available wood",
            "status": "coded",
            "formulation": "\\textup{WoodPlane} \\cdot \\textup{NumberOfPlanes} \\leq \\textup{TotalWood}",
            "related_variables": [
                "NumberOfPlanes"
            ],
            "related_parameters": [
                "WoodPlane",
                "TotalWood"
            ],
            "code": "model.addConstr(WoodPlane * NumberOfPlanes <= TotalWood, name=\"total_wood_usage\")"
        },
        {
            "description": "The total paint usage for model trains should not exceed the total available paint",
            "status": "coded",
            "formulation": "\\textup{NumberOfTrains} \\times \\textup{PaintTrain} \\leq \\textup{TotalPaint}",
            "related_variables": [
                "NumberOfTrains"
            ],
            "related_parameters": [
                "PaintTrain",
                "TotalPaint"
            ],
            "code": "# Constraint: Total paint usage for model trains should not exceed the total available paint\nmodel.addConstr(NumberOfTrains * PaintTrain <= TotalPaint, name=\"paint_usage\")"
        },
        {
            "description": "Total paint used for model planes cannot exceed the total available units of paint",
            "status": "coded",
            "formulation": "\\textup{PaintPlane} \\times \\textup{NumberOfPlanes} \\leq \\textup{TotalPaint}",
            "related_variables": [
                "NumberOfPlanes"
            ],
            "related_parameters": [
                "PaintPlane",
                "TotalPaint"
            ],
            "code": "model.addConstr(PaintPlane * NumberOfPlanes <= TotalPaint, name=\"total_paint_usage\")"
        },
        {
            "description": "The number of units of wood used in producing model trains and planes should not exceed the total available units of wood",
            "status": "coded",
            "formulation": "\\textup{WoodTrain} \\times \\textup{NumberOfTrains} + \\textup{WoodPlane} \\times \\textup{NumberOfPlanes} \\leq \\textup{TotalWood}",
            "related_variables": [
                "NumberOfTrains",
                "NumberOfPlanes"
            ],
            "related_parameters": [
                "WoodTrain",
                "WoodPlane",
                "TotalWood"
            ],
            "code": "# Add constraint for total units of wood used\nmodel.addConstr(WoodTrain * NumberOfTrains + WoodPlane * NumberOfPlanes <= TotalWood, name=\"wood_usage\")"
        },
        {
            "description": "The number of units of paint used in producing model trains and planes should not exceed the total available units of paint",
            "status": "coded",
            "formulation": "\\textup{PaintTrain} \\times \\textup{NumberOfTrains} + \\textup{PaintPlane} \\times \\textup{NumberOfPlanes} \\leq \\textup{TotalPaint}",
            "related_variables": [
                "NumberOfTrains",
                "NumberOfPlanes"
            ],
            "related_parameters": [
                "PaintTrain",
                "PaintPlane",
                "TotalPaint"
            ],
            "code": "# Add paint usage constraint\nmodel.addConstr(PaintTrain * NumberOfTrains + PaintPlane * NumberOfPlanes <= TotalPaint, \"paint_capacity\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of model trains produced",
            "symbol": "NumberOfTrains",
            "shape": [],
            "status": "coded",
            "code": "NumberOfTrains = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfTrains\")"
        },
        {
            "definition": "Number of model planes produced",
            "symbol": "NumberOfPlanes",
            "shape": [],
            "status": "coded",
            "code": "NumberOfPlanes = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfPlanes\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total profit from producing model trains and planes",
            "status": "coded",
            "formulation": "\\max \\quad \\textup{ProfitTrain} \\times \\textup{NumberOfTrains} + \\textup{ProfitPlane} \\times \\textup{NumberOfPlanes}",
            "related_variables": [
                "NumberOfTrains",
                "NumberOfPlanes"
            ],
            "related_parameters": [
                "ProfitTrain",
                "ProfitPlane"
            ],
            "code": "# Set the objective function\nmodel.setObjective(ProfitTrain * NumberOfTrains + ProfitPlane * NumberOfPlanes, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413174709_nl4opt_prob_27/",
    "problem_path": "data/nl4opt/prob_27/"
}