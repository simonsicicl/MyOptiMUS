{
    "background": "A metal-working shop needs to decide on the purchase of metal-working equipment, considering the capacities and waste generation of chop saws and steel cutters to meet an expected daily metal cutting demand without exceeding the waste production limit.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Pounds of steel worked by the chop saw per day",
            "symbol": "PoundsChopSaw",
            "value": 25,
            "shape": [],
            "code": "PoundsChopSaw = data[\"PoundsChopSaw\"] # scalar parameter"
        },
        {
            "definition": "Units of waste generated by the chop saw per day",
            "symbol": "WasteChopSaw",
            "value": 25,
            "shape": [],
            "code": "WasteChopSaw = data[\"WasteChopSaw\"] # scalar parameter"
        },
        {
            "definition": "Pounds of steel worked by the steel cutter per day",
            "symbol": "PoundsSteelCutter",
            "value": 5,
            "shape": [],
            "code": "PoundsSteelCutter = data[\"PoundsSteelCutter\"] # scalar parameter"
        },
        {
            "definition": "Units of waste generated by the steel cutter per day",
            "symbol": "WasteSteelCutter",
            "value": 3,
            "shape": [],
            "code": "WasteSteelCutter = data[\"WasteSteelCutter\"] # scalar parameter"
        },
        {
            "definition": "Total pounds of steel required to be worked per day",
            "symbol": "TotalPounds",
            "value": 520,
            "shape": [],
            "code": "TotalPounds = data[\"TotalPounds\"] # scalar parameter"
        },
        {
            "definition": "Maximum allowed units of waste per day",
            "symbol": "MaxWaste",
            "value": 400,
            "shape": [],
            "code": "MaxWaste = data[\"MaxWaste\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of chop saws must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumChopSaws} \\geq 0",
            "related_variables": [
                "NumChopSaws"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of chop saws is non-negative\nmodel.addConstr(NumChopSaws >= 0, name=\"NumChopSaws_non_negative\")"
        },
        {
            "description": "The number of steel cutters must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumSteelCutters} \\geq 0",
            "related_variables": [
                "NumSteelCutters"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of steel cutters is non-negative\nmodel.addConstr(NumSteelCutters >= 0, \"non_negativity_steel_cutters\")"
        },
        {
            "description": "The total pounds of metal cut daily must meet or exceed TotalPounds",
            "status": "coded",
            "formulation": "NumChopSaws \\cdot PoundsChopSaw + NumSteelCutters \\cdot PoundsSteelCutter \\geq TotalPounds",
            "related_variables": [
                "NumChopSaws",
                "NumSteelCutters"
            ],
            "related_parameters": [
                "PoundsChopSaw",
                "PoundsSteelCutter",
                "TotalPounds"
            ],
            "code": "# Total pounds of metal cut daily constraint\nmodel.addConstr(NumChopSaws * PoundsChopSaw + NumSteelCutters * PoundsSteelCutter >= TotalPounds, name=\"total_pounds_constraint\")"
        },
        {
            "description": "Total waste from all chop saws and steel cutters must not exceed MaxWaste units per day",
            "status": "coded",
            "formulation": "\\textup{WasteChopSaw} \\cdot \\textup{NumChopSaws} + \\textup{WasteSteelCutter} \\cdot \\textup{NumSteelCutters} \\leq \\textup{MaxWaste}",
            "related_variables": [
                "NumChopSaws",
                "NumSteelCutters"
            ],
            "related_parameters": [
                "WasteChopSaw",
                "WasteSteelCutter",
                "MaxWaste"
            ],
            "code": "# Add constraint for maximum daily waste\nmodel.addConstr(WasteChopSaw * NumChopSaws + WasteSteelCutter * NumSteelCutters <= MaxWaste, name=\"max_daily_waste\")"
        },
        {
            "description": "The total pounds of steel worked must meet the daily demand",
            "status": "coded",
            "formulation": "\\textup{NumChopSaws} \\times \\textup{PoundsChopSaw} + \\textup{NumSteelCutters} \\times \\textup{PoundsSteelCutter} \\geq \\textup{TotalPounds}",
            "related_variables": [
                "NumChopSaws",
                "NumSteelCutters"
            ],
            "related_parameters": [
                "PoundsChopSaw",
                "PoundsSteelCutter",
                "TotalPounds"
            ],
            "code": "# Ensure that the total pounds of steel worked meets the daily demand\nmodel.addConstr(NumChopSaws * PoundsChopSaw + NumSteelCutters * PoundsSteelCutter >= TotalPounds, \"daily_demand\")"
        },
        {
            "description": "Total waste generated should not exceed maximum allowed waste",
            "status": "coded",
            "formulation": "\\textup{NumChopSaws} \\times \\textup{WasteChopSaw} + \\textup{NumSteelCutters} \\times \\textup{WasteSteelCutter} \\leq \\textup{MaxWaste}",
            "related_variables": [
                "NumChopSaws",
                "NumSteelCutters"
            ],
            "related_parameters": [
                "WasteChopSaw",
                "WasteSteelCutter",
                "MaxWaste"
            ],
            "code": "# Add constraint for total waste not to exceed maximum allowed waste\nmodel.addConstr(NumChopSaws * WasteChopSaw + NumSteelCutters * WasteSteelCutter <= MaxWaste, name=\"max_waste_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of chop saws in the workshop",
            "symbol": "NumChopSaws",
            "shape": [],
            "status": "coded",
            "code": "NumChopSaws = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumChopSaws\")"
        },
        {
            "definition": "The number of steel cutters in the workshop",
            "symbol": "NumSteelCutters",
            "shape": [],
            "status": "coded",
            "code": "NumSteelCutters = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumSteelCutters\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total number of metal-working equipment needed by the shop",
            "status": "coded",
            "formulation": "\\textup{Minimize} \\quad \\textup{NumChopSaws} + \\textup{NumSteelCutters}",
            "related_variables": [
                "NumChopSaws",
                "NumSteelCutters"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(NumChopSaws + NumSteelCutters, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 72.0,
    "log_path": "logs/log_20250413170407_nl4opt_prob_244/",
    "problem_path": "data/nl4opt/prob_244/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_244/data.json\", \"r\") as f:\n    data = json.load(f)\n\nPoundsChopSaw = data[\"PoundsChopSaw\"] # scalar parameter\nWasteChopSaw = data[\"WasteChopSaw\"] # scalar parameter\nPoundsSteelCutter = data[\"PoundsSteelCutter\"] # scalar parameter\nWasteSteelCutter = data[\"WasteSteelCutter\"] # scalar parameter\nTotalPounds = data[\"TotalPounds\"] # scalar parameter\nMaxWaste = data[\"MaxWaste\"] # scalar parameter\nNumChopSaws = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumChopSaws\")\nNumSteelCutters = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumSteelCutters\")\n\n# Add constraint to ensure the number of chop saws is non-negative\nmodel.addConstr(NumChopSaws >= 0, name=\"NumChopSaws_non_negative\")\n\n# Add constraint to ensure the number of steel cutters is non-negative\nmodel.addConstr(NumSteelCutters >= 0, \"non_negativity_steel_cutters\")\n\n# Total pounds of metal cut daily constraint\nmodel.addConstr(NumChopSaws * PoundsChopSaw + NumSteelCutters * PoundsSteelCutter >= TotalPounds, name=\"total_pounds_constraint\")\n\n# Add constraint for maximum daily waste\nmodel.addConstr(WasteChopSaw * NumChopSaws + WasteSteelCutter * NumSteelCutters <= MaxWaste, name=\"max_daily_waste\")\n\n# Ensure that the total pounds of steel worked meets the daily demand\nmodel.addConstr(NumChopSaws * PoundsChopSaw + NumSteelCutters * PoundsSteelCutter >= TotalPounds, \"daily_demand\")\n\n# Add constraint for total waste not to exceed maximum allowed waste\nmodel.addConstr(NumChopSaws * WasteChopSaw + NumSteelCutters * WasteSteelCutter <= MaxWaste, name=\"max_waste_constraint\")\n\n# Set objective\nmodel.setObjective(NumChopSaws + NumSteelCutters, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}