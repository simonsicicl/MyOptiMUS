{
    "background": "A dietician instructs a client on dietary choices involving blueberries and strawberries to meet nutritional goals for anti-oxidants and minerals while minimizing sugar intake.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Units of anti-oxidants in a pack of blueberries",
            "symbol": "BlueberryAntioxidants",
            "value": 3,
            "shape": [],
            "code": "BlueberryAntioxidants = data[\"BlueberryAntioxidants\"] # scalar parameter"
        },
        {
            "definition": "Units of minerals in a pack of blueberries",
            "symbol": "BlueberryMinerals",
            "value": 5,
            "shape": [],
            "code": "BlueberryMinerals = data[\"BlueberryMinerals\"] # scalar parameter"
        },
        {
            "definition": "Units of anti-oxidants in a pack of strawberries",
            "symbol": "StrawberryAntioxidants",
            "value": 1,
            "shape": [],
            "code": "StrawberryAntioxidants = data[\"StrawberryAntioxidants\"] # scalar parameter"
        },
        {
            "definition": "Units of minerals in a pack of strawberries",
            "symbol": "StrawberryMinerals",
            "value": 7,
            "shape": [],
            "code": "StrawberryMinerals = data[\"StrawberryMinerals\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of anti-oxidants",
            "symbol": "MinAntioxidants",
            "value": 90,
            "shape": [],
            "code": "MinAntioxidants = data[\"MinAntioxidants\"] # scalar parameter"
        },
        {
            "definition": "Minimum required units of minerals",
            "symbol": "MinMinerals",
            "value": 100,
            "shape": [],
            "code": "MinMinerals = data[\"MinMinerals\"] # scalar parameter"
        },
        {
            "definition": "Ratio of packs of strawberries to blueberries",
            "symbol": "StrawberryBlueberryRatio",
            "value": 0.33,
            "shape": [],
            "code": "StrawberryBlueberryRatio = data[\"StrawberryBlueberryRatio\"] # scalar parameter"
        },
        {
            "definition": "Grams of sugar in a pack of blueberries",
            "symbol": "BlueberrySugar",
            "value": 5,
            "shape": [],
            "code": "BlueberrySugar = data[\"BlueberrySugar\"] # scalar parameter"
        },
        {
            "definition": "Grams of sugar in a pack of strawberries",
            "symbol": "StrawberrySugar",
            "value": 7,
            "shape": [],
            "code": "StrawberrySugar = data[\"StrawberrySugar\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Number of blueberry packs must be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfBlueberryPacks} \\geq 0",
            "related_variables": [
                "NumberOfBlueberryPacks"
            ],
            "related_parameters": [],
            "code": "model.addConstr(NumberOfBlueberryPacks >= 0, name=\"non_negativity_blueberry_packs\")"
        },
        {
            "description": "Number of strawberry packs must be non-negative",
            "status": "coded",
            "formulation": "NumberOfStrawberryPacks \\geq 0",
            "related_variables": [
                "NumberOfStrawberryPacks"
            ],
            "related_parameters": [],
            "code": "# Ensure the number of strawberry packs is non-negative\nmodel.addConstr(NumberOfStrawberryPacks >= 0, name=\"strawberry_packs_non_negative\")"
        },
        {
            "description": "Total antioxidants from blueberries and strawberries must be at least MinAntioxidants",
            "status": "coded",
            "formulation": "\\textup{BlueberryAntioxidants} \\times \\textup{NumberOfBlueberryPacks} + \\textup{StrawberryAntioxidants} \\times \\textup{NumberOfStrawberryPacks} \\geq \\textup{MinAntioxidants}",
            "related_variables": [
                "NumberOfBlueberryPacks",
                "NumberOfStrawberryPacks"
            ],
            "related_parameters": [
                "BlueberryAntioxidants",
                "StrawberryAntioxidants",
                "MinAntioxidants"
            ],
            "code": "# Add the constraint for minimum antioxidants from blueberries and strawberries\nmodel.addConstr(BlueberryAntioxidants * NumberOfBlueberryPacks + StrawberryAntioxidants * NumberOfStrawberryPacks >= MinAntioxidants, name=\"min_antioxidants\")"
        },
        {
            "description": "Total minerals consumed from blueberries and strawberries must be at least the minimum required minerals.",
            "status": "coded",
            "formulation": "\\textup{NumberOfBlueberryPacks} \\times \\textup{BlueberryMinerals} + \\textup{NumberOfStrawberryPacks} \\times \\textup{StrawberryMinerals} \\geq \\textup{MinMinerals}",
            "related_variables": [
                "NumberOfBlueberryPacks",
                "NumberOfStrawberryPacks"
            ],
            "related_parameters": [
                "BlueberryMinerals",
                "StrawberryMinerals",
                "MinMinerals"
            ],
            "code": "# Add constraint for minimum required minerals from blueberries and strawberries\nmodel.addConstr(NumberOfBlueberryPacks * BlueberryMinerals + NumberOfStrawberryPacks * StrawberryMinerals >= MinMinerals, name=\"min_minerals\")"
        },
        {
            "description": "The number of strawberry packs must be at least 3 times the number of blueberry packs",
            "status": "coded",
            "formulation": "\\textup{NumberOfStrawberryPacks} \\geq 3 \\times \\textup{NumberOfBlueberryPacks}",
            "related_variables": [
                "NumberOfStrawberryPacks",
                "NumberOfBlueberryPacks"
            ],
            "related_parameters": [],
            "code": "# Add constraint: NumberOfStrawberryPacks >= 3 * NumberOfBlueberryPacks\nmodel.addConstr(NumberOfStrawberryPacks >= 3 * NumberOfBlueberryPacks, name=\"strawberry_to_blueberry_ratio\")"
        },
        {
            "description": "Ensure the intake of anti-oxidants from blueberries and strawberries meets the minimum required units",
            "status": "coded",
            "formulation": "\\textup{BlueberryAntioxidants} \\times \\textup{NumberOfBlueberryPacks} + \\textup{StrawberryAntioxidants} \\times \\textup{NumberOfStrawberryPacks} \\geq \\textup{MinAntioxidants}",
            "related_variables": [
                "NumberOfBlueberryPacks",
                "NumberOfStrawberryPacks"
            ],
            "related_parameters": [
                "BlueberryAntioxidants",
                "StrawberryAntioxidants",
                "MinAntioxidants"
            ],
            "code": "# Ensure the intake of anti-oxidants from blueberries and strawberries meets the minimum required units\nmodel.addConstr(BlueberryAntioxidants * NumberOfBlueberryPacks + StrawberryAntioxidants * NumberOfStrawberryPacks >= MinAntioxidants, \"min_antioxidants_requirement\")"
        },
        {
            "description": "Ensure the intake of minerals from blueberries and strawberries meets the minimum required units",
            "status": "coded",
            "formulation": "\\textup{BlueberryMinerals} \\times \\textup{NumberOfBlueberryPacks} + \\textup{StrawberryMinerals} \\times \\textup{NumberOfStrawberryPacks} \\geq \\textup{MinMinerals}",
            "related_variables": [
                "NumberOfBlueberryPacks",
                "NumberOfStrawberryPacks"
            ],
            "related_parameters": [
                "BlueberryMinerals",
                "StrawberryMinerals",
                "MinMinerals"
            ],
            "code": "# Ensure the intake of minerals from blueberries and strawberries meets the minimum required units\nmodel.addConstr(BlueberryMinerals * NumberOfBlueberryPacks + StrawberryMinerals * NumberOfStrawberryPacks >= MinMinerals, name=\"min_minerals_requirement\")"
        },
        {
            "description": "Maintain the ratio of packs of strawberries to blueberries",
            "status": "coded",
            "formulation": "\\textup{NumberOfStrawberryPacks} \\leq \\textup{StrawberryBlueberryRatio} \\times \\textup{NumberOfBlueberryPacks}",
            "related_variables": [
                "NumberOfBlueberryPacks",
                "NumberOfStrawberryPacks"
            ],
            "related_parameters": [
                "StrawberryBlueberryRatio"
            ],
            "code": "# Maintain the ratio of packs of strawberries to blueberries\nmodel.addConstr(NumberOfStrawberryPacks <= StrawberryBlueberryRatio * NumberOfBlueberryPacks, name=\"StrawberryBlueberryRatioConstraint\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of blueberry packs to be included in the diet",
            "symbol": "NumberOfBlueberryPacks",
            "shape": [],
            "status": "coded",
            "code": "NumberOfBlueberryPacks = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBlueberryPacks\")"
        },
        {
            "definition": "Number of strawberry packs to be included in the diet",
            "symbol": "NumberOfStrawberryPacks",
            "shape": [],
            "status": "coded",
            "code": "NumberOfStrawberryPacks = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfStrawberryPacks\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total grams of sugar intake from consuming packs of blueberries and strawberries",
            "status": "coded",
            "formulation": "\\textup{Minimize:} \\quad \\textup{TotalSugar} = \\textup{BlueberrySugar} \\times \\textup{NumberOfBlueberryPacks} + \\textup{StrawberrySugar} \\times \\textup{NumberOfStrawberryPacks}",
            "related_variables": [
                "NumberOfBlueberryPacks",
                "NumberOfStrawberryPacks"
            ],
            "related_parameters": [
                "BlueberrySugar",
                "StrawberrySugar"
            ],
            "code": "# Define the objective function\nmodel.setObjective(BlueberrySugar * NumberOfBlueberryPacks + StrawberrySugar * NumberOfStrawberryPacks, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 3,
    "error_message": null,
    "obj_val": "infeasible",
    "log_path": "logs/log_20250413132941_nl4opt_prob_146/",
    "problem_path": "data/nl4opt/prob_146/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_146/data.json\", \"r\") as f:\n    data = json.load(f)\n\nBlueberryAntioxidants = data[\"BlueberryAntioxidants\"] # scalar parameter\nBlueberryMinerals = data[\"BlueberryMinerals\"] # scalar parameter\nStrawberryAntioxidants = data[\"StrawberryAntioxidants\"] # scalar parameter\nStrawberryMinerals = data[\"StrawberryMinerals\"] # scalar parameter\nMinAntioxidants = data[\"MinAntioxidants\"] # scalar parameter\nMinMinerals = data[\"MinMinerals\"] # scalar parameter\nStrawberryBlueberryRatio = data[\"StrawberryBlueberryRatio\"] # scalar parameter\nBlueberrySugar = data[\"BlueberrySugar\"] # scalar parameter\nStrawberrySugar = data[\"StrawberrySugar\"] # scalar parameter\nNumberOfBlueberryPacks = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBlueberryPacks\")\nNumberOfStrawberryPacks = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfStrawberryPacks\")\n\nmodel.addConstr(NumberOfBlueberryPacks >= 0, name=\"non_negativity_blueberry_packs\")\n\n# Ensure the number of strawberry packs is non-negative\nmodel.addConstr(NumberOfStrawberryPacks >= 0, name=\"strawberry_packs_non_negative\")\n\n# Add the constraint for minimum antioxidants from blueberries and strawberries\nmodel.addConstr(BlueberryAntioxidants * NumberOfBlueberryPacks + StrawberryAntioxidants * NumberOfStrawberryPacks >= MinAntioxidants, name=\"min_antioxidants\")\n\n# Add constraint for minimum required minerals from blueberries and strawberries\nmodel.addConstr(NumberOfBlueberryPacks * BlueberryMinerals + NumberOfStrawberryPacks * StrawberryMinerals >= MinMinerals, name=\"min_minerals\")\n\n# Add constraint: NumberOfStrawberryPacks >= 3 * NumberOfBlueberryPacks\nmodel.addConstr(NumberOfStrawberryPacks >= 3 * NumberOfBlueberryPacks, name=\"strawberry_to_blueberry_ratio\")\n\n# Ensure the intake of anti-oxidants from blueberries and strawberries meets the minimum required units\nmodel.addConstr(BlueberryAntioxidants * NumberOfBlueberryPacks + StrawberryAntioxidants * NumberOfStrawberryPacks >= MinAntioxidants, \"min_antioxidants_requirement\")\n\n# Ensure the intake of minerals from blueberries and strawberries meets the minimum required units\nmodel.addConstr(BlueberryMinerals * NumberOfBlueberryPacks + StrawberryMinerals * NumberOfStrawberryPacks >= MinMinerals, name=\"min_minerals_requirement\")\n\n# Maintain the ratio of packs of strawberries to blueberries\nmodel.addConstr(NumberOfStrawberryPacks <= StrawberryBlueberryRatio * NumberOfBlueberryPacks, name=\"StrawberryBlueberryRatioConstraint\")\n\n# Define the objective function\nmodel.setObjective(BlueberrySugar * NumberOfBlueberryPacks + StrawberrySugar * NumberOfStrawberryPacks, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}