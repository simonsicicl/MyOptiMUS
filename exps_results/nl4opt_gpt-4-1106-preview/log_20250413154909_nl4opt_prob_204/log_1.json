{
    "background": "A young boy aims to meet his daily nutritional goals by consuming a mix of milk and vegetables, each providing different amounts of calcium and iron at associated costs.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Minimum units of calcium required per day",
            "symbol": "C",
            "value": 100,
            "shape": [],
            "code": "C = data[\"C\"] # scalar parameter"
        },
        {
            "definition": "Minimum units of iron required per day",
            "symbol": "I",
            "value": 50,
            "shape": [],
            "code": "I = data[\"I\"] # scalar parameter"
        },
        {
            "definition": "Cost of one glass of milk",
            "symbol": "CostMilk",
            "value": 1.0,
            "shape": [],
            "code": "CostMilk = data[\"CostMilk\"] # scalar parameter"
        },
        {
            "definition": "Units of calcium in one glass of milk",
            "symbol": "CalciumMilk",
            "value": 40,
            "shape": [],
            "code": "CalciumMilk = data[\"CalciumMilk\"] # scalar parameter"
        },
        {
            "definition": "Units of iron in one glass of milk",
            "symbol": "IronMilk",
            "value": 25,
            "shape": [],
            "code": "IronMilk = data[\"IronMilk\"] # scalar parameter"
        },
        {
            "definition": "Cost of one plate of vegetables",
            "symbol": "CostVeg",
            "value": 2.0,
            "shape": [],
            "code": "CostVeg = data[\"CostVeg\"] # scalar parameter"
        },
        {
            "definition": "Units of calcium in one plate of vegetables",
            "symbol": "CalciumVeg",
            "value": 15,
            "shape": [],
            "code": "CalciumVeg = data[\"CalciumVeg\"] # scalar parameter"
        },
        {
            "definition": "Units of iron in one plate of vegetables",
            "symbol": "IronVeg",
            "value": 30,
            "shape": [],
            "code": "IronVeg = data[\"IronVeg\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Total calcium intake from milk and vegetables must be at least C units",
            "status": "coded",
            "formulation": "\\textup{CalciumMilk} \\cdot \\textup{GlassesOfMilk} + \\textup{CalciumVeg} \\cdot \\textup{PlatesOfVeg} \\geq \\textup{C}",
            "related_variables": [
                "GlassesOfMilk",
                "PlatesOfVeg"
            ],
            "related_parameters": [
                "CalciumMilk",
                "CalciumVeg",
                "C"
            ],
            "code": "# Constraint: Total calcium intake from milk and vegetables must be at least C units\nmodel.addConstr(CalciumMilk * GlassesOfMilk + CalciumVeg * PlatesOfVeg >= C, name=\"calcium_intake\")"
        },
        {
            "description": "Total iron from milk and vegetables must be at least I units",
            "status": "coded",
            "formulation": "\\textup{IronMilk} \\cdot \\textup{GlassesOfMilk} + \\textup{IronVeg} \\cdot \\textup{PlatesOfVeg} \\geq \\textup{I}",
            "related_variables": [
                "GlassesOfMilk",
                "PlatesOfVeg"
            ],
            "related_parameters": [
                "IronMilk",
                "IronVeg",
                "I"
            ],
            "code": "# Ensure total iron from milk and vegetables is at least I units\nmodel.addConstr(IronMilk * GlassesOfMilk + IronVeg * PlatesOfVeg >= I, name=\"iron_requirement\")"
        },
        {
            "description": "The number of glasses of milk consumed must be non-negative",
            "status": "coded",
            "formulation": "\\textup{GlassesOfMilk} \\geq 0",
            "related_variables": [
                "GlassesOfMilk"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of glasses of milk consumed is non-negative\nmodel.addConstr(GlassesOfMilk >= 0, name=\"glasses_of_milk_non_negative\")"
        },
        {
            "description": "The number of plates of vegetables consumed must be non-negative",
            "status": "coded",
            "formulation": "\\textup{PlatesOfVeg} \\geq 0",
            "related_variables": [
                "PlatesOfVeg"
            ],
            "related_parameters": [],
            "code": "model.addConstr(PlatesOfVeg >= 0, name=\"non_negativity_veg\")"
        },
        {
            "description": "Ensure that the calcium requirement is met",
            "status": "coded",
            "formulation": "\\textup{CalciumMilk} \\cdot \\textup{GlassesOfMilk} + \\textup{CalciumVeg} \\cdot \\textup{PlatesOfVeg} \\geq \\textup{C}",
            "related_variables": [
                "GlassesOfMilk",
                "PlatesOfVeg"
            ],
            "related_parameters": [
                "CalciumMilk",
                "CalciumVeg",
                "C"
            ],
            "code": "# Ensure that the calcium requirement is met\nmodel.addConstr(CalciumMilk * GlassesOfMilk + CalciumVeg * PlatesOfVeg >= C, name=\"calcium_requirement\")"
        },
        {
            "description": "Ensure that the iron requirement is met",
            "status": "coded",
            "formulation": "\\textup{IronMilk} \\cdot \\textup{GlassesOfMilk} + \\textup{IronVeg} \\cdot \\textup{PlatesOfVeg} \\geq \\textup{I}",
            "related_variables": [
                "GlassesOfMilk",
                "PlatesOfVeg"
            ],
            "related_parameters": [
                "IronMilk",
                "IronVeg",
                "I"
            ],
            "code": "# Ensure that the iron requirement is met constraint\nmodel.addConstr(IronMilk * GlassesOfMilk + IronVeg * PlatesOfVeg >= I, name=\"iron_requirement\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of glasses of milk consumed",
            "symbol": "GlassesOfMilk",
            "shape": [],
            "status": "coded",
            "code": "GlassesOfMilk = model.addVar(vtype=gp.GRB.INTEGER, name=\"GlassesOfMilk\")"
        },
        {
            "definition": "The number of plates of vegetables consumed",
            "symbol": "PlatesOfVeg",
            "shape": [],
            "status": "coded",
            "code": "PlatesOfVeg = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"PlatesOfVeg\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cost of milk and vegetables consumed",
            "status": "coded",
            "formulation": "\\min (\\textup{CostMilk} \\cdot \\textup{GlassesOfMilk} + \\textup{CostVeg} \\cdot \\textup{PlatesOfVeg})",
            "related_variables": [
                "GlassesOfMilk",
                "PlatesOfVeg"
            ],
            "related_parameters": [
                "CostMilk",
                "CostVeg"
            ],
            "code": "# Set objective\nmodel.setObjective(CostMilk * GlassesOfMilk + CostVeg * PlatesOfVeg, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413154909_nl4opt_prob_204/",
    "problem_path": "data/nl4opt/prob_204/"
}