{
    "background": "A village is hosting a banquet where bike and car transportations are provided, and the objective is to minimize the number of bikes while meeting the transportation needs.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Seating capacity of a bike",
            "symbol": "BikeCapacity",
            "value": 3,
            "shape": [],
            "code": "BikeCapacity = data[\"BikeCapacity\"] # scalar parameter"
        },
        {
            "definition": "Seating capacity of a car",
            "symbol": "CarCapacity",
            "value": 5,
            "shape": [],
            "code": "CarCapacity = data[\"CarCapacity\"] # scalar parameter"
        },
        {
            "definition": "Maximum proportion of transport vehicles that can be cars",
            "symbol": "MaxCarProportion",
            "value": 0.4,
            "shape": [],
            "code": "MaxCarProportion = data[\"MaxCarProportion\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of people that need transport",
            "symbol": "MinPeople",
            "value": 500,
            "shape": [],
            "code": "MinPeople = data[\"MinPeople\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of bikes used should be non-negative",
            "status": "coded",
            "formulation": "\\textup{NumberOfBikes} \\geq 0",
            "related_variables": [
                "NumberOfBikes"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for the number of bikes used\nmodel.addConstr(NumberOfBikes >= 0, name=\"non_negativity_bikes\")"
        },
        {
            "description": "The number of cars must be a non-negative value",
            "status": "coded",
            "formulation": "\\textup{NumberOfCars} \\geq 0",
            "related_variables": [
                "NumberOfCars"
            ],
            "related_parameters": [],
            "code": "# The number of cars must be a non-negative value\nmodel.addConstr(NumberOfCars >= 0, name=\"non_negative_cars\")"
        },
        {
            "description": "Each bike can transport at most BikeCapacity people",
            "status": "coded",
            "formulation": "\\textup{NumberOfBikes} \\cdot \\textup{BikeCapacity} \\geq \\textup{MinPeople}",
            "related_variables": [
                "NumberOfBikes"
            ],
            "related_parameters": [
                "BikeCapacity",
                "MinPeople"
            ],
            "code": "model.addConstr(NumberOfBikes * BikeCapacity >= MinPeople, name=\"bike_capacity_constraint\")"
        },
        {
            "description": "Each car can transport at most CarCapacity people",
            "status": "coded",
            "formulation": "\\textup{NumberOfCars} \\cdot \\textup{CarCapacity} \\geq \\textup{MinPeople} - \\textup{NumberOfBikes} \\cdot \\textup{BikeCapacity}",
            "related_variables": [
                "NumberOfBikes",
                "NumberOfCars"
            ],
            "related_parameters": [
                "CarCapacity",
                "BikeCapacity",
                "MinPeople"
            ],
            "code": "# Car capacity constraint to ensure enough transportation for minimum people accounting for bike capacity\nmodel.addConstr(NumberOfCars * CarCapacity >= MinPeople - NumberOfBikes * BikeCapacity, name='car_capacity_constraint')"
        },
        {
            "description": "At most MaxCarProportion of the total number of vehicles can be cars",
            "status": "coded",
            "formulation": "\\textup{NumberOfCars} \\leq \\textup{MaxCarProportion} \\cdot (\\textup{NumberOfBikes} + \\textup{NumberOfCars})",
            "related_variables": [
                "NumberOfBikes",
                "NumberOfCars"
            ],
            "related_parameters": [
                "MaxCarProportion"
            ],
            "code": "# Constraint: At most MaxCarProportion of the total number of vehicles can be cars\nmodel.addConstr(NumberOfCars <= MaxCarProportion * (NumberOfBikes + NumberOfCars), name=\"MaxCarsProportionConstraint\")"
        },
        {
            "description": "At least MinPeople must be transported utilizing the available bikes and cars",
            "status": "coded",
            "formulation": "\\textup{NumberOfBikes} \\times \\textup{BikeCapacity} + \\textup{NumberOfCars} \\times \\textup{CarCapacity} \\geq \\textup{MinPeople}",
            "related_variables": [
                "NumberOfBikes",
                "NumberOfCars"
            ],
            "related_parameters": [
                "BikeCapacity",
                "CarCapacity",
                "MinPeople"
            ],
            "code": "# At least MinPeople must be transported utilizing the available bikes and cars\nmodel.addConstr(NumberOfBikes * BikeCapacity + NumberOfCars * CarCapacity >= MinPeople, \"min_people_transportation\")"
        },
        {
            "description": "Ensure the minimum number of people are transported",
            "status": "coded",
            "formulation": "\\textup{NumberOfBikes} \\times \\textup{BikeCapacity} + \\textup{NumberOfCars} \\times \\textup{CarCapacity} \\geq \\textup{MinPeople}",
            "related_variables": [
                "NumberOfBikes",
                "NumberOfCars"
            ],
            "related_parameters": [
                "BikeCapacity",
                "CarCapacity",
                "MinPeople"
            ],
            "code": "# Ensure the minimum number of people are transported\nmodel.addConstr(NumberOfBikes * BikeCapacity + NumberOfCars * CarCapacity >= MinPeople, name=\"min_people_transported\")"
        },
        {
            "description": "Limit the number of cars based on the maximum car proportion",
            "status": "coded",
            "formulation": "\\textup{NumberOfCars} \\leq \\left(\\textup{MaxCarProportion} \\times (\\textup{NumberOfBikes} + \\textup{NumberOfCars})\\right)",
            "related_variables": [
                "NumberOfBikes",
                "NumberOfCars"
            ],
            "related_parameters": [
                "MaxCarProportion"
            ],
            "code": "# Add constraint to limit the number of cars based on the maximum car proportion\nmodel.addConstr(NumberOfCars <= MaxCarProportion * (NumberOfBikes + NumberOfCars), \"Car_Proportion_Limit\")"
        }
    ],
    "variables": [
        {
            "definition": "The number of bikes used for transportation",
            "symbol": "NumberOfBikes",
            "shape": [],
            "status": "coded",
            "code": "NumberOfBikes = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBikes\")"
        },
        {
            "definition": "The number of cars used for transportation",
            "symbol": "NumberOfCars",
            "shape": [],
            "status": "coded",
            "code": "NumberOfCars = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfCars\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the number of bikes used for transportation",
            "status": "coded",
            "formulation": "\\min \\textup{NumberOfBikes}",
            "related_variables": [
                "NumberOfBikes"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(NumberOfBikes, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "solved",
    "solver_output_status": 2,
    "error_message": null,
    "obj_val": 167.0,
    "log_path": "logs/log_20250413144309_nl4opt_prob_178/",
    "problem_path": "data/nl4opt/prob_178/",
    "code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_178/data.json\", \"r\") as f:\n    data = json.load(f)\n\nBikeCapacity = data[\"BikeCapacity\"] # scalar parameter\nCarCapacity = data[\"CarCapacity\"] # scalar parameter\nMaxCarProportion = data[\"MaxCarProportion\"] # scalar parameter\nMinPeople = data[\"MinPeople\"] # scalar parameter\nNumberOfBikes = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfBikes\")\nNumberOfCars = model.addVar(vtype=gp.GRB.INTEGER, name=\"NumberOfCars\")\n\n# Add non-negativity constraint for the number of bikes used\nmodel.addConstr(NumberOfBikes >= 0, name=\"non_negativity_bikes\")\n\n# The number of cars must be a non-negative value\nmodel.addConstr(NumberOfCars >= 0, name=\"non_negative_cars\")\n\nmodel.addConstr(NumberOfBikes * BikeCapacity >= MinPeople, name=\"bike_capacity_constraint\")\n\n# Car capacity constraint to ensure enough transportation for minimum people accounting for bike capacity\nmodel.addConstr(NumberOfCars * CarCapacity >= MinPeople - NumberOfBikes * BikeCapacity, name='car_capacity_constraint')\n\n# Constraint: At most MaxCarProportion of the total number of vehicles can be cars\nmodel.addConstr(NumberOfCars <= MaxCarProportion * (NumberOfBikes + NumberOfCars), name=\"MaxCarsProportionConstraint\")\n\n# At least MinPeople must be transported utilizing the available bikes and cars\nmodel.addConstr(NumberOfBikes * BikeCapacity + NumberOfCars * CarCapacity >= MinPeople, \"min_people_transportation\")\n\n# Ensure the minimum number of people are transported\nmodel.addConstr(NumberOfBikes * BikeCapacity + NumberOfCars * CarCapacity >= MinPeople, name=\"min_people_transported\")\n\n# Add constraint to limit the number of cars based on the maximum car proportion\nmodel.addConstr(NumberOfCars <= MaxCarProportion * (NumberOfBikes + NumberOfCars), \"Car_Proportion_Limit\")\n\n# Set objective\nmodel.setObjective(NumberOfBikes, gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n"
}