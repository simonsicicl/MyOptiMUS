{
    "background": "A student has to consume calcium and vitamin D pills with certain effectiveness times, and must meet minimum intake requirements and the condition that more calcium pills than vitamin D pills are consumed.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Effective time for each calcium pill",
            "symbol": "Tc",
            "value": 5,
            "shape": [],
            "code": "Tc = data[\"Tc\"] # scalar parameter"
        },
        {
            "definition": "Effective time for each vitamin D pill",
            "symbol": "Td",
            "value": 6,
            "shape": [],
            "code": "Td = data[\"Td\"] # scalar parameter"
        },
        {
            "definition": "Minimum total number of pills to be taken in a month",
            "symbol": "Pmin",
            "value": 130,
            "shape": [],
            "code": "Pmin = data[\"Pmin\"] # scalar parameter"
        },
        {
            "definition": "Minimum number of vitamin D pills to be taken in a month",
            "symbol": "Dmin",
            "value": 40,
            "shape": [],
            "code": "Dmin = data[\"Dmin\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "The number of calcium pills must be non-negative",
            "status": "coded",
            "formulation": "\\textup{CalciumPills} \\geq 0",
            "related_variables": [
                "CalciumPills"
            ],
            "related_parameters": [],
            "code": "model.addConstr(CalciumPills >= 0, \"calcium_pills_nonnegativity\")"
        },
        {
            "description": "The number of vitamin D pills consumed in a month must be non-negative",
            "status": "coded",
            "formulation": "\\textup{VitaminDPills} \\geq 0",
            "related_variables": [
                "VitaminDPills"
            ],
            "related_parameters": [],
            "code": "# Add constraint to ensure the number of Vitamin D pills is non-negative\nmodel.addConstr(VitaminDPills >= 0, name=\"vitamin_d_pills_nonnegativity\")"
        },
        {
            "description": "The total number of both calcium and vitamin D pills must be at least Pmin",
            "status": "coded",
            "formulation": "\\textup{CalciumPills} + \\textup{VitaminDPills} \\geq P_{\\textup{min}}",
            "related_variables": [
                "CalciumPills",
                "VitaminDPills"
            ],
            "related_parameters": [
                "Pmin"
            ],
            "code": "# Add the constraint for the minimum total number of pills\nmodel.addConstr(CalciumPills + VitaminDPills >= Pmin, name=\"min_pills\")"
        },
        {
            "description": "Number of vitamin D pills taken must be at least Dmin",
            "status": "coded",
            "formulation": "\\textup{VitaminDPills} \\geq \\textup{Dmin}",
            "related_variables": [
                "VitaminDPills"
            ],
            "related_parameters": [
                "Dmin"
            ],
            "code": "# Constraint: Number of vitamin D pills taken must be at least Dmin\nmodel.addConstr(VitaminDPills >= Dmin, \"min_vitamin_D_intake\")"
        },
        {
            "description": "The number of calcium pills must be greater than the number of vitamin D pills",
            "status": "coded",
            "formulation": "\\textup{CalciumPills} > \\textup{VitaminDPills}",
            "related_variables": [
                "CalciumPills",
                "VitaminDPills"
            ],
            "related_parameters": [],
            "code": "model.addConstr(CalciumPills - VitaminDPills >= 1, name=\"calcium_greater_than_vitaminD\")"
        },
        {
            "description": "The total number of pills consumed in a month should be at least the minimum required.",
            "status": "coded",
            "formulation": "\\textup{CalciumPills} + \\textup{VitaminDPills} \\geq Pmin",
            "related_variables": [
                "CalciumPills",
                "VitaminDPills"
            ],
            "related_parameters": [
                "Pmin"
            ],
            "code": "# Constraint for minimum total number of pills to be taken in a month\nmodel.addConstr(CalciumPills + VitaminDPills >= Pmin, name=\"min_pills\")"
        },
        {
            "description": "The number of calcium pills consumed in a month should be more than the number of vitamin D pills.",
            "status": "runtime_error",
            "formulation": "\\textup{CalciumPills} > \\textup{VitaminDPills}",
            "related_variables": [
                "CalciumPills",
                "VitaminDPills"
            ],
            "related_parameters": [],
            "code": "model.addConstr(CalciumPills - VitaminDPills > 0, \"calcium_greater_than_vitaminD\")"
        },
        {
            "description": "The number of vitamin D pills consumed in a month should be at least the minimum required for vitamin D.",
            "status": "coded",
            "formulation": "\\textup{VitaminDPills} \\geq Dmin",
            "related_variables": [
                "VitaminDPills"
            ],
            "related_parameters": [
                "Dmin"
            ],
            "code": "# Add constraint for the minimum required vitamin D pills\nmodel.addConstr(VitaminDPills >= Dmin, name=\"min_vitamin_D\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of calcium pills consumed in a month",
            "symbol": "CalciumPills",
            "shape": [],
            "status": "coded",
            "code": "CalciumPills = model.addVar(vtype=gp.GRB.INTEGER, name=\"CalciumPills\")"
        },
        {
            "definition": "Number of vitamin D pills consumed in a month",
            "symbol": "VitaminDPills",
            "shape": [],
            "status": "coded",
            "code": "VitaminDPills = model.addVar(vtype=gp.GRB.INTEGER, name=\"VitaminDPills\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total effective time for the consumption of calcium and vitamin D pills over a month, under specified conditions.",
            "status": "coded",
            "formulation": "\\min (\\textup{CalciumPills} \\cdot Tc + \\textup{VitaminDPills} \\cdot Td)",
            "related_variables": [
                "CalciumPills",
                "VitaminDPills"
            ],
            "related_parameters": [
                "Tc",
                "Td"
            ],
            "code": "# Define the objective function\nmodel.setObjective(CalciumPills * Tc + VitaminDPills * Td, gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": "runtime_error",
    "solver_output_status": "runtime_error",
    "error_message": "Traceback (most recent call last):\n  File \"c:\\Users\\Simon\\Desktop\\Courses\\ECE 570\\ECE570_Project\\MyOptiMUS\\evaluator.py\", line 45, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 1, in <module>\n  File \"src\\\\gurobipy\\\\linexpr.pxi\", line 467, in gurobipy._core.LinExpr.__richcmp__\nNotImplementedError\n",
    "obj_val": null,
    "log_path": "logs/log_20250413164513_nl4opt_prob_230/",
    "problem_path": "data/nl4opt/prob_230/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_230/data.json\", \"r\") as f:\n    data = json.load(f)\n"
}