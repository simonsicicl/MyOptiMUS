{
    "background": "A set of jobs need to be processed on a set of machines in series, with each machine being able to work in parallel. Jobs must follow the same processing order through all machines, with the objective to minimize the total time to complete all jobs, known as the makespan.",
    "problem_type": "LP",
    "parameters": [
        {
            "symbol": "JobCount",
            "definition": "The total number of jobs to be processed",
            "shape": [],
            "code": "JobCount = data[\"JobCount\"] # scalar parameter"
        },
        {
            "symbol": "MachineCount",
            "definition": "The total number of machines available for processing",
            "shape": [],
            "code": "MachineCount = data[\"MachineCount\"] # scalar parameter"
        },
        {
            "symbol": "ProcessingTime",
            "definition": "The time required to process job j on machine m",
            "shape": [
                "JobCount",
                "MachineCount"
            ],
            "code": "ProcessingTime = np.array(data[\"ProcessingTime\"]) # ['JobCount', 'MachineCount']"
        }
    ],
    "constraints": [
        {
            "description": "All jobs must be processed in the same order by each machine, starting with Machine 1 and continuing in sequence to MachineCount.",
            "status": "coded",
            "formulation": "\\forall j \\in \\{1, ..., \\textup{JobCount}\\}, \\forall m \\in \\{2, ..., \\textup{MachineCount}\\}: \\quad \\textup{StartProcessing}_{j,m} \\geq \\textup{EndProcessing}_{j,m-1}",
            "related_variables": [
                "StartProcessing",
                "EndProcessing"
            ],
            "related_parameters": [
                "JobCount",
                "MachineCount"
            ],
            "code": "# All jobs must be processed in the same order by each machine\nfor j in range(JobCount):\n    for m in range(1, MachineCount):\n        model.addConstr(StartProcessing[j, m] >= EndProcessing[j, m-1], name=f\"Job_{j}_Machine_{m}_Order\")"
        },
        {
            "description": "Each machine can process only one job at a time",
            "status": "coded",
            "formulation": "\\textup{StartProcessing}_{jk} + \\textup{ProcessingTime}_{jk} \\leq \\textup{StartProcessing}_{jl} \\quad \\text{or} \\quad \\textup{StartProcessing}_{jl} + \\textup{ProcessingTime}_{jl} \\leq \\textup{StartProcessing}_{jk} \\quad \\forall j \\in [1, \\textup{JobCount}], \\forall k, l \\in [1, \\textup{MachineCount}], k \\neq l",
            "related_variables": [
                "StartProcessing",
                "ProcessingTime"
            ],
            "related_parameters": [
                "JobCount",
                "MachineCount"
            ],
            "code": "# Each machine can process only one job at a time\nfor j in range(JobCount):\n    for k in range(MachineCount):\n        for l in range(k + 1, MachineCount):\n            model.addConstr(StartProcessing[j, k] + ProcessingTime[j, k] <= StartProcessing[j, l] \n                            or StartProcessing[j, l] + ProcessingTime[j, l] <= StartProcessing[j, k], \n                            name=\"machine_processing_time_{}_{}_{}\".format(j, k, l))"
        },
        {
            "description": "Makespan should be greater than or equal to the end time of the last job on the last machine",
            "status": "coded",
            "formulation": "\\textup{Makespan} \\geq \\textup{EndProcessing}_{\\textup{JobCount}, \\textup{MachineCount}}",
            "related_variables": [
                "Makespan",
                "EndProcessing"
            ],
            "related_parameters": [
                "JobCount",
                "MachineCount"
            ],
            "code": "# Makespan should be greater than or equal to the end time of the last job on the last machine\nmodel.addConstr(Makespan >= EndProcessing[JobCount - 1, MachineCount - 1], name=\"makespan_constraint\")"
        }
    ],
    "variables": [
        {
            "definition": "The start time of processing job j on machine m",
            "symbol": "StartProcessing",
            "shape": [
                "JobCount",
                "MachineCount"
            ],
            "status": "coded",
            "code": "StartProcessing = model.addVars(JobCount, MachineCount, vtype=gp.GRB.CONTINUOUS, name=\"StartProcessing\")"
        },
        {
            "definition": "The end time of processing job j on machine m",
            "symbol": "EndProcessing",
            "shape": [
                "JobCount",
                "MachineCount"
            ],
            "status": "coded",
            "code": "EndProcessing = model.addVars(JobCount, MachineCount, vtype=gp.GRB.CONTINUOUS, name=\"EndProcessing\")"
        },
        {
            "definition": "The time when the last job is completed on the last machine",
            "symbol": "Makespan",
            "shape": [],
            "status": "coded",
            "code": "Makespan = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"Makespan\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total makespan, which is the last job completion time on the last machine",
            "status": "coded",
            "formulation": "\\min \\textup{Makespan}",
            "related_variables": [
                "EndProcessing"
            ],
            "related_parameters": [],
            "code": "# Set objective\nmodel.setObjective(max(EndProcessing[j,m] for j in range(JobCount) for m in range(MachineCount)), gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413144931_complexor_Flowshop_2/",
    "problem_path": "data/complexor/Flowshop_2/"
}