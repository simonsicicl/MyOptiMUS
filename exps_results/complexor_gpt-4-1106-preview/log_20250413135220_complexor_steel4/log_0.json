{
    "background": "A production problem involving a set of products being manufactured over multiple stages, where each product has a defined production rate per stage and profit margin, and each stage has limited available time.",
    "problem_type": "LP",
    "parameters": [
        {
            "symbol": "NumProducts",
            "definition": "The number of different products",
            "shape": [],
            "code": "NumProducts = data[\"NumProducts\"] # scalar parameter"
        },
        {
            "symbol": "NumStages",
            "definition": "The number of different stages",
            "shape": [],
            "code": "NumStages = data[\"NumStages\"] # scalar parameter"
        },
        {
            "symbol": "ProductionRate",
            "definition": "The production rate of product p in stage s",
            "shape": [
                "NumProducts",
                "NumStages"
            ],
            "code": "ProductionRate = np.array(data[\"ProductionRate\"]) # ['NumProducts', 'NumStages']"
        },
        {
            "symbol": "ProfitPerTon",
            "definition": "The profit per ton for each product",
            "shape": [
                "NumProducts"
            ],
            "code": "ProfitPerTon = np.array(data[\"ProfitPerTon\"]) # ['NumProducts']"
        },
        {
            "symbol": "MinCommitment",
            "definition": "The minimum number of tons of product p that can be sold in a week",
            "shape": [
                "NumProducts"
            ],
            "code": "MinCommitment = np.array(data[\"MinCommitment\"]) # ['NumProducts']"
        },
        {
            "symbol": "MaxMarketLimit",
            "definition": "The maximum market limit on the tons of product p sold in a week",
            "shape": [
                "NumProducts"
            ],
            "code": "MaxMarketLimit = np.array(data[\"MaxMarketLimit\"]) # ['NumProducts']"
        },
        {
            "symbol": "StageAvailability",
            "definition": "The number of hours available per week for each stage",
            "shape": [
                "NumStages"
            ],
            "code": "StageAvailability = np.array(data[\"StageAvailability\"]) # ['NumStages']"
        }
    ],
    "constraints": [
        {
            "description": "Each product must be produced in non-negative quantities",
            "status": "formulated",
            "formulation": "\\forall p \\in \\{1, \\ldots, \\textup{NumProducts}\\}, \\quad \\textup{TonsProduced}_p \\geq 0",
            "related_variables": [
                "TonsProduced"
            ],
            "related_parameters": [
                "NumProducts"
            ]
        },
        {
            "description": "Total hours used in each stage by all products cannot exceed available hours for that stage",
            "status": "formulated",
            "formulation": "\\sum_{p=1}^{\\textup{NumProducts}} \\left( \\frac{\\textup{TonsProduced}_p}{\\textup{ProductionRate}_{p,s}} \\right) \\leq \\textup{StageAvailability}_s \\quad \\forall s \\in \\{1, ..., \\textup{NumStages}\\}",
            "related_variables": [
                "TonsProduced"
            ],
            "related_parameters": [
                "NumProducts",
                "NumStages",
                "ProductionRate",
                "StageAvailability"
            ]
        },
        {
            "description": "Each product must meet its minimum production commitment in tons per week.",
            "status": "formulated",
            "formulation": "\\textup{TonsProduced}_p \\geq \\textup{MinCommitment}_p, \\quad \\forall p \\in \\{1, \\ldots, \\textup{NumProducts}\\}",
            "related_variables": [
                "TonsProduced"
            ],
            "related_parameters": [
                "MinCommitment",
                "NumProducts"
            ]
        },
        {
            "description": "Each product can be sold up to its maximum market limit per week",
            "status": "formulated",
            "formulation": "\\forall p \\in \\{1, \\ldots, \\textup{NumProducts}\\}, \\quad \\textup{TonsProduced}_p \\leq \\textup{MaxMarketLimit}_p",
            "related_variables": [
                "TonsProduced"
            ],
            "related_parameters": [
                "MaxMarketLimit",
                "NumProducts"
            ]
        }
    ],
    "variables": [
        {
            "definition": "The number of tons of product p produced",
            "symbol": "TonsProduced",
            "shape": [
                "NumProducts"
            ],
            "status": "formulated"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total profit from all the products produced",
            "status": "formulated",
            "formulation": "\\max \\sum_{p=1}^{\\textup{NumProducts}} (\\textup{TonsProduced}_{p} \\times \\textup{ProfitPerTon}_{p})",
            "related_variables": [
                "TonsProduced"
            ],
            "related_parameters": [
                "NumProducts",
                "ProfitPerTon"
            ]
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413135220_complexor_steel4/",
    "problem_path": "data/complexor/steel4/"
}