{
    "background": "The problem involves optimizing the total profit based on production or usage decisions for a set of elements, each with associated profits, coefficients affecting the production or usage cost, and upper bounds on their levels.",
    "problem_type": "LP",
    "parameters": [
        {
            "symbol": "ElementNum",
            "definition": "The set of elements",
            "shape": [],
            "code": "ElementNum = data[\"ElementNum\"] # scalar parameter"
        },
        {
            "symbol": "CoefficientA",
            "definition": "A coefficient parameter for each element in the set",
            "shape": [
                "ElementNum"
            ],
            "code": "CoefficientA = np.array(data[\"CoefficientA\"]) # ['ElementNum']"
        },
        {
            "symbol": "ProfitCoefficientC",
            "definition": "Profit coefficient for each element in the set",
            "shape": [
                "ElementNum"
            ],
            "code": "ProfitCoefficientC = np.array(data[\"ProfitCoefficientC\"]) # ['ElementNum']"
        },
        {
            "symbol": "UpperBoundU",
            "definition": "Upper bound on the decision variable for each element in the set",
            "shape": [
                "ElementNum"
            ],
            "code": "UpperBoundU = np.array(data[\"UpperBoundU\"]) # ['ElementNum']"
        },
        {
            "symbol": "GlobalParameterB",
            "definition": "A global parameter representing an upper limit on the weighted sum of decision variables",
            "shape": [],
            "code": "GlobalParameterB = data[\"GlobalParameterB\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Sum of the inverses of CoefficientA_j multiplied by DecisionVariableX_j for all elements in ElementNum must be less than or equal to GlobalParameterB",
            "status": "coded",
            "formulation": "\\sum_{j \\in \\textup{ElementNum}} \\frac{1}{\\textup{CoefficientA}_j} \\cdot \\textup{DecisionVariableX}_j \\leq \\textup{GlobalParameterB}",
            "related_variables": [
                "DecisionVariableX"
            ],
            "related_parameters": [
                "CoefficientA",
                "ElementNum",
                "GlobalParameterB"
            ],
            "code": "inverse_sum_expr = gp.quicksum(DecisionVariableX[j] / CoefficientA[j] for j in range(ElementNum))\nmodel.addConstr(inverse_sum_expr <= GlobalParameterB, name=\"inverse_coefficient_sum_constraint\")"
        },
        {
            "description": "Each DecisionVariableX_j must be greater than or equal to 0 for all elements",
            "status": "coded",
            "formulation": "\\forall j \\in \\textup{ElementNum}, \\quad \\textup{DecisionVariableX}_{j} \\geq 0",
            "related_variables": [
                "DecisionVariableX"
            ],
            "related_parameters": [
                "ElementNum"
            ],
            "code": "# Add non-negativity constraints for DecisionVariableX\nfor j in range(ElementNum):\n    model.addConstr(DecisionVariableX[j] >= 0, name=f\"non_negativity_{j}\")"
        },
        {
            "description": "Each decision variable must not exceed its respective upper bound",
            "status": "coded",
            "formulation": "\\textup{DecisionVariableX}_j \\leq \\textup{UpperBoundU}_j \\quad \\forall j \\in \\{1, \\ldots, \\textup{ElementNum}\\}",
            "related_variables": [
                "DecisionVariableX"
            ],
            "related_parameters": [
                "UpperBoundU",
                "ElementNum"
            ],
            "code": "# Constraint: Each decision variable must not exceed its respective upper bound\nfor j in range(ElementNum):\n    model.addConstr(DecisionVariableX[j] <= UpperBoundU[j], name=f\"UB_constraint_{j}\")"
        }
    ],
    "variables": [
        {
            "definition": "DecisionVariables associated with each element in ElementNum",
            "symbol": "DecisionVariableX",
            "shape": [
                "ElementNum"
            ],
            "status": "coded",
            "code": "DecisionVariableX = model.addVars(ElementNum, vtype=gp.GRB.CONTINUOUS, name=\"DecisionVariableX\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the total profit, which is the sum of the product of ProfitCoefficientC_j and DecisionVariableX_j for all elements in ElementNum",
            "status": "runtime_error",
            "formulation": "\\max \\left\\{ \\sum_{j \\in \\textup{ElementNum}} \\textup{ProfitCoefficientC}_j \\cdot \\textup{DecisionVariableX}_j \\right\\}",
            "related_variables": [
                "DecisionVariableX"
            ],
            "related_parameters": [
                "ProfitCoefficientC"
            ],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(ProfitCoefficientC[j] * DecisionVariableX[j] for j in ElementNum), gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": "runtime_error",
    "solver_output_status": "runtime_error",
    "error_message": "Traceback (most recent call last):\n  File \"/Users/simonsici/Desktop/MyOptiMUS/evaluator.py\", line 50, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 2, in <module>\nTypeError: 'int' object is not iterable\n",
    "obj_val": null,
    "log_path": "logs/log_20250413134230_complexor_prod/",
    "problem_path": "data/complexor/prod/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/complexor/prod/data.json\", \"r\") as f:\n    data = json.load(f)\n"
}