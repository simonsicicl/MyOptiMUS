{
    "background": "The Employee Assignment Problem involves scheduling a certain number of employees with specific skills across multiple shifts and restaurants, taking into account skill demands and employee preferences to minimize the scheduling cost.",
    "problem_type": "LP",
    "parameters": [
        {
            "symbol": "NumRestaurants",
            "definition": "The number of restaurants",
            "shape": [],
            "code": "NumRestaurants = data[\"NumRestaurants\"] # scalar parameter"
        },
        {
            "symbol": "NumEmployees",
            "definition": "The number of employees",
            "shape": [],
            "code": "NumEmployees = data[\"NumEmployees\"] # scalar parameter"
        },
        {
            "symbol": "NumShifts",
            "definition": "The number of shifts",
            "shape": [],
            "code": "NumShifts = data[\"NumShifts\"] # scalar parameter"
        },
        {
            "symbol": "NumSkills",
            "definition": "The total number of skills that employees can have",
            "shape": [],
            "code": "NumSkills = data[\"NumSkills\"] # scalar parameter"
        },
        {
            "symbol": "Demand",
            "definition": "The demand for employees with specific skills at each restaurant during each shift",
            "shape": [
                "NumRestaurants",
                "NumShifts",
                "NumSkills"
            ],
            "code": "Demand = np.array(data[\"Demand\"]) # ['NumRestaurants', 'NumShifts', 'NumSkills']"
        },
        {
            "symbol": "EmployeeSkills",
            "definition": "Binary indicator if an employee has a specific skill",
            "shape": [
                "NumEmployees",
                "NumSkills"
            ],
            "code": "EmployeeSkills = np.array(data[\"EmployeeSkills\"]) # ['NumEmployees', 'NumSkills']"
        },
        {
            "symbol": "SkillPreference",
            "definition": "Employee's preference level for each skill",
            "shape": [
                "NumEmployees",
                "NumSkills"
            ],
            "code": "SkillPreference = np.array(data[\"SkillPreference\"]) # ['NumEmployees', 'NumSkills']"
        },
        {
            "symbol": "ShiftAvailability",
            "definition": "Binary indicator if an employee is available for a specific shift",
            "shape": [
                "NumEmployees",
                "NumShifts"
            ],
            "code": "ShiftAvailability = np.array(data[\"ShiftAvailability\"]) # ['NumEmployees', 'NumShifts']"
        },
        {
            "symbol": "UnfulfilledPositionWeight",
            "definition": "The weighting factor for unfulfilled positions",
            "shape": [],
            "code": "UnfulfilledPositionWeight = data[\"UnfulfilledPositionWeight\"] # scalar parameter"
        }
    ],
    "constraints": [
        {
            "description": "Exactly NumEmployees employees must be assigned",
            "status": "coded",
            "formulation": "\\sum_{e=1}^{\\textup{NumEmployees}} \\sum_{r=1}^{\\textup{NumRestaurants}} \\sum_{j=1}^{\\textup{NumShifts}} \\textup{EmployeeAssignedRestaurantShift}_{erj} = \\textup{NumEmployees}",
            "related_variables": [
                "EmployeeAssignedRestaurantShift"
            ],
            "related_parameters": [
                "NumEmployees",
                "NumRestaurants",
                "NumShifts"
            ],
            "code": "# Ensure exactly NumEmployees employees are assigned\nemployee_assignment_constraint = gp.quicksum(EmployeeAssignedRestaurantShift[e, r, j] for e in range(NumEmployees) for r in range(NumRestaurants) for j in range(NumShifts))\nmodel.addConstr(employee_assignment_constraint == NumEmployees, name=\"exact_employee_assignment\")"
        },
        {
            "description": "Each employee can only be assigned to one shift at one restaurant at a time",
            "status": "coded",
            "formulation": "\\sum_{j=1}^{\\textup{NumRestaurants}} \\textup{EmployeeAssignedRestaurantShift}_{i,j,k} \\leq 1 \\quad \\forall i \\in \\{1, ..., \\textup{NumEmployees}\\}, k \\in \\{1, ..., \\textup{NumShifts}\\}",
            "related_variables": [
                "EmployeeAssignedRestaurantShift"
            ],
            "related_parameters": [
                "NumEmployees",
                "NumRestaurants",
                "NumShifts"
            ],
            "code": "# Each employee can only be assigned to one shift at one restaurant at a time\nfor i in range(NumEmployees):\n    for k in range(NumShifts):\n        model.addConstr(gp.quicksum(EmployeeAssignedRestaurantShift[i, j, k] for j in range(NumRestaurants)) <= 1, name=f\"unique_shift_assignment_{i}_{k}\")"
        },
        {
            "description": "Each restaurant must have the required number of skilled employees for each shift",
            "status": "coded",
            "formulation": "\\forall k \\in \\{1,\\ldots,\\textup{NumSkills}\\}, \\; r \\in \\{1,\\ldots,\\textup{NumRestaurants}\\}, \\; s \\in \\{1,\\ldots,\\textup{NumShifts}\\}, \\quad \\sum_{e=1}^{\\textup{NumEmployees}} (\\textup{EmployeeAssignedRestaurantShift}_{e,r,s} \\times \\textup{EmployeeSkills}_{e,k}) \\geq \\textup{Demand}_{r,s,k}",
            "related_variables": [
                "EmployeeAssignedRestaurantShift",
                "EmployeeSkills"
            ],
            "related_parameters": [
                "Demand"
            ],
            "code": "# Each restaurant must have the required number of skilled employees for each shift\nfor k in range(NumSkills):\n    for r in range(NumRestaurants):\n        for s in range(NumShifts):\n            model.addConstr(\n                gp.quicksum(EmployeeAssignedRestaurantShift[e,r,s] * EmployeeSkills[e,k] \n                            for e in range(NumEmployees)) >= Demand[r,s,k],\n                name=f\"skill_demand_r{r}_s{s}_k{k}\"\n            )"
        },
        {
            "description": "Each skill demand for a shift at a restaurant must be covered by assigning an employee with the corresponding skill, considering their availability and preference for the shift",
            "status": "coded",
            "formulation": "\\sum_{e=1}^{\\textup{NumEmployees}} \\textup{EmployeeSkills}_{e,s} \\cdot \\textup{EmployeeAssignedRestaurantShift}_{e,r,t} \\geq \\textup{Demand}_{r,t,s} \\quad \\forall r \\in [1, \\textup{NumRestaurants}], \\quad \\forall t \\in [1, \\textup{NumShifts}], \\quad \\forall s \\in [1, \\textup{NumSkills}]",
            "related_variables": [
                "EmployeeAssignedRestaurantShift",
                "EmployeeSkills"
            ],
            "related_parameters": [
                "NumRestaurants",
                "NumEmployees",
                "NumShifts",
                "NumSkills",
                "Demand"
            ],
            "code": "# Skill demand constraints for each restaurant shift\nfor r in range(NumRestaurants):\n    for t in range(NumShifts):\n        for s in range(NumSkills):\n            model.addConstr(gp.quicksum(EmployeeAssignedRestaurantShift[e, r, t] * EmployeeSkills[e, s]\n                                        for e in range(NumEmployees)) >= Demand[r, t, s],\n                            name=f\"skill_demand_r{r}_t{t}_s{s}\")"
        },
        {
            "description": "An employee can only be assigned to a shift if they are available for that shift",
            "status": "runtime_error",
            "formulation": "\\textup{EmployeeAssignedRestaurantShift}_{e,r,t} \\leq \\textup{ShiftAvailability}_{e,t} \\quad \\forall e \\in [1, \\textup{NumEmployees}], \\quad \\forall r \\in [1, \\textup{NumRestaurants}], \\quad \\forall t \\in [1, \\textup{NumShifts}]",
            "related_variables": [
                "EmployeeAssignedRestaurantShift",
                "ShiftAvailability"
            ],
            "related_parameters": [
                "NumRestaurants",
                "NumEmployees",
                "NumShifts"
            ],
            "code": "```"
        },
        {
            "description": "Ensure SkillCoverage is the sum of EmployeeAssignedRestaurantShift for employees with the required skills",
            "status": "coded",
            "formulation": "\\textup{SkillCoverage}_{rsk} = \\sum_{e=1}^{\\textup{NumEmployees}} \\textup{EmployeeSkills}_{ek} \\cdot \\textup{EmployeeAssignedRestaurantShift}_{ers}, \\quad \\forall r \\in \\{1, ..., \\textup{NumRestaurants}\\}, \\quad s \\in \\{1, ..., \\textup{NumShifts}\\}, \\quad k \\in \\{1, ..., \\textup{NumSkills}\\}",
            "related_variables": [
                "EmployeeAssignedRestaurantShift",
                "SkillCoverage"
            ],
            "related_parameters": [
                "NumEmployees",
                "NumRestaurants",
                "NumShifts",
                "NumSkills",
                "EmployeeSkills"
            ],
            "code": "# Ensure SkillCoverage is the sum of EmployeeAssignedRestaurantShift for employees with the required skills\nfor r in range(NumRestaurants):\n    for s in range(NumShifts):\n        for k in range(NumSkills):\n            model.addConstr(\n                (SkillCoverage[k, r, s] == gp.quicksum(EmployeeSkills[e, k] * EmployeeAssignedRestaurantShift[e, r, s]\n                                                       for e in range(NumEmployees))),\n                name=f\"skill_coverage_r{r}_s{s}_k{k}\"\n            )"
        }
    ],
    "variables": [
        {
            "definition": "Binary indicator if an employee is assigned to a specific restaurant during a specific shift",
            "symbol": "EmployeeAssignedRestaurantShift",
            "shape": [
                "NumEmployees",
                "NumRestaurants",
                "NumShifts"
            ],
            "status": "coded",
            "code": "EmployeeAssignedRestaurantShift = model.addVars(NumEmployees, NumRestaurants, NumShifts, vtype=gp.GRB.BINARY, name=\"EmployeeAssignedRestaurantShift\")"
        },
        {
            "definition": "Coverage of each skill in each restaurant during each shift",
            "symbol": "SkillCoverage",
            "shape": [
                "NumSkills",
                "NumRestaurants",
                "NumShifts"
            ],
            "status": "coded",
            "code": "SkillCoverage = model.addVars(NumSkills, NumRestaurants, NumShifts, vtype=gp.GRB.BINARY, name=\"SkillCoverage\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cost of scheduling by considering the cost for unfulfilled positions and the cost for assigning employees to less preferred positions",
            "status": "coded",
            "formulation": "\\min \\quad \\sum_{e=1}^{\\textup{NumEmployees}} \\sum_{r=1}^{\\textup{NumRestaurants}} \\sum_{s=1}^{\\textup{NumShifts}} \\textup{EmployeeAssignedRestaurantShift}_{ers} \\cdot \\left(\\sum_{k=1}^{\\textup{NumSkills}} \\textup{EmployeeSkills}_{ek} \\cdot \\textup{SkillPreference}_{ek} \\right) + \\sum_{r=1}^{\\textup{NumRestaurants}} \\sum_{s=1}^{\\textup{NumShifts}} \\sum_{k=1}^{\\textup{NumSkills}} \\textup{UnfulfilledPositionWeight} \\cdot \\max(0, \\textup{Demand}_{rsk} - \\textup{SkillCoverage}_{rsk})",
            "related_variables": [
                "EmployeeAssignedRestaurantShift",
                "SkillCoverage"
            ],
            "related_parameters": [
                "NumEmployees",
                "NumRestaurants",
                "NumShifts",
                "NumSkills",
                "EmployeeSkills",
                "SkillPreference",
                "Demand",
                "UnfulfilledPositionWeight"
            ],
            "code": "# Set objective\nmodel.setObjective(\n    gp.quicksum(\n        EmployeeAssignedRestaurantShift[e, r, s] * \n        gp.quicksum(EmployeeSkills[e, k] * SkillPreference[e, k] for k in range(NumSkills))\n        for e in range(NumEmployees) for r in range(NumRestaurants) for s in range(NumShifts)\n    ) + gp.quicksum(\n        UnfulfilledPositionWeight *\n        gp.max_(0, Demand[r, s, k] - SkillCoverage[r, s, k])\n        for r in range(NumRestaurants) for s in range(NumShifts) for k in range(NumSkills)\n    ),\n    gp.GRB.MINIMIZE\n)"
        }
    ],
    "solution_status": "runtime_error",
    "solver_output_status": "runtime_error",
    "error_message": "Traceback (most recent call last):\n  File \"/Users/simonsici/Desktop/MyOptiMUS/evaluator.py\", line 45, in run\n    exec(last_line, local_env, local_env)\n  File \"<string>\", line 1\n    ```\n    ^\nSyntaxError: invalid syntax\n",
    "obj_val": null,
    "log_path": "logs/log_20250413144625_complexor_Scheduling Problem/",
    "problem_path": "data/complexor/Scheduling Problem/",
    "prep_code": "import json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n# Define model\nmodel = gp.Model('model')\n\nwith open(\"data/complexor/Scheduling Problem/data.json\", \"r\") as f:\n    data = json.load(f)\n"
}