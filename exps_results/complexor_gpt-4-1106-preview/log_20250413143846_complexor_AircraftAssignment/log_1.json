{
    "background": "The Aircraft Assignment Problem involves assigning a given number of aircraft to specified routes with the goal of minimizing the total operational cost while adhering to aircraft availability limits and route demand requirements.",
    "problem_type": "LP",
    "parameters": [
        {
            "symbol": "TotalAircraft",
            "definition": "The total number of aircraft available for assignment",
            "shape": [],
            "code": "TotalAircraft = data[\"TotalAircraft\"] # scalar parameter"
        },
        {
            "symbol": "TotalRoutes",
            "definition": "The total number of routes that require aircraft assignment",
            "shape": [],
            "code": "TotalRoutes = data[\"TotalRoutes\"] # scalar parameter"
        },
        {
            "symbol": "Availability",
            "definition": "The availability of each aircraft, indicating the maximum number of routes it can be assigned to",
            "shape": [
                "TotalAircraft"
            ],
            "code": "Availability = np.array(data[\"Availability\"]) # ['TotalAircraft']"
        },
        {
            "symbol": "Demand",
            "definition": "The demand for each route, indicating the number of aircraft required",
            "shape": [
                "TotalRoutes"
            ],
            "code": "Demand = np.array(data[\"Demand\"]) # ['TotalRoutes']"
        },
        {
            "symbol": "Capacity",
            "definition": "The capacity matrix defining the suitability and capability of each aircraft for each route",
            "shape": [
                "TotalAircraft",
                "TotalRoutes"
            ],
            "code": "Capacity = np.array(data[\"Capacity\"]) # ['TotalAircraft', 'TotalRoutes']"
        },
        {
            "symbol": "Costs",
            "definition": "The cost matrix representing the cost of assigning each aircraft to each route",
            "shape": [
                "TotalAircraft",
                "TotalRoutes"
            ],
            "code": "Costs = np.array(data[\"Costs\"]) # ['TotalAircraft', 'TotalRoutes']"
        }
    ],
    "constraints": [
        {
            "description": "Each aircraft can be assigned to at most its individual availability",
            "status": "coded",
            "formulation": "\\sum_{j=1}^{\\textup{TotalRoutes}} \\textup{AircraftAssignment}_{i,j} \\leq \\textup{Availability}_i \\quad \\forall i \\in \\{1, ..., \\textup{TotalAircraft}\\}",
            "related_variables": [
                "AircraftAssignment"
            ],
            "related_parameters": [
                "TotalAircraft",
                "TotalRoutes",
                "Availability"
            ],
            "code": "# Add constraints for aircraft availability\nfor i in range(TotalAircraft):\n    model.addConstr(gp.quicksum(AircraftAssignment[i, j] for j in range(TotalRoutes)) <= Availability[i], name=f\"aircraft_availability_{i}\")"
        },
        {
            "description": "Each route must have at least the required number of aircraft to meet its demand",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{TotalAircraft}} \\textup{AircraftAssignment}_{ij} \\geq \\textup{Demand}_j \\quad \\forall j \\in \\{1, \\ldots, \\textup{TotalRoutes}\\}",
            "related_variables": [
                "AircraftAssignment"
            ],
            "related_parameters": [
                "TotalAircraft",
                "TotalRoutes",
                "Demand"
            ],
            "code": "# Each route must have at least the required number of aircraft to meet its demand\nfor j in range(TotalRoutes):\n    model.addConstr(gp.quicksum(AircraftAssignment[i, j] for i in range(TotalAircraft)) >= Demand[j], name=f\"demand_route_{j}\")"
        },
        {
            "description": "An aircraft can be assigned to a route only if it has the capacity for the route",
            "status": "coded",
            "formulation": "\\forall i \\in \\{1, 2, ..., \\textup{TotalAircraft}\\}, \\forall j \\in \\{1, 2, ..., \\textup{TotalRoutes}\\}: \\quad \\textup{AircraftAssignment}_{i,j} \\leq \\textup{Capacity}_{i,j}",
            "related_variables": [
                "AircraftAssignment"
            ],
            "related_parameters": [
                "TotalAircraft",
                "TotalRoutes",
                "Capacity"
            ],
            "code": "# Ensure an aircraft is assigned to a route only if it has the capacity\nfor i in range(TotalAircraft):\n    for j in range(TotalRoutes):\n        model.addConstr(AircraftAssignment[i, j] <= Capacity[i, j], name=f\"AircraftCapacity_{i}_{j}\")"
        },
        {
            "description": "Number of aircraft assigned to a route must be an integer",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{TotalAircraft}} \\textup{AircraftAssignment}_{ij} = \\textup{Demand}_j, \\quad \\forall j \\in \\{1, \\ldots, \\textup{TotalRoutes}\\}",
            "related_variables": [
                "AircraftAssignment"
            ],
            "related_parameters": [
                "TotalAircraft",
                "Demand",
                "TotalRoutes"
            ],
            "code": "# Add constraints to ensure the number of aircraft assigned to each route is an integer value equal to the demand\nfor j in range(TotalRoutes):\n    model.addConstr(\n        gp.quicksum(AircraftAssignment[i, j] for i in range(TotalAircraft)) == Demand[j],\n        name=f\"demand_route_{j}\"\n    )"
        },
        {
            "description": "Each aircraft assigned to a route must be in non-negative quantities",
            "status": "coded",
            "formulation": "\\forall i \\in \\{1, \\ldots, \\textup{TotalAircraft}\\}, \\quad \\forall j \\in \\{1, \\ldots, \\textup{TotalRoutes}\\}, \\quad \\textup{AircraftAssignment}_{ij} \\geq 0",
            "related_variables": [
                "AircraftAssignment"
            ],
            "related_parameters": [
                "TotalAircraft",
                "TotalRoutes"
            ],
            "code": "# Since AircraftAssignment is defined as a binary variable, AircraftAssignment_ij >= 0 is inherent to the definition and no code is needed for this constraint.\n# Binary variables in Gurobi are by definition in {0,1}, which satisfies the non-negativity constraint."
        },
        {
            "description": "Ensure the total number of aircraft assigned does not exceed the total available aircraft.",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{TotalAircraft}} \\sum_{j=1}^{\\textup{TotalRoutes}} \\textup{AircraftAssignment}_{ij} \\leq \\textup{TotalAircraft}",
            "related_variables": [
                "AircraftAssignment"
            ],
            "related_parameters": [
                "TotalAircraft",
                "TotalRoutes"
            ],
            "code": "# Ensure the total number of aircraft assigned does not exceed the total available aircraft\nmodel.addConstr(gp.quicksum(AircraftAssignment[i, j] for i in range(TotalAircraft) for j in range(TotalRoutes)) <= TotalAircraft, name=\"total_aircraft_assignment\")"
        },
        {
            "description": "Ensure that each aircraft does not exceed its availability",
            "status": "coded",
            "formulation": "\\sum_{{j=1}}^{{\\textup{TotalRoutes}}} \\textup{AircraftAssignment}_{ij} \\leq \\textup{Availability}_{i} \\quad \\forall i \\in \\{1, \\ldots, \\textup{TotalAircraft}\\}",
            "related_variables": [
                "AircraftAssignment"
            ],
            "related_parameters": [
                "TotalAircraft",
                "TotalRoutes",
                "Availability"
            ],
            "code": "# Ensure that each aircraft does not exceed its availability\nfor i in range(TotalAircraft):\n    model.addConstr(gp.quicksum(AircraftAssignment[i, j] for j in range(TotalRoutes)) <= Availability[i], name=f\"aircraft_availability_{i}\")"
        },
        {
            "description": "Ensure that the demand for each route is exactly met",
            "status": "coded",
            "formulation": "\\sum_{{i=1}}^{{\\textup{TotalAircraft}}} \\textup{AircraftAssignment}_{ij} = \\textup{Demand}_{j} \\quad \\forall j \\in \\{1, \\ldots, \\textup{TotalRoutes}\\}",
            "related_variables": [
                "AircraftAssignment"
            ],
            "related_parameters": [
                "TotalAircraft",
                "TotalRoutes",
                "Demand"
            ],
            "code": "# Ensure that the demand for each route is exactly met\nfor j in range(TotalRoutes):\n    model.addConstr(gp.quicksum(AircraftAssignment[i, j] for i in range(TotalAircraft)) == Demand[j], name=f\"Demand_meet_route_{j}\")"
        },
        {
            "description": "Ensure that aircrafts are only assigned to routes if they have the capacity for it",
            "status": "coded",
            "formulation": "\\textup{AircraftAssignment}_{ij} \\leq \\textup{Capacity}_{ij} \\quad \\forall i \\in \\{1, \\ldots, \\textup{TotalAircraft}\\}, \\forall j \\in \\{1, \\ldots, \\textup{TotalRoutes}\\}",
            "related_variables": [
                "AircraftAssignment"
            ],
            "related_parameters": [
                "TotalAircraft",
                "TotalRoutes",
                "Capacity"
            ],
            "code": "# Ensure that aircrafts are only assigned to routes if they have the capacity for it\nfor i in range(TotalAircraft):\n    for j in range(TotalRoutes):\n        model.addConstr(AircraftAssignment[i,j] <= Capacity[i,j], name=f\"AircraftAssignment_capacity_{i}_{j}\")"
        }
    ],
    "variables": [
        {
            "definition": "Binary variable indicating whether aircraft i is assigned to route j (1 if assigned, 0 otherwise)",
            "symbol": "AircraftAssignment",
            "shape": [
                "TotalAircraft",
                "TotalRoutes"
            ],
            "status": "coded",
            "code": "AircraftAssignment = model.addVars(TotalAircraft, TotalRoutes, vtype=gp.GRB.BINARY, name=\"AircraftAssignment\")"
        }
    ],
    "objective": [
        {
            "description": "Minimize the total cost of assigning aircraft to routes",
            "status": "coded",
            "formulation": "\\min \\quad \\sum_{{i=1}}^{{\\textup{TotalAircraft}}} \\sum_{{j=1}}^{{\\textup{TotalRoutes}}} \\textup{Costs}_{ij} \\cdot \\textup{AircraftAssignment}_{ij}",
            "related_variables": [
                "AircraftAssignment"
            ],
            "related_parameters": [
                "TotalAircraft",
                "TotalRoutes",
                "Costs"
            ],
            "code": "# Set objective\nmodel.setObjective(gp.quicksum(Costs[i, j] * AircraftAssignment[i, j] for i in range(TotalAircraft) for j in range(TotalRoutes)), gp.GRB.MINIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_path": "logs/log_20250413143846_complexor_AircraftAssignment/",
    "problem_path": "data/complexor/AircraftAssignment/"
}